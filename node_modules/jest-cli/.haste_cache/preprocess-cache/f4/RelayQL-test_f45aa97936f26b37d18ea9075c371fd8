/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails oncall+relay
 */

'use strict';var _templateObject = _taggedTemplateLiteral(['\n        query {\n          viewer {\n            actor {\n              id\n            }\n          }\n        }\n      '], ['\n        query {\n          viewer {\n            actor {\n              id\n            }\n          }\n        }\n      ']);function _taggedTemplateLiteral(strings, raw) {return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } }));}





describe('RelayQL', function () {
  beforeEach(function () {
    jest.resetModuleRegistry();

    jasmine.addMatchers(require('RelayTestUtils').matchers);});


  it('throws if not transformed', function () {
    var badQL = require('Relay').QL;
    expect(function () {
      // Transform cannot find this call site.
      badQL(_templateObject);}).








    toFailInvariant(
    'RelayQL: Unexpected invocation at runtime. Either the Babel transform ' + 
    'was not set up, or it failed to identify this call site. Make sure it ' + 
    'is being used verbatim as `Relay.QL`.');});



  it('does not throw if transformed', function () {
    expect(function () {
      (function () {return { children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'actor', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true }, type: 'Actor' }], fieldName: 'viewer', kind: 'Query', metadata: {}, name: 'RelayQL', type: 'Viewer' };})();}).








    not.toThrowError();});


  it('permits valid variable substitutions', function () {
    var SIZE = 42;
    expect(function () {
      (function (RQL_0) {return { children: [{ children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'size', value: require('Relay').QL.__var(RQL_0) }], children: [{ fieldName: 'uri', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'actor', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true }, type: 'Actor' }], fieldName: 'viewer', kind: 'Query', metadata: {}, name: 'RelayQL', type: 'Viewer' };})(



      SIZE);}).






    not.toThrowError();});


  it('wraps variable substituted values in concrete call values', function () {
    var SIZE = 42;
    expect(require('Relay').QL.__var(SIZE)).toEqual({ 
      kind: 'CallValue', 
      callValue: SIZE });});



  it('throws for illegal variable substitutions', function () {
    var variables = { 
      size: require('QueryBuilder').createCallVariable('size') };

    expect(function () {
      (function (RQL_0) {return { children: [{ children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'size', value: require('Relay').QL.__var(RQL_0) }], children: [{ fieldName: 'uri', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'actor', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true }, type: 'Actor' }], fieldName: 'viewer', kind: 'Query', metadata: {}, name: 'RelayQL', type: 'Viewer' };})(



      variables.size);}).






    toThrowError(
    'RelayQL: Invalid argument `size` supplied via template substitution. ' + 
    'Instead, use an inline variable (e.g. `comments(count: $count)`).');});



  it('permits fragment substitutions', function () {
    var fragment = require('QueryBuilder').createFragment({ 
      name: 'Foo', 
      type: 'Bar' });

    expect(function () {
      (function (RQL_0) {return { children: [].concat.apply([], [require('Relay').QL.__frag(RQL_0)]), fieldName: 'viewer', kind: 'Query', metadata: {}, name: 'RelayQL', type: 'Viewer' };})(


      fragment);}).



    not.toThrow();});


  it('permits fragment reference substitutions', function () {
    var fragmentReference = require('QueryBuilder').createFragmentReference(
    require('QueryBuilder').createFragment({ 
      name: 'Foo', 
      type: 'Bar' }));


    expect(function () {
      (function (RQL_0) {return { children: [].concat.apply([], [require('Relay').QL.__frag(RQL_0)]), fieldName: 'viewer', kind: 'Query', metadata: {}, name: 'RelayQL', type: 'Viewer' };})(


      fragmentReference);}).



    not.toThrow();});


  it('permits an array of fragment substitutions', function () {
    var fragment = require('QueryBuilder').createFragment({ 
      name: 'Foo', 
      type: 'Bar' });

    expect(function () {
      (function (RQL_0) {return { children: [].concat.apply([], [require('Relay').QL.__frag(RQL_0)]), fieldName: 'viewer', kind: 'Query', metadata: {}, name: 'RelayQL', type: 'Viewer' };})(


      [fragment]);}).



    not.toThrow();});


  it('throws for invalid fragment substitutions', function () {
    expect(function () {
      (function (RQL_0) {return { children: [].concat.apply([], [require('Relay').QL.__frag(RQL_0)]), fieldName: 'viewer', kind: 'Query', metadata: {}, name: 'RelayQL', type: 'Viewer' };})(


      'foo');}).



    toFailInvariant(
    'RelayQL: Invalid fragment composition, use ' + 
    '`${Child.getFragment(\'name\')}`.');


    expect(function () {
      (function (RQL_0) {return { children: [].concat.apply([], [require('Relay').QL.__frag(RQL_0)]), fieldName: 'viewer', kind: 'Query', metadata: {}, name: 'RelayQL', type: 'Viewer' };})(


      ['foo']);}).



    toFailInvariant(
    'RelayQL: Invalid fragment composition, use ' + 
    '`${Child.getFragment(\'name\')}`.');


    var fragment = require('QueryBuilder').createFragment({ 
      name: 'Foo', 
      type: 'Bar' });

    expect(function () {
      (function (RQL_0) {return { children: [].concat.apply([], [require('Relay').QL.__frag(RQL_0)]), fieldName: 'viewer', kind: 'Query', metadata: {}, name: 'RelayQL', type: 'Viewer' };})(


      [[fragment]]);}).



    toFailInvariant(
    'RelayQL: Invalid fragment composition, use ' + 
    '`${Child.getFragment(\'name\')}`.');});});
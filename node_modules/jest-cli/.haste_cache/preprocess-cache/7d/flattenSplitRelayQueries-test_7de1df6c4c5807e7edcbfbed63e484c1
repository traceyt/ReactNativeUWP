/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails oncall+relay
 */

'use strict';

require('configureForRelayOSS');






describe('flattenSplitRelayQueries', function () {
  function getQuery() {
    return require('RelayTestUtils').getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '4' } }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'FlattenSplitRelayQueries', type: 'Node' };})());}


  it('returns an empty array when there are no queries', function () {
    var split = { 
      required: null, 
      deferred: [] };

    expect(require('flattenSplitRelayQueries')(split)).toEqual([]);});


  it('returns a single required query', function () {
    var split = { 
      required: getQuery(), 
      deferred: [] };

    expect(require('flattenSplitRelayQueries')(split)).toEqual([split.required]);});


  it('returns a single deferred query', function () {
    var split = { 
      required: null, 
      deferred: [{ 
        required: getQuery(), 
        deferred: [] }] };


    expect(require('flattenSplitRelayQueries')(split)).
    toEqual([split.deferred[0].required]);});


  it('returns required then deferred queries', function () {
    var split = { 
      required: getQuery(), 
      deferred: [
      { 
        required: getQuery(), 
        deferred: [] }, 

      { 
        required: getQuery(), 
        deferred: [] }] };



    expect(require('flattenSplitRelayQueries')(split)).
    toEqual([
    split.required, 
    split.deferred[0].required, 
    split.deferred[1].required]);});



  it('handles nested deferreds', function () {
    var split = { 
      required: getQuery(), 
      deferred: [
      { 
        required: getQuery(), 
        deferred: [{ 
          required: getQuery(), 
          deferred: [] }] }] };




    expect(require('flattenSplitRelayQueries')(split)).
    toEqual([
    split.required, 
    split.deferred[0].required, 
    split.deferred[0].deferred[0].required]);});});
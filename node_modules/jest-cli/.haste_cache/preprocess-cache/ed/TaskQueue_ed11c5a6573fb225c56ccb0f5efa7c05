'use strict';var 










































TaskQueue=function(){







function TaskQueue(_ref){var onMoreTasks=_ref.onMoreTasks;babelHelpers.classCallCheck(this,TaskQueue);
this._onMoreTasks=onMoreTasks;
this._queueStack=[{tasks:[],popable:false}];}babelHelpers.createClass(TaskQueue,[{key:'enqueue',value:function enqueue(







task){
this._getCurrentQueue().push(task);}},{key:'hasTasksToProcess',value:function hasTasksToProcess()












{
return this._getCurrentQueue().length>0;}},{key:'processNext',value:function processNext()





{
var queue=this._getCurrentQueue();
if(queue.length){
var task=queue.shift();
try{
if(task.gen){
this._genPromise(task);}else 
if(task.run){
task.run();}else 
{
require('fbjs/lib/invariant')(
typeof task==='function',
'Expected Function, SimpleTask, or PromiseTask, but got: '+
JSON.stringify(task));

task();}}

catch(e){
e.message='TaskQueue: Error with task'+(task.name||' ')+': '+
e.message;
require('ErrorUtils').reportError(e);}}}},{key:'_getCurrentQueue',value:function _getCurrentQueue()







{
var stackIdx=this._queueStack.length-1;
var queue=this._queueStack[stackIdx];
if(queue.popable&&
queue.tasks.length===0&&
this._queueStack.length>1){
this._queueStack.pop();
return this._getCurrentQueue();}else 
{
return queue.tasks;}}},{key:'_genPromise',value:function _genPromise(



task){var _this=this;




this._queueStack.push({tasks:[],popable:false});
var stackIdx=this._queueStack.length-1;
require('ErrorUtils').applyWithGuard(task.gen).
then(function(){
_this._queueStack[stackIdx].popable=true;
_this.hasTasksToProcess()&&_this._onMoreTasks();}).

catch(function(ex){
console.warn(
'TaskQueue: Error resolving Promise in task '+task.name,
ex);

throw ex;});}}]);return TaskQueue;}();





module.exports=TaskQueue;
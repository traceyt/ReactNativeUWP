{
  "_args": [
    [
      "snake@https://registry.npmjs.org/snake/-/snake-0.0.1.tgz",
      "C:\\gitRepo\\f8app"
    ]
  ],
  "_from": "snake@0.0.1",
  "_id": "snake@0.0.1",
  "_inCache": true,
  "_location": "/snake",
  "_phantomChildren": {},
  "_requested": {
    "name": "snake",
    "raw": "snake@https://registry.npmjs.org/snake/-/snake-0.0.1.tgz",
    "rawSpec": "https://registry.npmjs.org/snake/-/snake-0.0.1.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/snake/-/snake-0.0.1.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/gcloud"
  ],
  "_resolved": "https://registry.npmjs.org/snake/-/snake-0.0.1.tgz",
  "_shasum": "ed4b396c4871e3eb09b643dfc831870696fed96c",
  "_shrinkwrap": null,
  "_spec": "snake@https://registry.npmjs.org/snake/-/snake-0.0.1.tgz",
  "_where": "C:\\gitRepo\\f8app",
  "author": {
    "name": "Tolga Tezel"
  },
  "bugs": {
    "url": "https://github.com/ttezel/snake/issues"
  },
  "dependencies": {
    "term-canvas": ">=0.0.4"
  },
  "description": "2D Maze solver",
  "devDependencies": {},
  "engines": {
    "node": ">=0.6.0"
  },
  "homepage": "https://github.com/ttezel/snake#readme",
  "keywords": [
    "maze"
  ],
  "main": "./snake",
  "name": "snake",
  "optionalDependencies": {},
  "readme": "##`Snake`\n\nGiven a 2D maze, `snake` solves the maze for a given `start` and `end` point in the maze.\n\nEach position in the maze can be either empty or blocked (marked by a `0` or `1` respectively).\n\n`snake` can only move up, down, left or right, but not diagonally. It cannot enter\nblocked positions.\n\n![route](http://dl.dropbox.com/u/32773572/snake-output.png)\n\n##Usage\n\n```javascript\nvar Snake = require('./snake')\n\nvar maze = [\n  [0,0,0,0,1,1,0,0,0,0,0,0.0,0,0,0,0,1,1,0,0,0,0,0,0]\n, [1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n, [1,1,1,1,1,0,0,0,1,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0]\n, [0,0,0,1,1,1,0,0,1,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0]\n, [0,0,0,1,1,1,0,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0]\n, [0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n, [0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0]\n, [1,1,1,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n, [0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1]\n, [0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1]\n, [0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,1,0,0,0,0,0,1,1,1]\n, [0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,1,1,1,1]\n, [0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,1,0,0,1,0,0,1]\n, [0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,1,0,0,0]\n, [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,0,0,1,0,0,0]\n, [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0]\n, [0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0]\n, [0,0,1,1,1,0,1,1,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0]\n, [0,0,1,0,0,0,1,1,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,1,0]\n, [1,1,1,0,0,0,1,1,0,0,1,1,1,0,0,0,0,0,1,1,1,1,0,0,0]\n, [1,1,1,0,0,0,1,1,0,0,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0]\n, [0,0,0,0,0,0,1,1,0,0,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0]\n, [0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0]\n, [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0]\n, [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n]\n\nvar snake = new Snake()\n\nvar result = snake.solve({\n  maze: maze\n, start: [2,11]\n, end: [23,19]\n, heuristic: 'breadthFirst'\n})\n\nconsole.log('route:', result.route)\n```\n\n##`Snake` API\n\n### .solve( `options` )\n\nFind a route from `start` to `end`, using the `heuristic` to guide the search. Returns an object.\n\n####options\n\n`options` is an object with the following keys:\n\n* `maze`:     a 2D Array in which each value is `0` or `1`\n* `start`:    [x,y] coordinates\n* `end`:      [x,y] coordinates\n* `heuristic`: search heuristic to use when exploring the maze\n\nNote: for the coordinates, [0,0] is bottom left point in `maze` (cartesian coordinate system)\n\n####`heuristic`\n\nSupported search heuristics are:\n  * `breadthFirst` : Uses a breadth-first search.\n  * `depthFirst` : Uses a depth-first search.\n  * `linear` : Explores by minimizing the cartesian distance from the `end` point.\n  * `manhattan` : Explores by minimizing the manhattan distance from the `end` point.\n\n####output\n\n`Snake.solve()` returns an object that looks like this:\n\n```javascript\n{ msg: 'found exit',\n  status: 1,        //  1 = success, 0 = impossible to solve for given start & end points\n  elapsed: 1,       //  total time required to run the search (milliseconds)\n  numVisited: 268,  //  # of points searched in the maze to find a route\n  route:          \n   [ [ '2', '11' ],\n     [ '2', '12' ],\n     [ '2', '13' ],\n     [ '2', '14' ],\n     [ '2', '15' ],\n     [ '2', '16' ],\n     [ '3', '16' ],\n     [ '4', '16' ],\n     [ '5', '16' ],\n     [ '6', '16' ],\n     [ '7', '16' ],\n     [ '7', '17' ],\n     [ '7', '18' ],\n     [ '7', '19' ],\n     [ '6', '19' ],\n     [ '5', '19' ],\n     [ '4', '19' ],\n     [ '3', '19' ],\n     [ '2', '19' ],\n     [ '2', '20' ],\n     [ '2', '21' ] ],\n  cost: 21 }        //  the cost for the discovered route (assumes all movements have cost = `1`)\n```\n\n###.paint(`result`)\n\nDraws a pretty maze in your terminal (similar to [this](https://github.com/ttezel/snake#snake)). Pass in the `result` object\nthat you get back from `.solve()`, and it'll render the snake's path in your terminal.\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2011 Tolga Tezel &lt;tolgatezel11@gmail.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/ttezel/snake.git"
  },
  "scripts": {
    "test": "node test.js"
  },
  "version": "0.0.1"
}

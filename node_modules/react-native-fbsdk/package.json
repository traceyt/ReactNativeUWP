{
  "_args": [
    [
      "react-native-fbsdk@git://github.com/facebook/react-native-fbsdk.git#17b2b6f97de4c86e16305a1dc0af6d3f1fa48508",
      "C:\\gitRepo\\f8app"
    ]
  ],
  "_from": "facebook/react-native-fbsdk#0.1.0-alpha.1",
  "_id": "react-native-fbsdk@0.1.0-alpha.1",
  "_inCache": true,
  "_location": "/react-native-fbsdk",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/facebook/react-native-fbsdk/17b2b6f97de4c86e16305a1dc0af6d3f1fa48508/package.json",
      "gitUrl": "git://github.com/facebook/react-native-fbsdk.git#17b2b6f97de4c86e16305a1dc0af6d3f1fa48508",
      "httpsUrl": "git+https://github.com/facebook/react-native-fbsdk.git#17b2b6f97de4c86e16305a1dc0af6d3f1fa48508",
      "shortcut": "github:facebook/react-native-fbsdk#17b2b6f97de4c86e16305a1dc0af6d3f1fa48508",
      "ssh": "git@github.com:facebook/react-native-fbsdk.git#17b2b6f97de4c86e16305a1dc0af6d3f1fa48508",
      "sshUrl": "git+ssh://git@github.com/facebook/react-native-fbsdk.git#17b2b6f97de4c86e16305a1dc0af6d3f1fa48508",
      "type": "github"
    },
    "name": "react-native-fbsdk",
    "raw": "react-native-fbsdk@git://github.com/facebook/react-native-fbsdk.git#17b2b6f97de4c86e16305a1dc0af6d3f1fa48508",
    "rawSpec": "git://github.com/facebook/react-native-fbsdk.git#17b2b6f97de4c86e16305a1dc0af6d3f1fa48508",
    "scope": null,
    "spec": "git://github.com/facebook/react-native-fbsdk.git#17b2b6f97de4c86e16305a1dc0af6d3f1fa48508",
    "type": "hosted"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git://github.com/facebook/react-native-fbsdk.git#17b2b6f97de4c86e16305a1dc0af6d3f1fa48508",
  "_shasum": "7146b7a002daabe043bb975b3645446f7ffc252e",
  "_shrinkwrap": null,
  "_spec": "react-native-fbsdk@git://github.com/facebook/react-native-fbsdk.git#17b2b6f97de4c86e16305a1dc0af6d3f1fa48508",
  "_where": "C:\\gitRepo\\f8app",
  "author": {
    "name": "Zhuowen Deng"
  },
  "contributors": {
    "name": "Chris Hackmann"
  },
  "dependencies": {},
  "description": "Facebook SDK support for React Native apps.",
  "devDependencies": {},
  "gitHead": "17b2b6f97de4c86e16305a1dc0af6d3f1fa48508",
  "homepage": "https://github.com/facebook/react-native-fbsdk/",
  "keywords": [
    "react",
    "react-native",
    "react-component",
    "ios",
    "android",
    "facebook",
    "core"
  ],
  "license": "Facebook Platform License",
  "main": "./js/index.js",
  "name": "react-native-fbsdk",
  "optionalDependencies": {},
  "readme": "# React Native FBSDK\r\nReact Native FBSDK is a wrapper around the iOS Facebook SDK and Android Facebook SDK, allowing for Facebook integration in [React Native](https://facebook.github.io/react-native/) apps.  Access to native components, from login to sharing, is provided entirely through documented JavaScript modules so you don't have to call a single native function directly.\r\n\r\nFunctionality is provided through one single npm package so you can use it for both platforms without downloading any extra packages.  Follow this guide to use react-native-fbsdk in your react-native app.\r\n\r\n## Installation\r\nYou need to install the sdk with [npm](https://www.npmjs.com/) and configure native Android/iOS project in the react native project. \r\n### 1. Create React Native project\r\n\r\nFirst create a React Native project:\r\n```ruby\r\nreact-native init YourApp\r\n```\r\n\r\n### 2. Install JavaScript packages\r\n\r\nInstall the react-native-fbsdk package:\r\n```ruby\r\nnpm install --save react-native-fbsdk\r\n```\r\n### 3. Configure native projects\r\nYou can configure the iOS project and Android project both if you want to build a cross-platform app, or configure either side.\r\n\r\n#### 3.1 Android project\r\nAssuming you have [Android Studio](http://developer.android.com/sdk/index.html) installed, open the project with Android Studio and update the following files to build project with [Gradle](http://gradle.org/).\r\n\r\nIn `settings.gradle`, include the sdk subproject and specify the subproject path.\r\n```ruby\r\n//...\r\ninclude ':react-native-fbsdk'\r\nproject(':react-native-fbsdk').projectDir = new File(settingsDir, '../node_modules/react-native-fbsdk/Android')\r\n```\r\n\r\nIn `app/build.gradle`, enable multiDex support and add sdk to dependencies.\r\n```ruby\r\ndefaultConfig {\r\n    //...\r\n    multiDexEnabled true\r\n}\r\n//...\r\ndependencies {\r\n    //...\r\n    compile project(\":react-native-fbsdk\")\r\n}\r\n```\r\n\r\nGo to `MainActivity.java` under `app/src/main/java/com/<project name>/` to complete setup.\r\nNote that packages must be imported to use.\r\n\r\nAdd an instance variable of type `CallbackManager` in class.\r\n```java\r\nimport android.content.Intent;     // <--- import\r\nimport android.os.Bundle;\r\n\r\nimport com.facebook.CallbackManager;\r\nimport com.facebook.FacebookSdk;\r\nimport com.facebook.reactnative.androidsdk.FBSDKPackage;\r\n\r\npublic class MainActivity extends ReactActivity {\r\n    CallbackManager mCallbackManager;\r\n    //...\r\n```\r\nRegister sdk package in method `getPackages()`.\r\n```java\r\n@Override\r\nprotected List<ReactPackage> getPackages() {\r\n    mCallbackManager = new CallbackManager.Factory().create();\r\n    ReactPackage packages[] = new ReactPackage[]{\r\n        new MainReactPackage(),\r\n        new FBSDKPackage(mCallbackManager),\r\n    };\r\n    return Arrays.<ReactPackage>asList(packages);\r\n}\r\n```\r\nInitialize sdk in method `onCreate()`.\r\n```java\r\n@Override\r\nprotected void onCreate(Bundle savedInstanceState) {\r\n    super.onCreate(savedInstanceState);\r\n    FacebookSdk.sdkInitialize(getApplicationContext());\r\n} \r\n```\r\nOverride `onActivityResult()`.\r\n```java\r\n@Override\r\npublic void onActivityResult(int requestCode, int resultCode, Intent data) {\r\n    mCallbackManager.onActivityResult(requestCode, resultCode, data);\r\n}\r\n```\r\nTo use [AppEventsLogger](https://developers.facebook.com/docs/app-events), add method call to `activateApp`, `deactivateApp` and `onContextStop` in the corresponding life cycle events.\r\n```java\r\nimport com.facebook.appevents.AppEventsLogger;     // <--- import\r\n\r\n@Override\r\nprotected void onResume() {\r\n    super.onResume();\r\n    AppEventsLogger.activateApp(getApplicationContext());\r\n}\r\n\r\n@Override\r\nprotected void onPause() {\r\n    super.onPause();\r\n    AppEventsLogger.deactivateApp(getApplicationContext());\r\n}\r\n\r\n@Override\r\nprotected void onStop() {\r\n    super.onStop();\r\n    AppEventsLogger.onContextStop();\r\n}\r\n```\r\n\r\n#### 3.2 iOS project\r\nAssuming you have [CocoaPods](https://cocoapods.org) installed, complete the following steps:\r\n\r\nIn `<project name>/ios` directory, create a `Podfile` by running:\r\n```ruby\r\npod init\r\n```\r\n\r\nOpen the generated `Podfile` and add the following code inside the **project target**:\r\n```ruby\r\ntarget 'YourApp' do\r\n  source 'https://github.com/CocoaPods/Specs.git'\r\n  pod 'React', :subspecs => ['Core', 'RCTImage', 'RCTNetwork', 'RCTText', 'RCTWebSocket'], :path => '../node_modules/react-native'\r\n  pod 'react-native-fbsdkcore', :path => '../node_modules/react-native-fbsdk/iOS/core'\r\n  pod 'react-native-fbsdklogin', :path => '../node_modules/react-native-fbsdk/iOS/login'\r\n  pod 'react-native-fbsdkshare', :path => '../node_modules/react-native-fbsdk/iOS/share'\r\nend\r\n```\r\n\r\nRemove all the subprojects under `Libraries/` in Xcode. This is because React Native's iOS code will be pulled in via CocoaPods.\r\n\r\nRun `pod install`. This will automatically download the Facebook SDK for iOS and create an Xcode workspace containing all native files. From now on open `YourApp.xcworkspace` instead of `YourApp.xcodeproj` in Xcode.\r\n\r\nNote: When doing 'pod install', warnings like `The 'YourApp [Debug]' target overrides the 'OTHER_LDFLAGS' build setting ...` may show up. To solve this, go to Xcode's target **Build Setting** section, find `Other linker flags` and add `$(inherited)` in it.\r\n\r\n### 3.3 Configure native sdk\r\nAfter you configure the native project in 3.1 and/or 3.2, follow the Getting Started guide for [Android](https://developers.facebook.com/docs/android/getting-started/) and [iOS](https://developers.facebook.com/docs/ios/getting-started/) sdk to set up a Facebook app. You can skip the steps that talk about downloading and linking the Facebook SDK frameworks, -- that's already taken care of by the steps above.\r\n\r\n### 3.4 Troubleshooting\r\nIf you get a build error stating that one of the Facebook SDK files was not found -- eg. `FBSDKCoreKit/FBSDKCoreKit.h` -- check two things\\:\r\n- Ensure that the Facebook SDK frameworks are installed and show up in your xcode workspace.\r\n- Ensure the [schemes](https://developer.apple.com/library/ios/recipes/xcode_help-scheme_editor/Articles/SchemeDialog.html) (react-native-fbsdkcore, react-native-fbsdklogin, and react-native-fbsdkshare) can be run successfully.\r\n\r\n## Usage\r\n### [Login](https://developers.facebook.com/docs/facebook-login)\r\n#### Login Button\r\n```js\r\nconst FBSDK = require('react-native-fbsdk');\r\nconst {\r\n  LoginButton,\r\n} = FBSDK;\r\n\r\nvar Login = React.createClass({\r\n  render: function() {\r\n    return (\r\n      <View>\r\n        <LoginButton\r\n          publishPermissions={[\"publish_actions\"]}\r\n          onLoginFinished={\r\n            (error, result) => {\r\n              if (error) {\r\n                alert(\"login has error: \" + result.error);\r\n              } else if (result.isCancelled) {\r\n                alert(\"login is cancelled.\");\r\n              } else {\r\n                alert(\"login has finished with permissions: \" + result.grantedPermissions)\r\n              }\r\n            }\r\n          }\r\n          onLogoutFinished={() => alert(\"logout.\")}/>\r\n      </View>\r\n    );\r\n  }\r\n});\r\n```\r\n#### Requesting additional permissions with Login Manager\r\nYou can also use the Login Manager with custom UI to perform Login.\r\n```js\r\nconst FBSDK = require('react-native-fbsdk');\r\nconst {\r\n  LoginManager,\r\n} = FBSDK;\r\n\r\n// ...\r\n\r\n// Attempt a login using the Facebook login dialog asking for default permissions.\r\nLoginManager.logInWithReadPermissions(['public_profile']).then(\r\n  function(result) {\r\n    if (result.isCancelled) {\r\n      alert('Login cancelled');\r\n    } else {\r\n      alert('Login success with permissions: '\r\n        +result.grantedPermissions.toString());\r\n    }\r\n  },\r\n  function(error) {\r\n    alert('Login fail with error: ' + error);\r\n  }\r\n);\r\n```\r\n### [Sharing](https://developers.facebook.com/docs/sharing)\r\n#### Share dialogs\r\nAll of the dialogs included are used in a similar way, with differing content types. All content types are defined with [Flow](http://flowtype.org/) Type Annotation in js/models directory.\r\n```js\r\nconst FBSDK = require('react-native-fbsdk');\r\nconst {\r\n  ShareDialog,\r\n} = FBSDK;\r\n\r\n// ...\r\n\r\n// Build up a shareable link.\r\nconst shareLinkContent = {\r\n  contentType: 'link',\r\n  contentUrl: \"https://facebook.com\",\r\n  contentDescription: 'Wow, check out this great site!',\r\n};\r\n\r\n// ...\r\n\r\n// Share the link using the share dialog.\r\nshareLinkWithShareDialog() {\r\n  var tmp = this;\r\n  ShareDialog.canShow(this.state.shareLinkContent).then(\r\n    function(canShow) {\r\n      if (canShow) {\r\n        return ShareDialog.show(tmp.state.shareLinkContent);\r\n      }\r\n    }\r\n  ).then(\r\n    function(result) {\r\n      if (result.isCancelled) {\r\n        alert('Share cancelled');\r\n      } else {\r\n        alert('Share success with postId: '\r\n          + result.postId);\r\n      }\r\n    },\r\n    function(error) {\r\n      alert('Share fail with error: ' + error);\r\n    }\r\n  );\r\n}\r\n```\r\n\r\n#### Share API\r\nYour app must have the `publish_actions` permission approved to share through the share API. You should prefer to use the Share Dialogs for an easier and more consistent experience.\r\n```js\r\nconst FBSDK = require('react-native-fbsdk');\r\nconst {\r\n  ShareApi,\r\n} = FBSDK;\r\n\r\n// ...\r\n\r\n// Build up a shareable link.\r\nconst shareLinkContent = {\r\n  contentType: 'link',\r\n  contentUrl: \"https://facebook.com\",\r\n  contentDescription: 'Wow, check out this great site!',\r\n};\r\n\r\n// ...\r\n\r\n// Share using the share API.\r\nShareApi.canShare(this.state.shareLinkContent).then(\r\n  var tmp = this;\r\n  function(canShare) {\r\n    if (canShare) {\r\n      return ShareApi.share(tmp.state.shareLinkContent, '/me', 'Some message.');\r\n    }\r\n  }\r\n).then(\r\n  function(result) {\r\n    alert('Share with ShareApi success.');\r\n  },\r\n  function(error) {\r\n    alert('Share with ShareApi failed with error: ' + error);\r\n  }\r\n);\r\n```\r\n### [Analytics for Apps](https://developers.facebook.com/docs/app-events)\r\n#### App events\r\n```js\r\nconst FBSDK = require('react-native-fbsdk');\r\nconst {\r\n  AppEventsLogger,\r\n} = FBSDK;\r\n\r\n// ...\r\n\r\n// Log a $15 purchase.\r\nAppEventsLogger.logPurchase(15, 'USD', {'param': 'value'})\r\n```\r\n### [Graph API](https://developers.facebook.com/docs/graph-api)\r\n#### Graph Requests\r\n```js\r\nconst FBSDK = require('react-native-fbsdk');\r\nconst {\r\n  GraphRequest,\r\n  GraphRequestManager,\r\n} = FBSDK;\r\n\r\n// ...\r\n\r\n//Create response callback.\r\n_responseCallback(error: ?Object, result: ?Object) {\r\n  if (error) {\r\n    alert('Error posting data: ' + error.toString());\r\n  } else {\r\n    alert('Success posting data: ' + result.toString());\r\n  }\r\n}\r\n\r\n// Create a graph request asking for user informations with a callback to handle the response.\r\nconst infoRequest = new GraphRequest(\r\n  '/me',\r\n  null,\r\n  this._responseInfoCallback,\r\n);\r\n// Start the graph request.\r\nnew GraphRequestManager().addRequest(infoRequest).start();\r\n```\r\n## License\r\nSee the LICENSE file.\r\n\r\n## Platform Policy\r\nDevelopers looking to integrate with the Facebook Platform should familiarize themselves with the [Facebook Platform Policy](https://developers.facebook.com/policy/).\r\n",
  "readmeFilename": "README.md",
  "version": "0.1.0-alpha.1"
}

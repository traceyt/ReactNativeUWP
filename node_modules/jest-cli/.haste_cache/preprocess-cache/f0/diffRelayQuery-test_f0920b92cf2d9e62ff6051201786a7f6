'use strict';












require('configureForRelayOSS');










describe('diffRelayQuery',function(){
var RelayRecordStore=undefined;var _RelayTestUtils=require('RelayTestUtils');var 

defer=_RelayTestUtils.defer;var getNode=_RelayTestUtils.getNode;var getVerbatimNode=_RelayTestUtils.getVerbatimNode;var writePayload=_RelayTestUtils.writePayload;

var rootCallMap=undefined;

beforeEach(function(){
jest.resetModuleRegistry();

RelayRecordStore=require('RelayRecordStore');

rootCallMap={
viewer:{'':'client:1'}};


jasmine.addMatchers(require('RelayTestUtils').matchers);});


it('returns the same query with an empty store',function(){
var query=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}());







var records={};
var store=new RelayRecordStore({records:records});
var tracker=new (require('RelayQueryTracker'))();
var diffQueries=require('diffRelayQuery')(query,store,tracker);
expect(diffQueries.length).toBe(1);
expect(diffQueries[0]).toBeQueryRoot(query);});


it('removes requisite fields if fetched',function(){
var query=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}());






var records={
'4':{
__dataID__:'4',
id:'4'}};


var store=new RelayRecordStore({records:records});
var tracker=new (require('RelayQueryTracker'))();
var diffQueries=require('diffRelayQuery')(query,store,tracker);
expect(diffQueries.length).toBe(0);});


it('removes fetched scalar fields',function(){
var query=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}());







var records={
'4':{
__dataID__:'4',
id:'4',
name:'Mark'}};


var store=new RelayRecordStore({records:records});
var tracker=new (require('RelayQueryTracker'))();
var diffQueries=require('diffRelayQuery')(query,store,tracker);
expect(diffQueries.length).toBe(0);});


it('removes fetched fields with the same calls',function(){
var query=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{calls:[{kind:'Call',metadata:{},name:'size',value:{kind:'CallValue',callValue:'32'}}],children:[{fieldName:'uri',kind:'Field',metadata:{},type:'String'}],fieldName:'profilePicture',kind:'Field',metadata:{canHaveSubselections:true},type:'Image'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}());







var records={
'client:1':{
__dataID__:'client:1',
uri:'https://facebook.com'},

'4':{
__dataID__:'4',
id:'4',
'profilePicture{size:"32"}':{__dataID__:'client:1'}}};


var store=new RelayRecordStore({records:records});
var tracker=new (require('RelayQueryTracker'))();
var diffQueries=require('diffRelayQuery')(query,store,tracker);
expect(diffQueries.length).toBe(0);});


it('keeps fetched fields with different calls',function(){
var query=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{calls:[{kind:'Call',metadata:{},name:'size',value:{kind:'CallValue',callValue:'64'}}],children:[{fieldName:'uri',kind:'Field',metadata:{},type:'String'}],fieldName:'profilePicture',kind:'Field',metadata:{canHaveSubselections:true},type:'Image'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}());







var records={
'client:1':{
__dataID__:'client:1',
uri:'https://facebook.com'},

'4':{
__dataID__:'4',
id:'4',
'profilePicture{size:"32"}':{__dataID__:'client:1'}}};


var store=new RelayRecordStore({records:records});
var tracker=new (require('RelayQueryTracker'))();
var diffQueries=require('diffRelayQuery')(query,store,tracker);
expect(diffQueries.length).toBe(1);
expect(diffQueries[0]).toBeQueryRoot(query);});


it('removes fetched fragments',function(){
var fragment=function(){return {children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'DiffRelayQueryRelayQL',type:'Actor'};}();





var query=getNode(function(RQL_0){return {children:[{children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'},require('Relay').QL.__frag(RQL_0)]),fieldName:'actor',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true},type:'Actor'}],fieldName:'viewer',kind:'Query',metadata:{},name:'DiffRelayQuery',type:'Viewer'};}(



fragment));




var records={
'client:1':{
__dataID__:'client:1',
actor:{__dataID__:'4808495'}},

'4808495':{
__dataID__:'4808495',
id:'4808495',
name:'Joe'}};


var store=new RelayRecordStore({records:records},{rootCallMap:rootCallMap});
var tracker=new (require('RelayQueryTracker'))();
var diffQueries=require('diffRelayQuery')(query,store,tracker);
expect(diffQueries.length).toBe(0);});


it('does not fetch known connection metadata for unfetched ranges',function(){


var query=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'story'}}],children:[{children:[{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'10'}}],children:[{fieldName:'count',kind:'Field',metadata:{},type:'Int'},{children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{children:[{fieldName:'text',kind:'Field',metadata:{},type:'String'}],fieldName:'body',kind:'Field',metadata:{canHaveSubselections:true},type:'Text'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'Comment'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'CommentsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],fieldName:'topLevelComments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'TopLevelCommentsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}());


















var records={
story:{
__dataID__:'story',
id:'story',
feedback:{
__dataID__:'story:feedback'}},


'story:feedback':{
__dataID__:'story:feedback',
topLevelComments:{
__dataID__:'story:feedback:comments'}},


'story:feedback:comments':{
__dataID__:'story:feedback:comments',
count:5}};


var store=new RelayRecordStore({records:records});
var tracker=new (require('RelayQueryTracker'))();
var diffQueries=require('diffRelayQuery')(query,store,tracker);


expect(diffQueries.length).toBe(1);
expect(diffQueries[0].getName()).toBe(query.getName());
expect(diffQueries[0]).toEqualQueryRoot(getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'story'}}],children:[{children:[{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'10'}}],children:[{children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{children:[{fieldName:'text',kind:'Field',metadata:{},type:'String'}],fieldName:'body',kind:'Field',metadata:{canHaveSubselections:true},type:'Text'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'Comment'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'CommentsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],fieldName:'topLevelComments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'TopLevelCommentsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}()));


















var body=function(){return {children:[{children:[{fieldName:'text',kind:'Field',metadata:{},type:'String'}],fieldName:'body',kind:'Field',metadata:{canHaveSubselections:true},type:'Text'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'DiffRelayQueryRelayQL',type:'Comment'};}();






var fragment=function(RQL_0){return {children:[{fieldName:'count',kind:'Field',metadata:{},type:'Int'},{children:[{children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},require('Relay').QL.__frag(RQL_0)]),fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'Comment'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'CommentsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'DiffRelayQueryRelayQL',type:'TopLevelCommentsConnection'};}(





body);




query=getNode(function(RQL_0){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'story'}}],children:[{children:[{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'10'}}],children:[].concat.apply([],[require('Relay').QL.__frag(RQL_0)]),fieldName:'topLevelComments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'TopLevelCommentsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}(




fragment));





store=new RelayRecordStore({records:records});
tracker=new (require('RelayQueryTracker'))();
diffQueries=require('diffRelayQuery')(query,store,tracker);


expect(diffQueries.length).toBe(1);
var edgesFragment=function(RQL_0){return {children:[{children:[{children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},require('Relay').QL.__frag(RQL_0)]),fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'Comment'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'CommentsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'DiffRelayQueryRelayQL',type:'TopLevelCommentsConnection'};}(



body);




var expectedQuery=getNode(function(RQL_0){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'story'}}],children:[{children:[{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'10'}}],children:[].concat.apply([],[require('Relay').QL.__frag(RQL_0)]),fieldName:'topLevelComments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'TopLevelCommentsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}(




edgesFragment));





expect(diffQueries[0].getName()).toBe(query.getName());
expect(diffQueries[0]).toEqualQueryRoot(expectedQuery);});


it('diffs connection metadata when edges are unfetched',function(){
var records={
story:{
__dataID__:'story',
id:'story',
feedback:{
__dataID__:'story:feedback'}},


'story:feedback':{
__dataID__:'story:feedback',
topLevelComments:{
__dataID__:'story:feedback:comments'}},


'story:feedback:comments':{
__dataID__:'story:feedback:comments',
count:5}};


var store=new RelayRecordStore({records:records});

var query=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'story'}}],children:[{children:[{children:[{fieldName:'count',kind:'Field',metadata:{},type:'Int'},{fieldName:'totalCount',kind:'Field',metadata:{},type:'Int'}],fieldName:'topLevelComments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'TopLevelCommentsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}());













var tracker=new (require('RelayQueryTracker'))();
var diffQueries=require('diffRelayQuery')(query,store,tracker);
expect(diffQueries.length).toBe(1);
expect(diffQueries[0].getName()).toBe(query.getName());
expect(diffQueries[0]).toEqualQueryRoot(getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'story'}}],children:[{children:[{children:[{fieldName:'totalCount',kind:'Field',metadata:{},type:'Int'}],fieldName:'topLevelComments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'TopLevelCommentsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}()));});












it('keeps connection `edges` when only metadata is fetched',function(){
var records={
story:{
__dataID__:'story',
id:'story',
feedback:{
__dataID__:'story:feedback'}},


'story:feedback':{
__dataID__:'story:feedback',
topLevelComments:{
__dataID__:'story:feedback:comments'}},


'story:feedback:comments':{
__dataID__:'story:feedback:comments',
count:5}};


var store=new RelayRecordStore({records:records});


var query=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'story'}}],children:[{children:[{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'10'}}],children:[{children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'Comment'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'CommentsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],fieldName:'topLevelComments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'TopLevelCommentsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}());















var tracker=new (require('RelayQueryTracker'))();
var diffQueries=require('diffRelayQuery')(query,store,tracker);
expect(diffQueries.length).toBe(1);
expect(diffQueries[0]).toBeQueryRoot(query);});


it('fetches missing connection metadata without fetched edges',function(){
var mockRange=new (require('GraphQLRange'))();
mockRange.retrieveRangeInfoForQuery.mockReturnValue({
diffCalls:[],
filteredEdges:[]});

var records={
story:{
__dataID__:'story',
id:'story',
feedback:{
__dataID__:'story:feedback'}},


'story:feedback':{
__dataID__:'story:feedback',
topLevelComments:{
__dataID__:'story:feedback:comments'}},


'story:feedback:comments':{
__dataID__:'story:feedback:comments',
__range__:mockRange}};


var store=new RelayRecordStore({records:records});
var query=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'story'}}],children:[{children:[{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'10'}}],children:[{fieldName:'count',kind:'Field',metadata:{},type:'Int'},{children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'Comment'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'CommentsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],fieldName:'topLevelComments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'TopLevelCommentsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}());


















var tracker=new (require('RelayQueryTracker'))();
var diffQueries=require('diffRelayQuery')(query,store,tracker);

expect(diffQueries.length).toBe(1);
expect(diffQueries[0].getName()).toBe(query.getName());
expect(diffQueries[0]).toEqualQueryRoot(getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'story'}}],children:[{children:[{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'10'}}],children:[{fieldName:'count',kind:'Field',metadata:{},type:'Int'}],fieldName:'topLevelComments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'TopLevelCommentsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}()));











var fragment=function(){return {children:[{fieldName:'count',kind:'Field',metadata:{},type:'Int'},{children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'Comment'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'CommentsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'DiffRelayQueryRelayQL',type:'TopLevelCommentsConnection'};}();









query=getNode(function(RQL_0){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'story'}}],children:[{children:[{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'10'}}],children:[].concat.apply([],[require('Relay').QL.__frag(RQL_0)]),fieldName:'topLevelComments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'TopLevelCommentsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}(




fragment));





tracker=new (require('RelayQueryTracker'))();
diffQueries=require('diffRelayQuery')(query,store,tracker);


var edgesFragment=function(){return {children:[{fieldName:'count',kind:'Field',metadata:{},type:'Int'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'DiffRelayQueryRelayQL',type:'TopLevelCommentsConnection'};}();




expect(diffQueries.length).toBe(1);
expect(diffQueries[0].getName()).toBe(query.getName());
expect(diffQueries[0]).toEqualQueryRoot(getNode(function(RQL_0){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'story'}}],children:[{children:[{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'10'}}],children:[].concat.apply([],[require('Relay').QL.__frag(RQL_0)]),fieldName:'topLevelComments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'TopLevelCommentsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}(




edgesFragment)));});







it('returns an id-only query if the id is unfetched',function(){
var query=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}());






var store=new RelayRecordStore({records:{}});
var tracker=new (require('RelayQueryTracker'))();
var diffQueries=require('diffRelayQuery')(query,store,tracker);
expect(diffQueries.length).toBe(1);
expect(diffQueries[0]).toBeQueryRoot(query);

query=getNode(function(){return {children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'actor',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true},type:'Actor'}],fieldName:'viewer',kind:'Query',metadata:{},name:'DiffRelayQuery',type:'Viewer'};}());








var records={
'client:1':{
__dataID__:'client:1',
actor:{
__dataID__:'actor'}},


'actor':{
__dataID__:'actor'}};



store=new RelayRecordStore({records:records},{rootCallMap:rootCallMap});
tracker=new (require('RelayQueryTracker'))();
diffQueries=require('diffRelayQuery')(query,store,tracker);
expect(diffQueries.length).toBe(1);
expect(diffQueries[0]).toBeQueryRoot(query);});


it('fetches a known id if a sibling field is missing',function(){
var query=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}());







var records={
'4':{
__dataID__:'4',
id:'4'}};


var store=new RelayRecordStore({records:records});
var tracker=new (require('RelayQueryTracker'))();
var diffQueries=require('diffRelayQuery')(query,store,tracker);
expect(diffQueries.length).toBe(1);
expect(diffQueries[0]).toBeQueryRoot(query);

query=getNode(function(){return {children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'actor',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true},type:'Actor'}],fieldName:'viewer',kind:'Query',metadata:{},name:'DiffRelayQuery',type:'Viewer'};}());









records={
'client:1':{
__dataID__:'client:1',
actor:{
__dataID__:'actor'}},


'actor':{
__dataID__:'actor',
id:'actor'}};


store=new RelayRecordStore({records:records},{rootCallMap:rootCallMap});
tracker=new (require('RelayQueryTracker'))();
diffQueries=require('diffRelayQuery')(query,store,tracker);
expect(diffQueries.length).toBe(1);
expect(diffQueries[0]).toBeQueryRoot(query);});


it('returns nothing for an empty query',function(){
var query=getNode(function(RQL_0){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'},require('Relay').QL.__frag(RQL_0)]),fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}(


null));



var store=new RelayRecordStore({records:{}});
var tracker=new (require('RelayQueryTracker'))();
var diffQueries=require('diffRelayQuery')(query,store,tracker);
expect(diffQueries.length).toBe(0);

var records={
'4':{
__dataID__:'4',
id:'4'}};


store=new RelayRecordStore({records:records});
tracker=new (require('RelayQueryTracker'))();
diffQueries=require('diffRelayQuery')(query,store,tracker);
expect(diffQueries.length).toBe(0);});


it('returns nothing if a range field is null',function(){


var query=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[{children:[{fieldName:'count',kind:'Field',metadata:{},type:'Int'}],fieldName:'friends',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'FriendsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}());








var records={
'4':{
__dataID__:'4',
friends:null}};


var store=new RelayRecordStore({records:records});
var tracker=new (require('RelayQueryTracker'))();
var diffQueries=require('diffRelayQuery')(query,store,tracker);
expect(diffQueries.length).toBe(0);});


it('splits multiple IDs into separate queries',function(){
var records={};
var store=new RelayRecordStore({records:records});
var query=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'[ID!]'},name:'ids',value:[{kind:'CallValue',callValue:'4'},{kind:'CallValue',callValue:'4808495'}]}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'nodes',kind:'Query',metadata:{isPlural:true,isAbstract:true,identifyingArgName:'ids',identifyingArgType:'[ID!]'},name:'DiffRelayQuery',type:'Node'};}());







var tracker=new (require('RelayQueryTracker'))();
var diffQueries=require('diffRelayQuery')(query,store,tracker);
expect(diffQueries.length).toBe(2);
expect(diffQueries[0].getName()).toBe(query.getName());
expect(diffQueries[0]).toEqualQueryRoot(getNode(function(){return {calls:[{kind:'Call',metadata:{type:'[ID!]'},name:'ids',value:[{kind:'CallValue',callValue:'4'}]}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isRequisite:true},type:'String'},{fieldName:'name',kind:'Field',metadata:{},type:'String'}],fieldName:'nodes',kind:'Query',metadata:{isPlural:true,isAbstract:true,identifyingArgName:'ids',identifyingArgType:'[ID!]'},name:'DiffRelayQuery',type:'Node'};}()));








expect(diffQueries[0].getIdentifyingArg()).toEqual({
name:'ids',
type:'[ID!]',
value:['4']});

expect(diffQueries[1].getName()).toBe(query.getName());
expect(diffQueries[1]).toEqualQueryRoot(getNode(function(){return {calls:[{kind:'Call',metadata:{type:'[ID!]'},name:'ids',value:[{kind:'CallValue',callValue:'4808495'}]}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isRequisite:true},type:'String'},{fieldName:'name',kind:'Field',metadata:{},type:'String'}],fieldName:'nodes',kind:'Query',metadata:{isPlural:true,isAbstract:true,identifyingArgName:'ids',identifyingArgType:'[ID!]'},name:'DiffRelayQuery',type:'Node'};}()));








expect(diffQueries[1].getIdentifyingArg()).toEqual({
name:'ids',
type:'[ID!]',
value:['4808495']});});



it('splits viewer-rooted queries',function(){
var records={
'client:1':{
__dataID__:'client:1',
actor:{__dataID__:'4808495'}},

'4808495':{
__dataID__:'4808495',
id:'4808495'}};


var store=new RelayRecordStore({records:records},{rootCallMap:rootCallMap});
var query=getNode(function(){return {children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'actor',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true},type:'Actor'},{fieldName:'primaryEmail',kind:'Field',metadata:{},type:'String'}],fieldName:'viewer',kind:'Query',metadata:{},name:'DiffRelayQuery',type:'Viewer'};}());










var tracker=new (require('RelayQueryTracker'))();
var diffQueries=require('diffRelayQuery')(query,store,tracker);
expect(diffQueries.length).toBe(1);
expect(diffQueries[0].getName()).toBe(query.getName());
expect(diffQueries[0]).toEqualQueryRoot(getNode(function(){return {children:[{fieldName:'primaryEmail',kind:'Field',metadata:{},type:'String'}],fieldName:'viewer',kind:'Query',metadata:{},name:'DiffRelayQuery',type:'Viewer'};}()));});




it('does not split refetchable fields',function(){
var records={
'client:1':{
__dataID__:'client:1',
actor:{
__dataID__:'123'}},


'123':{
__dataID__:'123',
id:'123',
name:'Name'}};


var store=new RelayRecordStore({records:records},{rootCallMap:rootCallMap});
var query=getNode(function(){return {children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'name',kind:'Field',metadata:{},type:'String'},{children:[{fieldName:'city',kind:'Field',metadata:{},type:'String'}],fieldName:'address',kind:'Field',metadata:{canHaveSubselections:true},type:'StreetAddress'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'actor',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true},type:'Actor'}],fieldName:'viewer',kind:'Query',metadata:{},name:'DiffRelayQuery',type:'Viewer'};}());













var field=query.getFieldByStorageKey('actor');
expect(field.getInferredRootCallName()).toBe('node');

var tracker=new (require('RelayQueryTracker'))();
var diffQueries=require('diffRelayQuery')(query,store,tracker);
expect(diffQueries.length).toBe(1);
expect(diffQueries[0].getName()).toBe(query.getName());
expect(diffQueries[0]).toEqualQueryRoot(getNode(function(){return {children:[{children:[{children:[{fieldName:'city',kind:'Field',metadata:{},type:'String'}],fieldName:'address',kind:'Field',metadata:{canHaveSubselections:true},type:'StreetAddress'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'actor',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true},type:'Actor'}],fieldName:'viewer',kind:'Query',metadata:{},name:'DiffRelayQuery',type:'Viewer'};}()));});












it('reuses fields and fragments if both unchanged',function(){
var records={};
var store=new RelayRecordStore({records:records});
var frag=function(){return {children:[{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'DiffRelayQueryRelayQL',type:'Node'};}();
var query=getNode(function(RQL_0){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[].concat.apply([],[{fieldName:'firstName',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'},require('Relay').QL.__frag(RQL_0)]),fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}(



frag));



var tracker=new (require('RelayQueryTracker'))();
var diffQueries=require('diffRelayQuery')(query,store,tracker);

expect(diffQueries.length).toBe(1);
expect(diffQueries[0]).toBeQueryRoot(query);});


it('reuses fields if unchanged',function(){
var records={
'4':{
__dataID__:'4',
id:'4',
name:'Mark Zuckerberg'}};


var store=new RelayRecordStore({records:records});
var frag=function(){return {children:[{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'DiffRelayQueryRelayQL',type:'Node'};}();
var query=getNode(function(RQL_0){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[].concat.apply([],[{fieldName:'firstName',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'},require('Relay').QL.__frag(RQL_0)]),fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}(



frag));




var tracker=new (require('RelayQueryTracker'))();
var diffQueries=require('diffRelayQuery')(query,store,tracker);
expect(diffQueries.length).toBe(1);
expect(diffQueries[0].getName()).toBe(query.getName());
expect(diffQueries[0]).toEqualQueryRoot(getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[{fieldName:'firstName',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}()));});








it('reuses fragments if unchanged',function(){
var fragment=function(){return {children:[{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'DiffRelayQueryRelayQL',type:'Node'};}();
var query=getNode(function(RQL_0){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[].concat.apply([],[{fieldName:'firstName',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'},require('Relay').QL.__frag(RQL_0)]),fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}(



fragment));



var records={
'4':{
__dataID__:'4',
id:'4',
firstName:'Mark'}};


var store=new RelayRecordStore({records:records});

var tracker=new (require('RelayQueryTracker'))();
var diffQueries=require('diffRelayQuery')(query,store,tracker);
expect(diffQueries.length).toBe(1);
expect(diffQueries[0].getName()).toBe(query.getName());
expect(diffQueries[0]).toEqualQueryRoot(getNode(function(RQL_0){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'},require('Relay').QL.__frag(RQL_0)]),fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}(


fragment)));});





it('returns no queries if everything exists',function(){
var records={
'4':{
__dataID__:'4',
id:'4',
firstName:'Mark'}};


var store=new RelayRecordStore({records:records});
var query=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'firstName',kind:'Field',metadata:{},type:'String'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}());








var tracker=new (require('RelayQueryTracker'))();
var diffQueries=require('diffRelayQuery')(query,store,tracker);
expect(diffQueries.length).toBe(0);

query=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}());






tracker=new (require('RelayQueryTracker'))();
diffQueries=require('diffRelayQuery')(query,store,tracker);
expect(diffQueries.length).toBe(0);});


it('removes fields that have data, except id',function(){
var records={
'4':{
__dataID__:'4',
id:'4',
firstName:'Mark'}};


var store=new RelayRecordStore({records:records});

var query=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'firstName',kind:'Field',metadata:{},type:'String'},{fieldName:'lastName',kind:'Field',metadata:{},type:'String'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}());









var tracker=new (require('RelayQueryTracker'))();
var diffQueries=require('diffRelayQuery')(query,store,tracker);
expect(diffQueries.length).toBe(1);
expect(diffQueries[0].getName()).toBe(query.getName());
expect(diffQueries[0]).toEqualQueryRoot(getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'lastName',kind:'Field',metadata:{},type:'String'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}()));});









it('recurses into subfields',function(){
var records={
'4':{
__dataID__:'4',
id:'4',
hometown:{
__dataID__:'1234'}},


'1234':{
__dataID__:'1234',
id:'1234',
name:'Palo Alto, California'}};


var store=new RelayRecordStore({records:records});
var query=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'websites',kind:'Field',metadata:{isPlural:true},type:'String'}],fieldName:'hometown',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Page'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}());












var tracker=new (require('RelayQueryTracker'))();
var diffQueries=require('diffRelayQuery')(query,store,tracker);
expect(diffQueries.length).toBe(1);
expect(diffQueries[0].getName()).toBe(query.getName());
expect(diffQueries[0]).toEqualQueryRoot(getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'websites',kind:'Field',metadata:{isPlural:true},type:'String'}],fieldName:'hometown',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Page'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}()));});












it('handles arrays containing Nodes',function(){
var records={
'12345':{
__dataID__:'12345',
id:'12345',
actors:[
{__dataID__:'4'},
{__dataID__:'4808495'},
{__dataID__:'1023896548'}]},


'4':{
__dataID__:'4',
id:'4',
name:'Mark Zuckerberg',
firstName:'Mark',
lastName:'Zuckerberg'},

'4808495':{
__dataID__:'4808495',
id:'4808495',
firstName:'Marshall'},

'1023896548':{
__dataID__:'1023896548',
id:'1023896548',
name:'Laney Kuenzel'}};


var store=new RelayRecordStore({records:records});

var query=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'12345'}}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'firstName',kind:'Field',metadata:{},type:'String'},{fieldName:'lastName',kind:'Field',metadata:{},type:'String'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'actors',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true,isPlural:true},type:'Actor'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}());













var tracker=new (require('RelayQueryTracker'))();
var diffQueries=require('diffRelayQuery')(query,store,tracker);
expect(diffQueries.length).toBe(2);
expect(diffQueries[0].getName()).toBe(query.getName());
expect(diffQueries[0]).toEqualQueryRoot(getVerbatimNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4808495'}}],children:[{fieldName:'__typename',kind:'Field',metadata:{isRequisite:true},type:'String'},{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{children:[{fieldName:'__typename',kind:'Field',metadata:{isRequisite:true},type:'String'},{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'lastName',kind:'Field',metadata:{},type:'String'},{fieldName:'name',kind:'Field',metadata:{},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'Actor',type:'Actor'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}()));













expect(diffQueries[1].getName()).toBe(query.getName());
expect(diffQueries[1]).toEqualQueryRoot(getVerbatimNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'1023896548'}}],children:[{fieldName:'__typename',kind:'Field',metadata:{isRequisite:true},type:'String'},{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{children:[{fieldName:'__typename',kind:'Field',metadata:{isRequisite:true},type:'String'},{fieldName:'firstName',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'lastName',kind:'Field',metadata:{},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'Actor',type:'Actor'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}()));














var trackedQuery=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'12345'}}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'firstName',kind:'Field',metadata:{},type:'String'},{fieldName:'lastName',kind:'Field',metadata:{},type:'String'},{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'actors',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true,isPlural:true},type:'Actor'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}());












var trackedQueries=tracker.trackNodeForID.mock.calls;
expect(trackedQueries.length).toBe(1);
expect(trackedQueries[0][1]).toBe('12345');
expect(trackedQueries[0][0]).toEqualQueryNode(trackedQuery);});


it('handles arrays containing non-Nodes',function(){
var records={
'12345':{
__dataID__:'12345',
id:'12345',
screennames:[
{__dataID__:'client:1'},
{__dataID__:'client:2'}]},


'client:1':{
__dataID__:'client:1',
service:'GTALK'},

'client:2':{
__dataID__:'client:2',
service:'TWITTER'}};


var store=new RelayRecordStore({records:records});
var expected=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'12345'}}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{children:[{fieldName:'name',kind:'Field',metadata:{},type:'String'}],fieldName:'screennames',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'Screenname'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}());











var query=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'12345'}}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{children:[{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'service',kind:'Field',metadata:{},type:'String'}],fieldName:'screennames',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'Screenname'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}());











var tracker=new (require('RelayQueryTracker'))();
var diffQueries=require('diffRelayQuery')(query,store,tracker);
expect(diffQueries.length).toBe(1);
expect(diffQueries[0].getName()).toBe(query.getName());
expect(diffQueries[0]).toEqualQueryRoot(expected);});


it('handles missing fields in fragments',function(){
var records={
'4':{
__dataID__:'4',
id:'4',
name:'Mark Zuckerberg',
lastName:'Zuckerberg'}};


var store=new RelayRecordStore({records:records});
var firstNameFrag=function(){return {children:[{fieldName:'firstName',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'DiffRelayQueryRelayQL',type:'Node'};}();




var lastNameFrag=function(){return {children:[{fieldName:'lastName',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'DiffRelayQueryRelayQL',type:'Node'};}();




var nestingFrag=function(RQL_0,RQL_1){return {children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'},require('Relay').QL.__frag(RQL_0),require('Relay').QL.__frag(RQL_1)]),id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'DiffRelayQueryRelayQL',type:'Node'};}(

firstNameFrag,
lastNameFrag);


var query=getNode(function(RQL_0,RQL_1,RQL_2){return {calls:[{kind:'Call',metadata:{type:'[ID!]'},name:'ids',value:[{kind:'CallValue',callValue:'4'},{kind:'CallValue',callValue:'4808495'}]}],children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'},require('Relay').QL.__frag(RQL_0),require('Relay').QL.__frag(RQL_1),require('Relay').QL.__frag(RQL_2)]),fieldName:'nodes',kind:'Query',metadata:{isPlural:true,isAbstract:true,identifyingArgName:'ids',identifyingArgType:'[ID!]'},name:'DiffRelayQuery',type:'Node'};}(




defer(firstNameFrag),
lastNameFrag,
defer(nestingFrag)));



var expectedFragment=function(RQL_0){return {children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'},require('Relay').QL.__frag(RQL_0)]),id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'DiffRelayQueryRelayQL',type:'Node'};}(

firstNameFrag);


var expected0=getNode(function(RQL_0,RQL_1){return {calls:[{kind:'Call',metadata:{type:'[ID!]'},name:'ids',value:[{kind:'CallValue',callValue:'4'}]}],children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'},require('Relay').QL.__frag(RQL_0),require('Relay').QL.__frag(RQL_1)]),fieldName:'nodes',kind:'Query',metadata:{isPlural:true,isAbstract:true,identifyingArgName:'ids',identifyingArgType:'[ID!]'},name:'DiffRelayQuery',type:'Node'};}(



firstNameFrag,
expectedFragment));



var expected1=getNode(function(RQL_0,RQL_1,RQL_2){return {calls:[{kind:'Call',metadata:{type:'[ID!]'},name:'ids',value:[{kind:'CallValue',callValue:'4808495'}]}],children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'},require('Relay').QL.__frag(RQL_0),require('Relay').QL.__frag(RQL_1),require('Relay').QL.__frag(RQL_2)]),fieldName:'nodes',kind:'Query',metadata:{isPlural:true,isAbstract:true,identifyingArgName:'ids',identifyingArgType:'[ID!]'},name:'DiffRelayQuery',type:'Node'};}(




defer(firstNameFrag),
lastNameFrag,
defer(nestingFrag)));




var tracker=new (require('RelayQueryTracker'))();
var diffQueries=require('diffRelayQuery')(query,store,tracker);

expect(diffQueries.length).toBe(2);

var query0=diffQueries[0];
var query0Fragments=query0.getChildren().filter(
function(child){return child instanceof require('RelayQuery').Fragment;});

expect(query0.getName()).toBe(query.getName());
expect(query0).toEqualQueryRoot(expected0);
expect(query0Fragments.length).toBe(2);
expect(query0Fragments[0].isDeferred()).toBeTruthy();
expect(query0Fragments[0].isDeferred()).toBeTruthy();

var query1=diffQueries[1];
var query1Fragments=query1.getChildren().filter(
function(child){return child instanceof require('RelayQuery').Fragment;});

expect(query1.getName()).toBe(query.getName());
expect(query1).toEqualQueryRoot(expected1);
expect(query1Fragments.length).toBe(3);
expect(query1Fragments[0].isDeferred()).toBeTruthy();
expect(query1Fragments[1].isDeferred()).toBeFalsy();
expect(query1Fragments[2].isDeferred()).toBeTruthy();});


it('fetches the whole range if it is missing',function(){
var records={
'4':{
__dataID__:'4',
id:'4',
name:'Mark Zuckerberg'}};


var store=new RelayRecordStore({records:records});

var expected=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'5'}}],children:[{children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'User'},{fieldName:'cursor',kind:'Field',metadata:{isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'FriendsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isRequisite:true},type:'PageInfo'}],fieldName:'friends',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'FriendsConnection'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}());



















var query=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'name',kind:'Field',metadata:{},type:'String'},{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'5'}}],children:[{children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'User'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'FriendsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],fieldName:'friends',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'FriendsConnection'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}());















var tracker=new (require('RelayQueryTracker'))();
var diffQueries=require('diffRelayQuery')(query,store,tracker);
expect(diffQueries.length).toBe(1);
expect(diffQueries[0].getName()).toBe(query.getName());
expect(diffQueries[0]).toEqualQueryRoot(expected);});


it('fetches an extension of a range',function(){
var mockRange=new (require('GraphQLRange'))();
var records={
'4':{
__dataID__:'4',
id:'4',
friends:{__dataID__:'client:1'}},

'client:1':{
__dataID__:'client:1',
__range__:mockRange},

'client:4:4808495':{
__dataID__:'client:4:4808495',
node:{__dataID__:'4808495'},
cursor:'cursor1'},

'4808495':{
__dataID__:'4808495',
id:'4808495'}};


var store=new RelayRecordStore({records:records});
mockRange.retrieveRangeInfoForQuery.mockReturnValue({
requestedEdgeIDs:['client:4:4808495'],
diffCalls:[
{name:'after',value:'cursor1'},
{name:'first',value:'4'}]});



var expected=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{calls:[{kind:'Call',metadata:{},name:'after',value:{kind:'CallValue',callValue:'cursor1'}},{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'4'}}],children:[{children:[{fieldName:'cursor',kind:'Field',metadata:{isRequisite:true},type:'String'},{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'User'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'FriendsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isRequisite:true},type:'PageInfo'}],fieldName:'friends',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'FriendsConnection'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}());



















var query=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'5'}}],children:[{children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'User'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'FriendsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],fieldName:'friends',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'FriendsConnection'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}());














var tracker=new (require('RelayQueryTracker'))();
var diffQueries=require('diffRelayQuery')(query,store,tracker);
expect(diffQueries.length).toBe(1);
expect(diffQueries[0].getName()).toBe(query.getName());
expect(diffQueries[0]).toEqualQueryRoot(expected);});


it('fetches missing parts of a range and diffs nodes it has',function(){
var mockRange=new (require('GraphQLRange'))();
var mockEdge={
__dataID__:'client:4:4808495',
node:{__dataID__:'4808495'},
cursor:'cursor1'};

var records={
'4':{
__dataID__:'4',
id:'4',
friends:{__dataID__:'client:1'}},

'client:1':{
__dataID__:'client:1',
__range__:mockRange},

'client:4:4808495':mockEdge,
'4808495':{
__dataID__:'4808495',
id:'4808495'}};


var store=new RelayRecordStore({records:records});
mockRange.retrieveRangeInfoForQuery.mockReturnValue({
requestedEdgeIDs:['client:4:4808495'],
diffCalls:[
{name:'after',value:'cursor1'},
{name:'first',value:'4'}]});



var expected1=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{calls:[{kind:'Call',metadata:{},name:'after',value:{kind:'CallValue',callValue:'cursor1'}},{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'4'}}],children:[{children:[{fieldName:'cursor',kind:'Field',metadata:{isRequisite:true},type:'String'},{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'name',kind:'Field',metadata:{},type:'String'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'User'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'FriendsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isRequisite:true},type:'PageInfo'}],fieldName:'friends',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'FriendsConnection'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}());




















var expected2=getVerbatimNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4808495'}}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isRequisite:true},type:'String'},{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'name',kind:'Field',metadata:{},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'User',type:'User'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}());












var query=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'5'}}],children:[{children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'name',kind:'Field',metadata:{},type:'String'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'User'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'FriendsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],fieldName:'friends',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'FriendsConnection'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}());















var tracker=new (require('RelayQueryTracker'))();
var diffQueries=require('diffRelayQuery')(query,store,tracker);
expect(diffQueries.length).toBe(2);
expect(diffQueries[0].getName()).toBe(query.getName());
expect(diffQueries[0]).toEqualQueryRoot(expected1);
expect(diffQueries[1].getName()).toBe(query.getName());
expect(diffQueries[1]).toEqualQueryRoot(expected2);

var trackedQueries=tracker.trackNodeForID.mock.calls;
expect(trackedQueries.length).toBe(2);
expect(trackedQueries[1][1]).toBe('4');
expect(trackedQueries[1][0]).toEqualQueryNode(getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'5'}}],children:[{children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'name',kind:'Field',metadata:{},type:'String'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'User'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'FriendsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],fieldName:'friends',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'FriendsConnection'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}()));});
















it('skips known-deleted nodes from ranges',function(){
var mockRange=new (require('GraphQLRange'))();
var mockEdges=[
{
__dataID__:'client:4:4808495',
node:{__dataID__:'4808495'},
cursor:'cursor1'},

{
__dataID__:'client:4:660361306',
node:{__dataID__:'660361306'},
cursor:'cursor1'}];


var records={
'4':{
__dataID__:'4',
id:'4',
friends:{__dataID__:'client:1'}},

'client:1':{
__dataID__:'client:1',
__range__:mockRange},

'client:4:4808495':mockEdges[0],
'4808495':null,
'client:4:660361306':mockEdges[1],
'660361306':{
__dataID__:'660361306',
id:'660361306'}};


var store=new RelayRecordStore({records:records});
mockRange.retrieveRangeInfoForQuery.mockReturnValue({
requestedEdgeIDs:['client:4:4808495','client:4:660361306'],
diffCalls:[
{name:'after',value:'cursor1'},
{name:'first',value:'4'}]});



var expected1=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{calls:[{kind:'Call',metadata:{},name:'after',value:{kind:'CallValue',callValue:'cursor1'}},{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'4'}}],children:[{children:[{fieldName:'cursor',kind:'Field',metadata:{isRequisite:true},type:'String'},{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'name',kind:'Field',metadata:{},type:'String'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'User'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'FriendsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isRequisite:true},type:'PageInfo'}],fieldName:'friends',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'FriendsConnection'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}());



















var expected2=getVerbatimNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'660361306'}}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isRequisite:true},type:'String'},{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'name',kind:'Field',metadata:{},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'User',type:'User'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}());












var query=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'5'}}],children:[{children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'name',kind:'Field',metadata:{},type:'String'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'User'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'FriendsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],fieldName:'friends',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'FriendsConnection'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}());















var tracker=new (require('RelayQueryTracker'))();
var diffQueries=require('diffRelayQuery')(query,store,tracker);

expect(diffQueries.length).toBe(2);
expect(diffQueries[0].getName()).toBe(query.getName());
expect(diffQueries[0]).toEqualQueryRoot(expected1);
expect(diffQueries[1].getName()).toBe(query.getName());
expect(diffQueries[1]).toEqualQueryRoot(expected2);

var trackedQueries=tracker.trackNodeForID.mock.calls;
expect(trackedQueries.length).toBe(2);
expect(trackedQueries[1][1]).toBe('4');
expect(trackedQueries[1][0]).toEqualQueryNode(getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'5'}}],children:[{children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'name',kind:'Field',metadata:{},type:'String'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'User'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'FriendsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],fieldName:'friends',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'FriendsConnection'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}()));});
















it('splits out node() queries inside viewer-rooted queries',function(){
var mockEdge={
__dataID__:'client:1:4808495',
node:{__dataID__:'4808495'},
cursor:'cursor1'};


var mockRange=new (require('GraphQLRange'))();
mockRange.retrieveRangeInfoForQuery.mockReturnValue({
requestedEdgeIDs:['client:1:4808495'],
diffCalls:null});


var records={
'client:1':{
__dataID__:'client:1',
actor:{__dataID__:'4'}},

'4':{
__dataID__:'4',
id:'4',
friends:{__dataID__:'client:2'}},

'client:2':{
__dataID__:'client:2',
__range__:mockRange},

'client:1:4808495':mockEdge,
'4808495':{
__dataID__:'4808495',
id:'4808495',
firstName:'Marshall'}};


var store=new RelayRecordStore({records:records},{rootCallMap:rootCallMap});

var query=getNode(function(){return {children:[{children:[{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'1'}}],children:[{children:[{children:[{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'User'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'FriendsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],fieldName:'friends',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'FriendsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'actor',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true},type:'Actor'}],fieldName:'viewer',kind:'Query',metadata:{},name:'DiffRelayQuery',type:'Viewer'};}());














var tracker=new (require('RelayQueryTracker'))();
var diffQueries=require('diffRelayQuery')(query,store,tracker);
expect(diffQueries.length).toBe(1);
expect(diffQueries[0].getName()).toBe(query.getName());
expect(diffQueries[0]).toEqualQueryRoot(getVerbatimNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4808495'}}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isRequisite:true},type:'String'},{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'name',kind:'Field',metadata:{},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'User',type:'User'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}()));












var trackedQuery=getNode(function(){return {children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'1'}}],children:[{children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'name',kind:'Field',metadata:{},type:'String'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'User'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'FriendsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],fieldName:'friends',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'FriendsConnection'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'actor',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true},type:'Actor'}],fieldName:'viewer',kind:'Query',metadata:{},name:'DiffRelayQuery',type:'Viewer'};}());
















var innerTrackedQuery=trackedQuery.getFieldByStorageKey('actor');
var trackedQueries=tracker.trackNodeForID.mock.calls;
expect(trackedQueries.length).toBe(3);
expect(trackedQueries[1][1]).toBe('4');
expect(trackedQueries[1][0]).toEqualQueryNode(innerTrackedQuery);
expect(trackedQueries[2][1]).toBe('client:1');
expect(trackedQueries[2][0]).toEqualQueryNode(trackedQuery);});


it('splits out node() queries inside fragments',function(){
var mockRange=new (require('GraphQLRange'))();
var records={
'4':{
__dataID__:'4',
id:'4',
friends:{__dataID__:'client:1'}},

'client:1':{
__dataID__:'client:1',
__range__:mockRange},

'client:4:4808495':{
__dataID__:'client:4:4808495',
node:{__dataID__:'4808495'},
cursor:'cursor1'},

'4808495':{
__dataID__:'4808495',
id:'4808495',
firstName:'Marshall'}};


var store=new RelayRecordStore({records:records});
mockRange.retrieveRangeInfoForQuery.mockReturnValue({
requestedEdgeIDs:['client:4:4808495'],
diffCalls:null});


var expected=getVerbatimNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4808495'}}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isRequisite:true},type:'String'},{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'lastName',kind:'Field',metadata:{},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'User',type:'User'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}());












var fragment=function(){return {children:[{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'1'}}],children:[{children:[{children:[{fieldName:'firstName',kind:'Field',metadata:{},type:'String'},{fieldName:'lastName',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'User'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'FriendsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],fieldName:'friends',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'FriendsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'DiffRelayQueryRelayQL',type:'User'};}();











var query=getNode(function(RQL_0){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'},require('Relay').QL.__frag(RQL_0)]),fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}(


fragment));




var tracker=new (require('RelayQueryTracker'))();
var diffQueries=require('diffRelayQuery')(query,store,tracker);
expect(diffQueries.length).toBe(1);
expect(diffQueries[0].getName()).toBe(query.getName());
expect(diffQueries[0]).toEqualQueryRoot(expected);

var trackedQuery=getNode(function(RQL_0){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'},require('Relay').QL.__frag(RQL_0)]),fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}(



fragment));



var trackedQueries=tracker.trackNodeForID.mock.calls;
expect(trackedQueries.length).toBe(2);
expect(trackedQueries[1][1]).toBe('4');
expect(trackedQueries[1][0]).toEqualQueryNode(trackedQuery);});


it('creates a find() query for edges',function(){
var mockRange=new (require('GraphQLRange'))();
var mockEdge={
__dataID__:'client:4:4808495',
node:{__dataID__:'4808495'},
source:{__dataID__:'4'},
cursor:'cursor1'};

var records={
'4':{
__dataID__:'4',
__typename:'User',
id:'4',
name:'Mark Zuckerberg',
friends:{__dataID__:'client:1'}},

'client:1':{
__dataID__:'client:1',
__range__:mockRange},

'client:4:4808495':mockEdge,
'4808495':{
__dataID__:'4808495',
id:'4808495'}};


var store=new RelayRecordStore({records:records});
mockRange.retrieveRangeInfoForQuery.mockReturnValue({
requestedEdgeIDs:['client:4:4808495'],
diffCalls:null});


var query=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'[ID!]'},name:'ids',value:{kind:'CallValue',callValue:'4'}}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'1'}}],children:[{children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'User'},{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'firstName',kind:'Field',metadata:{},type:'String'}],fieldName:'source',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'User'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'FriendsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],fieldName:'friends',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'FriendsConnection'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'nodes',kind:'Query',metadata:{isPlural:true,isAbstract:true,identifyingArgName:'ids',identifyingArgType:'[ID!]'},name:'DiffRelayQuery',type:'Node'};}());


















var tracker=new (require('RelayQueryTracker'))();
var diffQueries=require('diffRelayQuery')(query,store,tracker);

expect(diffQueries.length).toBe(1);
expect(diffQueries[0].getName()).toBe(query.getName());
expect(diffQueries[0]).toEqualQueryRoot(getVerbatimNode(function(){return {calls:[{kind:'Call',metadata:{type:'[ID!]'},name:'ids',value:{kind:'CallValue',callValue:'4'}}],children:[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'},{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{},type:'String'},{calls:[{kind:'Call',metadata:{},name:'find',value:{kind:'CallValue',callValue:'4808495'}}],children:[{children:[{fieldName:'cursor',kind:'Field',metadata:{isRequisite:true},type:'String'},{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{},type:'String'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'User'},{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'firstName',kind:'Field',metadata:{},type:'String'}],fieldName:'source',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'User'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'FriendsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],fieldName:'friends',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'FriendsConnection'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'User',type:'User'}],fieldName:'nodes',kind:'Query',metadata:{isPlural:true,isAbstract:true,identifyingArgName:'ids',identifyingArgType:'[ID!]'},name:'DiffRelayQuery',type:'Node'};}()));});
























it('supports diff queries inside find() queries',function(){
var mockRange=new (require('GraphQLRange'))();
var mockEdge={
__dataID__:'client:4:4808495',
node:{__dataID__:'4808495'},
source:{__dataID__:'4'},
cursor:'cursor1'};

var records={
'4':{
__dataID__:'4',
id:'4',
friends:{__dataID__:'client:1'}},

'client:1':{
__dataID__:'client:1',
__range__:mockRange},

'client:4:4808495':mockEdge,
'4808495':{
__dataID__:'4808495',
id:'4808495',
name:'Marshall Roch'}};


var store=new RelayRecordStore({records:records});
mockRange.retrieveRangeInfoForQuery.mockReturnValue({
requestedEdgeIDs:['client:4:4808495'],
diffCalls:null});


var expected=getVerbatimNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4808495'}}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isRequisite:true},type:'String'},{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'lastName',kind:'Field',metadata:{},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'User',type:'User'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}());












var query=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'[ID!]'},name:'ids',value:{kind:'CallValue',callValue:'4'}}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'1'}}],children:[{children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'User'},{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'1'}}],children:[{children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'lastName',kind:'Field',metadata:{},type:'String'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'User'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'FriendsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],fieldName:'friends',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'FriendsConnection'}],fieldName:'source',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'User'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'FriendsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],fieldName:'friends',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'FriendsConnection'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'nodes',kind:'Query',metadata:{isPlural:true,isAbstract:true,identifyingArgName:'ids',identifyingArgType:'[ID!]'},name:'DiffRelayQuery',type:'Node'};}());

























var tracker=new (require('RelayQueryTracker'))();
var diffQueries=require('diffRelayQuery')(query,store,tracker);
expect(diffQueries.length).toBe(1);
expect(diffQueries[0].getName()).toBe(query.getName());
expect(diffQueries[0]).toEqualQueryRoot(expected);

var trackedQueries=tracker.trackNodeForID.mock.calls;
expect(trackedQueries.length).toBe(5);
expect(trackedQueries[1][1]).toBe('4');
expect(trackedQueries[1][0]).toEqualQueryNode(getNode(function(){return {children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'1'}}],children:[{children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'lastName',kind:'Field',metadata:{},type:'String'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'User'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'FriendsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],fieldName:'friends',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'FriendsConnection'}],fieldName:'source',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'User'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'DiffRelayQueryRelayQL',type:'FriendsEdge'};}()).














getChildren()[0]);

expect(trackedQueries[4][1]).toBe('4');
expect(trackedQueries[4][0]).toEqualQueryNode(getNode(function(){return {calls:[{kind:'Call',metadata:{type:'[ID!]'},name:'ids',value:{kind:'CallValue',callValue:'4'}}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'1'}}],children:[{children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'1'}}],children:[{children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'lastName',kind:'Field',metadata:{},type:'String'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'User'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'FriendsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],fieldName:'friends',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'FriendsConnection'}],fieldName:'source',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'User'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'},{children:[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isGenerated:true,isRequisite:true},type:'User'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'FriendsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],fieldName:'friends',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'FriendsConnection'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'nodes',kind:'Query',metadata:{isPlural:true,isAbstract:true,identifyingArgName:'ids',identifyingArgType:'[ID!]'},name:'DiffRelayQuery',type:'Node'};}()));});
























it('tracks fragments on null plural fields',function(){
var records={};
var store=new RelayRecordStore({records:records},{rootCallMap:rootCallMap});
var writer=new (require('RelayRecordWriter'))(records,rootCallMap,false);
var tracker=new (require('RelayQueryTracker'))();


var firstQuery=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'123'}}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isRequisite:true},type:'String'},{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'actors',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true,isPlural:true},type:'Actor'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}());











var firstPayload={
node:{
id:'123',
__typename:'User',
actors:null}};


writePayload(store,writer,firstQuery,firstPayload,tracker);
var trackedQueries=tracker.trackNodeForID.mock.calls;
expect(trackedQueries.length).toBe(1);
expect(trackedQueries[0][1]).toBe('123');
expect(trackedQueries[0][0]).toEqualQueryRoot(firstQuery);



var secondQuery=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'123'}}],children:[{children:[{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'actors',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true,isPlural:true},type:'Actor'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}());










var diffQueries=require('diffRelayQuery')(secondQuery,store,tracker);
expect(diffQueries.length).toBe(0);


trackedQueries=tracker.trackNodeForID.mock.calls;
expect(trackedQueries.length).toBe(2);
expect(trackedQueries[1][1]).toBe('123');
expect(trackedQueries[1][0]).toEqualQueryRoot(secondQuery);});


it('tracks fragments on empty plural fields',function(){
var records={};
var store=new RelayRecordStore({records:records},{rootCallMap:rootCallMap});
var writer=new (require('RelayRecordWriter'))(records,rootCallMap,false);
var tracker=new (require('RelayQueryTracker'))();


var firstQuery=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'123'}}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isRequisite:true},type:'String'},{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'actors',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true,isPlural:true},type:'Actor'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}());











var firstPayload={
node:{
id:'123',
__typename:'User',
actors:[]}};


writePayload(store,writer,firstQuery,firstPayload,tracker);
var trackedQueries=tracker.trackNodeForID.mock.calls;
expect(trackedQueries.length).toBe(1);
expect(trackedQueries[0][1]).toBe('123');
expect(trackedQueries[0][0]).toEqualQueryRoot(firstQuery);



var secondQuery=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'123'}}],children:[{children:[{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'actors',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true,isPlural:true},type:'Actor'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'DiffRelayQuery',type:'Node'};}());










var diffQueries=require('diffRelayQuery')(secondQuery,store,tracker);
expect(diffQueries.length).toBe(0);


trackedQueries=tracker.trackNodeForID.mock.calls;
expect(trackedQueries.length).toBe(2);
expect(trackedQueries[1][1]).toBe('123');
expect(trackedQueries[1][0]).toEqualQueryRoot(secondQuery);});});
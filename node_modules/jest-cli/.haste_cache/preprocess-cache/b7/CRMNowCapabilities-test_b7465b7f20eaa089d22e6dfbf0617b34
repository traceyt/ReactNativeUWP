'use strict';






jest.dontMock('CRMNowCapabilities').
dontMock('CRMAPIObjectives').
dontMock('immutable');








var UNSUPPORTED_OBJECTIVE=require('CRMAPIObjectives').MOBILE_APP_INSTALLS;
var STORY_TYPE='Story';
var PAGE_TYPE='Page';
var UNSUPPORTED_PROMOTED_OBJECT_TYPE='Event';


var CAMPAIGN_GROUP_base=require('immutable').fromJS({
id:'wild id 3',
objective:require('CRMAPIObjectives').PAGE_LIKES});



var TRAGET_SPEC_base=require('immutable').fromJS({
client_can_edit:true,
geo_locations:{
edges:[
{
node:{
location_type:'haha'}}],



page_info:{
has_next_page:true}}});




var DEFAULT_VOICE_PAGE_base=require('immutable').fromJS({
node_id:'wild id 4',
node:{
id:'wild id 5',
name:'haha'}});



var CAMPAIGN_base=require('immutable').fromJS({
id:'wild id 2',
client_can_edit:true,
ad_campaign_group:CAMPAIGN_GROUP_base,
target_spec:TRAGET_SPEC_base,
default_voice_page:DEFAULT_VOICE_PAGE_base});



var PROMOTED_OBJECT_base=require('immutable').fromJS({
node_id:'wild id 6',
node:{
__type__:{
name:PAGE_TYPE}}});




var OBJECT_SOTRY_SPEC_base=require('immutable').fromJS({
link_data:{
name:'haha',
message:'haha',
link:'haha',
image_hash:'haha'}});



var CREATIVE_base=require('immutable').fromJS({
promoted_object:PROMOTED_OBJECT_base,
object_story_spec:OBJECT_SOTRY_SPEC_base,
body_text:'haha',
image_hash:'haha'});


var ADGROUP_base=require('immutable').fromJS({
id:'wild id 1',
client_can_edit:true,
ad_campaign:CAMPAIGN_base,
creative:CREATIVE_base,
client_can_create_similar:true,
create_similar_raw_spec:'haha'});


describe('CRMNowCapabilities',function(){
it('get if an objective is supported or not correctly ',function(){
expect(
require('CRMNowCapabilities').isCreateSimilarSupportedObjective()).
toBe(false);
expect(require('CRMNowCapabilities').isCreateSimilarSupportedObjective(
require('CRMAPIObjectives').PAGE_LIKES)).
toBe(true);
expect(require('CRMNowCapabilities').isCreateSimilarSupportedObjective(
UNSUPPORTED_OBJECTIVE)).
toBe(false);});


it('get if a promoted object is supported or not correctly',function(){
expect(require('CRMNowCapabilities').isPromotedObjectSupoorted(
require('CRMAPIObjectives').POST_ENGAGEMENT)).
toBe(false);
expect(require('CRMNowCapabilities').isPromotedObjectSupoorted(
require('CRMAPIObjectives').POST_ENGAGEMENT,
UNSUPPORTED_PROMOTED_OBJECT_TYPE)).
toBe(false);
expect(require('CRMNowCapabilities').isPromotedObjectSupoorted(
require('CRMAPIObjectives').POST_ENGAGEMENT,
STORY_TYPE)).
toBe(true);
expect(require('CRMNowCapabilities').isPromotedObjectSupoorted(
require('CRMAPIObjectives').WEBSITE_CLICKS)).
toBe(true);
expect(require('CRMNowCapabilities').isPromotedObjectSupoorted(
require('CRMAPIObjectives').WEBSITE_CLICKS,
STORY_TYPE)).
toBe(true);
expect(require('CRMNowCapabilities').isPromotedObjectSupoorted(
require('CRMAPIObjectives').LOCAL_AWARENESS)).
toBe(true);
expect(require('CRMNowCapabilities').isPromotedObjectSupoorted(
require('CRMAPIObjectives').LOCAL_AWARENESS,
PAGE_TYPE)).
toBe(true);
expect(require('CRMNowCapabilities').isPromotedObjectSupoorted(
require('CRMAPIObjectives').PAGE_LIKES)).
toBe(false);
expect(require('CRMNowCapabilities').isPromotedObjectSupoorted(
require('CRMAPIObjectives').PAGE_LIKES,
UNSUPPORTED_PROMOTED_OBJECT_TYPE)).
toBe(false);
expect(require('CRMNowCapabilities').isPromotedObjectSupoorted(
require('CRMAPIObjectives').PAGE_LIKES,
PAGE_TYPE)).
toBe(true);
expect(function(){return require('CRMNowCapabilities').isPromotedObjectSupoorted(
UNSUPPORTED_OBJECTIVE);}).
toThrow();});


it('get if a targeting spec is supported or not correctly',function(){
expect(require('CRMNowCapabilities').isSupportedTargetingSpecType({})).toBe(false);
expect(require('CRMNowCapabilities').isSupportedTargetingSpecType(
CAMPAIGN_base.toJS())).
toBe(true);});


it('get if apps can create similar ads or not correctly',function(){
expect(require('CRMNowCapabilities').canCreateSimilar()).toBe(false);
expect(
require('CRMNowCapabilities').canCreateSimilar(ADGROUP_base.toJS())).
toBe(true);


var ADGROUP_1=ADGROUP_base.setIn(
['ad_campaign','ad_campaign_group','objective'],
UNSUPPORTED_OBJECTIVE);

expect(
require('CRMNowCapabilities').canCreateSimilar(ADGROUP_1.toJS())).
toBe(false);


var ADGROUP_2=ADGROUP_base.deleteIn(['creative','promoted_object']);
expect(
require('CRMNowCapabilities').canCreateSimilar(ADGROUP_2.toJS())).
toBe(false);


var ADGROUP_3=ADGROUP_base.setIn(
['creative','promoted_object','node','__type__','name'],
UNSUPPORTED_PROMOTED_OBJECT_TYPE);

expect(
require('CRMNowCapabilities').canCreateSimilar(ADGROUP_3.toJS())).
toBe(false);


var ADGROUP_4=ADGROUP_base.setIn(
['client_can_create_similar'],
false);

expect(
require('CRMNowCapabilities').canCreateSimilar(ADGROUP_4.toJS())).
toBe(false);


var ADGROUP_5=ADGROUP_base.deleteIn(['create_similar_raw_spec']);
expect(
require('CRMNowCapabilities').canCreateSimilar(ADGROUP_5.toJS())).
toBe(false);});


it('get if apps can get default page correctly',function(){
expect(require('CRMNowCapabilities').canGetDefaultPage()).toBe(false);
expect(
require('CRMNowCapabilities').canGetDefaultPage(CAMPAIGN_base.toJS())).
toBe(true);


var CAMPAIGN_1=CAMPAIGN_base.deleteIn(['default_voice_page']);
expect(
require('CRMNowCapabilities').canGetDefaultPage(CAMPAIGN_1.toJS())).
toBe(false);


var CAMPAIGN_2=CAMPAIGN_base.deleteIn(
['default_voice_page','node']);

expect(
require('CRMNowCapabilities').canGetDefaultPage(CAMPAIGN_2.toJS())).
toBe(false);


var CAMPAIGN_3=CAMPAIGN_base.deleteIn(
['default_voice_page','node_id']);

expect(
require('CRMNowCapabilities').canGetDefaultPage(CAMPAIGN_3.toJS())).
toBe(false);});


it('get if apps can edit image or not correctly',function(){
expect(require('CRMNowCapabilities').canEditImage()).toBe(false);
expect(require('CRMNowCapabilities').canEditImage(ADGROUP_base.toJS())).toBe(true);


var ADGROUP_1=ADGROUP_base.setIn(
['ad_campaign','ad_campaign_group','objective'],
require('CRMAPIObjectives').POST_ENGAGEMENT);

expect(require('CRMNowCapabilities').canEditImage(ADGROUP_1.toJS())).toBe(false);


var ADGROUP_2=ADGROUP_base.setIn(
['ad_campaign','ad_campaign_group','objective'],
require('CRMAPIObjectives').WEBSITE_CONVERSIONS);

expect(require('CRMNowCapabilities').canEditImage(ADGROUP_2.toJS())).toBe(true);


var ADGROUP_3=ADGROUP_base.deleteIn(['creative']);
expect(require('CRMNowCapabilities').canEditImage(ADGROUP_3.toJS())).toBe(false);



var ADGROUP_4=ADGROUP_base.deleteIn(
['creative','body_text']);

expect(require('CRMNowCapabilities').canEditImage(ADGROUP_4.toJS())).toBe(false);



var ADGROUP_5=ADGROUP_base.
setIn(
['ad_campaign','ad_campaign_group','objective'],
require('CRMAPIObjectives').WEBSITE_CLICKS).

deleteIn(['creative','object_story_spec']);
expect(require('CRMNowCapabilities').canEditImage(ADGROUP_5.toJS())).toBe(false);



var ADGROUP_6=ADGROUP_base.
setIn(
['ad_campaign','ad_campaign_group','objective'],
require('CRMAPIObjectives').WEBSITE_CLICKS).

deleteIn(['creative','object_story_spec','link_data']);
expect(require('CRMNowCapabilities').canEditImage(ADGROUP_6.toJS())).toBe(false);



var ADGROUP_7=ADGROUP_base.
setIn(
['ad_campaign','ad_campaign_group','objective'],
require('CRMAPIObjectives').WEBSITE_CLICKS).

deleteIn(['creative','object_story_spec','link_data','image_hash']);
expect(require('CRMNowCapabilities').canEditImage(ADGROUP_7.toJS())).toBe(false);});


it('get if apps can edit creative or not correctly',function(){
expect(require('CRMNowCapabilities').canEditCreative()).toBe(false);
expect(
require('CRMNowCapabilities').canEditCreative(ADGROUP_base.toJS())).
toBe(true);


var ADGROUP_1=ADGROUP_base.setIn(
['ad_campaign','ad_campaign_group','objective'],
require('CRMAPIObjectives').POST_ENGAGEMENT);

expect(require('CRMNowCapabilities').canEditCreative(ADGROUP_1.toJS())).toBe(false);


var ADGROUP_3=ADGROUP_base.setIn(
['ad_campaign','ad_campaign_group','objective'],
require('CRMAPIObjectives').WEBSITE_CONVERSIONS);

expect(require('CRMNowCapabilities').canEditCreative(ADGROUP_3.toJS())).toBe(true);



var ADGROUP_4=ADGROUP_base.deleteIn(
['creative','image_hash']);

expect(require('CRMNowCapabilities').canEditCreative(ADGROUP_4.toJS())).toBe(false);



var ADGROUP_5=ADGROUP_base.deleteIn(
['creative','promoted_object']);

expect(require('CRMNowCapabilities').canEditCreative(ADGROUP_5.toJS())).toBe(false);



var ADGROUP_6=ADGROUP_base.deleteIn(
['creative','promoted_object','node_id']);

expect(require('CRMNowCapabilities').canEditCreative(ADGROUP_6.toJS())).toBe(false);



var ADGROUP_7=ADGROUP_base.
setIn(
['ad_campaign','ad_campaign_group','objective'],
require('CRMAPIObjectives').WEBSITE_CLICKS).

deleteIn(['creative','object_story_spec']);
expect(require('CRMNowCapabilities').canEditCreative(ADGROUP_7.toJS())).toBe(false);



var ADGROUP_8=ADGROUP_base.
setIn(
['ad_campaign','ad_campaign_group','objective'],
require('CRMAPIObjectives').WEBSITE_CLICKS).

deleteIn(['creative','object_story_spec','link_data']);
expect(require('CRMNowCapabilities').canEditCreative(ADGROUP_8.toJS())).toBe(false);



var ADGROUP_9=ADGROUP_base.
setIn(
['ad_campaign','ad_campaign_group','objective'],
require('CRMAPIObjectives').WEBSITE_CLICKS).

deleteIn(['creative','object_story_spec','link_data','message']);
expect(require('CRMNowCapabilities').canEditCreative(ADGROUP_9.toJS())).toBe(false);});


it('get if apps can edit audience or not correctly',function(){
expect(
require('CRMNowCapabilities').canEditAudience(CAMPAIGN_base.toJS())).
toBe(true);


var CAMPAIGN_1=CAMPAIGN_base.setIn(
['ad_campaign_group','objective'],
require('CRMAPIObjectives').BRAND_AWARENESS);

expect(require('CRMNowCapabilities').canEditAudience(CAMPAIGN_1.toJS())).toBe(false);


var CAMPAIGN_2=CAMPAIGN_base.deleteIn(['target_spec','geo_locations']);
expect(require('CRMNowCapabilities').canEditAudience(CAMPAIGN_2.toJS())).toBe(false);



var CAMPAIGN_3=CAMPAIGN_base.setIn(
['target_spec','client_can_edit'],
false);

expect(require('CRMNowCapabilities').canEditAudience(CAMPAIGN_3.toJS())).toBe(false);



var CAMPAIGN_4=CAMPAIGN_base.setIn(
['ad_campaign_group','objective'],
require('CRMAPIObjectives').LOCAL_AWARENESS);

expect(require('CRMNowCapabilities').canEditAudience(CAMPAIGN_4.toJS())).toBe(false);



var CAMPAIGN_5=CAMPAIGN_base.
setIn(
['ad_campaign_group','objective'],
require('CRMAPIObjectives').LOCAL_AWARENESS).
setIn(
['target_spec','geo_locations','edges','0','node','location_type'],
require('CRMNowLocations').CUSTOM_LOCATION);

expect(require('CRMNowCapabilities').canEditAudience(CAMPAIGN_5.toJS())).toBe(true);});


it('get if apps can edit an object or not correctly',function(){
var ADOBJECT_base={
client_can_edit:true};

var ADOBJECT_1={
client_can_edit:false};


expect(require('CRMNowCapabilities').canClientEditObject()).toBe(false);
expect(require('CRMNowCapabilities').canClientEditObject({})).toBe(false);
expect(require('CRMNowCapabilities').canClientEditObject(ADOBJECT_base)).toBe(true);
expect(require('CRMNowCapabilities').canClientEditObject(ADOBJECT_1)).toBe(false);});});
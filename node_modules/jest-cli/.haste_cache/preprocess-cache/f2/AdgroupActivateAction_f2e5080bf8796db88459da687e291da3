'use strict';















var AdgroupActivateAction={
handleSwitch:function(
adgroupID,
campaignID,
campaignGroupID,
isActivating,
onSuccess,
onFailure)
{
!
require('isValidRecordID')(adgroupID)?require('invariant')(0,
'Action taken on unknown adgroup '+adgroupID):undefined;


var mutationName=isActivating?
'adgroup_activate':
'adgroup_pause';

var mutationFrag=require('GraphQLMutationQueryCreator').createQuery(
mutationName,
{
adgroup:adgroupID,
ad_campaign:campaignID,
ad_campaign_group:campaignGroupID});



var mutation;
if(isActivating){
mutation=function(RQL_0){return {calls:[{kind:'Call',metadata:{},name:'adgroup_activate',value:{kind:'CallVariable',callVariableName:'input'}}],children:[].concat.apply([],[{fieldName:'client_mutation_id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},require('Relay').QL.__frag(RQL_0)]),kind:'Mutation',metadata:{inputType:'AdgroupActivateData!'},name:'AdgroupActivateAction',responseType:'AdgroupActivateResponsePayload'};}(


mutationFrag);}else 



{
mutation=function(RQL_0){return {calls:[{kind:'Call',metadata:{},name:'adgroup_pause',value:{kind:'CallVariable',callVariableName:'input'}}],children:[].concat.apply([],[{fieldName:'client_mutation_id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},require('Relay').QL.__frag(RQL_0)]),kind:'Mutation',metadata:{inputType:'AdgroupPauseData!'},name:'AdgroupActivateAction',responseType:'AdgroupPauseResponsePayload'};}(


mutationFrag);}





var action=new (require('AdsManagerMutationAction'))(
isActivating?
require('MobileAdsManagerLoggerConsts').events.ACTIVATE_ADGROUP:
require('MobileAdsManagerLoggerConsts').events.PAUSE_ADGROUP);



action.runOptimisticAction(
this._buildOptimisticPayload(adgroupID,isActivating));


action.runServerAction(
mutation,
{
adgroup_id:adgroupID},

function(err,response){
if(err){
onFailure(err);}else 
{
onSuccess(response);}



var id=action.getClientMutationID();
require('defaultRQLMutationCallback')(err,response,mutation,id);});},




_buildOptimisticPayload:function(adgroupID,isActivating){
var updatedAdgroup={
id:adgroupID,
run_status_info_with_flattening:{
is_active:isActivating}};



var payloadName=isActivating?
'adgroup_activate':
'adgroup_pause';
var result={};
result[payloadName]={
adgroup:updatedAdgroup};

return result;}};



module.exports=AdgroupActivateAction;
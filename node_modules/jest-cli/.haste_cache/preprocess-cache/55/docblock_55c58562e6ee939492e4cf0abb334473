'use strict';











var docblockRe=/^\s*(\/\*\*(.|\r?\n)*?\*\/)/;
var ltrimRe=/^\s*/;




function extract(contents){
var match=contents.match(docblockRe);
if(match){
return match[0].replace(ltrimRe,'')||'';}

return '';}


var commentStartRe=/^\/\*\*?/;
var commentEndRe=/\*+\/$/;
var wsRe=/[\t ]+/g;
var stringStartRe=/(\r?\n|^) *\*/g;
var multilineRe=/(?:^|\r?\n) *(@[^\r\n]*?) *\r?\n *([^@\r\n\s][^@\r\n]+?) *\r?\n/g;
var propertyRe=/(?:^|\r?\n) *@(\S+) *([^\r\n]*)/g;




function getFromState(state){
var docblock=state.get('docblock');
if(!docblock){
docblock={};
if(state.file.ast.comments&&state.file.ast.comments[0]){
docblock=parseAsObject(state.file.ast.comments[0].value);}

state.set('docblock',docblock);}

return docblock;}






function parse(docblock){
docblock=docblock.
replace(commentStartRe,'').
replace(commentEndRe,'').
replace(wsRe,' ').
replace(stringStartRe,'$1');


var prev='';
while(prev!=docblock){
prev=docblock;
docblock=docblock.replace(multilineRe,"\n$1 $2\n");}

docblock=docblock.trim();

var result=[];
var match;
while(match=propertyRe.exec(docblock)){
result.push([match[1],match[2]]);}


return result;}









function parseAsObject(docblock){
var pairs=parse(docblock);
var result={};
for(var i=0;i<pairs.length;i++){
result[pairs[i][0]]=pairs[i][1];}

return result;}



var paramRe=/^\{([^\}]+)\} ([^ ]+)/;
var returnsRe=/^\{([^\}]+)\}/;








function parseTypeData(docblock){
var data={
params:{},
returns:undefined};

var list=parse(docblock);
for(var ii=0;ii<list.length;++ii){
switch(list[ii][0]){
case 'param':
var paramData=paramRe.exec(list[ii][1]);
if(paramData){
data.params[paramData[2]]=paramData[1];}

break;
case 'returns':
case 'return':
var returnData=returnsRe.exec(list[ii][1]);
if(returnData){
data.returns=returnData[1];}

break;}}


return data;}


exports.extract=extract;
exports.parse=parse;
exports.parseAsObject=parseAsObject;
exports.parseTypeData=parseTypeData;
exports.getFromState=getFromState;
'use strict';











var FileWatcher=require('node-haste').FileWatcher;
var getPlatformExtension=require('node-haste').getPlatformExtension;








var validateOpts=require('../lib/declareOpts')({
projectRoots:{
type:'array',
required:true},

blacklistRE:{
type:'object'},

moduleFormat:{
type:'string',
default:'haste'},

polyfillModuleNames:{
type:'array',
default:[]},

cacheVersion:{
type:'string',
default:'1.0'},

resetCache:{
type:'boolean',
default:false},

transformModulePath:{
type:'string',
required:false},

nonPersistent:{
type:'boolean',
default:false},

assetRoots:{
type:'array',
required:false},

assetExts:{
type:'array',
default:[
'bmp','gif','jpg','jpeg','png','psd','svg','webp',
'm4v','mov','mp4','mpeg','mpg','webm',
'aac','aiff','caf','m4a','mp3','wav',
'html']},


transformTimeoutInterval:{
type:'number',
required:false},

getTransformOptionsModulePath:{
type:'string',
required:false}});



var bundleOpts=require('../lib/declareOpts')({
sourceMapUrl:{
type:'string',
required:false},

entryFile:{
type:'string',
required:true},

dev:{
type:'boolean',
default:true},

minify:{
type:'boolean',
default:false},

runModule:{
type:'boolean',
default:true},

inlineSourceMap:{
type:'boolean',
default:false},

platform:{
type:'string',
required:true},

runBeforeMainModule:{
type:'array',
default:[

'InitializeJavaScriptAppEngine']},


unbundle:{
type:'boolean',
default:false},

hot:{
type:'boolean',
default:false},

entryModuleOnly:{
type:'boolean',
default:false}});



var dependencyOpts=require('../lib/declareOpts')({
platform:{
type:'string',
required:true},

dev:{
type:'boolean',
default:true},

entryFile:{
type:'string',
required:true},

recursive:{
type:'boolean',
default:true},

hot:{
type:'boolean',
default:false}});var 



Server=function(){
function Server(options){var _this=this;babelHelpers.classCallCheck(this,Server);
var opts=validateOpts(options);

this._projectRoots=opts.projectRoots;
this._bundles=Object.create(null);
this._changeWatchers=[];
this._fileChangeListeners=[];

var assetGlobs=opts.assetExts.map(function(ext){return '**/*.'+ext;});

var watchRootConfigs=opts.projectRoots.map(function(dir){
return {
dir:dir,
globs:[
'**/*.js',
'**/*.json'].
concat(assetGlobs)};});



if(opts.assetRoots!=null){
watchRootConfigs=watchRootConfigs.concat(
opts.assetRoots.map(function(dir){
return {
dir:dir,
globs:assetGlobs};}));}





this._fileWatcher=options.nonPersistent?
FileWatcher.createDummyWatcher():
new FileWatcher(watchRootConfigs,{useWatchman:true});

this._assetServer=new (require('../AssetServer'))({
projectRoots:opts.projectRoots,
assetExts:opts.assetExts});


var bundlerOpts=Object.create(opts);
bundlerOpts.fileWatcher=this._fileWatcher;
bundlerOpts.assetServer=this._assetServer;
this._bundler=new (require('../Bundler'))(bundlerOpts);

this._fileWatcher.on('all',this._onFileChange.bind(this));

this._debouncedFileChangeHandler=require('underscore').debounce(function(filePath){
_this._clearBundles();
_this._informChangeWatchers();},
50);}babelHelpers.createClass(Server,[{key:'end',value:function end()


{
require('promise').all([
this._fileWatcher.end(),
this._bundler.kill()]);}},{key:'setHMRFileChangeListener',value:function setHMRFileChangeListener(



listener){
this._hmrFileChangeListener=listener;}},{key:'buildBundle',value:function buildBundle(


options){var _this2=this;
return require('promise').resolve().then(function(){
if(!options.platform){
options.platform=getPlatformExtension(options.entryFile);}


var opts=bundleOpts(options);
return _this2._bundler.bundle(opts);});}},{key:'buildPrepackBundle',value:function buildPrepackBundle(



options){var _this3=this;
return require('promise').resolve().then(function(){
if(!options.platform){
options.platform=getPlatformExtension(options.entryFile);}


var opts=bundleOpts(options);
return _this3._bundler.prepackBundle(opts);});}},{key:'buildBundleFromUrl',value:function buildBundleFromUrl(



reqUrl){
var options=this._getOptionsFromUrl(reqUrl);
return this.buildBundle(options);}},{key:'buildBundleForHMR',value:function buildBundleForHMR(


modules,host,port){
return this._bundler.hmrBundle(modules,host,port);}},{key:'getShallowDependencies',value:function getShallowDependencies(


entryFile){
return this._bundler.getShallowDependencies(entryFile);}},{key:'getModuleForPath',value:function getModuleForPath(


entryFile){
return this._bundler.getModuleForPath(entryFile);}},{key:'getDependencies',value:function getDependencies(


options){var _this4=this;
return require('promise').resolve().then(function(){
if(!options.platform){
options.platform=getPlatformExtension(options.entryFile);}


var opts=dependencyOpts(options);
return _this4._bundler.getDependencies(opts);});}},{key:'getOrderedDependencyPaths',value:function getOrderedDependencyPaths(



options){var _this5=this;
return require('promise').resolve().then(function(){
var opts=dependencyOpts(options);
return _this5._bundler.getOrderedDependencyPaths(opts);});}},{key:'_onFileChange',value:function _onFileChange(



type,filepath,root){
var absPath=require('path').join(root,filepath);
this._bundler.invalidateFile(absPath);




if(this._hmrFileChangeListener){

this._clearBundles();
this._hmrFileChangeListener(absPath,this._bundler.stat(absPath));
return;}




this._debouncedFileChangeHandler(absPath);}},{key:'_clearBundles',value:function _clearBundles()


{
this._bundles=Object.create(null);}},{key:'_informChangeWatchers',value:function _informChangeWatchers()


{
var watchers=this._changeWatchers;
var headers={
'Content-Type':'application/json; charset=UTF-8'};


watchers.forEach(function(w){
w.res.writeHead(205,headers);
w.res.end(JSON.stringify({changed:true}));});


this._changeWatchers=[];}},{key:'_processDebugRequest',value:function _processDebugRequest(


reqUrl,res){var _this6=this;
var ret='<!doctype html>';
var pathname=require('url').parse(reqUrl).pathname;
var parts=pathname.split('/').filter(Boolean);
if(parts.length===1){
ret+='<div><a href="/debug/bundles">Cached Bundles</a></div>';
ret+='<div><a href="/debug/graph">Dependency Graph</a></div>';
res.end(ret);}else 
if(parts[1]==='bundles'){
ret+='<h1> Cached Bundles </h1>';
require('promise').all(Object.keys(this._bundles).map(function(optionsJson){return (
_this6._bundles[optionsJson].then(function(p){
ret+='<div><h2>'+optionsJson+'</h2>';
ret+=p.getDebugInfo();}));})).

then(
function(){return res.end(ret);},
function(e){
res.writeHead(500);
res.end('Internal Error');
console.log(e.stack);});}else 


if(parts[1]==='graph'){
ret+='<h1> Dependency Graph </h2>';
ret+=this._bundler.getGraphDebugInfo();
res.end(ret);}else 
{
res.writeHead('404');
res.end('Invalid debug request');
return;}}},{key:'_processOnChangeRequest',value:function _processOnChangeRequest(



req,res){
var watchers=this._changeWatchers;

watchers.push({
req:req,
res:res});


req.on('close',function(){
for(var i=0;i<watchers.length;i++){
if(watchers[i]&&watchers[i].req===req){
watchers.splice(i,1);
break;}}});}},{key:'_processAssetsRequest',value:function _processAssetsRequest(





req,res){
var urlObj=require('url').parse(req.url,true);
var assetPath=urlObj.pathname.match(/^\/assets\/(.+)$/);
var assetEvent=require('../Activity').startEvent('processing asset request '+assetPath[1]);
this._assetServer.get(assetPath[1],urlObj.query.platform).
then(
function(data){return res.end(data);},
function(error){
console.error(error.stack);
res.writeHead('404');
res.end('Asset not found');}).

done(function(){return require('../Activity').endEvent(assetEvent);});}},{key:'processRequest',value:function processRequest(


req,res,next){
var urlObj=require('url').parse(req.url,true);
var pathname=urlObj.pathname;

var requestType;
if(pathname.match(/\.bundle$/)){
requestType='bundle';}else 
if(pathname.match(/\.map$/)){
requestType='map';}else 
if(pathname.match(/\.assets$/)){
requestType='assets';}else 
if(pathname.match(/^\/debug/)){
this._processDebugRequest(req.url,res);
return;}else 
if(pathname.match(/^\/onchange\/?$/)){
this._processOnChangeRequest(req,res);
return;}else 
if(pathname.match(/^\/assets\//)){
this._processAssetsRequest(req,res);
return;}else 
{
next();
return;}


var startReqEventId=require('../Activity').startEvent('request:'+req.url);
var options=this._getOptionsFromUrl(req.url);
var optionsJson=JSON.stringify(options);
var building=this._bundles[optionsJson]||this.buildBundle(options);

this._bundles[optionsJson]=building;
building.then(
function(p){
if(requestType==='bundle'){
var bundleSource=p.getSource({
inlineSourceMap:options.inlineSourceMap,
minify:options.minify,
dev:options.dev});

res.setHeader('Content-Type','application/javascript');
res.setHeader('ETag',p.getEtag());
if(req.headers['if-none-match']===res.getHeader('ETag')){
res.statusCode=304;
res.end();}else 
{
res.end(bundleSource);}

require('../Activity').endEvent(startReqEventId);}else 
if(requestType==='map'){
var sourceMap=p.getSourceMap({
minify:options.minify,
dev:options.dev});


if(typeof sourceMap!=='string'){
sourceMap=JSON.stringify(sourceMap);}


res.setHeader('Content-Type','application/json');
res.end(sourceMap);
require('../Activity').endEvent(startReqEventId);}else 
if(requestType==='assets'){
var assetsList=JSON.stringify(p.getAssets());
res.setHeader('Content-Type','application/json');
res.end(assetsList);
require('../Activity').endEvent(startReqEventId);}},


this._handleError.bind(this,res,optionsJson)).
done();}},{key:'_handleError',value:function _handleError(


res,bundleID,error){
res.writeHead(error.status||500,{
'Content-Type':'application/json; charset=UTF-8'});


if(error.type==='TransformError'||
error.type==='NotFoundError'||
error.type==='UnableToResolveError'){
error.errors=[{
description:error.description,
filename:error.filename,
lineNumber:error.lineNumber}];

res.end(JSON.stringify(error));

if(error.type==='NotFoundError'){
delete this._bundles[bundleID];}}else 

{
console.error(error.stack||error);
res.end(JSON.stringify({
type:'InternalError',
message:'react-packager has encountered an internal error, '+
'please check your terminal error output for more details'}));}}},{key:'_getOptionsFromUrl',value:function _getOptionsFromUrl(




reqUrl){

var urlObj=require('url').parse(reqUrl,true);

urlObj.query=urlObj.query||{};

var pathname=decodeURIComponent(urlObj.pathname);



var entryFile=pathname.replace(/^\//,'').split('.').filter(function(part){
if(part==='includeRequire'||part==='runModule'||
part==='bundle'||part==='map'||part==='assets'){
return false;}

return true;}).
join('.')+'.js';

var sourceMapUrlObj=require('underscore').clone(urlObj);
sourceMapUrlObj.pathname=pathname.replace(/\.bundle$/,'.map');


var platform=urlObj.query.platform||
getPlatformExtension(pathname);

return {
sourceMapUrl:require('url').format(sourceMapUrlObj),
entryFile:entryFile,
dev:this._getBoolOptionFromQuery(urlObj.query,'dev',true),
minify:this._getBoolOptionFromQuery(urlObj.query,'minify'),
hot:this._getBoolOptionFromQuery(urlObj.query,'hot',false),
runModule:this._getBoolOptionFromQuery(urlObj.query,'runModule',true),
inlineSourceMap:this._getBoolOptionFromQuery(
urlObj.query,
'inlineSourceMap',
false),

platform:platform,
entryModuleOnly:this._getBoolOptionFromQuery(
urlObj.query,
'entryModuleOnly',
false)};}},{key:'_getBoolOptionFromQuery',value:function _getBoolOptionFromQuery(




query,opt,defaultVal){
if(query[opt]==null&&defaultVal!=null){
return defaultVal;}


return query[opt]==='true'||query[opt]==='1';}}]);return Server;}();



module.exports=Server;
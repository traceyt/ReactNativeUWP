'use strict';var 







AdsManagerBaseStore=function(){
function AdsManagerBaseStore(){babelHelpers.classCallCheck(this,AdsManagerBaseStore);
this.$AdsManagerBaseStore_eventEmitter=new (require('EventEmitter'))();
this.subscribe=this.$AdsManagerBaseStore_mockMethod(this.subscribe);
this.inform=this.$AdsManagerBaseStore_mockMethod(this.inform);
this.__emitChange=this.$AdsManagerBaseStore_mockMethod(this.__emitChange);
this.__dispatcher=jest.genMockFromModule('AdsManagerDispatcher');
this.getDispatchToken=jest.genMockFunction();}babelHelpers.createClass(AdsManagerBaseStore,[{key:'subscribe',value:function subscribe(


type,callback){
this.$AdsManagerBaseStore_eventEmitter.addListener(type,callback);}},{key:'inform',value:function inform(


type,data){
this.$AdsManagerBaseStore_eventEmitter.emit(type,data);}},{key:'mockActionToResetEveryThing',value:function mockActionToResetEveryThing()


{
this.mockAction(require('AdsManagerActionTypes').RESET_EVERYTHING);}},{key:'mockAction',value:function mockAction(


actionType,data){
var payload={
action:babelHelpers.extends({
actionType:actionType},
data)};


this.onDispatchToken&&this.onDispatchToken(payload);}},{key:'$AdsManagerBaseStore_mockMethod',value:function $AdsManagerBaseStore_mockMethod(


impl){
return jest.genMockFunction().mockImpl(impl.bind(this));}},{key:'__emitChange',value:function __emitChange()


{}}]);return AdsManagerBaseStore;}();




module.exports=AdsManagerBaseStore;
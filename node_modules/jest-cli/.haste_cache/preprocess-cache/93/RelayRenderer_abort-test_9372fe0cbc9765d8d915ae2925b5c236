/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails oncall+relay
 */

'use strict';

require('configureForRelayOSS');

jest.dontMock('RelayRenderer');








describe('RelayRenderer.abort', function () {
  var MockComponent = undefined;
  var MockContainer = undefined;

  beforeEach(function () {
    jest.resetModuleRegistry();

    MockComponent = require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createClass({ displayName: 'MockComponent', render: function () {return require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement('div', null);} });
    MockContainer = require('Relay').createContainer(MockComponent, { 
      fragments: {} });


    var container = document.createElement('div');

    function render() {
      var queryConfig = require('RelayQueryConfig').genMockInstance();
      require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react-dom').render(
      require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(require('RelayRenderer'), { Container: MockContainer, queryConfig: queryConfig }), 
      container);

      var index = require('RelayStore').primeCache.mock.calls.length - 1;
      return { 
        abort: require('RelayStore').primeCache.mock.abort[index], 
        request: require('RelayStore').primeCache.mock.requests[index] };}


    jasmine.addMatchers({ 
      toAbortOnUpdate: function () {
        return { 
          compare: function (actual) {var _render = 
            render();var abort = _render.abort;var request = _render.request;
            actual(request);
            render();
            return { 
              pass: abort.mock.calls.length > 0 };} };}, 




      toAbortOnUnmount: function () {
        return { 
          compare: function (actual) {var _render2 = 
            render();var abort = _render2.abort;var request = _render2.request;
            actual(request);
            require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react-dom').unmountComponentAtNode(container);
            return { 
              pass: abort.mock.calls.length > 0 };} };} });});







  it('aborts synchronously initiated queries', function () {
    function synchronousQueries(request) {
      // Requests are always asynchronous, so do nothing.
    }
    expect(synchronousQueries).toAbortOnUpdate();
    expect(synchronousQueries).toAbortOnUnmount();});


  it('aborts blocked queries', function () {
    function blockedQueries(request) {
      // Queries are blocked on asynchronous requests.
      request.block();}

    expect(blockedQueries).toAbortOnUpdate();
    expect(blockedQueries).toAbortOnUnmount();});


  it('aborts queries with fulfilled dependencies', function () {
    function readyQueries(request) {
      request.block();
      request.resolve();}

    expect(readyQueries).toAbortOnUpdate();
    expect(readyQueries).toAbortOnUnmount();});


  it('does not abort failed queries', function () {
    function failedQueries(request) {
      request.fail(new Error());}

    expect(failedQueries).not.toAbortOnUpdate();
    expect(failedQueries).not.toAbortOnUnmount();});


  it('does not abort completed queries', function () {
    function completedQueries(request) {
      request.block();
      request.resolve();
      request.succeed();}

    expect(completedQueries).not.toAbortOnUpdate();
    expect(completedQueries).not.toAbortOnUnmount();});});
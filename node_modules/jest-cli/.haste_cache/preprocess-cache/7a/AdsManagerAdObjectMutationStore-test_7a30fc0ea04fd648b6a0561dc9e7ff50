'use strict';






jest.dontMock('AdsManagerAdObjectMutationStore');

















var TEST_MUTATION_ID='TEST_MUTATION_ID';
var TEST_OBJECT_ID='TEST_OBJECT_ID';
var TEST_CAMPAIGN_ID='TEST_CAMPAIGN_ID';
var TEST_CAMPAIGN_GROUP_ID='TEST_CAMPAIGN_GROUP_ID';

var TEST_RESPONSE={};
var TEST_ERROR={code:-1};

var TEST_ADOBJECT_NAME='TEST_ADOBJECT_NAME';

var TEST_AUDIENCE_ID='TEST_AUDIENCE_ID';
var TEST_PREV_AUDIENCE_ID='TEST_PREV_AUDIENCE_ID';
var TEST_AUDIENCE_NAME='TEST_AUDIENCE_NAME';
var TEST_TARGETING_SPEC={};

var TEST_BUDGET_TYPE='TEST_BUDGET_TYPE';
var TEST_BUDGET=1234;
var TEST_START_DATE=123456789;
var TEST_END_DATE=987654321;

var TEST_CREATIVE_SPEC='TEST_CREATIVE_SPEC';
var TEST_BODY_TEXT='TEST_BODY_TEXT';
var TEST_IMAGE_URI='TEST_IMAGE_URI';
var TEST_IMAGE_HASH='TEST_IMAGE_HASH';

function testSingleMutation(
specialOptions,
actionName,
actionFunction)
{
var onSuccess=jest.genMockFn();
var onFailure=jest.genMockFn();
var options=babelHelpers.extends({},
specialOptions,{
id:TEST_MUTATION_ID,
onSuccess:onSuccess,
onFailure:onFailure});

var specialOptionKeys=Object.keys(specialOptions);


require('AdsManagerAdObjectMutationStore')[actionName](options);
expect(actionFunction.mock.calls.length).toBe(1);
var actionFunctionArgumentsLength=actionFunction.mock.calls[0].length;
for(var i=0;i<actionFunctionArgumentsLength-2;i++){
expect(actionFunction.mock.calls[0][i]).toBe(
specialOptions[specialOptionKeys[i]]);}



var _onSuccess=
actionFunction.mock.calls[0][actionFunctionArgumentsLength-2];
var _onFailure=
actionFunction.mock.calls[0][actionFunctionArgumentsLength-1];

expect(typeof _onSuccess).toBe('function');
expect(typeof _onFailure).toBe('function');
expect(require('AdsManagerAdObjectMutationStore').isPending(TEST_MUTATION_ID)).
toBe(true);

var mutation=require('AdsManagerAdObjectMutationStore').getMutation(TEST_MUTATION_ID);

expect(mutation).not.toBe(null);
expect(mutation.getID()).toBe(TEST_MUTATION_ID);
expect(mutation.getObjectID()).toBe(TEST_OBJECT_ID);
expect(mutation.getResponse()).toBeNull();
expect(mutation.getError()).toBeNull();
expect(mutation.getStatus()).
toBe(require('AdsManagerAdObjectMutationStore').MutationStatus.PENDING);


_onSuccess(TEST_RESPONSE);
expect(require('AdsManagerAdObjectMutationStore').isPending(TEST_MUTATION_ID)).
toBe(false);
expect(mutation.getResponse()).toBe(TEST_RESPONSE);
expect(mutation.getError()).toBeNull();
expect(mutation.getStatus()).
toBe(require('AdsManagerAdObjectMutationStore').MutationStatus.SUCCESS);
expect(onSuccess.mock.calls.length).toBe(1);


require('AdsManagerAdObjectMutationStore')[actionName](options);
expect(require('AdsManagerAdObjectMutationStore').isPending(TEST_MUTATION_ID)).
toBe(true);

mutation=require('AdsManagerAdObjectMutationStore').getMutation(TEST_MUTATION_ID);
expect(mutation.getResponse()).toBeNull();
expect(mutation.getError()).toBeNull();
expect(mutation.getStatus()).
toBe(require('AdsManagerAdObjectMutationStore').MutationStatus.PENDING);


_onFailure(TEST_ERROR);
expect(require('AdsManagerAdObjectMutationStore').isPending(TEST_MUTATION_ID)).
toBe(false);
expect(mutation.getResponse()).toBeNull();
expect(mutation.getError()).toBe(TEST_ERROR);
expect(mutation.getStatus()).
toBe(require('AdsManagerAdObjectMutationStore').MutationStatus.FAILED);
expect(onFailure.mock.calls.length).toBe(1);
expect(onFailure.mock.calls[0][0]).toBe(TEST_ERROR);
expect(require('AdsManagerNavigationEventEmitter').globalError.mock.calls.length).
toBe(1);
expect(require('AdsManagerNavigationEventEmitter').globalError.mock.calls[0][0]).
not.toBe(null);}


describe('AdsManagerAdObjectMutationStore test',function(){




it(
'should handle activate adgroup and parents run status correctly',
function(){
testSingleMutation(
{
objectID:TEST_OBJECT_ID,
campaignID:TEST_CAMPAIGN_ID,
campaignGroupID:TEST_CAMPAIGN_GROUP_ID},

'activateAdgroupAndParentsRunStatus',
require('AdgroupAndParentsActivateAction').handleSwitch);});




it('should edit campaign group run status correctly',function(){
testSingleMutation(
{
objectID:TEST_OBJECT_ID,
isActivating:true,
level:require('AdObjectLevels').CAMPAIGN_GROUP},

'editAdObjectRunStatus',
require('AdCampaignGroupActivateAction').handleSwitch);});



it('should edit campaign run status correctly',function(){
testSingleMutation(
{
objectID:TEST_OBJECT_ID,
campaignGroupID:TEST_CAMPAIGN_GROUP_ID,
isActivating:true,
level:require('AdObjectLevels').CAMPAIGN},

'editAdObjectRunStatus',
require('AdCampaignActivateAction').handleSwitch);});



it('should edit adgroup run status correctly',function(){
testSingleMutation(
{
objectID:TEST_OBJECT_ID,
campaignID:TEST_CAMPAIGN_ID,
campaignGroupID:TEST_CAMPAIGN_GROUP_ID,
isActivating:true,
level:require('AdObjectLevels').ADGROUP},

'editAdObjectRunStatus',
require('AdgroupActivateAction').handleSwitch);});






it('should edit ad object name correctly',function(){
testSingleMutation(
{
level:require('AdObjectLevels').CAMPAIGN_GROUP,
objectID:TEST_OBJECT_ID,
name:TEST_ADOBJECT_NAME},

'editName',
require('AdsManagerEditNameAction').editName);});






it('should edit campaign targeting correctly',function(){
testSingleMutation(
{
objectID:TEST_OBJECT_ID,
campaignGroupID:TEST_CAMPAIGN_GROUP_ID,
previousAudienceID:TEST_PREV_AUDIENCE_ID,
spec:TEST_TARGETING_SPEC},

'editAdCampaignTargeting',
require('AdCampaignEditAction').editTargetSpec);});



it('should create and save new audience to campaign correctly',function(){
testSingleMutation(
{
campaignID:TEST_CAMPAIGN_ID,
campaignGroupID:TEST_CAMPAIGN_GROUP_ID,
name:TEST_AUDIENCE_NAME,
targetSpec:TEST_TARGETING_SPEC,
objectID:TEST_OBJECT_ID},

'createAndSaveNewAudienceToCampaign',
require('AdCampaignEditAction').createAndSaveNewAudienceToCampaign);});



it('should edit campaign audience correctly',function(){
testSingleMutation(
{
objectID:TEST_OBJECT_ID,
campaignGroupID:TEST_CAMPAIGN_GROUP_ID,
previousAudienceID:TEST_PREV_AUDIENCE_ID,
audienceID:TEST_AUDIENCE_ID},

'editAdCampaignAudience',
require('AdCampaignEditAction').editAudience);});



it('should edit ad account audience correctly',function(){
testSingleMutation(
{
objectID:TEST_OBJECT_ID,
name:TEST_AUDIENCE_NAME,
spec:TEST_TARGETING_SPEC},

'editAudience',
require('AdAccountEditAudienceAction').editAudience);});



it('should create new audience correctly',function(){
testSingleMutation(
{
objectID:TEST_OBJECT_ID,
name:TEST_AUDIENCE_NAME,
spec:TEST_TARGETING_SPEC},

'createNewAudience',
require('AdAccountCreateAudienceAction').createAudience);});






it('should edit campaign budget schedule correctly',function(){
testSingleMutation(
{
objectID:TEST_OBJECT_ID,
campaignGroupID:TEST_CAMPAIGN_GROUP_ID,
budgetType:TEST_BUDGET_TYPE,
budget:TEST_BUDGET,
startDateISO:TEST_START_DATE,
endDateISO:TEST_END_DATE},

'editAdCampaignBudgetAndSchedule',
require('AdCampaignEditAction').editBudgetAndSchedule);});






it('should edit adgroup image correctly',function(){
require('AdsManagerImageUploadController').cropAndUpload.mockImpl(
function(accountID,legacyAccountID,imageURI,imageTransformData,callbacks){
callbacks.onUploadSucceeded(TEST_IMAGE_HASH);});


require('AdsManagerCreativeUtils').updateCreativeSpecWithImageHash.mockReturnValue(
TEST_CREATIVE_SPEC);

testSingleMutation(
{
objectID:TEST_OBJECT_ID,
spec:TEST_CREATIVE_SPEC},

'editAdgroupImage',
require('AdgroupEditAction').editCreativeSpec);

expect(require('AdsManagerImageUploadController').cropAndUpload.mock.calls.length).
toBe(2);
expect(
require('AdsManagerCreativeUtils').updateCreativeSpecWithImageHash.mock.calls.length).
toBe(2);});


it('should edit adgroup creative correctly',function(){
testSingleMutation(
{
objectID:TEST_OBJECT_ID,
spec:TEST_CREATIVE_SPEC},

'editAdgroupCreative',
require('AdgroupEditAction').editCreativeSpec);});



it('should create new post correctly',function(){
testSingleMutation(
{
objectID:TEST_OBJECT_ID,
bodyText:TEST_BODY_TEXT,
imageURI:TEST_IMAGE_URI},

'createNewPost',
require('AdsManagerCreatePostAction').createPost);});






it('should handle multiple mutations correctly',function(){
var editCampaignGroupNameOptions={
id:TEST_MUTATION_ID+'_CAMPAIGN_GROUP',
level:require('AdObjectLevels').CAMPAIGN_GROUP,
objectID:TEST_OBJECT_ID+'_CAMPAIGN_GROUP',
name:TEST_ADOBJECT_NAME+'_CAMPAIGN_GROUP',
onSuccess:jest.genMockFn(),
onFailure:jest.genMockFn()};

var editCampaignNameOptions={
id:TEST_MUTATION_ID+'_CAMPAIGN',
level:require('AdObjectLevels').CAMPAIGN,
objectID:TEST_OBJECT_ID+'_CAMPAIGN',
name:TEST_ADOBJECT_NAME+'_CAMPAIGN',
onSuccess:jest.genMockFn(),
onFailure:jest.genMockFn()};

var editAdgroupNameOptions={
id:TEST_MUTATION_ID+'_ADGROUP',
level:require('AdObjectLevels').ADGROUP,
objectID:TEST_OBJECT_ID+'_ADGROUP',
name:TEST_ADOBJECT_NAME+'_ADGROUP',
onSuccess:jest.genMockFn(),
onFailure:jest.genMockFn()};



require('AdsManagerAdObjectMutationStore').editName(editCampaignGroupNameOptions);
expect(require('AdsManagerEditNameAction').editName.mock.calls.length).toBe(1);
expect(require('AdsManagerEditNameAction').editName.mock.calls[0][0]).
toBe(require('AdObjectLevels').CAMPAIGN_GROUP);
expect(
require('AdsManagerAdObjectMutationStore').isPending(editCampaignGroupNameOptions.id)).
toBe(true);
var argumentsLength=
require('AdsManagerEditNameAction').editName.mock.calls[0].length;
var editCampaignGroupNameOnSuccess=
require('AdsManagerEditNameAction').editName.mock.calls[0][argumentsLength-2];


require('AdsManagerAdObjectMutationStore').editName(editCampaignNameOptions);
expect(require('AdsManagerEditNameAction').editName.mock.calls.length).toBe(2);
expect(require('AdsManagerEditNameAction').editName.mock.calls[1][0]).
toBe(require('AdObjectLevels').CAMPAIGN);
expect(
require('AdsManagerAdObjectMutationStore').isPending(editCampaignNameOptions.id)).
toBe(true);
var editCampaignNameOnSuccess=
require('AdsManagerEditNameAction').editName.mock.calls[1][argumentsLength-2];


editCampaignGroupNameOnSuccess({});
expect(
require('AdsManagerAdObjectMutationStore').isPending(editCampaignGroupNameOptions.id)).
toBe(false);
expect(
require('AdsManagerAdObjectMutationStore').isPending(editCampaignNameOptions.id)).
toBe(true);
expect(editCampaignGroupNameOptions.onSuccess.mock.calls.length).toBe(1);


require('AdsManagerAdObjectMutationStore').editName(editAdgroupNameOptions);
expect(require('AdsManagerEditNameAction').editName.mock.calls.length).toBe(3);
expect(require('AdsManagerEditNameAction').editName.mock.calls[2][0]).
toBe(require('AdObjectLevels').ADGROUP);
expect(
require('AdsManagerAdObjectMutationStore').isPending(editAdgroupNameOptions.id)).
toBe(true);
var editAdgroupNameOnSuccess=
require('AdsManagerEditNameAction').editName.mock.calls[2][argumentsLength-2];


editAdgroupNameOnSuccess({});
expect(
require('AdsManagerAdObjectMutationStore').isPending(editAdgroupNameOptions.id)).
toBe(false);
expect(
require('AdsManagerAdObjectMutationStore').isPending(editCampaignNameOptions.id)).
toBe(true);
expect(editAdgroupNameOptions.onSuccess.mock.calls.length).toBe(1);


editCampaignNameOnSuccess({});
expect(
require('AdsManagerAdObjectMutationStore').isPending(editCampaignNameOptions.id)).
toBe(false);
expect(editCampaignNameOptions.onSuccess.mock.calls.length).toBe(1);});});
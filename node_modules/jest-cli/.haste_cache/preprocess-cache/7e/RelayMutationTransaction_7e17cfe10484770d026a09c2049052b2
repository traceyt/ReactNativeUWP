/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule RelayMutationTransaction
 * @typechecks
 * 
 */

'use strict';function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError('Cannot call a class as a function');}}







/**
 * @internal
 */var 
RelayMutationTransaction = (function () {



  function RelayMutationTransaction(mutationQueue, id) {_classCallCheck(this, RelayMutationTransaction);
    this._id = id;
    this._mutationQueue = mutationQueue;}RelayMutationTransaction.prototype.


  commit = function commit() {
    var status = this.getStatus();
    require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/invariant')(
    status === require('RelayMutationTransactionStatus').UNCOMMITTED, 
    'RelayMutationTransaction: Only transactions with status `UNCOMMITTED` ' + 
    'can be comitted.');


    this._mutationQueue.commit(this._id);};RelayMutationTransaction.prototype.


  recommit = function recommit() {
    var status = this.getStatus();
    require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/invariant')(
    status === require('RelayMutationTransactionStatus').COMMIT_FAILED || 
    status === require('RelayMutationTransactionStatus').COLLISION_COMMIT_FAILED, 
    'RelayMutationTransaction: Only transaction with status ' + 
    '`COMMIT_FAILED` or `COLLISION_COMMIT_FAILED` can be comitted.');


    this._mutationQueue.commit(this._id);};RelayMutationTransaction.prototype.


  rollback = function rollback() {
    var status = this.getStatus();
    require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/invariant')(
    status === require('RelayMutationTransactionStatus').UNCOMMITTED || 
    status === require('RelayMutationTransactionStatus').COMMIT_FAILED || 
    status === require('RelayMutationTransactionStatus').COLLISION_COMMIT_FAILED, 
    'RelayMutationTransaction: Only transactions with status `UNCOMMITTED` ' + 
    '`COMMIT_FAILED` or `COLLISION_COMMIT_FAILED` can be rolledback.');


    this._mutationQueue.rollback(this._id);};RelayMutationTransaction.prototype.


  getError = function getError() {
    return this._mutationQueue.getError(this._id);};RelayMutationTransaction.prototype.


  getStatus = function getStatus() {
    return this._mutationQueue.getStatus(this._id);};return RelayMutationTransaction;})();



module.exports = RelayMutationTransaction;
'use strict';














jest.
dontMock('GraphQLSegment').
dontMock('GraphQLRange').
mock('warning');





function getFirstSegment(range){
return range.__debug().orderedSegments[0];}


function getLastSegment(range){
var orderedSegments=range.__debug().orderedSegments;
return orderedSegments[orderedSegments.length-1];}


function mockEdge(id,hasNullCursor){
var dataID='edge'+(hasNullCursor?'WithNullCursor':'')+id;
var edge={
__dataID__:dataID,
node:{__dataID__:'id'+id},
cursor:hasNullCursor?null:'cursor'+id};

return edge;}


var edgeNeg10=mockEdge('-10');
var edgeNeg9=mockEdge('-9');
var edgeNeg3=mockEdge('-3');
var edgeNeg2=mockEdge('-2');
var edgeNeg1=mockEdge('-1');
var edge0=mockEdge('0');
var edge1=mockEdge('1');
var edge2=mockEdge('2');
var edge3=mockEdge('3');
var edge4=mockEdge('4');
var edge5=mockEdge('5');
var edge96=mockEdge('96');
var edge97=mockEdge('97');
var edge98=mockEdge('98');
var edge99=mockEdge('99');
var edge100=mockEdge('100');
var edge101=mockEdge('101');
var edge102=mockEdge('102');
var edge103=mockEdge('103');
var edge104=mockEdge('104');
var edge110=mockEdge('110');
var edge111=mockEdge('111');
var edgeWithNullCursor1=mockEdge('1',true);
var edgeWithNullCursor2=mockEdge('2',true);
var edgeWithNullCursor3=mockEdge('3',true);

var first3Edges=[edge1,edge2,edge3];
var first5Edges=[edge1,edge2,edge3,edge4,edge5];
var last3Edges=[edge98,edge99,edge100];
var last5Edges=[edge96,edge97,edge98,edge99,edge100];

describe('GraphQLRange',function(){
var consoleError=undefined;
var consoleWarn=undefined;
var range=undefined;

var HAS_NEXT_PAGE=undefined,HAS_PREV_PAGE=undefined;

beforeEach(function(){
jest.resetModuleRegistry();
consoleError=console.error;
consoleWarn=console.warn;

require('RelayRecord').getDataID.mockImplementation(function(data){
return data.__dataID__;});

range=new (require('GraphQLRange'))();var _RelayConnectionInter=require('RelayConnectionInterface');

HAS_NEXT_PAGE=_RelayConnectionInter.HAS_NEXT_PAGE;HAS_PREV_PAGE=_RelayConnectionInter.HAS_PREV_PAGE;

jasmine.addMatchers(require('RelayTestUtils').matchers);});


afterEach(function(){
console.error=consoleError;
console.warn=consoleWarn;});


it('should add for first() query',function(){var _pageInfo;
var queryCalls=[
{name:'first',value:3}];

var pageInfo=(_pageInfo={},babelHelpers.defineProperty(_pageInfo,
HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_pageInfo,
HAS_PREV_PAGE,false),_pageInfo);


range.addItems(queryCalls,first3Edges,pageInfo);


var result=range.retrieveRangeInfoForQuery(queryCalls);

expect(result.requestedEdgeIDs).toEqual(
[edge1.__dataID__,edge2.__dataID__,edge3.__dataID__]);

expect(result.diffCalls.length).toBe(0);});


it('should add for after().first() query',function(){var _pageInfo2,_incrementalPageInfo;
var queryCalls=[
{name:'after',value:null},
{name:'first',value:3}];

var pageInfo=(_pageInfo2={},babelHelpers.defineProperty(_pageInfo2,
HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_pageInfo2,
HAS_PREV_PAGE,false),_pageInfo2);


range.addItems(
queryCalls,
first3Edges,
pageInfo);


var incrementalEdges=[edge4,edge5];
var incrementalPageInfo=(_incrementalPageInfo={},babelHelpers.defineProperty(_incrementalPageInfo,
HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_incrementalPageInfo,
HAS_PREV_PAGE,true),_incrementalPageInfo);


queryCalls=[
{name:'after',value:'cursor3'},
{name:'first',value:2}];

range.addItems(
queryCalls,
incrementalEdges,
incrementalPageInfo);



queryCalls=[
{name:'after',value:null},
{name:'first',value:5}];

var result=range.retrieveRangeInfoForQuery(queryCalls);

expect(result.requestedEdgeIDs).toEqual([
edge1.__dataID__,
edge2.__dataID__,
edge3.__dataID__,
edge4.__dataID__,
edge5.__dataID__]);

expect(result.diffCalls.length).toBe(0);});



it('should add for after().first() query in last segment',function(){var _pageInfo3,_incrementalPageInfo2;
var queryCalls=[
{name:'last',value:3}];

var pageInfo=(_pageInfo3={},babelHelpers.defineProperty(_pageInfo3,
HAS_NEXT_PAGE,false),babelHelpers.defineProperty(_pageInfo3,
HAS_PREV_PAGE,true),_pageInfo3);


range.addItems(queryCalls,last3Edges,pageInfo);

var incrementalQueryCall=[
{name:'after',value:'cursor100'},
{name:'first',value:2}];

var incrementalEdges=[edge101,edge102];
var incrementalPageInfo=(_incrementalPageInfo2={},babelHelpers.defineProperty(_incrementalPageInfo2,
HAS_NEXT_PAGE,false),babelHelpers.defineProperty(_incrementalPageInfo2,
HAS_PREV_PAGE,true),_incrementalPageInfo2);


range.addItems(
incrementalQueryCall,
incrementalEdges,
incrementalPageInfo);



queryCalls=[
{name:'last',value:5}];

var result=range.retrieveRangeInfoForQuery(queryCalls);

expect(result.requestedEdgeIDs).toEqual([
edge98.__dataID__,
edge99.__dataID__,
edge100.__dataID__,
edge101.__dataID__,
edge102.__dataID__]);

expect(result.diffCalls.length).toBe(0);});



it('should add for before().first() query',function(){var _pageInfo4,_incrementalPageInfo3;
var queryCalls=[
{name:'last',value:3}];


var pageInfo=(_pageInfo4={},babelHelpers.defineProperty(_pageInfo4,
HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_pageInfo4,
HAS_PREV_PAGE,false),_pageInfo4);


range.addItems(queryCalls,first3Edges,pageInfo);

var incrementalQueryCall=[
{name:'before',value:'cursor1'},
{name:'first',value:2}];


var incrementalEdges=[edgeNeg1,edge0];
var incrementalPageInfo=(_incrementalPageInfo3={},babelHelpers.defineProperty(_incrementalPageInfo3,
HAS_NEXT_PAGE,false),babelHelpers.defineProperty(_incrementalPageInfo3,
HAS_PREV_PAGE,false),_incrementalPageInfo3);

range.addItems(
incrementalQueryCall,
incrementalEdges,
incrementalPageInfo);


queryCalls=[
{name:'last',value:5}];

var result=range.retrieveRangeInfoForQuery(queryCalls);

expect(result.requestedEdgeIDs).toEqual([
edgeNeg1.__dataID__,
edge0.__dataID__,
edge1.__dataID__,
edge2.__dataID__,
edge3.__dataID__]);

expect(result.diffCalls.length).toBe(0);});



it('should add for before().first() query with gap',function(){var _pageInfo5,_incrementalPageInfo4;
var queryCalls=[
{name:'first',value:3}];


var pageInfo=(_pageInfo5={},babelHelpers.defineProperty(_pageInfo5,
HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_pageInfo5,
HAS_PREV_PAGE,false),_pageInfo5);


range.addItems(queryCalls,first3Edges,pageInfo);

var incrementalQueryCall=[
{name:'before',value:'cursor1'},
{name:'first',value:2}];


var incrementalEdges=[edgeNeg10,edgeNeg9];
var incrementalPageInfo=(_incrementalPageInfo4={},babelHelpers.defineProperty(_incrementalPageInfo4,
HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_incrementalPageInfo4,
HAS_PREV_PAGE,false),_incrementalPageInfo4);

range.addItems(
incrementalQueryCall,
incrementalEdges,
incrementalPageInfo);


queryCalls=[
{name:'first',value:5}];

var result=range.retrieveRangeInfoForQuery(queryCalls);

expect(result.requestedEdgeIDs).toEqual(
[edgeNeg10.__dataID__,edgeNeg9.__dataID__]);

expect(result.diffCalls).toEqual([
{name:'after',value:'cursor-9'},
{name:'before',value:'cursor1'},
{name:'first',value:3}]);});




it('should add for last() query',function(){var _pageInfo6;
var queryCalls=[
{name:'last',value:3}];


var pageInfo=(_pageInfo6={},babelHelpers.defineProperty(_pageInfo6,
HAS_NEXT_PAGE,false),babelHelpers.defineProperty(_pageInfo6,
HAS_PREV_PAGE,true),_pageInfo6);


range.addItems(queryCalls,last3Edges,pageInfo);


var result=range.retrieveRangeInfoForQuery(queryCalls,{count:3});

expect(result.requestedEdgeIDs).toEqual(
[edge98.__dataID__,edge99.__dataID__,edge100.__dataID__]);

expect(result.diffCalls.length).toBe(0);});


it('should add for before().last() query',function(){var _pageInfo7,_incrementalPageInfo5;
var queryCalls=[
{name:'last',value:3}];


var pageInfo=(_pageInfo7={},babelHelpers.defineProperty(_pageInfo7,
HAS_NEXT_PAGE,false),babelHelpers.defineProperty(_pageInfo7,
HAS_PREV_PAGE,true),_pageInfo7);


range.addItems(queryCalls,last3Edges,pageInfo);

var incrementalQueryCall=[
{name:'before',value:'cursor98'},
{name:'last',value:2}];


var incrementalEdges=[edge96,edge97];

var incrementalPageInfo=(_incrementalPageInfo5={},babelHelpers.defineProperty(_incrementalPageInfo5,
HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_incrementalPageInfo5,
HAS_PREV_PAGE,true),_incrementalPageInfo5);


range.addItems(
incrementalQueryCall,
incrementalEdges,
incrementalPageInfo);



queryCalls=[
{name:'last',value:5}];

var result=range.retrieveRangeInfoForQuery(queryCalls);

expect(result.requestedEdgeIDs).toEqual([
edge96.__dataID__,
edge97.__dataID__,
edge98.__dataID__,
edge99.__dataID__,
edge100.__dataID__]);

expect(result.diffCalls.length).toBe(0);});


it('should add for before().last() query in first segment',function(){var _pageInfo8,_incrementalPageInfo6;
var queryCalls=[
{name:'first',value:3}];


var pageInfo=(_pageInfo8={},babelHelpers.defineProperty(_pageInfo8,
HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_pageInfo8,
HAS_PREV_PAGE,false),_pageInfo8);


range.addItems(queryCalls,first3Edges,pageInfo);

var incrementalQueryCall=[
{name:'before',value:'cursor1'},
{name:'last',value:2}];


var incrementalEdges=[edgeNeg1,edge0];
var incrementalPageInfo=(_incrementalPageInfo6={},babelHelpers.defineProperty(_incrementalPageInfo6,
HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_incrementalPageInfo6,
HAS_PREV_PAGE,false),_incrementalPageInfo6);


range.addItems(
incrementalQueryCall,
incrementalEdges,
incrementalPageInfo);



queryCalls=[
{name:'first',value:5}];

var result=range.retrieveRangeInfoForQuery(queryCalls);

expect(result.requestedEdgeIDs).toEqual([
edgeNeg1.__dataID__,
edge0.__dataID__,
edge1.__dataID__,
edge2.__dataID__,
edge3.__dataID__]);

expect(result.diffCalls.length).toBe(0);});


it('should add for after().last() query',function(){var _pageInfo9,_incrementalPageInfo7;
var queryCalls=[
{name:'last',value:3}];


var pageInfo=(_pageInfo9={},babelHelpers.defineProperty(_pageInfo9,
HAS_NEXT_PAGE,false),babelHelpers.defineProperty(_pageInfo9,
HAS_PREV_PAGE,true),_pageInfo9);


range.addItems(queryCalls,last3Edges,pageInfo);
var incrementalQueryCall=[
{name:'after',value:'cursor100'},
{name:'last',value:2}];


var incrementalEdges=[edge101,edge102];
var incrementalPageInfo=(_incrementalPageInfo7={},babelHelpers.defineProperty(_incrementalPageInfo7,
HAS_NEXT_PAGE,false),babelHelpers.defineProperty(_incrementalPageInfo7,
HAS_PREV_PAGE,false),_incrementalPageInfo7);


range.addItems(
incrementalQueryCall,
incrementalEdges,
incrementalPageInfo);



queryCalls=[
{name:'last',value:5}];

var result=range.retrieveRangeInfoForQuery(queryCalls);

expect(result.requestedEdgeIDs).toEqual([
edge98.__dataID__,
edge99.__dataID__,
edge100.__dataID__,
edge101.__dataID__,
edge102.__dataID__]);

expect(result.diffCalls.length).toBe(0);});



it('should add for after().last() with gap',function(){var _pageInfo10,_range$addItems;
var queryCalls=[
{name:'after',value:null},
{name:'last',value:3}];


var pageInfo=(_pageInfo10={},babelHelpers.defineProperty(_pageInfo10,
HAS_NEXT_PAGE,false),babelHelpers.defineProperty(_pageInfo10,
HAS_PREV_PAGE,true),_pageInfo10);


range.addItems(queryCalls,last3Edges,pageInfo);

queryCalls=[
{name:'after',value:'cursor100'},
{name:'last',value:2}];

range.addItems(
queryCalls,
[edge110,edge111],(_range$addItems={},babelHelpers.defineProperty(_range$addItems,
HAS_NEXT_PAGE,false),babelHelpers.defineProperty(_range$addItems,HAS_PREV_PAGE,true),_range$addItems));



queryCalls=[
{name:'after',value:null},
{name:'last',value:5}];

var result=range.retrieveRangeInfoForQuery(queryCalls);

expect(result.requestedEdgeIDs).toEqual(
[edge110.__dataID__,edge111.__dataID__]);

expect(result.diffCalls).toEqual([
{name:'before',value:'cursor110'},
{name:'after',value:'cursor100'},
{name:'last',value:3}]);});



it('should error for invalid call value',function(){
console.error=jest.genMockFunction();
var queryCalls=[
{name:'first',value:0}];


var result=range.retrieveRangeInfoForQuery(queryCalls);

expect(console.error.mock.calls.length).toBe(1);
expect(console.error.mock.calls[0]).toEqual([
'GraphQLRange only supports first(<count>) or last(<count>) '+
'where count is greater than 0']);

expect(result.requestedEdgeIDs).toEqual([]);
expect(result.diffCalls.length).toBe(0);});


it('should retrieve for first() queries',function(){var _pageInfo11;
var queryCalls=[
{name:'first',value:3}];



var result=range.retrieveRangeInfoForQuery(queryCalls);

expect(result.requestedEdgeIDs).toEqual([]);
expect(result.diffCalls).toEqual([{name:'first',value:3}]);
expect(result.pageInfo[HAS_PREV_PAGE]).toBe(false);
expect(result.pageInfo[HAS_NEXT_PAGE]).toBe(true);

var pageInfo=(_pageInfo11={},babelHelpers.defineProperty(_pageInfo11,
HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_pageInfo11,
HAS_PREV_PAGE,false),_pageInfo11);


range.addItems(queryCalls,first3Edges,pageInfo);


result=range.retrieveRangeInfoForQuery(queryCalls);

expect(result.requestedEdgeIDs).toEqual(
[edge1.__dataID__,edge2.__dataID__,edge3.__dataID__]);

expect(result.diffCalls.length).toBe(0);
expect(result.pageInfo[HAS_PREV_PAGE]).toBe(false);
expect(result.pageInfo[HAS_NEXT_PAGE]).toBe(true);


queryCalls=[
{name:'first',value:2}];

result=range.retrieveRangeInfoForQuery(queryCalls);

expect(result.requestedEdgeIDs).toEqual(
[edge1.__dataID__,edge2.__dataID__]);

expect(result.diffCalls.length).toBe(0);
expect(result.pageInfo[HAS_PREV_PAGE]).toBe(false);
expect(result.pageInfo[HAS_NEXT_PAGE]).toBe(true);


queryCalls=[
{name:'first',value:5}];

result=range.retrieveRangeInfoForQuery(queryCalls);

expect(result.requestedEdgeIDs).toEqual(
[edge1.__dataID__,edge2.__dataID__,edge3.__dataID__]);

expect(result.diffCalls).toEqual([
{name:'after',value:'cursor3'},
{name:'first',value:2}]);

expect(result.pageInfo[HAS_PREV_PAGE]).toBe(false);
expect(result.pageInfo[HAS_NEXT_PAGE]).toBe(true);});



it('should retrieve for after().first() queries',function(){var _pageInfo12;
var queryCalls=[
{name:'after',value:null},
{name:'first',value:3}];


var pageInfo=(_pageInfo12={},babelHelpers.defineProperty(_pageInfo12,
HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_pageInfo12,
HAS_PREV_PAGE,false),_pageInfo12);


range.addItems(
queryCalls,
first3Edges,
pageInfo);



queryCalls=[
{name:'after',value:'cursor1'},
{name:'first',value:2}];

var result=range.retrieveRangeInfoForQuery(queryCalls);

expect(result.requestedEdgeIDs).toEqual(
[edge2.__dataID__,edge3.__dataID__]);

expect(result.diffCalls.length).toBe(0);
expect(result.pageInfo[HAS_PREV_PAGE]).toBe(false);
expect(result.pageInfo[HAS_NEXT_PAGE]).toBe(true);


queryCalls=[
{name:'after',value:'cursor1'},
{name:'first',value:5}];

result=range.retrieveRangeInfoForQuery(queryCalls);

expect(result.requestedEdgeIDs).toEqual(
[edge2.__dataID__,edge3.__dataID__]);

expect(result.diffCalls).toEqual([
{name:'after',value:'cursor3'},
{name:'first',value:3}]);

expect(result.pageInfo[HAS_PREV_PAGE]).toBe(false);
expect(result.pageInfo[HAS_NEXT_PAGE]).toBe(true);


queryCalls=[
{name:'after',value:'cursor3'},
{name:'first',value:2}];

result=range.retrieveRangeInfoForQuery(queryCalls);

expect(result.requestedEdgeIDs).toEqual([]);
expect(result.diffCalls).toEqual([
{name:'after',value:'cursor3'},
{name:'first',value:2}]);

expect(result.pageInfo[HAS_PREV_PAGE]).toBe(false);
expect(result.pageInfo[HAS_NEXT_PAGE]).toBe(true);});


it('should retrieve for last() queries',function(){var _pageInfo13;
var queryCalls=[
{name:'last',value:3}];



var result=range.retrieveRangeInfoForQuery(queryCalls);

expect(result.requestedEdgeIDs).toEqual([]);
expect(result.diffCalls).toEqual([{name:'last',value:3}]);
expect(result.pageInfo[HAS_PREV_PAGE]).toBe(true);
expect(result.pageInfo[HAS_NEXT_PAGE]).toBe(false);

var pageInfo=(_pageInfo13={},babelHelpers.defineProperty(_pageInfo13,
HAS_NEXT_PAGE,false),babelHelpers.defineProperty(_pageInfo13,
HAS_PREV_PAGE,true),_pageInfo13);


range.addItems(queryCalls,last3Edges,pageInfo);


result=range.retrieveRangeInfoForQuery(queryCalls);

expect(result.requestedEdgeIDs).toEqual(
[edge98.__dataID__,edge99.__dataID__,edge100.__dataID__]);

expect(result.diffCalls.length).toBe(0);
expect(result.pageInfo[HAS_PREV_PAGE]).toBe(true);
expect(result.pageInfo[HAS_NEXT_PAGE]).toBe(false);


queryCalls=[{name:'last',value:2}];
result=range.retrieveRangeInfoForQuery(queryCalls);

expect(result.requestedEdgeIDs).toEqual(
[edge99.__dataID__,edge100.__dataID__]);

expect(result.diffCalls.length).toBe(0);
expect(result.pageInfo[HAS_PREV_PAGE]).toBe(true);
expect(result.pageInfo[HAS_NEXT_PAGE]).toBe(false);


queryCalls=[{name:'last',value:5}];
result=range.retrieveRangeInfoForQuery(queryCalls);

expect(result.requestedEdgeIDs).toEqual(
[edge98.__dataID__,edge99.__dataID__,edge100.__dataID__]);

expect(result.diffCalls).toEqual([
{name:'before',value:'cursor98'},
{name:'last',value:2}]);

expect(result.pageInfo[HAS_PREV_PAGE]).toBe(true);
expect(result.pageInfo[HAS_NEXT_PAGE]).toBe(false);});


it('should retrieve for before().last() queries',function(){var _pageInfo14;
var queryCalls=[
{name:'last',value:3}];


var pageInfo=(_pageInfo14={},babelHelpers.defineProperty(_pageInfo14,
HAS_NEXT_PAGE,false),babelHelpers.defineProperty(_pageInfo14,
HAS_PREV_PAGE,true),_pageInfo14);


range.addItems(queryCalls,last3Edges,pageInfo);


var result=range.retrieveRangeInfoForQuery([
{name:'before',value:'cursor100'},
{name:'last',value:2}]);


expect(result.requestedEdgeIDs).toEqual(
[edge98.__dataID__,edge99.__dataID__]);

expect(result.diffCalls.length).toBe(0);
expect(result.pageInfo[HAS_PREV_PAGE]).toBe(true);
expect(result.pageInfo[HAS_NEXT_PAGE]).toBe(false);


result=range.retrieveRangeInfoForQuery([
{name:'before',value:'cursor100'},
{name:'last',value:5}]);


expect(result.requestedEdgeIDs).toEqual(
[edge98.__dataID__,edge99.__dataID__]);

expect(result.diffCalls).toEqual([
{name:'before',value:'cursor98'},
{name:'last',value:3}]);

expect(result.pageInfo[HAS_PREV_PAGE]).toBe(true);
expect(result.pageInfo[HAS_NEXT_PAGE]).toBe(false);


result=range.retrieveRangeInfoForQuery([
{name:'before',value:'cursor98'},
{name:'last',value:2}]);


expect(result.requestedEdgeIDs).toEqual([]);
expect(result.diffCalls).toEqual([
{name:'before',value:'cursor98'},
{name:'last',value:2}]);

expect(result.pageInfo[HAS_PREV_PAGE]).toBe(true);
expect(result.pageInfo[HAS_NEXT_PAGE]).toBe(false);});



it('should retrieve for after().first() from last segment',function(){var _pageInfo15;
var queryCalls=[
{name:'last',value:3}];


var pageInfo=(_pageInfo15={},babelHelpers.defineProperty(_pageInfo15,
HAS_NEXT_PAGE,false),babelHelpers.defineProperty(_pageInfo15,
HAS_PREV_PAGE,true),_pageInfo15);

range.addItems(queryCalls,last3Edges,pageInfo);


var result=range.retrieveRangeInfoForQuery([
{name:'after',value:'cursor98'},
{name:'first',value:1}]);


expect(result.requestedEdgeIDs).toEqual([edge99.__dataID__]);
expect(result.diffCalls.length).toBe(0);
expect(result.pageInfo[HAS_PREV_PAGE]).toBe(false);
expect(result.pageInfo[HAS_NEXT_PAGE]).toBe(true);


result=range.retrieveRangeInfoForQuery([
{name:'after',value:'cursor98'},
{name:'first',value:5}]);


expect(result.requestedEdgeIDs).toEqual(
[edge99.__dataID__,edge100.__dataID__]);

expect(result.diffCalls.length).toBe(0);
expect(result.pageInfo[HAS_PREV_PAGE]).toBe(false);
expect(result.pageInfo[HAS_NEXT_PAGE]).toBe(false);


result=range.retrieveRangeInfoForQuery([
{name:'after',value:'cursor100'},
{name:'first',value:2}]);


expect(result.requestedEdgeIDs).toEqual([]);
expect(result.diffCalls.length).toBe(0);
expect(result.pageInfo[HAS_PREV_PAGE]).toBe(false);
expect(result.pageInfo[HAS_NEXT_PAGE]).toBe(false);});



it('should retrieve for before().last() from first segment',function(){var _pageInfo16;
var queryCalls=[
{name:'first',value:3}];


var pageInfo=(_pageInfo16={},babelHelpers.defineProperty(_pageInfo16,
HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_pageInfo16,
HAS_PREV_PAGE,false),_pageInfo16);


range.addItems(queryCalls,first3Edges,pageInfo);


var result=range.retrieveRangeInfoForQuery([
{name:'before',value:'cursor3'},
{name:'last',value:1}]);


expect(result.requestedEdgeIDs).toEqual([edge2.__dataID__]);
expect(result.diffCalls.length).toBe(0);
expect(result.pageInfo[HAS_PREV_PAGE]).toBe(true);
expect(result.pageInfo[HAS_NEXT_PAGE]).toBe(false);


result=range.retrieveRangeInfoForQuery([
{name:'before',value:'cursor3'},
{name:'last',value:5}]);


expect(result.requestedEdgeIDs).toEqual(
[edge1.__dataID__,edge2.__dataID__]);

expect(result.diffCalls).toEqual([]);
expect(result.pageInfo[HAS_PREV_PAGE]).toBe(false);
expect(result.pageInfo[HAS_NEXT_PAGE]).toBe(false);


result=range.retrieveRangeInfoForQuery([
{name:'before',value:'cursor1'},
{name:'last',value:2}]);


expect(result.requestedEdgeIDs).toEqual([]);
expect(result.diffCalls).toEqual([]);
expect(result.pageInfo[HAS_PREV_PAGE]).toBe(false);
expect(result.pageInfo[HAS_NEXT_PAGE]).toBe(false);});



it('should support calls with no arguments',function(){var _pageInfo17;
var queryCalls=[
{name:'first',value:3},
{name:'dummy_call',value:null}];


var pageInfo=(_pageInfo17={},babelHelpers.defineProperty(_pageInfo17,
HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_pageInfo17,
HAS_PREV_PAGE,false),_pageInfo17);


range.addItems(queryCalls,first3Edges,pageInfo);


var result=range.retrieveRangeInfoForQuery([
{name:'first',value:3},
{name:'dummy_call',value:null}]);


expect(result.requestedEdgeIDs).toEqual(
[edge1.__dataID__,edge2.__dataID__,edge3.__dataID__]);

expect(result.diffCalls.length).toBe(0);});


it('should support nodes with null cursors',function(){var _pageInfo18;
var queryCalls=[
{name:'first',value:3}];


var pageInfo=(_pageInfo18={},babelHelpers.defineProperty(_pageInfo18,
HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_pageInfo18,
HAS_PREV_PAGE,false),_pageInfo18);


var first3EdgesWithNullCursors=[
edgeWithNullCursor1,
edgeWithNullCursor2,
edgeWithNullCursor3];


range.addItems(queryCalls,first3EdgesWithNullCursors,pageInfo);


var result=range.retrieveRangeInfoForQuery([
{name:'first',value:3}]);


expect(result.requestedEdgeIDs).toEqual([
'edgeWithNullCursor1',
'edgeWithNullCursor2',
'edgeWithNullCursor3']);

expect(result.diffCalls.length).toBe(0);});


it('should support prepending edge to range',function(){

range.prependEdge(edge2);
var result=range.retrieveRangeInfoForQuery([
{name:'first',value:1}]);

expect(result.requestedEdgeIDs).toEqual([edge2.__dataID__]);
expect(result.diffCalls.length).toBe(0);


range.prependEdge(edge1);
result=range.retrieveRangeInfoForQuery([
{name:'first',value:2}]);

expect(result.requestedEdgeIDs).toEqual(
[edge1.__dataID__,edge2.__dataID__]);

expect(result.diffCalls.length).toBe(0);});


it('should support appending edge to range',function(){

range.appendEdge(edge1);
var result=range.retrieveRangeInfoForQuery([
{name:'last',value:1}]);

expect(result.requestedEdgeIDs).toEqual([edge1.__dataID__]);
expect(result.diffCalls.length).toBe(0);


range.appendEdge(edge2);
result=range.retrieveRangeInfoForQuery([
{name:'last',value:2}]);

expect(result.requestedEdgeIDs).toEqual(
[edge1.__dataID__,edge2.__dataID__]);

expect(result.diffCalls.length).toBe(0);});


it('should support bumping',function(){var _pageInfo19,_pageInfo20;
var queryCalls=[
{name:'first',value:3}];


var pageInfo=(_pageInfo19={},babelHelpers.defineProperty(_pageInfo19,
HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_pageInfo19,
HAS_PREV_PAGE,false),_pageInfo19);


range.addItems(queryCalls,first3Edges,pageInfo);

var afterQueryCalls=[
{name:'after',value:'cursor3'},
{name:'first',value:1}];



range.addItems(afterQueryCalls,[first3Edges[1]],pageInfo);
var result=range.retrieveRangeInfoForQuery(queryCalls);
expect(result.requestedEdgeIDs).toEqual(
[edge1.__dataID__,edge3.__dataID__,edge2.__dataID__]);

expect(result.diffCalls.length).toBe(0);


range.prependEdge(first3Edges[2]);
result=range.retrieveRangeInfoForQuery(queryCalls);
expect(result.requestedEdgeIDs).toEqual(
[edge3.__dataID__,edge1.__dataID__,edge2.__dataID__]);

expect(result.diffCalls.length).toBe(0);

queryCalls=[
{name:'last',value:3}];


pageInfo=(_pageInfo20={},babelHelpers.defineProperty(_pageInfo20,
HAS_NEXT_PAGE,false),babelHelpers.defineProperty(_pageInfo20,
HAS_PREV_PAGE,true),_pageInfo20);


range.addItems(queryCalls,last3Edges,pageInfo);

var beforeQueryCalls=[
{name:'before',value:'cursor98'},
{name:'last',value:1}];



range.addItems(beforeQueryCalls,[last3Edges[1]],pageInfo);
result=range.retrieveRangeInfoForQuery(queryCalls);
expect(result.requestedEdgeIDs).toEqual(
[edge99.__dataID__,edge98.__dataID__,edge100.__dataID__]);

expect(result.diffCalls.length).toBe(0);


range.appendEdge(last3Edges[0]);
result=range.retrieveRangeInfoForQuery(queryCalls);
expect(result.requestedEdgeIDs).toEqual(
[edge99.__dataID__,edge100.__dataID__,edge98.__dataID__]);

expect(result.diffCalls.length).toBe(0);});


it('should not generate diff query when range is empty',function(){var _pageInfo21;
var queryFirstCalls=[
{name:'first',value:3}];


var queryLastCalls=[
{name:'last',value:3}];


var pageInfo=(_pageInfo21={},babelHelpers.defineProperty(_pageInfo21,
HAS_NEXT_PAGE,false),babelHelpers.defineProperty(_pageInfo21,
HAS_PREV_PAGE,false),_pageInfo21);



range.addItems(queryFirstCalls,[],pageInfo);

var result=range.retrieveRangeInfoForQuery(queryFirstCalls);
expect(result.diffCalls.length).toBe(0);
result=range.retrieveRangeInfoForQuery(queryLastCalls);
expect(result.diffCalls.length).toBe(0);


range=new (require('GraphQLRange'))();
range.addItems(queryLastCalls,[],pageInfo);

result=range.retrieveRangeInfoForQuery(queryFirstCalls);
expect(result.diffCalls.length).toBe(0);
result=range.retrieveRangeInfoForQuery(queryLastCalls);
expect(result.diffCalls.length).toBe(0);});


it('should collesce segments when we reach end',function(){var _pageInfo22;
var queryFirstCalls=[
{name:'first',value:1}];


var queryLastCalls=[
{name:'last',value:1}];


var pageInfo=(_pageInfo22={},babelHelpers.defineProperty(_pageInfo22,
HAS_NEXT_PAGE,false),babelHelpers.defineProperty(_pageInfo22,
HAS_PREV_PAGE,false),_pageInfo22);


range.addItems(queryFirstCalls,[edge1],pageInfo);
range.addItems(queryLastCalls,[edge1],pageInfo);

var result=range.retrieveRangeInfoForQuery(queryFirstCalls);
expect(result.requestedEdgeIDs).toEqual([edge1.__dataID__]);
expect(result.diffCalls.length).toBe(0);
result=range.retrieveRangeInfoForQuery(queryLastCalls);
expect(result.requestedEdgeIDs).toEqual([edge1.__dataID__]);
expect(result.diffCalls.length).toBe(0);});


it('should not generate diff query when there is no more',function(){var _pageInfo23,_pageInfo24;
var queryCalls=[
{name:'first',value:3}];


var pageInfo=(_pageInfo23={},babelHelpers.defineProperty(_pageInfo23,
HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_pageInfo23,
HAS_PREV_PAGE,false),_pageInfo23);

var beforeQueryCalls=[
{name:'before',value:'cursor1'},
{name:'last',value:1}];


range.addItems(queryCalls,first3Edges,pageInfo);
var result=range.retrieveRangeInfoForQuery(beforeQueryCalls);

expect(result.diffCalls.length).toBe(0);

queryCalls=[
{name:'last',value:3}];


pageInfo=(_pageInfo24={},babelHelpers.defineProperty(_pageInfo24,
HAS_NEXT_PAGE,false),babelHelpers.defineProperty(_pageInfo24,
HAS_PREV_PAGE,true),_pageInfo24);

var afterQueryCalls=[
{name:'after',value:'cursor100'},
{name:'first',value:1}];


range.addItems(queryCalls,last3Edges,pageInfo);
result=range.retrieveRangeInfoForQuery(afterQueryCalls);

expect(result.diffCalls.length).toBe(0);});


it('should add  and retrieve for surrounds() query',function(){var _pageInfo25;
var queryCalls=[
{name:'surrounds',value:['id2',1]}];


var pageInfo=(_pageInfo25={},babelHelpers.defineProperty(_pageInfo25,
HAS_NEXT_PAGE,false),babelHelpers.defineProperty(_pageInfo25,
HAS_PREV_PAGE,false),_pageInfo25);


range.addItems(queryCalls,first3Edges,pageInfo);
var result=range.retrieveRangeInfoForQuery(queryCalls);

expect(result.requestedEdgeIDs).toEqual(
[edge1.__dataID__,edge2.__dataID__,edge3.__dataID__]);

expect(result.diffCalls.length).toBe(0);});


it('should not return surrounds query data for first query',function(){var _pageInfo26;
var surroundQueryCalls=[
{name:'surrounds',value:['id2',1]}];


var pageInfo=(_pageInfo26={},babelHelpers.defineProperty(_pageInfo26,
HAS_NEXT_PAGE,false),babelHelpers.defineProperty(_pageInfo26,
HAS_PREV_PAGE,false),_pageInfo26);


range.addItems(surroundQueryCalls,first3Edges,pageInfo);

var firstQueryCalls=[
{name:'first',value:5}];


var resultForFirstQuery=range.retrieveRangeInfoForQuery(
firstQueryCalls);


expect(resultForFirstQuery.requestedEdgeIDs).toEqual([]);
expect(resultForFirstQuery.diffCalls).toEqual(firstQueryCalls);});


it('should warn when reconciling conflicting first() ranges',function(){var _pageInfo27;
console.error=jest.genMockFunction();

var queryCalls=[
{name:'first',value:3}];


var pageInfo=(_pageInfo27={},babelHelpers.defineProperty(_pageInfo27,
HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_pageInfo27,
HAS_PREV_PAGE,false),_pageInfo27);


range.addItems(queryCalls,[edge1,edge2,edge3],pageInfo);
range.addItems(queryCalls,[edge1,edge3,edge4],pageInfo);

expect(console.error.mock.calls.length).toBe(0);
expect([
'Relay was unable to reconcile edges on a connection. This most '+
'likely occurred while trying to handle a server response that '+
'includes connection edges with nodes that lack an `id` field.']).
toBeWarnedNTimes(1);

var result=range.retrieveRangeInfoForQuery(queryCalls);
expect(result.requestedEdgeIDs).toEqual(
[edge1.__dataID__,edge2.__dataID__,edge3.__dataID__]);});



it('should warn when reconciling conflicting last() ranges',function(){var _pageInfo28;
console.error=jest.genMockFunction();

var queryCalls=[
{name:'last',value:3}];


var pageInfo=(_pageInfo28={},babelHelpers.defineProperty(_pageInfo28,
HAS_NEXT_PAGE,false),babelHelpers.defineProperty(_pageInfo28,
HAS_PREV_PAGE,true),_pageInfo28);



range.addItems(queryCalls,[edge98,edge99,edge100],pageInfo);
range.addItems(queryCalls,[edge98,edge1,edge100],pageInfo);

expect(console.error.mock.calls.length).toBe(0);
expect([
'Relay was unable to reconcile edges on a connection. This most '+
'likely occurred while trying to handle a server response that '+
'includes connection edges with nodes that lack an `id` field.']).
toBeWarnedNTimes(1);

var result=range.retrieveRangeInfoForQuery(queryCalls);
expect(result.requestedEdgeIDs).toEqual(
[edge98.__dataID__,edge99.__dataID__,edge100.__dataID__]);});



it('should reconcile duplicated queries',function(){var _pageInfo29,_pageInfo30;
console.error=jest.genMockFunction();
console.warn=jest.genMockFunction();

var queryCalls=[
{name:'first',value:3}];


var pageInfo=(_pageInfo29={},babelHelpers.defineProperty(_pageInfo29,
HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_pageInfo29,
HAS_PREV_PAGE,false),_pageInfo29);



range.addItems(queryCalls,first3Edges,pageInfo);
range.addItems(queryCalls,first3Edges,pageInfo);

expect(console.error.mock.calls.length).toBe(0);
expect(console.warn.mock.calls.length).toBe(0);

var result=range.retrieveRangeInfoForQuery(queryCalls);
expect(result.requestedEdgeIDs).toEqual(
[edge1.__dataID__,edge2.__dataID__,edge3.__dataID__]);


queryCalls=[
{name:'last',value:3}];


pageInfo=(_pageInfo30={},babelHelpers.defineProperty(_pageInfo30,
HAS_NEXT_PAGE,false),babelHelpers.defineProperty(_pageInfo30,
HAS_PREV_PAGE,true),_pageInfo30);



range.addItems(queryCalls,last3Edges,pageInfo);
range.addItems(queryCalls,last3Edges,pageInfo);

expect(console.error.mock.calls.length).toBe(0);
expect(console.warn.mock.calls.length).toBe(0);

result=range.retrieveRangeInfoForQuery(queryCalls);
expect(result.requestedEdgeIDs).toEqual(
[edge98.__dataID__,edge99.__dataID__,edge100.__dataID__]);});



it('should reconcile duplicated queries with no cursor',function(){var _pageInfo31,_pageInfo32;
console.error=jest.genMockFunction();
console.warn=jest.genMockFunction();

var queryCalls=[
{name:'first',value:3}];


var pageInfo=(_pageInfo31={},babelHelpers.defineProperty(_pageInfo31,
HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_pageInfo31,
HAS_PREV_PAGE,false),_pageInfo31);

var e1=mockEdge('1',true);
var e2=mockEdge('2',true);
var e3=mockEdge('3',true);

var edges=[e1,e2,e3];


range.addItems(queryCalls,edges,pageInfo);
range.addItems(queryCalls,edges,pageInfo);

expect(console.error.mock.calls.length).toBe(0);
expect(console.warn.mock.calls.length).toBe(0);

var result=range.retrieveRangeInfoForQuery(queryCalls);
expect(result.requestedEdgeIDs).toEqual(
[e1.__dataID__,e2.__dataID__,e3.__dataID__]);


queryCalls=[
{name:'last',value:3}];


pageInfo=(_pageInfo32={},babelHelpers.defineProperty(_pageInfo32,
HAS_NEXT_PAGE,false),babelHelpers.defineProperty(_pageInfo32,
HAS_PREV_PAGE,true),_pageInfo32);

var e100=mockEdge('100',true);
var e99=mockEdge('99',true);
var e98=mockEdge('98',true);

edges=[e98,e99,e100];


range.addItems(queryCalls,edges,pageInfo);
range.addItems(queryCalls,edges,pageInfo);

expect(console.error.mock.calls.length).toBe(0);
expect(console.warn.mock.calls.length).toBe(0);

result=range.retrieveRangeInfoForQuery(queryCalls);
expect(result.requestedEdgeIDs).toEqual(
[e98.__dataID__,e99.__dataID__,e100.__dataID__]);});



it('should reconcile extending queries',function(){var _pageInfo33,_pageInfo34;
console.error=jest.genMockFunction();
console.warn=jest.genMockFunction();

var queryCalls=[
{name:'first',value:3}];


var pageInfo=(_pageInfo33={},babelHelpers.defineProperty(_pageInfo33,
HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_pageInfo33,
HAS_PREV_PAGE,false),_pageInfo33);


range.addItems(queryCalls,first3Edges,pageInfo);

queryCalls=[
{name:'first',value:5}];

range.addItems(queryCalls,first5Edges,pageInfo);

expect(console.error.mock.calls.length).toBe(0);
expect(console.warn.mock.calls.length).toBe(0);

var result=range.retrieveRangeInfoForQuery(queryCalls);
expect(result.requestedEdgeIDs).toEqual([
edge1.__dataID__,
edge2.__dataID__,
edge3.__dataID__,
edge4.__dataID__,
edge5.__dataID__]);


queryCalls=[
{name:'last',value:3}];


pageInfo=(_pageInfo34={},babelHelpers.defineProperty(_pageInfo34,
HAS_NEXT_PAGE,false),babelHelpers.defineProperty(_pageInfo34,
HAS_PREV_PAGE,true),_pageInfo34);


range.addItems(queryCalls,last3Edges,pageInfo);

queryCalls=[
{name:'last',value:5}];

range.addItems(queryCalls,last5Edges,pageInfo);

expect(console.error.mock.calls.length).toBe(0);
expect(console.warn.mock.calls.length).toBe(0);

result=range.retrieveRangeInfoForQuery(queryCalls);
expect(result.requestedEdgeIDs).toEqual([
edge96.__dataID__,
edge97.__dataID__,
edge98.__dataID__,
edge99.__dataID__,
edge100.__dataID__]);});



it('should stitch first and last segment',function(){var _pageInfo35,_pageInfo36,_pageInfo37,_pageInfo38;
var firstQueryCalls=[
{name:'first',value:3}];

var lastQueryCalls=[
{name:'last',value:3}];


var pageInfo=(_pageInfo35={},babelHelpers.defineProperty(_pageInfo35,
HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_pageInfo35,
HAS_PREV_PAGE,false),_pageInfo35);


range.addItems(firstQueryCalls,first3Edges,pageInfo);
var result=range.retrieveRangeInfoForQuery(lastQueryCalls);

expect(result.diffCalls).toEqual([
{name:'after',value:'cursor3'},
{name:'last',value:3}]);


pageInfo=(_pageInfo36={},babelHelpers.defineProperty(_pageInfo36,
HAS_NEXT_PAGE,false),babelHelpers.defineProperty(_pageInfo36,
HAS_PREV_PAGE,false),_pageInfo36);

range.addItems(result.diffCalls,last3Edges,pageInfo);
result=range.retrieveRangeInfoForQuery(
[{name:'first',value:6}]);

expect(result.diffCalls.length).toBe(0);
expect(result.requestedEdgeIDs).toEqual([
edge1.__dataID__,
edge2.__dataID__,
edge3.__dataID__,
edge98.__dataID__,
edge99.__dataID__,
edge100.__dataID__]);

result=range.retrieveRangeInfoForQuery(
[{name:'last',value:6}]);

expect(result.diffCalls.length).toBe(0);
expect(result.requestedEdgeIDs).toEqual([
edge1.__dataID__,
edge2.__dataID__,
edge3.__dataID__,
edge98.__dataID__,
edge99.__dataID__,
edge100.__dataID__]);


range=new (require('GraphQLRange'))();

pageInfo=(_pageInfo37={},babelHelpers.defineProperty(_pageInfo37,
HAS_NEXT_PAGE,false),babelHelpers.defineProperty(_pageInfo37,
HAS_PREV_PAGE,true),_pageInfo37);


range.addItems(lastQueryCalls,last3Edges,pageInfo);
result=range.retrieveRangeInfoForQuery(firstQueryCalls);

expect(result.diffCalls).toEqual([
{name:'before',value:'cursor98'},
{name:'first',value:3}]);


pageInfo=(_pageInfo38={},babelHelpers.defineProperty(_pageInfo38,
HAS_NEXT_PAGE,false),babelHelpers.defineProperty(_pageInfo38,
HAS_PREV_PAGE,false),_pageInfo38);


range.addItems(result.diffCalls,first3Edges,pageInfo);
result=range.retrieveRangeInfoForQuery(
[{name:'first',value:6}]);

expect(result.diffCalls.length).toBe(0);
expect(result.requestedEdgeIDs).toEqual([
edge1.__dataID__,
edge2.__dataID__,
edge3.__dataID__,
edge98.__dataID__,
edge99.__dataID__,
edge100.__dataID__]);

result=range.retrieveRangeInfoForQuery(
[{name:'last',value:6}]);

expect(result.diffCalls.length).toBe(0);
expect(result.requestedEdgeIDs).toEqual([
edge1.__dataID__,
edge2.__dataID__,
edge3.__dataID__,
edge98.__dataID__,
edge99.__dataID__,
edge100.__dataID__]);});



it('should stitch up gap in first segment',function(){var _pageInfo39,_incrementalPageInfo8,_pageInfo40;

var queryCalls=[
{name:'first',value:3}];


var pageInfo=(_pageInfo39={},babelHelpers.defineProperty(_pageInfo39,
HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_pageInfo39,
HAS_PREV_PAGE,false),_pageInfo39);


range.addItems(queryCalls,first3Edges,pageInfo);

var result=range.retrieveRangeInfoForQuery(queryCalls);


var incrementalQueryCall=[
{name:'before',value:'cursor1'},
{name:'first',value:2}];

var incrementalEdges=[edgeNeg3,edgeNeg2];
var incrementalPageInfo=(_incrementalPageInfo8={},babelHelpers.defineProperty(_incrementalPageInfo8,
HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_incrementalPageInfo8,
HAS_PREV_PAGE,false),_incrementalPageInfo8);

range.addItems(
incrementalQueryCall,
incrementalEdges,
incrementalPageInfo);


result=range.retrieveRangeInfoForQuery([
{name:'first',value:5}]);

var diffCalls=result.diffCalls;
expect(result.diffCalls).toEqual([
{name:'after',value:'cursor-2'},
{name:'before',value:'cursor1'},
{name:'first',value:3}]);



var gapEdges=[edgeNeg1,edge0];
pageInfo=(_pageInfo40={},babelHelpers.defineProperty(_pageInfo40,
HAS_NEXT_PAGE,false),babelHelpers.defineProperty(_pageInfo40,
HAS_PREV_PAGE,false),_pageInfo40);

range.addItems(diffCalls,gapEdges,pageInfo);

result=range.retrieveRangeInfoForQuery([
{name:'first',value:5}]);

expect(result.requestedEdgeIDs).toEqual([
edgeNeg3.__dataID__,
edgeNeg2.__dataID__,
edgeNeg1.__dataID__,
edge0.__dataID__,
edge1.__dataID__]);

expect(result.diffCalls.length).toBe(0);});


it('should stitch up gap in last segment',function(){var _pageInfo41,_incrementalPageInfo9,_pageInfo42;

var queryCalls=[
{name:'last',value:3}];

var pageInfo=(_pageInfo41={},babelHelpers.defineProperty(_pageInfo41,
HAS_NEXT_PAGE,false),babelHelpers.defineProperty(_pageInfo41,
HAS_PREV_PAGE,true),_pageInfo41);

range.addItems(queryCalls,last3Edges,pageInfo);

var result=range.retrieveRangeInfoForQuery(queryCalls);


var incrementalQueryCall=[
{name:'after',value:'cursor100'},
{name:'last',value:2}];


var incrementalEdges=[edge103,edge104];
var incrementalPageInfo=(_incrementalPageInfo9={},babelHelpers.defineProperty(_incrementalPageInfo9,
HAS_NEXT_PAGE,false),babelHelpers.defineProperty(_incrementalPageInfo9,
HAS_PREV_PAGE,true),_incrementalPageInfo9);

range.addItems(
incrementalQueryCall,
incrementalEdges,
incrementalPageInfo);


result=range.retrieveRangeInfoForQuery([
{name:'last',value:5}]);

var diffCalls=result.diffCalls;
expect(result.diffCalls).toEqual([
{name:'before',value:'cursor103'},
{name:'after',value:'cursor100'},
{name:'last',value:3}]);



var gapEdges=[edge101,edge102];
pageInfo=(_pageInfo42={},babelHelpers.defineProperty(_pageInfo42,
HAS_NEXT_PAGE,false),babelHelpers.defineProperty(_pageInfo42,
HAS_PREV_PAGE,false),_pageInfo42);

range.addItems(diffCalls,gapEdges,pageInfo);

result=range.retrieveRangeInfoForQuery([
{name:'last',value:5}]);

expect(result.requestedEdgeIDs).toEqual([
edge100.__dataID__,
edge101.__dataID__,
edge102.__dataID__,
edge103.__dataID__,
edge104.__dataID__]);

expect(result.diffCalls.length).toBe(0);});


it('should refetch for whole ranges for null cursor',function(){var _pageInfo43;
var queryCalls=[
{name:'first',value:3}];


var pageInfo=(_pageInfo43={},babelHelpers.defineProperty(_pageInfo43,
HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_pageInfo43,
HAS_PREV_PAGE,false),_pageInfo43);


var nullCursorEdges=[
edgeWithNullCursor1,
edgeWithNullCursor2,
edgeWithNullCursor3];


range.addItems(queryCalls,nullCursorEdges,pageInfo);
var five=[{name:'first',value:5}];
var result=range.retrieveRangeInfoForQuery(five);
expect(result.requestedEdgeIDs).toEqual([
'edgeWithNullCursor1',
'edgeWithNullCursor2',
'edgeWithNullCursor3']);

expect(result.diffCalls).toEqual(five);});


it('replaces whole first() ranges when working with null cursors',function(){
var queryCalls=[
{name:'first',value:1}];


var pageInfo=babelHelpers.defineProperty({},
HAS_NEXT_PAGE,true);


var nullCursorEdges=[
edgeWithNullCursor1,
edgeWithNullCursor2,
edgeWithNullCursor3];



var segment=getFirstSegment(range);
range.addItems(queryCalls,nullCursorEdges.slice(0,1),pageInfo);
expect(segment).toBe(getFirstSegment(range));



var three=[{name:'first',value:3}];
range.addItems(three,nullCursorEdges.slice(0,1),pageInfo);
expect(segment).not.toBe(getFirstSegment(range));


segment=getFirstSegment(range);
range.addItems(three,nullCursorEdges,pageInfo);
expect(segment).not.toBe(getFirstSegment(range));


var cursorEdges=[
edge0,
edge1,
edge2];

range=new (require('GraphQLRange'))();
segment=getFirstSegment(range);
range.addItems(queryCalls,cursorEdges.slice(0,1),pageInfo);
expect(segment).toBe(getFirstSegment(range));
range.addItems(three,cursorEdges,pageInfo);
expect(segment).toBe(getFirstSegment(range));});


it('replaces whole last() ranges when working with null cursors',function(){
var queryCalls=[
{name:'last',value:1}];


var pageInfo=babelHelpers.defineProperty({},
HAS_PREV_PAGE,true);


var nullCursorEdges=[
edgeWithNullCursor1,
edgeWithNullCursor2,
edgeWithNullCursor3];



var segment=getLastSegment(range);
range.addItems(queryCalls,nullCursorEdges.slice(2),pageInfo);
expect(segment).toBe(getLastSegment(range));



var three=[{name:'last',value:3}];
range.addItems(three,nullCursorEdges.slice(2),pageInfo);
expect(segment).not.toBe(getLastSegment(range));


segment=getLastSegment(range);
range.addItems(three,nullCursorEdges,pageInfo);
expect(segment).not.toBe(getLastSegment(range));


var cursorEdges=[
edge0,
edge1,
edge2];

range=new (require('GraphQLRange'))();
segment=getLastSegment(range);
range.addItems(queryCalls,cursorEdges.slice(2),pageInfo);
expect(segment).toBe(getLastSegment(range));
range.addItems(three,cursorEdges,pageInfo);
expect(segment).toBe(getLastSegment(range));});


it('should retrieve correct page_info for ranges with null cursors',function(){var _pageInfo46;
var two=[{name:'first',value:2}];
var three=[{name:'first',value:3}];

var pageInfo=(_pageInfo46={},babelHelpers.defineProperty(_pageInfo46,
HAS_NEXT_PAGE,false),babelHelpers.defineProperty(_pageInfo46,
HAS_PREV_PAGE,false),_pageInfo46);


var nullCursorEdges=[
edgeWithNullCursor1,
edgeWithNullCursor2,
edgeWithNullCursor3];


range.addItems(three,nullCursorEdges,pageInfo);
var result=range.retrieveRangeInfoForQuery(two);
expect(result.requestedEdgeIDs).toEqual([
'edgeWithNullCursor1',
'edgeWithNullCursor2']);

expect(result.pageInfo[HAS_NEXT_PAGE]).toBe(true);
expect(result.pageInfo[HAS_PREV_PAGE]).toBe(false);

result=range.retrieveRangeInfoForQuery(three);
expect(result.requestedEdgeIDs).toEqual([
'edgeWithNullCursor1',
'edgeWithNullCursor2',
'edgeWithNullCursor3']);

expect(result.pageInfo[HAS_NEXT_PAGE]).toBe(false);
expect(result.pageInfo[HAS_PREV_PAGE]).toBe(false);});


it('should delete',function(){var _pageInfo47;
var queryCalls=[
{name:'first',value:3}];


var pageInfo=(_pageInfo47={},babelHelpers.defineProperty(_pageInfo47,
HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_pageInfo47,
HAS_PREV_PAGE,false),_pageInfo47);


range.addItems(queryCalls,first3Edges,pageInfo);
range.removeEdgeWithID(edge2.__dataID__);
var result=range.retrieveRangeInfoForQuery(queryCalls);
expect(result.requestedEdgeIDs).toEqual(
[edge1.__dataID__,edge3.__dataID__]);

expect(result.diffCalls).toEqual([
{name:'after',value:'cursor3'},
{name:'first',value:1}]);});



it('should not retrieve deleted bumped edges',function(){var _pageInfo48;
var queryCalls=[
{name:'first',value:3}];


var pageInfo=(_pageInfo48={},babelHelpers.defineProperty(_pageInfo48,
HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_pageInfo48,
HAS_PREV_PAGE,false),_pageInfo48);


range.addItems(queryCalls,first3Edges,pageInfo);
var result=range.retrieveRangeInfoForQuery(queryCalls);


var afterQueryCalls=[
{name:'after',value:'cursor3'},
{name:'first',value:1}];


range.addItems(afterQueryCalls,[first3Edges[1]],pageInfo);


range.removeEdgeWithID(edge2.__dataID__);
result=range.retrieveRangeInfoForQuery(queryCalls);
expect(result.requestedEdgeIDs).toEqual(
[edge1.__dataID__,edge3.__dataID__]);

expect(result.diffCalls).toEqual([
{name:'after',value:'cursor3'},
{name:'first',value:1}]);

var queryCallsWithSession=[
{name:'first',value:3}];

result=range.retrieveRangeInfoForQuery(queryCallsWithSession);
expect(result.requestedEdgeIDs).toEqual(
[edge1.__dataID__,edge3.__dataID__]);

expect(result.diffCalls).toEqual([
{name:'after',value:'cursor3'},
{name:'first',value:1}]);});



it('should retrieve info for first() query given optimistic data',function(){var _pageInfo49;
var queryCalls=[
{name:'first',value:3}];


var pageInfo=(_pageInfo49={},babelHelpers.defineProperty(_pageInfo49,
HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_pageInfo49,
HAS_PREV_PAGE,false),_pageInfo49);


range.addItems(queryCalls,first3Edges,pageInfo);

var result=range.retrieveRangeInfoForQuery(
[{name:'first',value:3}],
{__rangeOperationPrepend__:[edge4.__dataID__]});


expect(result.requestedEdgeIDs).toEqual(
[edge4.__dataID__,edge1.__dataID__,edge2.__dataID__]);

expect(result.diffCalls.length).toBe(0);

result=range.retrieveRangeInfoForQuery(
[{name:'first',value:3}],
{__rangeOperationPrepend__:[edge4.__dataID__,edge5.__dataID__]});


expect(result.requestedEdgeIDs).toEqual(
[edge4.__dataID__,edge5.__dataID__,edge1.__dataID__]);

expect(result.diffCalls.length).toBe(0);


result=range.retrieveRangeInfoForQuery(
[{name:'first',value:3}],
{__rangeOperationAppend__:[edge4.__dataID__,edge5.__dataID__]});


expect(result.requestedEdgeIDs).toEqual(
[edge1.__dataID__,edge2.__dataID__,edge3.__dataID__]);

expect(result.diffCalls.length).toBe(0);

result=range.retrieveRangeInfoForQuery(
[{name:'first',value:2}],
{
__rangeOperationRemove__:[edge1.__dataID__]});



expect(result.requestedEdgeIDs).toEqual(
[edge2.__dataID__,edge3.__dataID__]);

expect(result.diffCalls.length).toBe(0);

result=range.retrieveRangeInfoForQuery(
[{name:'first',value:3}],
{
__rangeOperationPrepend__:[edge4.__dataID__,edge5.__dataID__],
__rangeOperationRemove__:[edge4.__dataID__,edge1.__dataID__]});



expect(result.requestedEdgeIDs).toEqual(
[edge5.__dataID__,edge2.__dataID__,edge3.__dataID__]);

expect(result.diffCalls.length).toBe(0);});


it('should retrieve optimistically appended edges when the last edge has been fetched',function(){var _pageInfo50;
var queryCalls=[
{name:'first',value:3}];



var pageInfo=(_pageInfo50={},babelHelpers.defineProperty(_pageInfo50,
HAS_NEXT_PAGE,false),babelHelpers.defineProperty(_pageInfo50,
HAS_PREV_PAGE,false),_pageInfo50);


range.addItems(queryCalls,first3Edges,pageInfo);

var result=range.retrieveRangeInfoForQuery(
[{name:'first',value:4}],
{__rangeOperationAppend__:[edge4.__dataID__]});


expect(result.requestedEdgeIDs).toEqual(
[edge1.__dataID__,edge2.__dataID__,edge3.__dataID__,edge4.__dataID__]);

expect(result.diffCalls.length).toBe(0);


result=range.retrieveRangeInfoForQuery(
[{name:'first',value:3}],
{__rangeOperationAppend__:[edge4.__dataID__]});


expect(result.requestedEdgeIDs).toEqual(
[edge1.__dataID__,edge2.__dataID__,edge3.__dataID__]);

expect(result.diffCalls.length).toBe(0);});


it('should retrieve info for last() query given optimistic data',function(){var _pageInfo51;
var queryCalls=[
{name:'last',value:3}];


var pageInfo=(_pageInfo51={},babelHelpers.defineProperty(_pageInfo51,
HAS_NEXT_PAGE,false),babelHelpers.defineProperty(_pageInfo51,
HAS_PREV_PAGE,true),_pageInfo51);


range.addItems(queryCalls,last3Edges,pageInfo);

var result=range.retrieveRangeInfoForQuery(
[{name:'last',value:3}],
{__rangeOperationAppend__:[edge97.__dataID__]});


expect(result.requestedEdgeIDs).toEqual(
[edge99.__dataID__,edge100.__dataID__,edge97.__dataID__]);

expect(result.diffCalls.length).toBe(0);

result=range.retrieveRangeInfoForQuery(
[{name:'last',value:3}],
{__rangeOperationAppend__:[edge97.__dataID__,edge96.__dataID__]});


expect(result.requestedEdgeIDs).toEqual(
[edge100.__dataID__,edge97.__dataID__,edge96.__dataID__]);

expect(result.diffCalls.length).toBe(0);


result=range.retrieveRangeInfoForQuery(
[{name:'last',value:3}],
{__rangeOperationPrepend__:[edge97.__dataID__,edge96.__dataID__]});


expect(result.requestedEdgeIDs).toEqual(
[edge98.__dataID__,edge99.__dataID__,edge100.__dataID__]);

expect(result.diffCalls.length).toBe(0);

result=range.retrieveRangeInfoForQuery(
[{name:'last',value:2}],
{__rangeOperationRemove__:[edge99.__dataID__]});


expect(result.requestedEdgeIDs).toEqual(
[edge98.__dataID__,edge100.__dataID__]);

expect(result.diffCalls.length).toBe(0);

result=range.retrieveRangeInfoForQuery(
[{name:'last',value:3}],
{
__rangeOperationAppend__:[edge97.__dataID__,edge96.__dataID__],
__rangeOperationRemove__:[edge100.__dataID__,edge96.__dataID__]});



expect(result.requestedEdgeIDs).toEqual(
[edge98.__dataID__,edge99.__dataID__,edge97.__dataID__]);

expect(result.diffCalls.length).toBe(0);});


it('should retrieve optimistically prepended edges when the first edge has been fetched',function(){var _pageInfo52;
var queryCalls=[
{name:'last',value:3}];



var pageInfo=(_pageInfo52={},babelHelpers.defineProperty(_pageInfo52,
HAS_NEXT_PAGE,false),babelHelpers.defineProperty(_pageInfo52,
HAS_PREV_PAGE,false),_pageInfo52);


range.addItems(queryCalls,last3Edges,pageInfo);

var result=range.retrieveRangeInfoForQuery(
[{name:'last',value:4}],
{__rangeOperationPrepend__:[edge97.__dataID__]});


expect(result.requestedEdgeIDs).toEqual([
edge97.__dataID__,
edge98.__dataID__,
edge99.__dataID__,
edge100.__dataID__]);

expect(result.diffCalls.length).toBe(0);


result=range.retrieveRangeInfoForQuery(
[{name:'last',value:3}],
{__rangeOperationPrepend__:[edge97.__dataID__]});


expect(result.requestedEdgeIDs).toEqual([
edge98.__dataID__,
edge99.__dataID__,
edge100.__dataID__]);

expect(result.diffCalls.length).toBe(0);});


it('should toJSON',function(){var _pageInfo53;
var queryCalls=[
{name:'first',value:3}];

var pageInfo=(_pageInfo53={},babelHelpers.defineProperty(_pageInfo53,
HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_pageInfo53,
HAS_PREV_PAGE,false),_pageInfo53);


range.addItems(queryCalls,first3Edges,pageInfo);
var actual=JSON.stringify(range);

expect(actual).toEqual('[true,false,{},[[{'+
'"0":{"edgeID":"edge1","cursor":"cursor1","deleted":false},'+
'"1":{"edgeID":"edge2","cursor":"cursor2","deleted":false},'+
'"2":{"edgeID":"edge3","cursor":"cursor3","deleted":false}},'+
'{"edge1":[0],"edge2":[1],"edge3":[2]},'+
'{"cursor1":0,"cursor2":1,"cursor3":2},0,2,3],'+
'[{},{},{},null,null,0]]]');


range=require('GraphQLRange').fromJSON(JSON.parse(actual));


var result=range.retrieveRangeInfoForQuery(queryCalls);

expect(result.requestedEdgeIDs).toEqual(
[edge1.__dataID__,edge2.__dataID__,edge3.__dataID__]);

expect(result.diffCalls.length).toBe(0);});


it('returns the DataIDs of all edges',function(){var _pageInfo54;

var surroundQueryCalls=[
{name:'surrounds',value:['id2',1]}];

var pageInfo=(_pageInfo54={},babelHelpers.defineProperty(_pageInfo54,
HAS_NEXT_PAGE,false),babelHelpers.defineProperty(_pageInfo54,
HAS_PREV_PAGE,false),_pageInfo54);

range.addItems(surroundQueryCalls,first3Edges,pageInfo);


var queryCalls=[
{name:'last',value:3}];

range.addItems(queryCalls,last3Edges,pageInfo);

expect(range.getEdgeIDs().sort()).toEqual([
edge1.__dataID__,
edge100.__dataID__,
edge2.__dataID__,
edge3.__dataID__,
edge98.__dataID__,
edge99.__dataID__]);});});
'use strict';var 












































GraphQLStoreRangeUtils=function(){
function GraphQLStoreRangeUtils(){babelHelpers.classCallCheck(this,GraphQLStoreRangeUtils);
this.$GraphQLStoreRangeUtils_rangeData={};
this.$GraphQLStoreRangeUtils_rangeDataKeyMap={};}babelHelpers.createClass(GraphQLStoreRangeUtils,[{key:'getClientIDForRangeWithID',value:function getClientIDForRangeWithID(












calls,callValues,dataID){
var callsAsString=require('callsFromGraphQL')(calls,callValues).
map(function(call){return require('serializeRelayQueryCall')(call).substring(1);}).
join(',');
var key=dataID+'_'+callsAsString;
var edge=this.$GraphQLStoreRangeUtils_rangeData[key];
if(!edge){
this.$GraphQLStoreRangeUtils_rangeData[key]={
dataID:dataID,
calls:calls,
callValues:callValues};

var rangeDataKeys=this.$GraphQLStoreRangeUtils_rangeDataKeyMap[dataID];
if(!rangeDataKeys){
this.$GraphQLStoreRangeUtils_rangeDataKeyMap[dataID]=rangeDataKeys=[];}

rangeDataKeys.push(key);}

return key;}},{key:'parseRangeClientID',value:function parseRangeClientID(








rangeSpecificClientID){
return this.$GraphQLStoreRangeUtils_rangeData[rangeSpecificClientID]||null;}},{key:'getCanonicalClientID',value:function getCanonicalClientID(










dataID){
return this.$GraphQLStoreRangeUtils_rangeData[dataID]?this.$GraphQLStoreRangeUtils_rangeData[dataID].dataID:dataID;}},{key:'removeRecord',value:function removeRecord(


dataID){var _this=this;
var rangeDataKeys=this.$GraphQLStoreRangeUtils_rangeDataKeyMap[dataID];
if(rangeDataKeys){
rangeDataKeys.forEach(function(key){
delete _this.$GraphQLStoreRangeUtils_rangeData[key];});

delete this.$GraphQLStoreRangeUtils_rangeDataKeyMap[dataID];}}}]);return GraphQLStoreRangeUtils;}();




module.exports=GraphQLStoreRangeUtils;
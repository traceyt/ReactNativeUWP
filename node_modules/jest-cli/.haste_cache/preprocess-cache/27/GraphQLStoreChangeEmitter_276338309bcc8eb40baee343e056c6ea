'use strict';var 








































GraphQLStoreChangeEmitter=function(){






function GraphQLStoreChangeEmitter(rangeData){babelHelpers.classCallCheck(this,GraphQLStoreChangeEmitter);
this.$GraphQLStoreChangeEmitter_batchUpdate=function(callback){return callback();};
this.$GraphQLStoreChangeEmitter_executingIDs={};
this.$GraphQLStoreChangeEmitter_rangeData=rangeData;
this.$GraphQLStoreChangeEmitter_scheduledIDs=null;
this.$GraphQLStoreChangeEmitter_subscribers=[];}babelHelpers.createClass(GraphQLStoreChangeEmitter,[{key:'addListenerForIDs',value:function addListenerForIDs(



ids,
callback)
{var _this=this;
var subscribedIDs=ids.map(function(id){return _this.$GraphQLStoreChangeEmitter_getBroadcastID(id);});
var index=this.$GraphQLStoreChangeEmitter_subscribers.length;
this.$GraphQLStoreChangeEmitter_subscribers.push({subscribedIDs:subscribedIDs,callback:callback});
return {
remove:function(){
delete _this.$GraphQLStoreChangeEmitter_subscribers[index];}};}},{key:'broadcastChangeForID',value:function broadcastChangeForID(




id){var _this2=this;
var scheduledIDs=this.$GraphQLStoreChangeEmitter_scheduledIDs;
if(scheduledIDs==null){
require('resolveImmediate')(function(){return _this2.$GraphQLStoreChangeEmitter_processBroadcasts();});
scheduledIDs=this.$GraphQLStoreChangeEmitter_scheduledIDs={};}



scheduledIDs[this.$GraphQLStoreChangeEmitter_getBroadcastID(id)]=this.$GraphQLStoreChangeEmitter_subscribers.length-1;}},{key:'injectBatchingStrategy',value:function injectBatchingStrategy(


batchStrategy){
this.$GraphQLStoreChangeEmitter_batchUpdate=batchStrategy;}},{key:'$GraphQLStoreChangeEmitter_processBroadcasts',value:function $GraphQLStoreChangeEmitter_processBroadcasts()


{var _this3=this;
if(this.$GraphQLStoreChangeEmitter_scheduledIDs){
this.$GraphQLStoreChangeEmitter_executingIDs=this.$GraphQLStoreChangeEmitter_scheduledIDs;
this.$GraphQLStoreChangeEmitter_scheduledIDs=null;
this.$GraphQLStoreChangeEmitter_batchUpdate(function(){return _this3.$GraphQLStoreChangeEmitter_processSubscribers();});}}},{key:'$GraphQLStoreChangeEmitter_processSubscribers',value:function $GraphQLStoreChangeEmitter_processSubscribers()







{var _this4=this;
this.$GraphQLStoreChangeEmitter_subscribers.forEach(function(subscriber,subscriberIndex){return (
_this4.$GraphQLStoreChangeEmitter_processSubscriber(subscriber,subscriberIndex));});}},{key:'$GraphQLStoreChangeEmitter_processSubscriber',value:function $GraphQLStoreChangeEmitter_processSubscriber(_ref,





subscriberIndex)
{var subscribedIDs=_ref.subscribedIDs;var callback=_ref.callback;
for(var broadcastID in this.$GraphQLStoreChangeEmitter_executingIDs){
if(this.$GraphQLStoreChangeEmitter_executingIDs.hasOwnProperty(broadcastID)){
var broadcastIndex=this.$GraphQLStoreChangeEmitter_executingIDs[broadcastID];
if(broadcastIndex<subscriberIndex){

break;}

if(subscribedIDs.indexOf(broadcastID)>=0){
require('ErrorUtils').applyWithGuard(
callback,
null,
null,
null,
'GraphQLStoreChangeEmitter');

break;}}}}},{key:'$GraphQLStoreChangeEmitter_getBroadcastID',value:function $GraphQLStoreChangeEmitter_getBroadcastID(










id){
return this.$GraphQLStoreChangeEmitter_rangeData.getCanonicalClientID(id);}}]);return GraphQLStoreChangeEmitter;}();



module.exports=GraphQLStoreChangeEmitter;
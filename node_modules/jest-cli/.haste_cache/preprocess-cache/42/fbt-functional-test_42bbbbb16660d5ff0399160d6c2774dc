jest.






autoMockOff();var 

babelTransform=require('babel-core').transform;




function transform(source,extra){
return babelTransform(source,{
plugins:[
require('babel-preset-react-native/plugins')['babel-plugin-transform-react-jsx'],
[require('../index'),extra]]}).

code;}


function payload(obj){
obj.project=obj.project||'';
return JSON.stringify('__FBT__'+JSON.stringify(obj)+'__FBT__');}


function runTest(data,extra){
require('../../util/test-util').assertSourceAstEqual(
transform(data.input,extra),
data.output);}



var functional={
'should convert simple strings':{
input:
'/**@providesModule simpleModule\n*/\n'+
'var x = fbt("A simple string", "It\'s simple");',

output:
'/**@providesModule simpleModule\n*/\n'+
'var x = fbt._('+
payload({
"type":"text",
"texts":["A simple string"],
"desc":"It\'s simple"})+
');'},


'should allow description concatenation':{
input:
'var fbt = require("fbt");\n'+
'var x = fbt("A short string", "With a ridiculously long description '+
'that" + \n " requires concatenation");',

output:
'var fbt = require("fbt");\n'+
'var x = fbt._('+
payload({
"type":"text",
"texts":["A short string"],
"desc":"With a ridiculously long description that "+
"requires concatenation"})+
');'},


'should maintain newlines':{
input:
'var fbt = require("fbt");\n'+
'var x = fbt(\n'+
'  "A simple string... " +\n'+
'  "with some other stuff.",\n'+
'  "blah"'+
');\n'+
'baz();',

output:
'var fbt = require("fbt");\n'+
'var x = fbt._('+
payload({
"type":"text",
"texts":["A simple string... with some other stuff."],
"desc":"blah"})+
'\n\n\n);\nbaz();'},


'should maintain newlines within arguments':{
input:
'var z = fbt("a" +\n'+
'" b " +\n'+
'fbt.param("name1", val1) +\n'+
'" c " +\n'+
'// comments\n'+
'" d " +\n'+
'fbt.param("name2", val2) +\n'+
'" e ",\n'+
'"a"\n'+
');',

output:
'var z = fbt._('+payload({
"type":"text",
"texts":["a b {name1} c d {name2} e"],
"desc":"a"})+
',[\n\nfbt.param("name1",val1),\n'+
'\n\n\nfbt.param("name2",val2)]\n\n\n);'},


'should maintain intra-argument newlines':{
input:
'var z = fbt(fbt.param("name1",\n'+
'foo ?\n'+
'bar :\n'+
'qux) +\n'+
'" blah " +\n'+
'fbt.param("name2", qux),\n'+
'"a"\n);',

output:
'var z = fbt._('+payload({
"type":"text",
"texts":["{name1} blah {name2}"],
"desc":"a"})+
',[fbt.param("name1",\nfoo ?\nbar :\nqux),\n\n'+
'fbt.param("name2",qux)]\n\n);'},


'should be able to nest within React nodes':{
input:
'var React = require("react");\n'+
'var fbt = require("fbt");\n'+
'var x = '+
'  <div>\n'+
'    {fbt("A nested string", "nested!")}\n'+
'  </div>;',

output:
'var React = require("react");\n'+
'var fbt = require("fbt");\nvar x =   React.createElement('+
'"div", null, \n    '+
'fbt._('+payload({
"type":"text",
"texts":["A nested string"],
"desc":"nested!"})+
')\n  );'},


'should handle params':{
input:
'var fbt = require("fbt");\n'+
'var x = fbt("A parameterized message to " + '+
'fbt.param("personName", truthy ? ifTrue : ifFalse), '+
'"Moar params");',

output:
'var fbt = require("fbt");\n'+
'var x = fbt._('+payload({
"type":"text",
"texts":["A parameterized message to {personName}"],
"desc":"Moar params"})+
',[fbt.param("personName",truthy ? ifTrue : ifFalse)]);'},


'should accept well-formed options':{
input:
'fbt("A string that moved files", "options!", '+
'{author: "jwatson", project:"Super Secret"});',

output:
'fbt._('+payload({
"type":"text",
"texts":["A string that moved files"],
"desc":"options!",
"project":"Super Secret"})+
');'},


'should handle enums (with array values)':{
input:
'var x = fbt("Click to see " + '+
'fbt.enum("groups", ["groups", "photos", "videos"]), "enums!");',

output:
'var x = fbt._('+
payload({
"type":"table",
"texts":["Click to see ",
{"type":"enum","values":
{groups:"groups",photos:"photos",videos:"videos"}}],
"desc":"enums!"})+
',[fbt["enum"]("groups",{"groups":"groups","photos":"photos",'+
'"videos":"videos"})]);'},


'should handle enums (with value map)':{
input:
'var x = fbt("Click to see " + '+
'fbt.enum("id1", {id1:"groups",id2:"photos",id3:"videos"}), "enums!");',

output:
'var x = fbt._('+payload({
"type":"table",
"texts":["Click to see ",{"type":"enum","values":{
id1:"groups",id2:"photos",id3:"videos"}}],
"desc":"enums!"})+
',[fbt["enum"]("id1",{"id1":"groups","id2":"photos","id3":"videos"})]);'},


'should handle variations':{
input:
'var x = fbt("Click to see " + '+
'fbt.param("count", c, {number: true}) + " links", "variations!");',

output:
'var x = fbt._('+payload({
"type":"table",
"texts":["Click to see ",{"type":"number","token":"count"}," links"],
"desc":"variations!"})+
',[fbt.param("count",c, [0])]);'},


'should insert param in place of fbt.sameParam if it exists':{
input:
'var z = fbt(fbt.param("name1", val1) + " and " +'+
'fbt.sameParam("name1"), "d");',

output:
'var z = fbt._('+payload({
"type":"text",
"texts":["{name1} and {name1}"],
"desc":"d"})+
',[fbt.param("name1",val1)]);'},


'should handle variations + same param':{
input:
'var val = 42;\n'+
'fbt("You have " + fbt.param("count", val, {number: true}) + '+
'" likes. Comment on it to get more than " +  fbt.sameParam("count") + '+
'" likes",  "test variations + sameParam");',

output:
'var val = 42;\n'+
'fbt._('+payload({
'type':'table',
'texts':[
'You have ',{type:'number',token:'count'},
' likes. Comment on it to get more than {count} likes'],

'desc':'test variations + sameParam'})+
',[fbt.param("count",val, [0])]);'},


'should get project from docblock':{
input:
'/**@fbt {"project": "dev"}*/\n'+
'var x = fbt("Also simple string", "It\'s simple");',

output:
'/**@fbt {"project": "dev"}*/\n'+
'var x = fbt._('+
payload({
"type":"text",
"texts":["Also simple string"],
"desc":"It\'s simple",
"project":"dev"})+
');'},


'should handler wrapping parens':{
input:
'var x = fbt("foo" + "bar" + "baz" + "qux", "desc");\n'+
'var y = fbt("foo" + ("bar" + "baz" + "qux"), "desc");\n'+
'var z = fbt(("foo" + "bar" + "baz") + "qux", "desc");\n'+
'var q = fbt(("foo" + "bar") + ("baz" + "qux"), "desc");\n',

output:
'var x = fbt._('+
payload({
"type":"text",
"texts":["foobarbazqux"],
"desc":"desc"})+
');\n'+
'var y = fbt._('+
payload({
"type":"text",
"texts":["foobarbazqux"],
"desc":"desc"})+
');\n'+
'var z = fbt._('+
payload({
"type":"text",
"texts":["foobarbazqux"],
"desc":"desc"})+
');\n'+
'var q = fbt._('+
payload({
"type":"text",
"texts":["foobarbazqux"],
"desc":"desc"})+
');\n'},


'should handle enums with more text after':{
input:
'var x = fbt("Hello, " + '+
'fbt.enum("groups", ["groups", "photos", "videos"]) + "!", "enums!");',

output:
'var x = fbt._('+
payload({
"type":"table",
"texts":["Hello, ",
{"type":"enum","values":
{groups:"groups",photos:"photos",videos:"videos"}},"!"],
"desc":"enums!"})+
',[fbt["enum"]("groups",{"groups":"groups","photos":"photos",'+
'"videos":"videos"})]);'}};




describe('Test functional fbt syntax translation',function(){
for(var test in functional){
it(test,function(test){
return function(){
runTest(functional[test]);};}(

test));}});



describe('Test fbt meta-data collection',function(){
it('should collect correct meta data',function(){
var fbt=require('../index');

var body=Object.keys(functional).reduce(function(agg,k){

var input=functional[k].input;
return agg+input.replace(/\/\*\*(?:\/|[^*]|\*+[^*\/])*\*+\//,'');},
'');

transform(body,{collectFbt:true});
var expected=[
{
"line_beg":2,
"col_beg":8,
"line_end":2,
"col_end":45,
"project":"",
"desc":"It's simple",
"texts":[
"A simple string"],

"type":"text"},

{
"line_beg":3,
"col_beg":8,
"line_end":4,
"col_end":27,
"project":"",
"desc":"With a ridiculously long description that requires "+
"concatenation",
"texts":[
"A short string"],

"type":"text"},

{
"line_beg":5,
"col_beg":8,
"line_end":8,
"col_end":9,
"project":"",
"desc":"blah",
"texts":[
"A simple string... with some other stuff."],

"type":"text"},

{
"line_beg":9,
"col_beg":14,
"line_end":18,
"col_end":1,
"project":"",
"desc":"a",
"texts":[
"a b {name1} c d {name2} e"],

"type":"text"},

{
"line_beg":18,
"col_beg":10,
"line_end":25,
"col_end":1,
"project":"",
"desc":"a",
"texts":[
"{name1} blah {name2}"],

"type":"text"},

{
"line_beg":28,
"col_beg":5,
"line_end":28,
"col_end":38,
"project":"",
"desc":"nested!",
"texts":[
"A nested string"],

"type":"text"},

{
"line_beg":30,
"col_beg":8,
"line_end":30,
"col_end":110,
"project":"",
"desc":"Moar params",
"texts":[
"A parameterized message to {personName}"],

"type":"text"},

{
"line_beg":30,
"col_beg":111,
"line_end":30,
"col_end":200,
"author":"jwatson",
"project":"Super Secret",
"desc":"options!",
"texts":[
"A string that moved files"],

"type":"text"},

{
"line_beg":30,
"col_beg":209,
"line_end":30,
"col_end":292,
"project":"",
"desc":"enums!",
"texts":[
"Click to see ",
{
"type":"enum",
"values":{
"groups":"groups",
"photos":"photos",
"videos":"videos"}}],



"type":"table"},

{
"line_beg":30,
"col_beg":301,
"line_end":30,
"col_end":391,
"project":"",
"desc":"enums!",
"texts":[
"Click to see ",
{
"type":"enum",
"values":{
"id1":"groups",
"id2":"photos",
"id3":"videos"}}],



"type":"table"},

{
"line_beg":30,
"col_beg":400,
"line_end":30,
"col_end":486,
"project":"",
"desc":"variations!",
"texts":[
"Click to see ",
{
"type":"number",
"token":"count"},

" links"],

"type":"table"},

{
"line_beg":30,
"col_beg":495,
"line_end":30,
"col_end":563,
"project":"",
"desc":"d",
"texts":["{name1} and {name1}"],
"type":"text"},

{
"line_beg":31,
"col_beg":0,
"line_end":31,
"col_end":171,
"project":"",
"desc":"test variations + sameParam",
"texts":[
"You have ",{"type":"number","token":"count"},
" likes. Comment on it to get more than {count} likes"],

"type":"table"},

{
"line_beg":32,
"col_beg":8,
"line_end":32,
"col_end":48,
"project":"",
"desc":"It's simple",
"texts":[
"Also simple string"],

"type":"text"},

{
"line_beg":32,
"col_beg":57,
"line_end":32,
"col_end":99,
"project":"",
"desc":"desc",
"texts":[
"foobarbazqux"],

"type":"text"},

{
"line_beg":33,
"col_beg":8,
"line_end":33,
"col_end":52,
"project":"",
"desc":"desc",
"texts":[
"foobarbazqux"],

"type":"text"},

{
"line_beg":34,
"col_beg":8,
"line_end":34,
"col_end":52,
"project":"",
"desc":"desc",
"texts":[
"foobarbazqux"],

"type":"text"},

{
"line_beg":35,
"col_beg":8,
"line_end":35,
"col_end":54,
"project":"",
"desc":"desc",
"texts":[
"foobarbazqux"],

"type":"text"},

{
"line_beg":36,
"col_beg":8,
"line_end":36,
"col_end":91,
"project":"",
"desc":"enums!",
"texts":[
"Hello, ",
{
"type":"enum",
"values":{
"groups":"groups",
"photos":"photos",
"videos":"videos"}},


"!"],

"type":"table"}];


expect(JSON.stringify(fbt.getExtractedStrings())).toEqual(JSON.stringify(expected));});});
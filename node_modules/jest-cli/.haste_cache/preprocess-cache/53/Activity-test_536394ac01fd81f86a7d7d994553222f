'use strict';









jest.autoMockOff();



describe('Activity',function(){
var origConsoleLog=console.log;

beforeEach(function(){
console.log=jest.genMockFn();
jest.runOnlyPendingTimers();});


afterEach(function(){
console.log=origConsoleLog;});


describe('startEvent',function(){
it('writes a START event out to the console',function(){
var EVENT_NAME='EVENT_NAME';
var DATA={someData:42};

require('../').startEvent(EVENT_NAME,DATA);
jest.runOnlyPendingTimers();

expect(console.log.mock.calls.length).toBe(1);
var consoleMsg=console.log.mock.calls[0][0];
expect(consoleMsg).toContain('START');
expect(consoleMsg).toContain(EVENT_NAME);
expect(consoleMsg).toContain(JSON.stringify(DATA));});});



describe('endEvent',function(){
it('writes an END event out to the console',function(){
var EVENT_NAME='EVENT_NAME';
var DATA={someData:42};

var eventID=require('../').startEvent(EVENT_NAME,DATA);
require('../').endEvent(eventID);
jest.runOnlyPendingTimers();

expect(console.log.mock.calls.length).toBe(2);
var consoleMsg=console.log.mock.calls[1][0];
expect(consoleMsg).toContain('END');
expect(consoleMsg).toContain(EVENT_NAME);
expect(consoleMsg).toContain(JSON.stringify(DATA));});


it('throws when called with an invalid eventId',function(){
expect(function(){return require('../').endEvent(42);}).toThrow();});


it('throws when called with an expired eventId',function(){
var eid=require('../').startEvent('','');
require('../').endEvent(eid);
expect(function(){
require('../').endEvent(eid);}).
toThrow();});});});
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails oncall+relay
 */

'use strict';var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};

require('configureForRelayOSS');

jest.dontMock('RelayRenderer');








describe('RelayRenderer.onReadyStateChange', function () {
  var MockComponent = undefined;
  var MockContainer = undefined;

  var container = undefined;
  var queryConfig = undefined;

  beforeEach(function () {
    jest.resetModuleRegistry();

    MockComponent = require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createClass({ displayName: 'MockComponent', render: function () {return require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement('div', null);} });
    MockContainer = require('Relay').createContainer(MockComponent, { 
      fragments: {} });


    container = document.createElement('div');
    queryConfig = require('RelayQueryConfig').genMockInstance();});


  var onReadyStateChange = undefined;

  beforeEach(function () {
    onReadyStateChange = jest.genMockFunction();
    require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react-dom').render(
    require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(require('RelayRenderer'), { 
      Container: MockContainer, 
      queryConfig: queryConfig, 
      onReadyStateChange: onReadyStateChange }), 

    container);

    var defaultState = { 
      aborted: false, 
      done: false, 
      error: null, 
      mounted: true, 
      ready: false, 
      stale: false };

    jasmine.addMatchers({ 
      toTriggerReadyStateChanges: function () {
        return { 
          compare: function (requestCallback, expected) {
            var request = require('RelayStore').primeCache.mock.requests[0];
            requestCallback(request);
            jest.runAllTimers();

            expect(onReadyStateChange.mock.calls.map(function (args) {return args[0];})).toEqual(
            expected.map(function (deltaState) {return _extends({}, defaultState, deltaState);}));

            return { 
              pass: true };} };} });});







  it('does nothing before `prime` starts', function () {
    expect(function () {
      // Nothing.
    }).toTriggerReadyStateChanges([
      // Nothing.
    ]);});


  it('is not ready or done after a request', function () {
    expect(function (request) {
      request.block();}).
    toTriggerReadyStateChanges([
    { done: false, ready: false }]);});



  it('is ready but not done when required data is resolved', function () {
    expect(function (request) {
      request.block();
      request.resolve();}).
    toTriggerReadyStateChanges([
    { done: false, ready: false }, 
    { done: false, ready: true }]);});



  it('is ready and done when request succeeds', function () {
    expect(function (request) {
      request.block();
      request.resolve();
      request.succeed();}).
    toTriggerReadyStateChanges([
    { done: false, ready: false }, 
    { done: false, ready: true }, 
    { done: true, ready: true }]);});



  it('is ready and done if data is resolved without a request', function () {
    expect(function (request) {
      request.resolve();
      request.succeed();}).
    toTriggerReadyStateChanges([
    { done: false, ready: true }, 
    { done: true, ready: true }]);});



  it('is ready with an error when a failure occurs with required data', function () {
    var error = new Error('Expected error.');
    expect(function (request) {
      request.block();
      request.resolve();
      request.fail(error);}).
    toTriggerReadyStateChanges([
    { done: false, error: null, ready: false }, 
    { done: false, error: null, ready: true }, 
    { done: false, error: error, ready: true }]);});



  it('has an error when a failure occurs without required data', function () {
    var error = new Error('Expected error.');
    expect(function (request) {
      request.block();
      request.fail(error);}).
    toTriggerReadyStateChanges([
    { done: false, error: null, ready: false }, 
    { done: false, error: error, ready: false }]);});



  it('has an error when a failure occurs before sending a request', function () {
    var error = new Error('Expected error.');
    expect(function (request) {
      request.fail(error);}).
    toTriggerReadyStateChanges([
    { done: false, error: error, ready: false }]);});



  it('does nothing when aborted from query configuration change', function () {
    expect(function (request) {
      require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react-dom').render(
      require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(require('RelayRenderer'), { 
        Container: MockContainer, 
        queryConfig: require('RelayQueryConfig').genMockInstance(), 
        onReadyStateChange: onReadyStateChange }), 

      container);}).

    toTriggerReadyStateChanges([
      // Nothing.
    ]);});


  it('is aborted and not mounted when aborted from unmounting', function () {
    expect(function (request) {
      require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react-dom').unmountComponentAtNode(container);}).
    toTriggerReadyStateChanges([
    { aborted: true, mounted: false }]);});});
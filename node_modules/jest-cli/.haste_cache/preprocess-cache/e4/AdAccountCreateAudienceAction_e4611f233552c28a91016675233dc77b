'use strict';
















require('GraphQLMutatorHub').registerForRangeAddMutationType(
'ad_audience_create',
{
connectionName:'audiences',
edgeName:'ad_account_ad_audiences_edge'});



var AdAccountCreateAudienceAction={







createAudience:function(
adAccountID,
audienceName,
targetSpec,
onSuccess,
onFailure)
{
!
require('isValidRecordID')(adAccountID)?require('invariant')(0,
'Action taken on unknown ad account id '+adAccountID):undefined;


var mutationFrag=require('GraphQLMutationQueryCreator').createRangeAddQuery(
'ad_audience_create',
'audiences',
'ad_account_ad_audiences_edge',
adAccountID,
'ad_account');


var mutation=function(RQL_0){return {calls:[{kind:'Call',metadata:{},name:'ad_audience_create',value:{kind:'CallVariable',callVariableName:'input'}}],children:[].concat.apply([],[{fieldName:'client_mutation_id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},require('Relay').QL.__frag(RQL_0)]),kind:'Mutation',metadata:{inputType:'AdAudienceCreateData!'},name:'AdAccountCreateAudienceAction',responseType:'AdAudienceCreateResponsePayload'};}(


mutationFrag);




var action=new (require('AdsManagerMutationAction'))(
require('MobileAdsManagerLoggerConsts').events.CREATE_AUDIENCE);


action.runServerAction(
mutation,
{
ad_account_id:adAccountID,
name:audienceName,
target_spec:targetSpec},

function(err,response){
if(err){
onFailure&&onFailure(err);}else 
{
onSuccess&&onSuccess(response);}



var id=action.getClientMutationID();
require('defaultRQLMutationCallback')(err,response,mutation,id);});}};





module.exports=AdAccountCreateAudienceAction;
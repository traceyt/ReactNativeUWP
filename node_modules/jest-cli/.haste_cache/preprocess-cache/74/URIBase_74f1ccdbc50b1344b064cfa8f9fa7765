var 
























UNSAFE_DOMAIN_PATTERN=new RegExp(


'[\\x00-\\x2c\\x2f\\x3b-\\x40\\x5c\\x5e\\x60\\x7b-\\x7f'+

'\\uFDD0-\\uFDEF\\uFFF0-\\uFFFF'+

'\\u2047\\u2048\\uFE56\\uFE5F\\uFF03\\uFF0F\\uFF1F]');


var SECURITY_PATTERN=new RegExp(

'^(?:[^/]*:|'+

'[\\x00-\\x1f]*/[\\x00-\\x1f]*/)');














function parse(uri,uriToParse,shouldThrow,serializer){
if(!uriToParse){
return true;}



if(uriToParse instanceof URIBase){
uri.setProtocol(uriToParse.getProtocol());
uri.setDomain(uriToParse.getDomain());
uri.setPort(uriToParse.getPort());
uri.setPath(uriToParse.getPath());
uri.setQueryData(
serializer.deserialize(
serializer.serialize(uriToParse.getQueryData())));


uri.setFragment(uriToParse.getFragment());
uri.setForceFragmentSeparator(uriToParse.getForceFragmentSeparator());
return true;}


uriToParse=uriToParse.toString().trim();
var components=require('URIRFC3986').parse(uriToParse)||{};
if(!shouldThrow&&!require('URISchemes').isAllowed(components.scheme)){
return false;}

uri.setProtocol(components.scheme||'');
if(!shouldThrow&&UNSAFE_DOMAIN_PATTERN.test(components.host)){
return false;}

uri.setDomain(components.host||'');
uri.setPort(components.port||'');
uri.setPath(components.path||'');
if(shouldThrow){
uri.setQueryData(serializer.deserialize(components.query)||{});}else 
{
try{
uri.setQueryData(serializer.deserialize(components.query)||{});}
catch(err){
return false;}}


uri.setFragment(components.fragment||'');


if(components.fragment===''){
uri.setForceFragmentSeparator(true);}


if(components.userinfo!==null){
if(shouldThrow){
throw new Error(require('ex')(
'URI.parse: invalid URI (userinfo is not allowed in a URI): %s',
uri.toString()));}else 

{
return false;}}





if(!uri.getDomain()&&uri.getPath().indexOf('\\')!==-1){
if(shouldThrow){
throw new Error(require('ex')(
'URI.parse: invalid URI (no domain but multiple back-slashes): %s',
uri.toString()));}else 

{
return false;}}





if(!uri.getProtocol()&&SECURITY_PATTERN.test(uriToParse)){
if(shouldThrow){
throw new Error(require('ex')(
'URI.parse: invalid URI (unsafe protocol-relative URLs): %s',
uri.toString()));}else 

{
return false;}}


return true;}





var uriFilters=[];var 

























URIBase=function(){






function URIBase(uri,serializer){babelHelpers.classCallCheck(this,URIBase);
!serializer?require('invariant')(0,'no serializer set'):undefined;
this.$URIBase_serializer=serializer;

this.$URIBase_protocol='';
this.$URIBase_domain='';
this.$URIBase_port='';
this.$URIBase_path='';
this.$URIBase_fragment='';
this.$URIBase_queryData={};
this.$URIBase_forceFragmentSeparator=false;
parse(this,uri,true,serializer);}babelHelpers.createClass(URIBase,[{key:'setProtocol',value:function setProtocol(








protocol){
!
require('URISchemes').isAllowed(protocol)?require('invariant')(0,
'"%s" is not a valid protocol for a URI.',protocol):undefined;

this.$URIBase_protocol=protocol;
return this;}},{key:'getProtocol',value:function getProtocol(







protocol){
return this.$URIBase_protocol;}},{key:'setSecure',value:function setSecure(








secure){
return this.setProtocol(secure?'https':'http');}},{key:'isSecure',value:function isSecure()







{
return this.getProtocol()==='https';}},{key:'setDomain',value:function setDomain(








domain){




if(UNSAFE_DOMAIN_PATTERN.test(domain)){
throw new Error(require('ex')(
'URI.setDomain: unsafe domain specified: %s for url %s',
domain,
this.toString()));}



this.$URIBase_domain=domain;
return this;}},{key:'getDomain',value:function getDomain()







{
return this.$URIBase_domain;}},{key:'setPort',value:function setPort(








port){
this.$URIBase_port=port;
return this;}},{key:'getPort',value:function getPort()







{
return this.$URIBase_port;}},{key:'setPath',value:function setPath(








path){
if(__DEV__){
if(path&&path.charAt(0)!=='/'){
console.warn('Path does not begin with a "/" which means this URI '+
'will likely be malformed. Ensure any string passed to .setPath() '+
'leads with "/"');}}


this.$URIBase_path=path;
return this;}},{key:'getPath',value:function getPath()







{
return this.$URIBase_path;}},{key:'addQueryData',value:function addQueryData(









mapOrKey,value){

if(Object.prototype.toString.call(mapOrKey)==='[object Object]'){
babelHelpers.extends(this.$URIBase_queryData,mapOrKey);}else 
{
this.$URIBase_queryData[mapOrKey]=value;}

return this;}},{key:'setQueryData',value:function setQueryData(









map){
this.$URIBase_queryData=map;
return this;}},{key:'getQueryData',value:function getQueryData()







{
return this.$URIBase_queryData;}},{key:'removeQueryData',value:function removeQueryData(








keys){
if(!Array.isArray(keys)){
keys=[keys];}

for(var i=0,length=keys.length;i<length;++i){
delete this.$URIBase_queryData[keys[i]];}

return this;}},{key:'setFragment',value:function setFragment(








fragment){
this.$URIBase_fragment=fragment;

this.setForceFragmentSeparator(false);
return this;}},{key:'getFragment',value:function getFragment()







{
return this.$URIBase_fragment;}},{key:'setForceFragmentSeparator',value:function setForceFragmentSeparator(

















shouldForce){
this.$URIBase_forceFragmentSeparator=shouldForce;
return this;}},{key:'getForceFragmentSeparator',value:function getForceFragmentSeparator()








{
return this.$URIBase_forceFragmentSeparator;}},{key:'isEmpty',value:function isEmpty()







{
return !(
this.getPath()||
this.getProtocol()||
this.getDomain()||
this.getPort()||
Object.keys(this.getQueryData()).length>0||
this.getFragment());}},{key:'toString',value:function toString()








{
var uri=this;
for(var i=0;i<uriFilters.length;i++){
uri=uriFilters[i](uri);}

return uri.$URIBase_toStringImpl();}},{key:'$URIBase_toStringImpl',value:function $URIBase_toStringImpl()








{
var str='';
var protocol=this.getProtocol();
if(protocol){
str+=protocol+'://';}

var domain=this.getDomain();
if(domain){
str+=domain;}

var port=this.getPort();
if(port){
str+=':'+port;}





var path=this.getPath();
if(path){
str+=path;}else 
if(str){
str+='/';}

var queryStr=this.$URIBase_serializer.serialize(this.getQueryData());
if(queryStr){
str+='?'+queryStr;}

var fragment=this.getFragment();
if(fragment){
str+='#'+fragment;}else 
if(this.getForceFragmentSeparator()){
str+='#';}

return str;}},{key:'getOrigin',value:function getOrigin()

















{
var port=this.getPort();
return this.getProtocol()+
'://'+
this.getDomain()+(
port?':'+port:'');}}],[{key:'registerFilter',value:function registerFilter(filter){uriFilters.push(filter);}}]);return URIBase;}();













URIBase.isValidURI=function(uri,serializer){
return parse(new URIBase(null,serializer),uri,false,serializer);};


module.exports=URIBase;
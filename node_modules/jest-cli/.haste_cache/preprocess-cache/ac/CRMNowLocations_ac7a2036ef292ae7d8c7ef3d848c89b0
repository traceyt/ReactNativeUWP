'use strict';











































var DEAFULT_RADIUS_FOR_KM=20;
var DEFAULT_RADIUS_FOR_MILE=10;
var MAX_GEO_TARGETING_LENGTH=50;
var MAX_RADIUS_FOR_MILE=50;
var MILES_TO_KM_FACTOR=1.6;
var MIN_RADIUS_FOR_KM=2;
var MIN_RADIUS_FOR_MILE=1;



var HistoricalLocationTypes=require('keyMirror')({
HOME:null,
RECENT:null});




























































var InitialCustomLocationSources=require('keyMirror')({
PAGE:null,
CURRENT:null,
PROFILE:null,
FALLBACK:null});


var CRMNowLocations=babelHelpers.extends(require('CRMNowLocationTypes'),{

HistoricalLocationTypes:HistoricalLocationTypes,

InitialCustomLocationSources:InitialCustomLocationSources,

minCustomLocationRadius:function(distanceUnit){
if(distanceUnit===require('CRMNowDistanceUnits').DistanceUnits.MILE){
return MIN_RADIUS_FOR_MILE;}

if(distanceUnit===require('CRMNowDistanceUnits').DistanceUnits.KM){
return MIN_RADIUS_FOR_KM;}

!false?require('invariant')(0,'Invalid distance unit: '+distanceUnit):undefined;},


maxCustomLocationRadius:function(distanceUnit){
if(distanceUnit===require('CRMNowDistanceUnits').DistanceUnits.MILE){
return MAX_RADIUS_FOR_MILE;}

if(distanceUnit===require('CRMNowDistanceUnits').DistanceUnits.KM){
return MAX_RADIUS_FOR_MILE*MILES_TO_KM_FACTOR;}

!false?require('invariant')(0,'Invalid distance unit: '+distanceUnit):undefined;},


getDefaultRadius:function(distanceUnit){
if(distanceUnit===require('CRMNowDistanceUnits').DistanceUnits.MILE){
return DEFAULT_RADIUS_FOR_MILE;}

if(distanceUnit===require('CRMNowDistanceUnits').DistanceUnits.KM){
return DEAFULT_RADIUS_FOR_KM;}

!false?require('invariant')(0,'Invalid distance unit: '+distanceUnit):undefined;},


getDefaultDistanceUnitFromLocation:function(
location)
{


if(!location){
return require('CRMNowDistanceUnits').DistanceUnits.MILE;}

var country=location.reverse_geocode_detailed&&
location.reverse_geocode_detailed.country;

if(country==='USA'||country==='GBR'){
return require('CRMNowDistanceUnits').DistanceUnits.MILE;}

return require('CRMNowDistanceUnits').DistanceUnits.KM;},


humanReadableLocationType:function(location){
switch(location.location_type){
case CRMNowLocations.REGION:
return require('fbt')._('__FBT__{"type":"text","texts":["REGION"],"desc":"Uppercase lebel that identifies the preceding location text as geographical region that is neither a city nor a country. Example: [Hawaii REGION]. Space is limited.","project":""}__FBT__');






case CRMNowLocations.CITY:
return require('fbt')._('__FBT__{"type":"text","texts":["CITY"],"desc":"Uppercase lebel that identifies the preceding location text as a city. Example: [New York CITY]. Space is limited.","project":""}__FBT__');





case CRMNowLocations.ZIP:
return require('fbt')._('__FBT__{"type":"text","texts":["ZIPCODE"],"desc":"Uppercase lebel that identifies the preceding location text as an zipcode. Example: [94301 ZIPCODE]. Space is limited.","project":""}__FBT__');






case CRMNowLocations.COUNTRY:
return require('fbt')._('__FBT__{"type":"text","texts":["COUNTRY"],"desc":"Uppercase lebel that identifies the preceding location text as a country. Example: [USA COUNTRY]. Space is limited.","project":""}__FBT__');





default:
return location.location_type;}},



humanReadableAddress:function(address){
return address&&address.address_string?
address.address_string:require('fbt')._('__FBT__{"type":"text","texts":["Custom Location..."],"desc":"Label indicating that the user selected a custom location (for instance, the user\'s current location) on a map but it is still trying to load more specific location information. For example, after more information is loaded, \'Custom Location...\' will be replaced by \'near Menlo Park\'.","project":""}__FBT__');},










humanReadableLocation:function(location){
!
!!require('CRMNowLocationTypes')[location.location_type]?require('invariant')(0,
'Invalid location type: '+location.location_type):undefined;

if(location.location_type===require('CRMNowLocationTypes').CUSTOM_LOCATION){
var addressString=
CRMNowLocations.humanReadableAddress(location.address);
var distanceUnit=
require('CRMNowDistanceUnits').humanReadableDistanceUnitShorthand(
location.distance_unit);

return require('fbt')._('__FBT__{"type":"text","texts":["{street address string, e.g. \'1 Hacker Way, Menlo Park, CA\'} +{radius number of a location, e.g. \'20\' in the string of \'1 Hacker Way, Menlo Park, CA +20 miles\'} {distance unit, \'mile\', \'miles\' or \'km\'}"],"desc":"String indicating a custom area specified by a center address string and a number of radius in mile or km. e.g. \'1 Hacker Way, Menlo Park, CA +20 miles\'","project":""}__FBT__',[require('fbt').param(




'street address string, e.g. \'1 Hacker Way, Menlo Park, CA\'',
addressString),require('fbt').param(



'radius number of a location, e.g. \'20\' in the string of \'1 Hacker Way, Menlo Park, CA +20 miles\'',
location.radius),require('fbt').param(


'distance unit, \'mile\', \'miles\' or \'km\'',
distanceUnit)]);}




return location.name;},


humanReadableLocationShorthand:function(location){
!
!!require('CRMNowLocationTypes')[location.location_type]?require('invariant')(0,
'Invalid location type: '+location.location_type):undefined;

if(location.location_type===require('CRMNowLocationTypes').COUNTRY){
return location.country_code;}

if(location.location_type===require('CRMNowLocationTypes').CUSTOM_LOCATION){
return CRMNowLocations.humanReadableLocation(location);}

if(!location.name||!location.name.length){
return '';}

return location.name.split(',').slice(0,1).toString();},


getCountryName:function(location){
return require('AdsCountriesConfig').countries[location.country_code];},


getLegalDrinkingAge:function(location){
return require('AdsCountriesConfig').legalDrinkingAges[
location.country_code];},


getPageAddressForSpec:function(page){
var address=page.address;
if(!address||!address.street||!address.city||!address.country||
!(address.country in require('AdsCountriesConfig').countries)){
return '';}


var country=require('AdsCountriesConfig').countries[address.country];
var cityRx=new RegExp(', '+country+'$');
var city=address.city.replace(cityRx,'');

return [
address.street,
city,
country].
join(', ');},












humanReadableLocationsSnippet:function(locations){
var results=[];
var countries=locations.filter(
function(location){return location.location_type===require('CRMNowLocationTypes').COUNTRY;});

results=results.concat(countries);
var regions=locations.filter(
function(location){return location.location_type===require('CRMNowLocationTypes').REGION;});

results=results.concat(regions);
var cities=locations.filter(
function(location){return location.location_type===require('CRMNowLocationTypes').CITY;});

results=results.concat(cities);
var zips=locations.filter(
function(location){return location.location_type===require('CRMNowLocationTypes').ZIP;});

results=results.concat(zips);
var customLocations=locations.filter(
function(location){return location.location_type===require('CRMNowLocationTypes').CUSTOM_LOCATION;});

results=results.concat(customLocations);
results=results.map(
function(location){return CRMNowLocations.humanReadableLocationShorthand(location);});

return require('CRMNowStringUtils').getLimitedDisplayString(
results,
MAX_GEO_TARGETING_LENGTH);},



humanReadableLocations:function(locations){
return require('intlList')(
locations.map(
function(location){return CRMNowLocations.humanReadableLocation(location);}),

require('intlList').CONJUNCTIONS.NONE);},



humanReadableLocationsShorthand:function(locations){
return require('intlList')(
locations.map(
function(location){return CRMNowLocations.humanReadableLocationShorthand(location);}),

require('intlList').CONJUNCTIONS.NONE);},



getCountryNames:function(locations){
var countries=[];
locations.forEach(function(location){
var countryName=CRMNowLocations.getCountryName(location);
if(countries.indexOf(countryName)===-1){
countries.push(countryName);}});


return require('intlList')(
countries,
require('intlList').CONJUNCTIONS.NONE);},



filterUnsupportedLocations:function(
locations)
{

var supportedLocationTypes=require('keyMirror')({
COUNTRY:null,
REGION:null,
CITY:null,
ZIP:null});

return locations.filter(
function(location){return !!supportedLocationTypes[location.location_type];});},



getConflictingLocationsForLocation:function(
selectedLocations,
newLocation)
{
return selectedLocations.filter(
function(location){return (
CRMNowLocations.isLocationContained(location,newLocation)||
CRMNowLocations.isLocationContained(newLocation,location));});},








isLocationContained:function(
containingLocation,
containedLocation)
{
if(containingLocation.location_type===require('CRMNowLocationTypes').COUNTRY){
return containedLocation.location_type!==require('CRMNowLocationTypes').COUNTRY&&
containedLocation.country_code===containingLocation.key;}

if(containingLocation.location_type===require('CRMNowLocationTypes').REGION){
return (containedLocation.location_type===require('CRMNowLocationTypes').CITY||
containedLocation.location_type===require('CRMNowLocationTypes').ZIP)&&
containedLocation.region_key===containingLocation.key;}

return false;},


getRegionForLocation:function(location,delta){
return {
latitude:parseFloat(location.latitude),
longitude:parseFloat(location.longitude),
latitudeDelta:delta,
longitudeDelta:delta};}});




module.exports=CRMNowLocations;
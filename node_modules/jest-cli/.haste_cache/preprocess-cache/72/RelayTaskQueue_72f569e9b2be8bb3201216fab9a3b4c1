'use strict';var 





































RelayTaskQueue=function(){




function RelayTaskQueue(injectedScheduler){babelHelpers.classCallCheck(this,RelayTaskQueue);
this.$RelayTaskQueue_queue=[];
this.$RelayTaskQueue_running=false;
this.$RelayTaskQueue_schedule=injectedScheduler;}babelHelpers.createClass(RelayTaskQueue,[{key:'enqueue',value:function enqueue()










































{var _this=this;for(var _len=arguments.length,callbacks=Array(_len),_key=0;_key<_len;_key++){callbacks[_key]=arguments[_key];}
var promise=new Promise(function(resolve,reject){
var nextIndex=0;
var error=null;
var enqueueNext=function(value){
if(error){
reject(error);
return;}

if(nextIndex>=callbacks.length){
resolve(value);}else 
{
_this.$RelayTaskQueue_queue.push(function(){
enqueueNext(function(){
var nextCallback=callbacks[nextIndex++];
try{
value=nextCallback(value);}
catch(e){
error=e;
value=undefined;}

return value;}());});}};




enqueueNext(undefined);});

this.$RelayTaskQueue_scheduleIfNecessary();
return promise;}},{key:'injectScheduler',value:function injectScheduler(









injectedScheduler){
this.$RelayTaskQueue_schedule=injectedScheduler;}},{key:'$RelayTaskQueue_createTaskExecutor',value:function $RelayTaskQueue_createTaskExecutor(


callback){var _this2=this;
var invoked=false;
return function(){
!!invoked?require('invariant')(0,'RelayTaskQueue: Tasks can only be executed once.'):undefined;
invoked=true;
_this2.$RelayTaskQueue_invokeWithinScopedQueue(callback);
_this2.$RelayTaskQueue_running=false;
_this2.$RelayTaskQueue_scheduleIfNecessary();};}},{key:'$RelayTaskQueue_invokeWithinScopedQueue',value:function $RelayTaskQueue_invokeWithinScopedQueue(



callback){
var originalQueue=this.$RelayTaskQueue_queue;
this.$RelayTaskQueue_queue=[];
try{
callback();}finally 
{
Array.prototype.unshift.apply(originalQueue,this.$RelayTaskQueue_queue);
this.$RelayTaskQueue_queue=originalQueue;}}},{key:'$RelayTaskQueue_scheduleIfNecessary',value:function $RelayTaskQueue_scheduleIfNecessary()



{
if(this.$RelayTaskQueue_running){
return;}

if(this.$RelayTaskQueue_queue.length){
this.$RelayTaskQueue_running=true;
var _executeTask=this.$RelayTaskQueue_createTaskExecutor(this.$RelayTaskQueue_queue.shift());
if(this.$RelayTaskQueue_schedule){
this.$RelayTaskQueue_schedule(_executeTask);}else 
{
_executeTask();}}else 

{
this.$RelayTaskQueue_running=false;}}}]);return RelayTaskQueue;}();




module.exports=RelayTaskQueue;
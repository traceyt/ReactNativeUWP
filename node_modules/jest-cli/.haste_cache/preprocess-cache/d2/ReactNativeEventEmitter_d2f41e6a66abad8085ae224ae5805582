'use strict';





















var topLevelTypes=require('EventConstants').topLevelTypes;







var EMPTY_NATIVE_EVENT={};








var touchSubsequence=function(touches,indices){
var ret=[];
for(var i=0;i<indices.length;i++){
ret.push(touches[indices[i]]);}

return ret;};













var removeTouchesAtIndices=function(
touches,
indices)
{
var rippedOut=[];


var temp=touches;
for(var i=0;i<indices.length;i++){
var index=indices[i];
rippedOut.push(touches[index]);
temp[index]=null;}

var fillAt=0;
for(var j=0;j<temp.length;j++){
var cur=temp[j];
if(cur!==null){
temp[fillAt++]=cur;}}


temp.length=fillAt;
return rippedOut;};











var ReactNativeEventEmitter=require('merge')(require('ReactEventEmitterMixin'),{

registrationNames:require('EventPluginHub').registrationNameModules,

putListener:require('EventPluginHub').putListener,

getListener:require('EventPluginHub').getListener,

deleteListener:require('EventPluginHub').deleteListener,

deleteAllListeners:require('EventPluginHub').deleteAllListeners,











_receiveRootNodeIDEvent:function(
rootNodeID,
topLevelType,
nativeEventParam)
{
var nativeEvent=nativeEventParam||EMPTY_NATIVE_EVENT;
ReactNativeEventEmitter.handleTopLevel(
topLevelType,
rootNodeID,
rootNodeID,
nativeEvent,
nativeEvent.target);},










receiveEvent:function(
tag,
topLevelType,
nativeEventParam)
{
var rootNodeID=require('ReactNativeTagHandles').tagToRootNodeID[tag];
ReactNativeEventEmitter._receiveRootNodeIDEvent(
rootNodeID,
topLevelType,
nativeEventParam);},



























receiveTouches:function(
eventTopLevelType,
touches,
changedIndices)
{
var changedTouches=
eventTopLevelType===topLevelTypes.topTouchEnd||
eventTopLevelType===topLevelTypes.topTouchCancel?
removeTouchesAtIndices(touches,changedIndices):
touchSubsequence(touches,changedIndices);

for(var jj=0;jj<changedTouches.length;jj++){
var touch=changedTouches[jj];


touch.changedTouches=changedTouches;
touch.touches=touches;
var nativeEvent=touch;
var rootNodeID=null;
var target=nativeEvent.target;
if(target!==null&&target!==undefined){
if(target<require('ReactNativeTagHandles').tagsStartAt){
if(__DEV__){
require('fbjs/lib/warning')(
false,
'A view is reporting that a touch occured on tag zero.');}}else 


{
rootNodeID=require('NodeHandle').getRootNodeID(target);}}


ReactNativeEventEmitter._receiveRootNodeIDEvent(
rootNodeID,
eventTopLevelType,
nativeEvent);}}});





module.exports=ReactNativeEventEmitter;
'use strict';












































function transformRelayQueryPayload(
root,
clientData,
config)
{
if(clientData==null){
return clientData;}else 
{
return require('mapObject')(clientData,function(item){


if(Array.isArray(item)){
return item.map(
function(innerItem){return transform(root,innerItem,config);});}


return transform(root,item,config);});}}




function transform(
root,
clientData,
config)
{
if(clientData==null){
return clientData;}

var transformer=new RelayPayloadTransformer(config);
var serverData={};
transformer.visit(root,{
client:clientData,
server:serverData});

return serverData;}var 


RelayPayloadTransformer=function(_RelayQueryVisitor){babelHelpers.inherits(RelayPayloadTransformer,_RelayQueryVisitor);











function RelayPayloadTransformer(config){babelHelpers.classCallCheck(this,RelayPayloadTransformer);var _this=babelHelpers.possibleConstructorReturn(this,Object.getPrototypeOf(RelayPayloadTransformer).call(this));

if(config){
_this.$RelayPayloadTransformer_getKeyForClientData=config.getKeyForClientData;
_this.$RelayPayloadTransformer_traverseChildren=config.traverseChildren;}return _this;}babelHelpers.createClass(RelayPayloadTransformer,[{key:'$RelayPayloadTransformer_getKeyForClientData',value:function $RelayPayloadTransformer_getKeyForClientData(



field){
return field.getApplicationName();}},{key:'traverseChildren',value:function traverseChildren(



node,
nextState,
callback,




context)
{
if(this.$RelayPayloadTransformer_traverseChildren){
this.$RelayPayloadTransformer_traverseChildren(node,callback,context);}else 
{
babelHelpers.get(Object.getPrototypeOf(RelayPayloadTransformer.prototype),'traverseChildren',this).call(this,node,nextState,callback,context);}}},{key:'visitField',value:function visitField(




node,
state)
{var _this2=this;var 
client=state.client;var server=state.server;
var applicationName=this.$RelayPayloadTransformer_getKeyForClientData(node);
var serializationKey=node.getSerializationKey();
var clientData=client[applicationName];
var serverData=server[serializationKey];

if(!node.canHaveSubselections()||clientData==null){
server[serializationKey]=clientData;}else 
if(Array.isArray(clientData)){
if(serverData==null){
server[serializationKey]=serverData=[];}

clientData.forEach(function(clientItem,index){
!
Array.isArray(serverData)?require('invariant')(0,
'RelayPayloadTransformer: Got conflicting values for field `%s`: '+
'expected values to be arrays.',
applicationName):undefined;

if(clientItem==null){
serverData[index]=clientItem;
return;}

var serverItem=serverData&&serverData[index];
if(serverItem==null){
serverData[index]=serverItem={};}

_this2.traverse(node,{
client:clientItem,
server:serverItem});});}else 


{
!(
typeof clientData==='object'&&clientData!==null)?require('invariant')(0,
'RelayPayloadTransformer: Expected an object value for field `%s`.',
applicationName):undefined;

!(
serverData==null||typeof serverData==='object')?require('invariant')(0,
'RelayPayloadTransformer: Got conflicting values for field `%s`: '+
'expected values to be objects.',
applicationName):undefined;

if(serverData==null){
server[serializationKey]=serverData={};}

this.traverse(node,{
client:clientData,
server:serverData});}}}]);return RelayPayloadTransformer;}(require('RelayQueryVisitor'));





module.exports=transformRelayQueryPayload;
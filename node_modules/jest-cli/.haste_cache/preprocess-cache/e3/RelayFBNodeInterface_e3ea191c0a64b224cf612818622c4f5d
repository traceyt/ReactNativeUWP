'use strict';

































var RelayFBNodeInterface={
ANY_TYPE:'__any',
ID:'id',
ID_TYPE:'ID!',
NODE:'node',
NODE_TYPE:'Node',
NODES:'nodes',
TYPENAME:'__typename',

isNodeRootCall:function(fieldName){
return (
fieldName===RelayFBNodeInterface.NODE||
fieldName===RelayFBNodeInterface.NODES);},



getResultsFromPayload:function(
store,
query,
payload)
{
var results=[];

var rootBatchCall=query.getBatchCall();
if(rootBatchCall){
Object.keys(payload).forEach(function(dataID){
var result=payload[dataID];
if(typeof result==='object'&&result!==null){
!(
result[RelayFBNodeInterface.ID]===dataID)?require('invariant')(0,
'RelayFBNodeInterface.getResultsFromPayload(): Expected each '+
'batch response for query `%s()` to have an `id`.',
query.getName()):undefined;

results.push({dataID:dataID,result:result});}});}else 


{(function(){
var fieldName=query.getFieldName();
var storageKey=query.getStorageKey();
require('forEachRootCallArg')(query,function(_ref){var identifyingArgValue=_ref.identifyingArgValue;var identifyingArgKey=_ref.identifyingArgKey;
var payloadKey=getPayloadKey(payload,fieldName,identifyingArgValue);
if(payloadKey==null||!payload.hasOwnProperty(payloadKey)){
return;}

var result=payload[payloadKey];
var dataID=store.getDataID(storageKey,identifyingArgKey);

if(dataID==null){
var payloadID=
typeof result==='object'&&result&&
typeof result[RelayFBNodeInterface.ID]==='string'?
result[RelayFBNodeInterface.ID]:
null;
if(payloadID!=null){




dataID=payloadID;}else 
if(identifyingArgKey==null){


dataID='client:'+fieldName;}else 
{


dataID=require('generateClientID')();}}


results.push({
dataID:dataID,
result:result,
rootCallInfo:{storageKey:storageKey,identifyingArgKey:identifyingArgKey}});});})();}




return results;}};







function getPayloadKey(
payload,
fieldName,
identifyingArgValue)
{
var payloadKey=undefined;
var payloadKeys=Object.keys(payload);
if(payloadKeys.length===1){
payloadKey=payloadKeys[0];}else 
if(identifyingArgValue==null){
!(
payloadKeys.length<2)?require('invariant')(0,
'RelayFBNodeInterface: Expected payload to have at most 1 payload '+
'for root call `%s()`, called with %s payloads.',
fieldName,
payloadKeys.length):undefined;

payloadKey=payloadKeys[0];}else 
{
!(
typeof identifyingArgValue==='string'||
typeof identifyingArgValue==='number')?require('invariant')(0,
'RelayFBNodeInterface: Expected argument to root call `%s(%s)` to be '+
'a number or string, got `%s`.',
fieldName,
identifyingArgValue,
identifyingArgValue):undefined;

payloadKey=''+identifyingArgValue;}

return payloadKey;}


module.exports=RelayFBNodeInterface;
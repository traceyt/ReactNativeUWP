'use strict';
























var _emitter=new (require('EventEmitter'))();


















































var InteractionManager={
Events:require('fbjs/lib/keyMirror')({
interactionStart:true,
interactionComplete:true}),





runAfterInteractions:function(task){
return new Promise(function(resolve){
_scheduleUpdate();
if(task){
_taskQueue.enqueue(task);}

var name=task&&task.name||'?';
_taskQueue.enqueue({run:resolve,name:'resolve '+name});});},






createInteractionHandle:function(){
_scheduleUpdate();
var handle=++_inc;
_addInteractionSet.add(handle);
return handle;},





clearInteractionHandle:function(handle){
require('fbjs/lib/invariant')(
!!handle,
'Must provide a handle to clear.');

_scheduleUpdate();
_addInteractionSet.delete(handle);
_deleteInteractionSet.add(handle);},


addListener:_emitter.addListener.bind(_emitter),






setDeadline:function(deadline){
_deadline=deadline;}};



var _interactionSet=new (require('Set'))();
var _addInteractionSet=new (require('Set'))();
var _deleteInteractionSet=new (require('Set'))();
var _taskQueue=new (require('TaskQueue'))({onMoreTasks:_scheduleUpdate});
var _nextUpdateHandle=0;
var _inc=0;
var _deadline=-1;




function _scheduleUpdate(){
if(!_nextUpdateHandle){
if(_deadline>0){
_nextUpdateHandle=setTimeout(_processUpdate,0);}else 
{
_nextUpdateHandle=require('setImmediate')(_processUpdate);}}}







function _processUpdate(){
_nextUpdateHandle=0;

var interactionCount=_interactionSet.size;
_addInteractionSet.forEach(function(handle){return (
_interactionSet.add(handle));});

_deleteInteractionSet.forEach(function(handle){return (
_interactionSet.delete(handle));});

var nextInteractionCount=_interactionSet.size;

if(interactionCount!==0&&nextInteractionCount===0){

_emitter.emit(InteractionManager.Events.interactionComplete);}else 
if(interactionCount===0&&nextInteractionCount!==0){

_emitter.emit(InteractionManager.Events.interactionStart);}



if(nextInteractionCount===0){
while(_taskQueue.hasTasksToProcess()){
_taskQueue.processNext();
if(_deadline>0&&
require('BatchedBridge').getEventLoopRunningTime()>=_deadline){

_scheduleUpdate();
break;}}}



_addInteractionSet.clear();
_deleteInteractionSet.clear();}


module.exports=InteractionManager;
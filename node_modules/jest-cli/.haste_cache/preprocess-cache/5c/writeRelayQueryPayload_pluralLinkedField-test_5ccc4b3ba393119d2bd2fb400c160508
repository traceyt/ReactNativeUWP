/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails oncall+relay
 */

'use strict';

require('configureForRelayOSS');

jest.
dontMock('GraphQLRange').
dontMock('GraphQLSegment');




describe('writeRelayQueryPayload()', function () {
  var RelayRecordStore;
  var RelayRecordWriter;var 

  getNode = require('RelayTestUtils').getNode;var writePayload = require('RelayTestUtils').writePayload;

  beforeEach(function () {
    jest.resetModuleRegistry();

    RelayRecordStore = require('RelayRecordStore');
    RelayRecordWriter = require('RelayRecordWriter');});


  describe('plural linked fields', function () {
    it('creates empty linked records', function () {
      var records = { 
        '123': { 
          __dataID__: '123', 
          id: '123' } };


      var store = new RelayRecordStore({ records: records });
      var writer = new RelayRecordWriter(records, {}, false);

      var query = getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '123' } }], children: [{ children: [{ children: [{ fieldName: 'displayNumber', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'phoneNumber', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'PhoneNumber' }], fieldName: 'allPhones', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'Phone' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'WriteRelayQueryPayload_pluralLinkedField', type: 'Node' };})());










      var payload = { 
        node: { 
          __typename: 'User', 
          id: '123', 
          allPhones: [] } };


      var results = writePayload(store, writer, query, payload);
      expect(results).toEqual({ 
        created: {}, 
        updated: { 
          '123': true } });


      var phoneIDs = store.getLinkedRecordIDs('123', 'allPhones');
      expect(phoneIDs).toEqual([]);});


    it('creates linked records', function () {
      var records = { 
        '123': { 
          __dataID__: '123', 
          id: '123' } };


      var store = new RelayRecordStore({ records: records });
      var writer = new RelayRecordWriter(records, {}, false);
      var phone = { 
        isVerified: true, 
        phoneNumber: { 
          displayNumber: '1-800-555-1212', // directory assistance
          countryCode: '1' } };


      var query = getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '123' } }], children: [{ children: [{ fieldName: 'isVerified', kind: 'Field', metadata: {}, type: 'Boolean' }, { children: [{ fieldName: 'displayNumber', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'countryCode', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'phoneNumber', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'PhoneNumber' }], fieldName: 'allPhones', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'Phone' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'WriteRelayQueryPayload_pluralLinkedField', type: 'Node' };})());












      var payload = { 
        node: { 
          __typename: 'User', 
          id: '123', 
          allPhones: [phone] } };


      var results = writePayload(store, writer, query, payload);
      expect(results).toEqual({ 
        created: { 
          'client:1': true, 
          'client:2': true }, 

        updated: { 
          '123': true } });


      var phoneIDs = store.getLinkedRecordIDs('123', 'allPhones');
      expect(phoneIDs).toEqual(['client:1']);
      var phoneID = phoneIDs[0];
      expect(store.getRecordState(phoneID)).toBe('EXISTENT');
      expect(store.getField(phoneID, 'id')).toBe(undefined);
      expect(store.getField(phoneID, 'isVerified')).toBe(true);
      var phoneNumberID = store.getLinkedRecordID(phoneID, 'phoneNumber');
      expect(phoneNumberID).toBe('client:2');
      expect(store.getField(phoneNumberID, 'displayNumber')).
      toBe(phone.phoneNumber.displayNumber);
      expect(store.getField(phoneNumberID, 'countryCode')).
      toBe(phone.phoneNumber.countryCode);});


    it('updates if response changes', function () {
      var phone = { 
        isVerified: true, 
        phoneNumber: { 
          displayNumber: '1-800-555-1212', 
          countryCode: '1' } };


      var records = { 
        '123': { 
          __dataID__: '123', 
          __typename: 'User', 
          id: '123', 
          allPhones: [
          { __dataID__: 'client:1' }] }, 


        'client:1': { 
          isVerified: true, 
          phoneNumber: { 
            __dataID__: 'client:2' } }, 


        'client:2': { 
          __dataID__: 'client:2', 
          displayNumber: phone.phoneNumber.displayNumber, 
          countryCode: phone.phoneNumber.countryCode } };


      var store = new RelayRecordStore({ records: records });
      var writer = new RelayRecordWriter(records, {}, false);
      var newPhone = { 
        isVerified: true, 
        phoneNumber: { 
          displayNumber: '1-800-555-1212', 
          countryCode: '*' } }; // *changed*


      var query = getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '123' } }], children: [{ children: [{ fieldName: 'isVerified', kind: 'Field', metadata: {}, type: 'Boolean' }, { children: [{ fieldName: 'displayNumber', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'countryCode', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'phoneNumber', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'PhoneNumber' }], fieldName: 'allPhones', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'Phone' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'WriteRelayQueryPayload_pluralLinkedField', type: 'Node' };})());












      var payload = { 
        node: { 
          __typename: 'User', 
          id: '123', 
          allPhones: [newPhone] } };


      var results = writePayload(store, writer, query, payload);
      expect(results).toEqual({ 
        created: {}, 
        updated: { 
          // intermediate phone object has no changes
          'client:2': true } });


      var phoneIDs = store.getLinkedRecordIDs('123', 'allPhones');
      expect(phoneIDs).toEqual(['client:1']);
      var phoneID = phoneIDs[0];
      expect(store.getRecordState(phoneID)).toBe('EXISTENT');
      expect(store.getField(phoneID, 'id')).toBe(undefined);
      expect(store.getField(phoneID, 'isVerified')).toBe(true);
      var phoneNumberID = store.getLinkedRecordID(phoneID, 'phoneNumber');
      expect(phoneNumberID).toBe('client:2');
      expect(store.getField(phoneNumberID, 'displayNumber')).
      toBe(phone.phoneNumber.displayNumber);
      expect(store.getField(phoneNumberID, 'countryCode')).
      toBe(newPhone.phoneNumber.countryCode);});


    it('updates if length changes', function () {
      var records = { 
        '123': { 
          __dataID__: '123', 
          __typename: 'User', 
          id: '123', 
          allPhones: [
          { __dataID__: 'client:1' }, 
          { __dataID__: 'client:2' }] }, 


        'client:1': { 
          __dataID__: 'client:1', 
          displayNumber: '1-800-555-1212', 
          countryCode: '1' }, 

        'client:2': { 
          __dataID__: 'client:2', 
          displayNumber: '1-800-555-1313', 
          countryCode: '2' } };


      var store = new RelayRecordStore({ records: records });
      var writer = new RelayRecordWriter(records, {}, false);
      var query = getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '123' } }], children: [{ children: [{ children: [{ fieldName: 'displayNumber', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'countryCode', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'phoneNumber', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'PhoneNumber' }], fieldName: 'allPhones', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'Phone' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'WriteRelayQueryPayload_pluralLinkedField', type: 'Node' };})());











      var payload = { 
        node: { 
          __typename: 'User', 
          id: '123', 
          allPhones: [{ 
            displayNumber: '1-800-555-1212', 
            countryCode: '1' }] } };



      var results = writePayload(store, writer, query, payload);
      expect(results).toEqual({ 
        created: {}, 
        updated: { 
          '123': true } });


      var phoneIDs = store.getLinkedRecordIDs('123', 'allPhones');
      expect(phoneIDs).toEqual(['client:1']);});


    it('does not update if response does not change', function () {
      var phone = { 
        isVerified: true, 
        phoneNumber: { 
          displayNumber: '1-800-555-1212', 
          countryCode: '1' } };


      var records = { 
        '123': { 
          __dataID__: '123', 
          __typename: 'User', 
          id: '123', 
          allPhones: [
          { __dataID__: 'client:1' }] }, 


        'client:1': { 
          isVerified: true, 
          phoneNumber: { 
            __dataID__: 'client:2' } }, 


        'client:2': { 
          __dataID__: 'client:2', 
          displayNumber: phone.phoneNumber.displayNumber, 
          countryCode: phone.phoneNumber.countryCode } };


      var store = new RelayRecordStore({ records: records });
      var writer = new RelayRecordWriter(records, {}, false);
      var query = getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '123' } }], children: [{ children: [{ fieldName: 'isVerified', kind: 'Field', metadata: {}, type: 'Boolean' }, { children: [{ fieldName: 'displayNumber', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'countryCode', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'phoneNumber', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'PhoneNumber' }], fieldName: 'allPhones', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'Phone' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'WriteRelayQueryPayload_pluralLinkedField', type: 'Node' };})());












      var payload = { 
        node: { 
          __typename: 'User', 
          id: '123', 
          allPhones: [phone] } };


      var results = writePayload(store, writer, query, payload);
      expect(results).toEqual({ 
        created: {}, 
        updated: {} });

      var phoneIDs = store.getLinkedRecordIDs('123', 'allPhones');
      expect(phoneIDs).toEqual(['client:1']);
      var phoneID = phoneIDs[0];
      expect(store.getRecordState(phoneID)).toBe('EXISTENT');
      expect(store.getField(phoneID, 'id')).toBe(undefined);
      expect(store.getField(phoneID, 'isVerified')).toBe(true);
      var phoneNumberID = store.getLinkedRecordID(phoneID, 'phoneNumber');
      expect(phoneNumberID).toBe('client:2');
      expect(store.getField(phoneNumberID, 'displayNumber')).
      toBe(phone.phoneNumber.displayNumber);
      expect(store.getField(phoneNumberID, 'countryCode')).
      toBe(phone.phoneNumber.countryCode);});


    it('does not update if response remains empty', function () {
      var records = { 
        '123': { 
          __dataID__: '123', 
          __typename: 'User', 
          id: '123', 
          allPhones: [] } };


      var store = new RelayRecordStore({ records: records });
      var writer = new RelayRecordWriter(records, {}, false);

      var query = getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '123' } }], children: [{ children: [{ children: [{ fieldName: 'displayNumber', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'phoneNumber', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'PhoneNumber' }], fieldName: 'allPhones', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'Phone' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'WriteRelayQueryPayload_pluralLinkedField', type: 'Node' };})());










      var payload = { 
        node: { 
          __typename: 'User', 
          id: '123', 
          allPhones: [] } };


      var results = writePayload(store, writer, query, payload);
      expect(results).toEqual({ 
        created: {}, 
        updated: {} });

      var phoneIDs = store.getLinkedRecordIDs('123', 'allPhones');
      expect(phoneIDs).toEqual([]);});


    it('records the concrete type if `__typename` is present', function () {
      var records = {};
      var store = new RelayRecordStore({ records: records });
      var writer = new RelayRecordWriter(records, {}, false);
      var query = getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '1' } }], children: [{ children: [{ fieldName: '__typename', kind: 'Field', metadata: { isRequisite: true }, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }], fieldName: 'actors', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true, isPlural: true }, type: 'Actor' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'WriteRelayQueryPayload_pluralLinkedField', type: 'Node' };})());









      var payload = { 
        node: { 
          id: '1', 
          actors: [{ 
            __typename: 'User', 
            id: '123' }], 

          __typename: 'Story' } };


      writePayload(store, writer, query, payload);
      expect(store.getType('123')).toBe('User');});});});
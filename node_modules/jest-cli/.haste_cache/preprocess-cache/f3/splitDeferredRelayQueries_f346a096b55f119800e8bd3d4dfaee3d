'use strict';





































function splitDeferredRelayQueries(node){
var splitter=new GraphQLSplitDeferredQueries();
var splitQueries={
__nodePath__:[],
__parent__:null,
__refQuery__:null,
deferred:[],
required:null};

splitter.visit(node,splitQueries);

return buildQueries(splitQueries);}






function getRequisiteSiblings(
node,
parent)
{

var siblings=parent.getChildren().filter(function(child){return (
child!==node&&
child instanceof require('RelayQuery').Field&&
child.isRequisite());});



return siblings.map(function(sibling){
var children=sibling.getChildren().filter(function(child){return (
child instanceof require('RelayQuery').Field&&
child.isRequisite());});

var clone=sibling.clone(children);
!
clone?require('invariant')(0,
'splitDeferredRelayQueries(): Unexpected non-scalar, requisite field.'):undefined;

return clone;});}














function wrapNode(
node,
nodePath)
{
for(var ii=nodePath.length-1;ii>=0;ii--){
var parent=nodePath[ii];
if(
parent instanceof require('RelayQuery').Field&&
parent.getInferredRootCallName())
{

return new (require('RelayRefQueryDescriptor'))(node,nodePath.slice(0,ii+1));}


var siblings=getRequisiteSiblings(node,parent);
var children=[node].concat(siblings);



node=parent.clone(children);}

!(
node instanceof require('RelayQuery').Root)?require('invariant')(0,
'splitDeferredRelayQueries(): Cannot build query without a root node.'):undefined;

var identifyingArg=node.getIdentifyingArg();
var identifyingArgName=identifyingArg&&identifyingArg.name||null;
var identifyingArgValue=identifyingArg&&identifyingArg.value||null;
var metadata={
identifyingArgName:identifyingArgName,
identifyingArgType:require('RelayNodeInterface').ID_TYPE,
isAbstract:true,
isDeferred:true,
isPlural:false};

return require('RelayQuery').Root.build(
node.getName(),
node.getFieldName(),
identifyingArgValue,
node.getChildren(),
metadata,
node.getType());}







function isEmpty(node){
if(!node.canHaveSubselections()){
return node.isGenerated()&&!node.isRefQueryDependency();}else 
{
return node.getChildren().every(isEmpty);}}







function buildQueries(splitQueries){
if(splitQueries.required&&isEmpty(splitQueries.required)){
splitQueries.required=null;}

splitQueries.deferred=splitQueries.deferred.map(function(nestedSplitQueries){
var descriptor=nestedSplitQueries.__refQuery__;
if(descriptor){


var context=splitQueries.required;
if(!context){

var parentSplitQueries=splitQueries;
while(parentSplitQueries.__parent__){
context=parentSplitQueries.__parent__.required;
if(context){
break;}

parentSplitQueries=parentSplitQueries.__parent__;}}


!
context?require('invariant')(0,
'splitDeferredRelayQueries(): Expected a context root query.'):undefined;

nestedSplitQueries.required=createRefQuery(descriptor,context);}


return buildQueries(nestedSplitQueries);});

return splitQueries;}





function createRefQuery(
descriptor,
context)
{
var node=descriptor.node;
!(
node instanceof require('RelayQuery').Field||
node instanceof require('RelayQuery').Fragment)?require('invariant')(0,
'splitDeferredRelayQueries(): Ref query requires a field or fragment.'):undefined;



var jsonPath=['$','*'];
var parent=undefined;
for(var ii=0;ii<descriptor.nodePath.length;ii++){
parent=descriptor.nodePath[ii];
if(parent instanceof require('RelayQuery').Field){
jsonPath.push(parent.getSerializationKey());
if(parent.isPlural()){
jsonPath.push('*');}}}



!(
jsonPath.length>2)?require('invariant')(0,
'splitDeferredRelayQueries(): Ref query requires a complete path.'):undefined;

var field=parent;
var primaryKey=field.getInferredPrimaryKey();
!
primaryKey?require('invariant')(0,
'splitDeferredRelayQueries(): Ref query requires a primary key.'):undefined;

jsonPath.push(primaryKey);


var root=require('RelayQuery').Root.build(
context.getName(),
require('RelayNodeInterface').NODES,
require('QueryBuilder').createBatchCallVariable(context.getID(),jsonPath.join('.')),
[node],
{
identifyingArgName:require('RelayNodeInterface').ID,
identifyingArgType:require('RelayNodeInterface').ID_TYPE,
isAbstract:true,
isDeferred:true,
isPlural:false},

require('RelayNodeInterface').NODE_TYPE);


var result=root;
return result;}var 







GraphQLSplitDeferredQueries=function(_RelayQueryTransform){babelHelpers.inherits(GraphQLSplitDeferredQueries,_RelayQueryTransform);function GraphQLSplitDeferredQueries(){babelHelpers.classCallCheck(this,GraphQLSplitDeferredQueries);return babelHelpers.possibleConstructorReturn(this,Object.getPrototypeOf(GraphQLSplitDeferredQueries).apply(this,arguments));}babelHelpers.createClass(GraphQLSplitDeferredQueries,[{key:'visitField',value:function visitField(

node,
splitQueries)
{
if(!node.hasDeferredDescendant()){
return node;}


splitQueries.__nodePath__.push(node);
var result=this.traverse(node,splitQueries);
splitQueries.__nodePath__.pop();

if(result&&node.getInferredRootCallName()){(function(){

var key=node.getInferredPrimaryKey();
var children=result.getChildren().map(function(child){
if(
child instanceof require('RelayQuery').Field&&
child.getSchemaName()===key)
{
return child.cloneAsRefQueryDependency();}else 
{
return child;}});


result=result.clone(children);})();}


return result;}},{key:'visitFragment',value:function visitFragment(



node,
splitQueries)
{
if(!node.getChildren().length){
return null;}


if(node.isDeferred()){
var nodePath=splitQueries.__nodePath__;
var _deferred={
__nodePath__:nodePath,
__parent__:splitQueries,
__refQuery__:null,
deferred:[],
required:null};

var result=this.traverse(node,_deferred);
if(result){
var wrapped=wrapNode(result,nodePath);
if(wrapped instanceof require('RelayQuery').Root){
_deferred.required=wrapped;}else 
if(wrapped instanceof require('RelayRefQueryDescriptor')){
_deferred.__refQuery__=wrapped;}}


if(result||_deferred.deferred.length){
splitQueries.deferred.push(_deferred);}

return null;}else 
if(node.hasDeferredDescendant()){
return this.traverse(node,splitQueries);}else 
{
return node;}}},{key:'visitRoot',value:function visitRoot(




node,
splitQueries)
{
if(!node.hasDeferredDescendant()){
splitQueries.required=node;
return node;}else 
{
splitQueries.__nodePath__.push(node);
var result=this.traverse(node,splitQueries);
splitQueries.__nodePath__.pop();
splitQueries.required=result;
return result;}}}]);return GraphQLSplitDeferredQueries;}(require('RelayQueryTransform'));




module.exports=require('RelayProfiler').instrument(
'splitDeferredRelayQueries',
splitDeferredRelayQueries);
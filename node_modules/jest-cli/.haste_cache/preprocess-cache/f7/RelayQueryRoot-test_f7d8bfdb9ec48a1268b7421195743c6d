'use strict';












require('configureForRelayOSS');






describe('RelayQueryRoot',function(){var _RelayTestUtils=require('RelayTestUtils');var 
getNode=_RelayTestUtils.getNode;

var me=undefined;
var usernames=undefined;

beforeEach(function(){
jest.resetModuleRegistry();

jasmine.addMatchers(require('RelayTestUtils').matchers);

me=getNode(function(){return {children:[{alias:'name1',fieldName:'firstName',kind:'Field',metadata:{},type:'String'},{alias:'name1',fieldName:'lastName',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'me',kind:'Query',metadata:{},name:'RelayQueryRoot',type:'User'};}());








usernames=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'[String!]!'},name:'names',value:{kind:'CallValue',callValue:'mroch'}}],children:[{fieldName:'firstName',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'usernames',kind:'Query',metadata:{isPlural:true,isAbstract:true,identifyingArgName:'names',identifyingArgType:'[String!]!'},name:'RelayQueryRoot',type:'Actor'};}());






usernames.getConcreteQueryNode().metadata={
isPlural:true,
identifyingArgName:'names'};});



it('has a unique ID',function(){
var lastID=getNode(function(){return {children:[{fieldName:'firstName',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'me',kind:'Query',metadata:{},name:'RelayQueryRoot',type:'User'};}()).getID();
var nextID=getNode(function(){return {children:[{fieldName:'lastName',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'me',kind:'Query',metadata:{},name:'RelayQueryRoot',type:'User'};}()).getID();
expect(lastID).toMatch(/^q\d+/);
expect(nextID).toMatch(/^q\d+/);
expect(nextID).not.toEqual(lastID);});


it('returns children',function(){
var children=me.getChildren();
expect(children.length).toBe(3);
expect(children[0].getSchemaName()).toBe('firstName');
expect(children[1].getSchemaName()).toBe('lastName');
expect(children[2].getSchemaName()).toBe('id');
expect(children[2].isGenerated()).toBe(true);

children=usernames.getChildren();
expect(children.length).toBe(3);
expect(children[0].getSchemaName()).toBe('firstName');
expect(children[1].getSchemaName()).toBe('id');
expect(children[1].isGenerated()).toBe(true);
expect(children[2].getSchemaName()).toBe('__typename');
expect(children[2].isGenerated()).toBe(true);});


it('does not return skipped children',function(){
var query=getNode(function(){return {children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{directives:[{kind:'Directive',name:'skip',args:[{name:'if',value:{kind:'CallVariable',callVariableName:'true'}}]}],fieldName:'firstName',kind:'Field',metadata:{},type:'String'},{directives:[{kind:'Directive',name:'include',args:[{name:'if',value:{kind:'CallVariable',callVariableName:'false'}}]}],fieldName:'lastName',kind:'Field',metadata:{},type:'String'},{directives:[{kind:'Directive',name:'skip',args:[{name:'if',value:{kind:'CallVariable',callVariableName:'true'}}]},{kind:'Directive',name:'include',args:[{name:'if',value:{kind:'CallValue',callValue:false}}]}],fieldName:'name',kind:'Field',metadata:{},type:'String'},{directives:[{kind:'Directive',name:'skip',args:[{name:'if',value:{kind:'CallVariable',callVariableName:'true'}}]},{kind:'Directive',name:'include',args:[{name:'if',value:{kind:'CallValue',callValue:true}}]}],fieldName:'emailAddresses',kind:'Field',metadata:{isPlural:true},type:'String'},{directives:[{kind:'Directive',name:'skip',args:[{name:'if',value:{kind:'CallVariable',callVariableName:'false'}}]},{kind:'Directive',name:'include',args:[{name:'if',value:{kind:'CallValue',callValue:false}}]}],fieldName:'username',kind:'Field',metadata:{},type:'String'}],fieldName:'me',kind:'Query',metadata:{},name:'RelayQueryRoot',type:'User'};}(),










{true:true,false:false});
var children=query.getChildren();
expect(children.length).toBe(1);
expect(children[0].getSchemaName()).toBe('id');});


it('returns included children',function(){
var query=getNode(function(){return {children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{directives:[{kind:'Directive',name:'skip',args:[{name:'if',value:{kind:'CallVariable',callVariableName:'false'}}]}],fieldName:'firstName',kind:'Field',metadata:{},type:'String'},{directives:[{kind:'Directive',name:'include',args:[{name:'if',value:{kind:'CallVariable',callVariableName:'true'}}]}],fieldName:'lastName',kind:'Field',metadata:{},type:'String'},{directives:[{kind:'Directive',name:'skip',args:[{name:'if',value:{kind:'CallValue',callValue:false}}]},{kind:'Directive',name:'include',args:[{name:'if',value:{kind:'CallVariable',callVariableName:'true'}}]}],fieldName:'name',kind:'Field',metadata:{},type:'String'}],fieldName:'me',kind:'Query',metadata:{},name:'RelayQueryRoot',type:'User'};}(),








{false:false,true:true});
var children=query.getChildren();
expect(children.length).toBe(4);
expect(children[0].getSchemaName()).toBe('id');
expect(children[1].getSchemaName()).toBe('firstName');
expect(children[2].getSchemaName()).toBe('lastName');
expect(children[3].getSchemaName()).toBe('name');});


it('returns same object when cloning with same fields',function(){
var children=me.getChildren();
expect(me.clone(children)).toBe(me);
expect(me.clone(children.map(function(c){return c;}))).toBe(me);
expect(me.clone(
[null,children[0],null,children[1],null,children[2],null])).
toBe(me);

children=usernames.getChildren();
expect(usernames.clone(children)).toBe(usernames);
expect(usernames.clone(children.map(function(c){return c;}))).toBe(usernames);});


it('returns null when cloning without fields',function(){
expect(me.clone([])).toBe(null);
expect(me.clone([null])).toBe(null);
expect(usernames.clone([])).toBe(null);
expect(usernames.clone([null])).toBe(null);});


it('returns new object when cloning with different fields',function(){
var children=me.getChildren();
expect(me.clone([children[0],null])).not.toBe(me);
expect(me.clone([children[0],null,null])).not.toBe(me);
expect(me.clone([children[0],null,null,null])).not.toBe(me);});


it('clones with updated children',function(){
var query=getNode(function(){return {children:[{fieldName:'firstName',kind:'Field',metadata:{},type:'String'},{fieldName:'lastName',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'me',kind:'Query',metadata:{},name:'RelayQueryRoot',type:'User'};}());







var clone=query.clone([query.getChildren()[0]]);
expect(clone.getChildren().length).toBe(1);
expect(clone.getChildren()[0].getSchemaName()).toBe('firstName');
expect(clone.getFieldByStorageKey('lastName')).toBe(undefined);});


it('returns root calls with values',function(){
expect(me.getIdentifyingArg()).toEqual(undefined);

expect(usernames.getIdentifyingArg()).toEqual(
{name:'names',value:'mroch'});


expect(getNode(function(){return {calls:[{kind:'Call',metadata:{type:'[String!]!'},name:'names',value:[{kind:'CallValue',callValue:'a'},{kind:'CallValue',callValue:'b'},{kind:'CallValue',callValue:'c'}]}],children:[{fieldName:'firstName',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'usernames',kind:'Query',metadata:{isPlural:true,isAbstract:true,identifyingArgName:'names',identifyingArgType:'[String!]!'},name:'RelayQueryRoot',type:'Actor'};}()).





getIdentifyingArg()).toEqual(
{
name:'names',
type:'[String!]!',
value:['a','b','c']});});




it('returns ref params',function(){

expect(me.getBatchCall()).toBe(null);


var root=getNode(babelHelpers.extends({},function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'123'}}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'RelayQueryRoot',type:'Node'};}(),{







calls:[require('QueryBuilder').createCall(
'id',
require('QueryBuilder').createBatchCallVariable('q0','$.*.actor.id'))]}));


var batchCall=root.getBatchCall();
expect(batchCall).toEqual({
refParamName:'ref_q0',
sourceQueryID:'q0',
sourceQueryPath:'$.*.actor.id'});});



it('is not equal to non-root nodes',function(){
var fragment=getNode(function(){return {children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'actor',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true},type:'Actor'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'RelayQueryRootRelayQL',type:'Viewer'};}());






var id=fragment.getChildren()[0].getChildren()[0];
expect(me.equals(fragment)).toBe(false);
expect(me.equals(id)).toBe(false);});


it('is not equal to queries with different root calls',function(){
var diffRoot=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'[String!]!'},name:'names',value:{kind:'CallValue',callValue:'joesavona'}}],children:[{fieldName:'firstName',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'usernames',kind:'Query',metadata:{isPlural:true,isAbstract:true,identifyingArgName:'names',identifyingArgType:'[String!]!'},name:'RelayQueryRoot',type:'Actor'};}());






expect(usernames.equals(diffRoot)).toBe(false);});


it('equals the same query',function(){
expect(usernames.equals(usernames)).toBe(true);
expect(me.equals(me)).toBe(true);});


it('equals equivalent queries',function(){
var me2=getNode(function(){return {children:[{alias:'name1',fieldName:'firstName',kind:'Field',metadata:{},type:'String'},{alias:'name1',fieldName:'lastName',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'me',kind:'Query',metadata:{},name:'RelayQueryRoot',type:'User'};}());








var usernames2=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'[String!]!'},name:'names',value:{kind:'CallValue',callValue:'mroch'}}],children:[{fieldName:'firstName',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'usernames',kind:'Query',metadata:{isPlural:true,isAbstract:true,identifyingArgName:'names',identifyingArgType:'[String!]!'},name:'RelayQueryRoot',type:'Actor'};}());






usernames2.getConcreteQueryNode().metadata={
isPlural:true,
identifyingArgName:'names'};


expect(me.equals(me2)).toBe(true);
expect(usernames.equals(usernames2)).toBe(true);
expect(me2.equals(me)).toBe(true);
expect(usernames2.equals(usernames)).toBe(true);});


it('does not equal different queries with the same root',function(){
var me2=getNode(function(){return {children:[{alias:'name1',fieldName:'firstName',kind:'Field',metadata:{},type:'String'},{fieldName:'lastName',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'me',kind:'Query',metadata:{},name:'RelayQueryRoot',type:'User'};}());








var usernames2=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'[String!]!'},name:'names',value:{kind:'CallValue',callValue:'mroch'}}],children:[{fieldName:'firstName',kind:'Field',metadata:{},type:'String'},{fieldName:'lastName',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'usernames',kind:'Query',metadata:{isPlural:true,isAbstract:true,identifyingArgName:'names',identifyingArgType:'[String!]!'},name:'RelayQueryRoot',type:'Actor'};}());







expect(me.equals(me2)).toBe(false);
expect(usernames.equals(usernames2)).toBe(false);
expect(me2.equals(me)).toBe(false);
expect(usernames2.equals(usernames)).toBe(false);});


it('equals identical ref queries with matching ref params',function(){
var node=getNode(babelHelpers.extends({},function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'123'}}],children:[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'RelayQueryRoot',type:'Node'};}(),{

calls:[require('QueryBuilder').createCall(
'id',
require('QueryBuilder').createBatchCallVariable('q0','$.*.actor.id'))]}));


var other=getNode(babelHelpers.extends({},function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'123'}}],children:[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'RelayQueryRoot',type:'Node'};}(),{

calls:[require('QueryBuilder').createCall(
'id',
require('QueryBuilder').createBatchCallVariable('q0','$.*.actor.id'))]}));


expect(node.equals(other)).toBe(true);});


it('does not equal queries with different ref params',function(){
var node=getNode(babelHelpers.extends({},function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'123'}}],children:[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'RelayQueryRoot',type:'Node'};}(),{

calls:[require('QueryBuilder').createCall(
'id',
require('QueryBuilder').createBatchCallVariable('q0','$.*.actor.id'))]}));


var other=getNode(babelHelpers.extends({},function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'123'}}],children:[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'RelayQueryRoot',type:'Node'};}(),{

calls:[require('QueryBuilder').createCall(
'id',
require('QueryBuilder').createBatchCallVariable(
'q0',
'$.*.actor.current_city.id'))]}));



expect(node.equals(other)).toBe(false);});


it('is not a ref query dependency',function(){
expect(me.isRefQueryDependency()).toBe(false);});


it('is not generated',function(){
expect(me.isGenerated()).toBe(false);});


it('returns the identifying argument type',function(){
var nodeQuery=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'123'}}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'RelayQueryRoot',type:'Node'};}());
nodeQuery.getConcreteQueryNode().metadata={
identifyingArgName:'id',
identifyingArgType:'scalar'};

var nodeIdentifyingArg=nodeQuery.getIdentifyingArg();
expect(nodeIdentifyingArg).toBeDefined();
expect(nodeIdentifyingArg.type).toBe('scalar');

me=getNode(function(){return {children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'me',kind:'Query',metadata:{},name:'RelayQueryRoot',type:'User'};}());
var meIdentifyingArg=me.getIdentifyingArg();
expect(meIdentifyingArg).toBeUndefined();});


it('returns numeric identifying arguments',function(){
var query=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'Int'},name:'number',value:{kind:'CallValue',callValue:5}}],children:[{fieldName:'title',kind:'Field',metadata:{},type:'String'}],fieldName:'task',kind:'Query',metadata:{identifyingArgName:'number',identifyingArgType:'Int'},name:'RelayQueryRoot',type:'Task'};}());






var nodeIdentifyingArg=query.getIdentifyingArg();
expect(nodeIdentifyingArg).toEqual({
name:'number',
type:'Int',
value:5});});



it('returns input-object identifying arguments',function(){
var query=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'CheckinSearchInput'},name:'query',value:{kind:'CallValue',callValue:{query:'Facebook'}}}],children:[{fieldName:'query',kind:'Field',metadata:{},type:'String'}],fieldName:'checkinSearchQuery',kind:'Query',metadata:{identifyingArgName:'query',identifyingArgType:'CheckinSearchInput'},name:'RelayQueryRoot',type:'CheckinSearchResult'};}());






var nodeIdentifyingArg=query.getIdentifyingArg();
expect(nodeIdentifyingArg).toEqual({
name:'query',
type:'CheckinSearchInput',
value:{
query:'Facebook'}});});




it('returns array identifying arguments',function(){
var query=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'[WayPoint!]!'},name:'waypoints',value:[{kind:'CallValue',callValue:{lat:'0.0',lon:'0.0'}},{kind:'CallValue',callValue:{lat:'1.1',lon:'1.1'}}]}],children:[{children:[{fieldName:'note',kind:'Field',metadata:{},type:'String'}],fieldName:'steps',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'RouteStep'}],fieldName:'route',kind:'Query',metadata:{identifyingArgName:'waypoints',identifyingArgType:'[WayPoint!]!'},name:'RelayQueryRoot',type:'Route'};}());











var nodeIdentifyingArg=query.getIdentifyingArg();
expect(nodeIdentifyingArg).toEqual(
{
name:'waypoints',
value:[
{lat:'0.0',lon:'0.0'},
{lat:'1.1',lon:'1.1'}],

type:'[WayPoint!]!'});});




it('creates nodes',function(){
var query=getNode(function(){return {children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'actor',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true},type:'Actor'}],fieldName:'viewer',kind:'Query',metadata:{},name:'RelayQueryRoot',type:'Viewer'};}());








var node=function(){return {children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'actor',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true},type:'Actor'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'RelayQueryRootRelayQL',type:'Viewer'};}();






var actorID=query.createNode(node);
expect(actorID instanceof require('RelayQuery').Fragment).toBe(true);
expect(actorID.getType()).toBe('Viewer');
expect(actorID.getRoute()).toBe(query.getRoute());
expect(actorID.getVariables()).toBe(query.getVariables());});


it('returns directives',function(){
var query=getNode(function(){return {children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],directives:[{kind:'Directive',name:'include',args:[{name:'if',value:{kind:'CallVariable',callVariableName:'cond'}}]}],fieldName:'me',kind:'Query',metadata:{},name:'RelayQueryRoot',type:'User'};}(),





{cond:true});
expect(query.getDirectives()).toEqual([
{
args:[
{name:'if',value:true}],

name:'include'}]);});




it('returns isAbstract',function(){
expect(getNode(function(){return {children:[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'me',kind:'Query',metadata:{},name:'RelayQueryRoot',type:'User'};}()).isAbstract()).toBe(false);
expect(getNode(function(){return {fieldName:'viewer',kind:'Query',metadata:{},name:'RelayQueryRoot',type:'Viewer'};}()).isAbstract()).toBe(false);
expect(getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'RelayQueryRoot',type:'Node'};}()).isAbstract()).toBe(true);});


it('returns the root type',function(){
expect(getNode(function(){return {children:[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'me',kind:'Query',metadata:{},name:'RelayQueryRoot',type:'User'};}()).getType()).toBe('User');
expect(getNode(function(){return {fieldName:'viewer',kind:'Query',metadata:{},name:'RelayQueryRoot',type:'Viewer'};}()).getType()).toBe('Viewer');
expect(getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'123'}}],children:[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'RelayQueryRoot',type:'Node'};}()).getType()).toBe('Node');});


describe('canHaveSubselections()',function(){
it('returns true',function(){

expect(me.canHaveSubselections()).toBe(true);


var query=getNode(babelHelpers.extends({},function(){return {fieldName:'viewer',kind:'Query',metadata:{},name:'RelayQueryRoot',type:'Viewer'};}(),{

children:[]}));

expect(query.canHaveSubselections()).toBe(true);});});



describe('getStorageKey()',function(){
it('delegates to RelayQueryField::getStorageKey',function(){
var query=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'Environment'},name:'environment',value:{kind:'CallValue',callValue:'MOBILE'}}],fieldName:'settings',kind:'Query',metadata:{identifyingArgName:'environment',identifyingArgType:'Environment'},name:'RelayQueryRoot',type:'Settings'};}());


var mockField={getStorageKey:jest.genMockFunction()};
require('RelayQuery').Field.build=jest.genMockFn().mockReturnValue(mockField);
query.getStorageKey();
expect(require('RelayQuery').Field.build).toBeCalled();
expect(mockField.getStorageKey).toBeCalled();});


it('strips identifying arguments',function(){
var identifyingQuery=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'String!'},name:'name',value:{kind:'CallValue',callValue:'yuzhi'}}],children:[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'username',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'name',identifyingArgType:'String!'},name:'RelayQueryRoot',type:'Actor'};}());


identifyingQuery.getConcreteQueryNode().metadata={
identifyingArgName:'name'};

expect(identifyingQuery.getStorageKey()).toBe('username');});


it('identifies itself as plural or not',function(){
expect(me.isPlural()).toBe(false);
expect(usernames.isPlural()).toBe(true);});});});
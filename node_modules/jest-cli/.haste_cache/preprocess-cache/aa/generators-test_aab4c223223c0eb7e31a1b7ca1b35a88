'use strict';









jest.autoMockOff();




xdescribe('React Yeoman Generators',function(){
describe('react:react',function(){
var assert;

beforeEach(function(){






var log=console.log;
console.log=function(){};
assert=require('yeoman-generator').assert;
var helpers=require('yeoman-generator').test;
console.log=log;

var generated=false;

runs(function(){
helpers.run(require('path').resolve(__dirname,'../generator')).
withArguments(['TestApp']).
on('end',function(){
generated=true;});});



waitsFor(function(){
jest.runAllTicks();
jest.runOnlyPendingTimers();
return generated;},
"generation",750);});


it('creates files',function(){
assert.file([
'.flowconfig',
'.gitignore',
'.watchmanconfig',
'index.ios.js',
'index.android.js']);});



it('replaces vars in index.ios.js',function(){
assert.fileContent('index.ios.js','var TestApp = React.createClass({');
assert.fileContent(
'index.ios.js',
'AppRegistry.registerComponent(\'TestApp\', () => TestApp);');


assert.noFileContent('index.ios.js','<%= name %>');});


it('replaces vars in index.android.js',function(){
assert.fileContent('index.android.js','var TestApp = React.createClass({');
assert.fileContent(
'index.android.js',
'AppRegistry.registerComponent(\'TestApp\', () => TestApp);');


assert.noFileContent('index.ios.js','<%= name %>');});


it('composes with ios generator',function(){
var stat=require('fs').statSync('ios');

expect(stat.isDirectory()).toBe(true);});


it('composes with android generator',function(){
var stat=require('fs').statSync('android');

expect(stat.isDirectory()).toBe(true);});});



describe('react:android',function(){
var assert;

beforeEach(function(done){






var log=console.log;
console.log=function(){};
assert=require('yeoman-generator').assert;
var helpers=require('yeoman-generator').test;
console.log=log;

var generated=false;

runs(function(){
helpers.run(require('path').resolve(__dirname,'..','generator-android')).
withArguments(['TestAppAndroid']).
withOptions({
'package':'com.reactnative.test'}).

on('end',function(){
generated=true;});});



waitsFor(function(){
jest.runAllTicks();
jest.runOnlyPendingTimers();
return generated;},
"generation",750);});


it('creates files',function(){
assert.file([
require('path').join('android','build.gradle'),
require('path').join('android','gradle.properties'),
require('path').join('android','gradlew.bat'),
require('path').join('android','gradlew'),
require('path').join('android','settings.gradle'),
require('path').join('android','app','build.gradle'),
require('path').join('android','app','proguard-rules.pro'),
require('path').join('android','app','src','main','AndroidManifest.xml'),
require('path').join('android','app','src','main','java','com','reactnative','test','MainActivity.java'),
require('path').join('android','app','src','main','res','mipmap-hdpi','ic_launcher.png'),
require('path').join('android','app','src','main','res','mipmap-mdpi','ic_launcher.png'),
require('path').join('android','app','src','main','res','mipmap-xhdpi','ic_launcher.png'),
require('path').join('android','app','src','main','res','mipmap-xxhdpi','ic_launcher.png'),
require('path').join('android','app','src','main','res','values','strings.xml'),
require('path').join('android','app','src','main','res','values','styles.xml'),
require('path').join('android','gradle','wrapper','gradle-wrapper.jar'),
require('path').join('android','gradle','wrapper','gradle-wrapper.properties')]);});



it('replaces variables',function(){
assert.fileContent(require('path').join('android','app','build.gradle'),'applicationId "com.reactnative.test"');
assert.fileContent(
require('path').join('android','app','src','main','AndroidManifest.xml'),
'package="com.reactnative.test"');

assert.fileContent(
require('path').join('android','app','src','main','AndroidManifest.xml'),
'name=".MainActivity"');

assert.fileContent(
require('path').join('android','app','src','main','java','com','reactnative','test','MainActivity.java'),
'package com.reactnative.test;');

assert.fileContent(
require('path').join('android','app','src','main','java','com','reactnative','test','MainActivity.java'),
'mReactRootView.startReactApplication(mReactInstanceManager, "TestAppAndroid", null);');

assert.fileContent(
require('path').join('android','app','src','main','res','values','strings.xml'),
'<string name="app_name">TestAppAndroid</string>');});});




describe('react:ios',function(){
var assert;

beforeEach(function(){






var log=console.log;
console.log=function(){};
assert=require('yeoman-generator').assert;
var helpers=require('yeoman-generator').test;
console.log=log;

var generated=false;

runs(function(){
helpers.run(require('path').resolve(__dirname,'../generator-ios')).
withArguments(['TestAppIOS']).
on('end',function(){
generated=true;});});



waitsFor(function(){
jest.runAllTicks();
jest.runOnlyPendingTimers();
return generated;},
"generation",750);});


it('creates files',function(){
assert.file([
'ios/TestAppIOS/AppDelegate.h',
'ios/TestAppIOS/AppDelegate.m',
'ios/TestAppIOS/Base.lproj/LaunchScreen.xib',
'ios/TestAppIOS/Images.xcassets/AppIcon.appiconset/Contents.json',
'ios/TestAppIOS/Info.plist',
'ios/TestAppIOS/main.m',
'ios/TestAppIOS.xcodeproj/project.pbxproj',
'ios/TestAppIOS.xcodeproj/xcshareddata/xcschemes/TestAppIOS.xcscheme',
'ios/TestAppIOSTests/TestAppIOSTests.m',
'ios/TestAppIOSTests/Info.plist']);});



it('replaces vars in AppDelegate.m',function(){
var appDelegate='ios/TestAppIOS/AppDelegate.m';

assert.fileContent(appDelegate,'moduleName:@"TestAppIOS"');
assert.noFileContent(appDelegate,'<%= name %>');});


it('replaces vars in LaunchScreen.xib',function(){
var launchScreen='ios/TestAppIOS/Base.lproj/LaunchScreen.xib';

assert.fileContent(launchScreen,'text="TestAppIOS"');
assert.noFileContent(launchScreen,'<%= name %>');});


it('replaces vars in TestAppIOSTests.m',function(){
var tests='ios/TestAppIOSTests/TestAppIOSTests.m';

assert.fileContent(tests,'@interface TestAppIOSTests : XCTestCase');
assert.fileContent(tests,'@implementation TestAppIOSTests');
assert.noFileContent(tests,'<%= name %>');});


it('replaces vars in project.pbxproj',function(){
var pbxproj='ios/TestAppIOS.xcodeproj/project.pbxproj';
assert.fileContent(pbxproj,'"TestAppIOS"');
assert.fileContent(pbxproj,'"TestAppIOSTests"');
assert.fileContent(pbxproj,'TestAppIOS.app');
assert.fileContent(pbxproj,'TestAppIOSTests.xctest');

assert.noFileContent(pbxproj,'<%= name %>');});


it('replaces vars in xcscheme',function(){
var xcscheme='ios/TestAppIOS.xcodeproj/xcshareddata/xcschemes/TestAppIOS.xcscheme';
assert.fileContent(xcscheme,'"TestAppIOS"');
assert.fileContent(xcscheme,'"TestAppIOS.app"');
assert.fileContent(xcscheme,'TestAppIOS.xcodeproj');
assert.fileContent(xcscheme,'"TestAppIOSTests.xctest"');
assert.fileContent(xcscheme,'"TestAppIOSTests"');

assert.noFileContent(xcscheme,'<%= name %>');});});});
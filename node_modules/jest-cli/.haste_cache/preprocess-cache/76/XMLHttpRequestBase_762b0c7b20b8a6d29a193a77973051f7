'use strict';
















var UNSENT=0;
var OPENED=1;
var HEADERS_RECEIVED=2;
var LOADING=3;
var DONE=4;var 




XMLHttpRequestBase=function(){







































function XMLHttpRequestBase(){babelHelpers.classCallCheck(this,XMLHttpRequestBase);
this.UNSENT=UNSENT;
this.OPENED=OPENED;
this.HEADERS_RECEIVED=HEADERS_RECEIVED;
this.LOADING=LOADING;
this.DONE=DONE;

this.onreadystatechange=null;
this.onload=null;
this.upload=undefined;
this.timeout=0;

this.$XMLHttpRequestBase_reset();
this.$XMLHttpRequestBase_method=null;
this.$XMLHttpRequestBase_url=null;
this.$XMLHttpRequestBase_aborted=false;}babelHelpers.createClass(XMLHttpRequestBase,[{key:'$XMLHttpRequestBase_reset',value:function $XMLHttpRequestBase_reset()


{
this.readyState=this.UNSENT;
this.responseHeaders=undefined;
this.responseText='';
this.response=null;
this.responseType='';
this.status=0;
delete this.responseURL;

this.$XMLHttpRequestBase_requestId=null;

this.$XMLHttpRequestBase_headers={};
this.$XMLHttpRequestBase_sent=false;
this.$XMLHttpRequestBase_lowerCaseResponseHeaders={};

this.$XMLHttpRequestBase_clearSubscriptions();}},{key:'didCreateRequest',value:function didCreateRequest(


requestId){var _this=this;
this.$XMLHttpRequestBase_requestId=requestId;
this.$XMLHttpRequestBase_subscriptions.push(require('RCTDeviceEventEmitter').addListener(
'didSendNetworkData',
function(args){var _$XMLHttpRequestBase_;return (_$XMLHttpRequestBase_=_this.$XMLHttpRequestBase_didUploadProgress).call.apply(_$XMLHttpRequestBase_,[_this].concat(babelHelpers.toConsumableArray(args)));}));

this.$XMLHttpRequestBase_subscriptions.push(require('RCTDeviceEventEmitter').addListener(
'didReceiveNetworkResponse',
function(args){var _$XMLHttpRequestBase_2;return (_$XMLHttpRequestBase_2=_this.$XMLHttpRequestBase_didReceiveResponse).call.apply(_$XMLHttpRequestBase_2,[_this].concat(babelHelpers.toConsumableArray(args)));}));

this.$XMLHttpRequestBase_subscriptions.push(require('RCTDeviceEventEmitter').addListener(
'didReceiveNetworkData',
function(args){var _$XMLHttpRequestBase_3;return (_$XMLHttpRequestBase_3=_this.$XMLHttpRequestBase_didReceiveData).call.apply(_$XMLHttpRequestBase_3,[_this].concat(babelHelpers.toConsumableArray(args)));}));

this.$XMLHttpRequestBase_subscriptions.push(require('RCTDeviceEventEmitter').addListener(
'didCompleteNetworkResponse',
function(args){var _$XMLHttpRequestBase_4;return (_$XMLHttpRequestBase_4=_this.$XMLHttpRequestBase_didCompleteResponse).call.apply(_$XMLHttpRequestBase_4,[_this].concat(babelHelpers.toConsumableArray(args)));}));}},{key:'$XMLHttpRequestBase_didUploadProgress',value:function $XMLHttpRequestBase_didUploadProgress(



requestId,progress,total){
if(requestId===this.$XMLHttpRequestBase_requestId&&this.upload&&this.upload.onprogress){
var event={
lengthComputable:true,
loaded:progress,
total:total};

this.upload.onprogress(event);}}},{key:'$XMLHttpRequestBase_didReceiveResponse',value:function $XMLHttpRequestBase_didReceiveResponse(



requestId,status,responseHeaders,responseURL){
if(requestId===this.$XMLHttpRequestBase_requestId){
this.status=status;
this.setResponseHeaders(responseHeaders);
this.setReadyState(this.HEADERS_RECEIVED);
if(responseURL||responseURL===''){
this.responseURL=responseURL;}else 
{
delete this.responseURL;}}}},{key:'$XMLHttpRequestBase_didReceiveData',value:function $XMLHttpRequestBase_didReceiveData(




requestId,responseText){
if(requestId===this.$XMLHttpRequestBase_requestId){
if(!this.responseText){
this.responseText=responseText;}else 
{
this.responseText+=responseText;}

switch(this.responseType){
case '':
case 'text':
this.response=this.responseText;
break;
case 'blob':

!(
typeof Blob==='function')?require('fbjs/lib/invariant')(0,'responseType "blob" is only supported on platforms with native Blob support'):undefined;


this.response=new Blob([this.responseText]);
break;
default:
!false?require('fbjs/lib/invariant')(0,'responseType "'+this.responseType+'" is unsupported'):undefined;}

this.setReadyState(this.LOADING);}}},{key:'$XMLHttpRequestBase_didCompleteResponse',value:function $XMLHttpRequestBase_didCompleteResponse(



requestId,error){
if(requestId===this.$XMLHttpRequestBase_requestId){
if(error){
this.responseText=error;}

this.$XMLHttpRequestBase_clearSubscriptions();
this.$XMLHttpRequestBase_requestId=null;
this.setReadyState(this.DONE);}}},{key:'$XMLHttpRequestBase_clearSubscriptions',value:function $XMLHttpRequestBase_clearSubscriptions()



{
(this.$XMLHttpRequestBase_subscriptions||[]).forEach(function(sub){
sub.remove();});

this.$XMLHttpRequestBase_subscriptions=[];}},{key:'getAllResponseHeaders',value:function getAllResponseHeaders()


{
if(!this.responseHeaders){

return null;}

var headers=this.responseHeaders||{};
return Object.keys(headers).map(function(headerName){
return headerName+': '+headers[headerName];}).
join('\n');}},{key:'getResponseHeader',value:function getResponseHeader(


header){
var value=this.$XMLHttpRequestBase_lowerCaseResponseHeaders[header.toLowerCase()];
return value!==undefined?value:null;}},{key:'setRequestHeader',value:function setRequestHeader(


header,value){
if(this.readyState!==this.OPENED){
throw new Error('Request has not been opened');}

this.$XMLHttpRequestBase_headers[header.toLowerCase()]=value;}},{key:'open',value:function open(


method,url,async){

if(this.readyState!==this.UNSENT){
throw new Error('Cannot open, already sending');}

if(async!==undefined&&!async){

throw new Error('Synchronous http requests are not supported');}

if(!url){
throw new Error('Cannot load an empty url');}

this.$XMLHttpRequestBase_reset();
this.$XMLHttpRequestBase_method=method;
this.$XMLHttpRequestBase_url=url;
this.$XMLHttpRequestBase_aborted=false;
this.setReadyState(this.OPENED);}},{key:'sendImpl',value:function sendImpl(


method,url,headers,data,timeout){
throw new Error('Subclass must define sendImpl method');}},{key:'send',value:function send(


data){
if(this.readyState!==this.OPENED){
throw new Error('Request has not been opened');}

if(this.$XMLHttpRequestBase_sent){
throw new Error('Request has already been sent');}

this.$XMLHttpRequestBase_sent=true;
this.sendImpl(this.$XMLHttpRequestBase_method,this.$XMLHttpRequestBase_url,this.$XMLHttpRequestBase_headers,data,this.timeout);}},{key:'abort',value:function abort()


{
this.$XMLHttpRequestBase_aborted=true;
if(this.$XMLHttpRequestBase_requestId){
require('RCTNetworking').abortRequest(this.$XMLHttpRequestBase_requestId);}



if(!(this.readyState===this.UNSENT||
this.readyState===this.OPENED&&!this.$XMLHttpRequestBase_sent||
this.readyState===this.DONE)){
this.$XMLHttpRequestBase_reset();
this.setReadyState(this.DONE);}


this.$XMLHttpRequestBase_reset();}},{key:'setResponseHeaders',value:function setResponseHeaders(


responseHeaders){
this.responseHeaders=responseHeaders||null;
var headers=responseHeaders||{};
this.$XMLHttpRequestBase_lowerCaseResponseHeaders=
Object.keys(headers).reduce(function(lcaseHeaders,headerName){
lcaseHeaders[headerName.toLowerCase()]=headers[headerName];
return lcaseHeaders;},
{});}},{key:'setReadyState',value:function setReadyState(


newState){
this.readyState=newState;

var onreadystatechange=this.onreadystatechange;
if(onreadystatechange){


onreadystatechange.call(this,null);}

if(newState===this.DONE&&!this.$XMLHttpRequestBase_aborted){
this.$XMLHttpRequestBase_sendLoad();}}},{key:'$XMLHttpRequestBase_sendLoad',value:function $XMLHttpRequestBase_sendLoad()



{

var onload=this.onload;
if(onload){


onload(null);}}}]);return XMLHttpRequestBase;}();




XMLHttpRequestBase.UNSENT=UNSENT;
XMLHttpRequestBase.OPENED=OPENED;
XMLHttpRequestBase.HEADERS_RECEIVED=HEADERS_RECEIVED;
XMLHttpRequestBase.LOADING=LOADING;
XMLHttpRequestBase.DONE=DONE;

module.exports=XMLHttpRequestBase;
'use strict';












require('configureForRelayOSS');

jest.
dontMock('GraphQLRange').
dontMock('GraphQLSegment').
mock('warning');




describe('writeRelayQueryPayload()',function(){
var RelayRecordStore=undefined;
var RelayRecordWriter=undefined;var _RelayTestUtils=require('RelayTestUtils');var 


getNode=_RelayTestUtils.getNode;var 
getVerbatimNode=_RelayTestUtils.getVerbatimNode;var 
writePayload=_RelayTestUtils.writePayload;var 
writeVerbatimPayload=_RelayTestUtils.writeVerbatimPayload;


beforeEach(function(){
jest.resetModuleRegistry();

RelayRecordStore=require('RelayRecordStore');
RelayRecordWriter=require('RelayRecordWriter');

jasmine.addMatchers(require('RelayTestUtils').matchers);});


describe('linked fields',function(){
it('are created and set to null when the response is null',function(){
var records={};
var store=new RelayRecordStore({records:records});
var writer=new RelayRecordWriter(records,{},false);
var query=getNode(function(){return {children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'actor',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true},type:'Actor'}],fieldName:'viewer',kind:'Query',metadata:{},name:'WriteRelayQueryPayload_linkedField',type:'Viewer'};}());








var payload={
viewer:{
actor:null}};


var results=writePayload(store,writer,query,payload);
expect(results).toEqual({
created:{
'client:1':true},

updated:{}});

expect(store.getRecordState('client:1')).toBe('EXISTENT');
expect(store.getLinkedRecordID('client:1','actor')).toBe(null);});


it('are deleted when the response is null',function(){
var records={
'client:1':{
__dataID__:'client:1',
actor:{
__dataID__:'client:2'}},


'client:2':{
__dataID__:'client:2'}};


var store=new RelayRecordStore({records:records});
var writer=new RelayRecordWriter(records,{},false);
var query=getNode(function(){return {children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'actor',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true},type:'Actor'}],fieldName:'viewer',kind:'Query',metadata:{},name:'WriteRelayQueryPayload_linkedField',type:'Viewer'};}());








var payload={
viewer:{
actor:null}};


var results=writePayload(store,writer,query,payload);
expect(results).toEqual({
created:{},

updated:{
'client:1':true}});


expect(store.getRecordState('client:1')).toBe('EXISTENT');
expect(store.getLinkedRecordID('client:1','actor')).toBe(null);});


it('are not created when the response is undefined',function(){
var records={};
var store=new RelayRecordStore({records:records});
var writer=new RelayRecordWriter(records,{},false);
var query=getNode(function(){return {children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'actor',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true},type:'Actor'}],fieldName:'viewer',kind:'Query',metadata:{},name:'WriteRelayQueryPayload_linkedField',type:'Viewer'};}());








var payload={
viewer:{
actor:undefined}};


writePayload(store,writer,query,payload);
expect(store.getRecordState('client:1')).toBe('EXISTENT');
expect(store.getLinkedRecordID('client:1','actor')).toBe(undefined);});


it('are not deleted when the response is undefined',function(){
var records={
'client:1':{
__dataID__:'client:1',
actor:{
__dataID__:'123'}},


'123':{
__dataID__:'123',
id:'123'}};


var store=new RelayRecordStore({records:records});
var writer=new RelayRecordWriter(records,{},false);
var query=getNode(function(){return {children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'actor',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true},type:'Actor'}],fieldName:'viewer',kind:'Query',metadata:{},name:'WriteRelayQueryPayload_linkedField',type:'Viewer'};}());








var payload={
viewer:{
actor:undefined}};


writePayload(store,writer,query,payload);
expect(store.getRecordState('client:1')).toBe('EXISTENT');
expect(store.getLinkedRecordID('client:1','actor')).toBe('123');
expect(store.getRecordState('123')).toBe('EXISTENT');
expect(store.getField('123','id')).toBe('123');});


it('are created with the specified id',function(){
var records={};
var store=new RelayRecordStore({records:records});
var writer=new RelayRecordWriter(records,{},false);
var actorID='123';
var query=getNode(function(){return {children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'actor',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true},type:'Actor'}],fieldName:'viewer',kind:'Query',metadata:{},name:'WriteRelayQueryPayload_linkedField',type:'Viewer'};}());








var payload={
viewer:{
actor:{
id:actorID}}};



var results=writePayload(store,writer,query,payload);
expect(results).toEqual({
created:{
'client:1':true,
'123':true},

updated:{}});

expect(store.getLinkedRecordID('client:1','actor')).toBe(actorID);
expect(store.getRecordState(actorID)).toBe('EXISTENT');});


it('updates the parent if the id changes',function(){
var actorID='123';
var records={
'client:1':{
__dataID__:'client:1',
actor:{
__dataID__:actorID}},


'123':{
__dataID__:actorID}};


var store=new RelayRecordStore({records:records});
var writer=new RelayRecordWriter(records,{},false);
var nextActorID='456';
var query=getNode(function(){return {children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'actor',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true},type:'Actor'}],fieldName:'viewer',kind:'Query',metadata:{},name:'WriteRelayQueryPayload_linkedField',type:'Viewer'};}());








var payload={
viewer:{
actor:{
id:nextActorID}}};



var results=writePayload(store,writer,query,payload);
expect(results).toEqual({
created:{
'456':true},

updated:{
'client:1':true}});


expect(store.getLinkedRecordID('client:1','actor')).toBe(nextActorID);
expect(store.getRecordState(nextActorID)).toBe('EXISTENT');
expect(store.getRecordState(actorID)).toBe('EXISTENT');});


it('are created with a generated id if none is present',function(){
var records={};
var store=new RelayRecordStore({records:records});
var writer=new RelayRecordWriter(records,{},false);
var addressID='client:1';
var query=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'123'}}],children:[{children:[{fieldName:'city',kind:'Field',metadata:{},type:'String'}],fieldName:'address',kind:'Field',metadata:{canHaveSubselections:true},type:'StreetAddress'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'WriteRelayQueryPayload_linkedField',type:'Node'};}());








var payload={
node:{
id:'123',

address:{
city:'San Francisco'}}};



var results=writePayload(store,writer,query,payload);
expect(results).toEqual({
created:{
'123':true,
'client:1':true},

updated:{}});

expect(store.getLinkedRecordID('123','address')).toBe(addressID);
expect(store.getRecordState(addressID)).toBe('EXISTENT');
expect(store.getField(addressID,'city')).toBe('San Francisco');});


it('reuses existing generated ids',function(){
var addressID='client:1';
var records={
'123':{
__dataID__:'123',
id:'123',
address:{
__dataID__:addressID}},


'client:1':{
__dataID__:addressID,
city:'San Francisco'}};


var store=new RelayRecordStore({records:records});
var writer=new RelayRecordWriter(records,{},false);
var query=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'123'}}],children:[{children:[{fieldName:'city',kind:'Field',metadata:{},type:'String'}],fieldName:'address',kind:'Field',metadata:{canHaveSubselections:true},type:'StreetAddress'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'WriteRelayQueryPayload_linkedField',type:'Node'};}());








var payload={
node:{
id:'123',


address:{
city:'San Francisco'}}};



var results=writePayload(store,writer,query,payload);
expect(results).toEqual({
created:{},
updated:{}});

expect(store.getLinkedRecordID('123','address')).toBe(addressID);
expect(store.getField(addressID,'city')).toBe('San Francisco');});


it('records an update on the parent if a linked field is created',function(){
var records={
'user:1':{
__dataID__:'user:1',
'hometown':{
__dataID__:'hometown:1'},

id:'user:1'},

'hometown:1':null};

var store=new RelayRecordStore({records:records});
var writer=new RelayRecordWriter(records,{},false);
store.removeRecord('hometown:1');
var query=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'user:1'}}],children:[{children:[{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'hometown',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Page'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'WriteRelayQueryPayload_linkedField',type:'Node'};}());








var payload={
node:{
id:'user:1',
'hometown':{
id:'hometown:1',
name:'World'}}};



var results=writePayload(store,writer,query,payload);
expect(results).toEqual({
created:{
'hometown:1':true},

updated:{
'user:1':true}});});




it('records the concrete type if `__typename` is present',function(){
var records={};
var store=new RelayRecordStore({records:records});
var writer=new RelayRecordWriter(records,{},false);
var query=getNode(function(){return {children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isRequisite:true},type:'String'}],fieldName:'actor',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true},type:'Actor'}],fieldName:'viewer',kind:'Query',metadata:{},name:'WriteRelayQueryPayload_linkedField',type:'Viewer'};}());









var payload={
viewer:{
actor:{
id:'123',
__typename:'User'}}};



writePayload(store,writer,query,payload);
expect(store.getType('123')).toBe('User');});


it('warns if the typename cannot be determined for a node',function(){
var records={};
var store=new RelayRecordStore({records:records});
var writer=new RelayRecordWriter(records,{},false);

var query=getVerbatimNode(function(){return {children:[{children:[{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'actor',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true},type:'Actor'}],fieldName:'viewer',kind:'Query',metadata:{},name:'WriteRelayQueryPayload_linkedField',type:'Viewer'};}());








var payload={
viewer:{
actor:{
id:'123',
name:'Joe'}}};



writeVerbatimPayload(store,writer,query,payload);
expect(store.getType('123')).toBe(null);
expect([
'RelayQueryWriter: Could not find a type name for record `%s`.',
'123']).
toBeWarnedNTimes(1);});


it('stores types for client records',function(){
var records={};
var store=new RelayRecordStore({records:records});
var writer=new RelayRecordWriter(records,{},false);
var query=getNode(function(){return {children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{},type:'String'},{children:[{children:[{fieldName:'city',kind:'Field',metadata:{},type:'String'}],fieldName:'address',kind:'Field',metadata:{canHaveSubselections:true},type:'StreetAddress'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'User',type:'User'}],fieldName:'me',kind:'Query',metadata:{},name:'WriteRelayQueryPayload_linkedField',type:'User'};}());












var payload={
me:{
id:'123',
__typename:'User',
address:{
city:'Menlo Park'}}};



writePayload(store,writer,query,payload);
var addressID=store.getLinkedRecordID('123','address');
expect(store.getType('123')).toBe('User');
expect(store.getType(addressID)).toBe('StreetAddress');});});});
'use strict';



















var State=require('immutable').Record({
active:false,
objective:null});var 






CRMNowObjectiveStore=function(_FluxStore){babelHelpers.inherits(CRMNowObjectiveStore,_FluxStore);



function CRMNowObjectiveStore(){babelHelpers.classCallCheck(this,CRMNowObjectiveStore);var _this=babelHelpers.possibleConstructorReturn(this,Object.getPrototypeOf(CRMNowObjectiveStore).call(this,require('CRMNowDispatcher')));

_this.$CRMNowObjectiveStore_state=new State();return _this;}babelHelpers.createClass(CRMNowObjectiveStore,[{key:'__onDispatch',value:function __onDispatch(


payload){
var state=this.$CRMNowObjectiveStore_state;
var action=payload.action;

switch(action.actionType){
case require('CRMNowActionTypes').BEGIN_EDITOR:
this.$CRMNowObjectiveStore_state=new State({active:true});
break;
case require('CRMNowActionTypes').RESET_EDITOR:
this.$CRMNowObjectiveStore_state=new State({active:false});
break;
case require('CRMNowActionTypes').EDITOR_CAMPAIGN_GROUP_CHANGED:
var objective=
this.$CRMNowObjectiveStore_getObjectiveFromCampaignGroup(action.campaignGroup);
if(objective){
this.$CRMNowObjectiveStore_state=this.$CRMNowObjectiveStore_state.merge({
objective:objective});}


break;
case require('CRMNowActionTypes').OBJECTIVE_SELECTED:
this.$CRMNowObjectiveStore_state=this.$CRMNowObjectiveStore_state.merge({
objective:action.objective});

break;
case require('CRMNowActionTypes').RESUME_DRAFT:
this.$CRMNowObjectiveStore_state=this.$CRMNowObjectiveStore_state.merge({
objective:action.draft.getCampaignGroupSpec().objective});

break;
default:

break;}

if(this.$CRMNowObjectiveStore_state!==state){
this.__emitChange();}}},{key:'isActive',value:function isActive()



{
return this.$CRMNowObjectiveStore_state.active;}},{key:'getObjective',value:function getObjective()


{
return this.$CRMNowObjectiveStore_state.objective;}},{key:'$CRMNowObjectiveStore_getObjectiveFromCampaignGroup',value:function $CRMNowObjectiveStore_getObjectiveFromCampaignGroup(


campaignGroup){
var campaignGroupID=require('RelayRecord').getDataID(campaignGroup);
if(campaignGroupID===null){

return null;}

var campaignGroup=require('Relay').Store.read(
require('fromGraphQL').Fragment(Queries.getCampaignGroupQuery()),
campaignGroupID);





!!!campaignGroup?require('invariant')(0,'invalid campaignGourp %s',campaignGroup):undefined;
return campaignGroup.objective;}}]);return CRMNowObjectiveStore;}(require('FluxStore'));



var Queries={
getCampaignGroupQuery:function(){
return function(){return {children:[{fieldName:'objective',kind:'Field',metadata:{},type:'AdObjectiveType'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'CRMNowObjectiveStore_GetCampaignGroupQueryRelayQL',type:'AdCampaignGroup'};}();}};







module.exports=new CRMNowObjectiveStore();
module.exports.Queries=Queries;
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

'use strict';function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError('Cannot call a class as a function');}}var 

GraphQLStoreQueryResolver = (function () {

  function GraphQLStoreQueryResolver(store, queryFragment, callback) {var _this = this;_classCallCheck(this, GraphQLStoreQueryResolver);
    var mockInstances = GraphQLStoreQueryResolver.mock.instances;
    this.mock = { 
      callback: callback, 
      index: mockInstances.length, 
      queryFragment: queryFragment, 
      store: store };

    this.resolve = jest.genMockFunction().mockImplementation(function () {for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}
      var mockConstructor = GraphQLStoreQueryResolver.mock;
      var mockResolve = 
      mockConstructor.resolveImplementations[_this.mock.index] || 
      mockConstructor.defaultResolveImplementation;
      return mockResolve.apply(_this, args);});

    this.reset = jest.genMockFunction();
    this.dispose = jest.genMockFunction();
    mockInstances.push(this);}GraphQLStoreQueryResolver.


  mockResolveImplementation = function mockResolveImplementation(mockResolverIndex, callback) {
    this.mock.resolveImplementations[mockResolverIndex] = callback;};GraphQLStoreQueryResolver.


  mockDefaultResolveImplementation = function mockDefaultResolveImplementation(callback) {
    GraphQLStoreQueryResolver.mock.defaultResolveImplementation = callback;};return GraphQLStoreQueryResolver;})();



GraphQLStoreQueryResolver.mock = { 
  instances: [], 
  resolveImplementations: [], 
  defaultResolveImplementation: function () {return undefined;} };


module.exports = GraphQLStoreQueryResolver;
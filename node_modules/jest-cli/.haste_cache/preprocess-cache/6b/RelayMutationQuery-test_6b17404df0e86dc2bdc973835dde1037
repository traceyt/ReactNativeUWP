/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails oncall+relay
 */

'use strict';function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}

require('configureForRelayOSS');

jest.dontMock('RelayMutationQuery');














describe('RelayMutationQuery', function () {var 
  filterGeneratedFields = require('RelayTestUtils').filterGeneratedFields;var getNode = require('RelayTestUtils').getNode;

  function getNodeChildren(fragment) {
    return require('fromGraphQL').Fragment(fragment).getChildren();}

  function getNodeWithoutSource() {
    var filterCallback = require('RelayConnectionInterface').EDGES_HAVE_SOURCE_FIELD ? 
    function () {return true;} : 
    function (node) {return !node.getSchemaName || node.getSchemaName() !== 'source';};
    return require('filterRelayQuery')(require('RelayTestUtils').getNode.apply(require('RelayTestUtils'), arguments), filterCallback);}


  var tracker;

  beforeEach(function () {
    jest.resetModuleRegistry();

    tracker = new (require('RelayQueryTracker'))();

    jasmine.addMatchers(require('RelayTestUtils').matchers);});


  describe('fields', function () {
    it('throws for invalid field names', function () {
      var fatQuery = require('fromGraphQL').Fragment((function () {return { children: [{ children: [{ fieldName: 'subscribers', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'SubscribersConnection' }, { fieldName: 'subscribeStatus', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'subscribee', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true }, type: 'Actor' }], id: 'b/cHnEAR8/6R:0', kind: 'Fragment', metadata: {}, name: 'RelayMutationQueryRelayQL', type: 'ActorSubscribeResponsePayload' };})());







      expect(function () {
        require('RelayMutationQuery').buildFragmentForFields({ 
          fatQuery: fatQuery, 
          tracker: tracker, 
          fieldIDs: { 
            unsubscribee: '4' } });}).


      toFailInvariant(
      'RelayMutationQuery: Invalid field name on fat query, `unsubscribee`.');});



    it('maps a field to a single ID', function () {
      var fatQuery = require('fromGraphQL').Fragment((function () {return { children: [{ children: [{ fieldName: 'doesViewerLike', kind: 'Field', metadata: {}, type: 'Boolean' }, { fieldName: 'likers', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'LikersOfContentConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'feedback', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Feedback' }], id: 'ttszkMIdeQDJ:0', kind: 'Fragment', metadata: {}, name: 'RelayMutationQueryRelayQL', type: 'FeedbackLikeResponsePayload' };})());







      tracker.getTrackedChildrenForID.mockReturnValue(getNodeChildren((function () {return { children: [{ fieldName: 'likers', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'LikersOfContentConnection' }, { fieldName: 'url', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'Uf1Vo82Ghni/:0', kind: 'Fragment', metadata: {}, name: 'RelayMutationQueryRelayQL', type: 'Feedback' };})()));





      var node = require('RelayMutationQuery').buildFragmentForFields({ 
        fatQuery: fatQuery, 
        tracker: tracker, 
        fieldIDs: { 
          feedback: '123' } });


      var expected = getNodeWithoutSource((function () {return { children: [{ children: [{ fieldName: 'likers', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'LikersOfContentConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'feedback', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Feedback' }], id: 'eYx7hdMJ0CRP:0', kind: 'Fragment', metadata: {}, name: 'RelayMutationQueryRelayQL', type: 'FeedbackLikeResponsePayload' };})());






      expect(node).
      toEqualQueryNode(expected);
      expect(tracker.getTrackedChildrenForID.mock.calls).toEqual([
      ['123']]);});



    it('maps a plural field to an array of IDs', function () {
      var fatQuery = require('fromGraphQL').Fragment((function () {return { children: [{ children: [{ fieldName: 'seenState', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'stories', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isPlural: true }, type: 'Story' }], id: 'h5ZBsFB2Zael:0', kind: 'Fragment', metadata: {}, name: 'RelayMutationQueryRelayQL', type: 'ViewerNotificationsUpdateAllSeenStateResponsePayload' };})());






      tracker.getTrackedChildrenForID.mockReturnValue(getNodeChildren((function () {return { children: [{ children: [{ fieldName: 'text', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'message', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Text' }, { fieldName: 'seenState', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: '9gglAF/7Cq4H:0', kind: 'Fragment', metadata: {}, name: 'RelayMutationQueryRelayQL', type: 'Story' };})()));







      var node = require('RelayMutationQuery').buildFragmentForFields({ 
        fatQuery: fatQuery, 
        tracker: tracker, 
        fieldIDs: { 
          stories: ['123'] } });


      var expected = getNodeWithoutSource((function () {return { children: [{ children: [{ fieldName: 'seenState', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'stories', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isPlural: true }, type: 'Story' }], id: 'TyTWs5t98Uw/:0', kind: 'Fragment', metadata: {}, name: 'RelayMutationQueryRelayQL', type: 'ViewerNotificationsUpdateAllSeenStateResponsePayload' };})());






      expect(node).
      toEqualQueryNode(expected);
      expect(tracker.getTrackedChildrenForID.mock.calls).toEqual([
      ['123']]);});



    it('merges tracked nodes for IDs of plural fields', function () {
      var fatQuery = require('fromGraphQL').Fragment((function () {return { children: [{ children: [{ fieldName: 'seenState', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'stories', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isPlural: true }, type: 'Story' }], id: 'YOXr0p8DiHgT:0', kind: 'Fragment', metadata: {}, name: 'RelayMutationQueryRelayQL', type: 'ViewerNotificationsUpdateAllSeenStateResponsePayload' };})());






      var trackedNodes = { 
        '123': require('fromGraphQL').Fragment((function () {return { children: [{ children: [{ fieldName: 'text', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'message', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Text' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'VAhAnmt4a7F3:0', kind: 'Fragment', metadata: {}, name: 'RelayMutationQueryRelayQL', type: 'Story' };})()), 






        '456': require('fromGraphQL').Fragment((function () {return { children: [{ children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'actors', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true, isPlural: true }, type: 'Actor' }, { fieldName: 'seenState', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'vEOJxfw2uM+s:0', kind: 'Fragment', metadata: {}, name: 'RelayMutationQueryRelayQL', type: 'Story' };})()) };








      tracker.getTrackedChildrenForID.mockImplementation(
      function (dataID) {return [trackedNodes[dataID]];});

      require('RelayMutationQuery').buildFragmentForFields({ 
        fatQuery: fatQuery, 
        tracker: tracker, 
        fieldIDs: { 
          stories: ['123', '456'] } });


      var node = require('intersectRelayQuery').mock.calls[0][0];
      var expected = require('RelayTestUtils').getVerbatimNode((function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { children: [{ fieldName: 'text', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'message', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Text' }], id: 'e4PJj8WqAm04:0', kind: 'Fragment', metadata: {}, name: 'Story', type: 'Story' }, { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { children: [{ fieldName: '__typename', kind: 'Field', metadata: { isRequisite: true }, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'actors', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true, isPlural: true }, type: 'Actor' }, { fieldName: 'seenState', kind: 'Field', metadata: {}, type: 'String' }], id: 'e4PJj8WqAm04:1', kind: 'Fragment', metadata: {}, name: 'Story', type: 'Story' }], id: 'e4PJj8WqAm04:2', kind: 'Fragment', metadata: {}, name: 'RelayMutationQueryRelayQL', type: 'Story' };})());


















      // Clone because the root node will differ, but that's okay.
      expect(expected.clone(node.getChildren())).
      toEqualQueryNode(expected);
      expect(tracker.getTrackedChildrenForID.mock.calls).toEqual([
      ['123'], 
      ['456']]);});});




  describe('edge deletion', function () {
    var fatQuery;
    beforeEach(function () {
      fatQuery = require('fromGraphQL').Fragment((function () {return { children: [{ children: [{ fieldName: 'comments', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'CommentsConnection' }, { fieldName: 'topLevelComments', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'TopLevelCommentsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'feedback', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Feedback' }], id: 'obeucVmxar8l:0', kind: 'Fragment', metadata: {}, name: 'RelayMutationQueryRelayQL', type: 'CommentDeleteResponsePayload' };})());});









    it('throws for invalid parent name', function () {
      expect(function () {
        require('RelayMutationQuery').buildFragmentForEdgeDeletion({ 
          fatQuery: fatQuery, 
          tracker: tracker, 
          connectionName: 'comments', 
          parentID: '123', 
          parentName: 'story' });}).

      toFailInvariant(
      'RelayMutationQuery: Invalid field name on fat query, `story`.');});



    it('creates a fragment for connection metadata', function () {
      tracker.getTrackedChildrenForID.mockReturnValue(getNodeChildren((function () {return { children: [{ fieldName: 'doesViewerLike', kind: 'Field', metadata: {}, type: 'Boolean' }, { calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallValue', callValue: '10' } }], children: [{ fieldName: 'count', kind: 'Field', metadata: {}, type: 'Int' }, { children: [{ children: [{ children: [{ fieldName: 'text', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'body', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Text' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'Comment' }, { fieldName: 'cursor', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'CommentsEdge' }, { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true, isGenerated: true, isRequisite: true }, type: 'PageInfo' }], fieldName: 'comments', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'CommentsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'TQ2kZThQ7bL/:0', kind: 'Fragment', metadata: {}, name: 'RelayMutationQueryRelayQL', type: 'Feedback' };})()));














      var node = require('RelayMutationQuery').buildFragmentForEdgeDeletion({ 
        fatQuery: fatQuery, 
        tracker: tracker, 
        connectionName: 'comments', 
        parentID: '123', 
        parentName: 'feedback' });

      var expected = getNodeWithoutSource((function () {return { children: [{ children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallValue', callValue: '10' } }], children: [{ fieldName: 'count', kind: 'Field', metadata: {}, type: 'Int' }], fieldName: 'comments', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'CommentsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'feedback', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Feedback' }], id: 'w4tCV/Vh2f8i:0', kind: 'Fragment', metadata: {}, name: 'RelayMutationQueryRelayQL', type: 'CommentDeleteResponsePayload' };})());








      expect(node).
      toEqualQueryNode(expected);
      expect(tracker.getTrackedChildrenForID.mock.calls).toEqual([
      ['123']]);});});




  describe('edge insertion', function () {
    var fatQuery, rangeBehaviors;

    beforeEach(function () {
      fatQuery = require('fromGraphQL').Fragment((function () {return { children: [{ children: [{ fieldName: 'comments', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'CommentsConnection' }, { fieldName: 'topLevelComments', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'TopLevelCommentsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'feedback', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Feedback' }, { children: [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'comment', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Comment' }, { children: [{ fieldName: 'cursor', kind: 'Field', metadata: { isRequisite: true }, type: 'String' }, { children: [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'Comment' }, { children: [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'source', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Feedback' }], fieldName: 'feedbackCommentEdge', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'CommentsEdge' }], id: 'tm0UmhxjUTDV:0', kind: 'Fragment', metadata: {}, name: 'RelayMutationQueryRelayQL', type: 'CommentCreateResponsePayload' };})());













      rangeBehaviors = { 
        '': require('GraphQLMutatorConstants').PREPEND, 
        'orderby(toplevel)': require('GraphQLMutatorConstants').PREPEND };});



    it('includes edge fields for connections with range config', function () {
      tracker.getTrackedChildrenForID.mockReturnValue(getNodeChildren((function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'orderby', value: { kind: 'CallValue', callValue: 'toplevel' } }, { kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallValue', callValue: '10' } }], children: [{ children: [{ children: [{ children: [{ fieldName: 'text', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'body', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Text' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'Comment' }, { fieldName: 'cursor', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'CommentsEdge' }, { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true, isGenerated: true, isRequisite: true }, type: 'PageInfo' }], fieldName: 'comments', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'CommentsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'k0/fjQICe/9X:0', kind: 'Fragment', metadata: {}, name: 'RelayMutationQueryRelayQL', type: 'Feedback' };})()));












      var node = require('RelayMutationQuery').buildFragmentForEdgeInsertion({ 
        fatQuery: fatQuery, 
        tracker: tracker, 
        connectionName: 'comments', 
        parentID: '123', 
        edgeName: 'feedbackCommentEdge', 
        rangeBehaviors: rangeBehaviors });

      var expected = getNodeWithoutSource((function () {return { children: [{ children: [{ fieldName: '__typename', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'cursor', kind: 'Field', metadata: { isRequisite: true }, type: 'String' }, { children: [{ children: [{ fieldName: 'text', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'body', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Text' }, { fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'Comment' }, { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }], fieldName: 'source', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Feedback' }], fieldName: 'feedbackCommentEdge', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'CommentsEdge' }], id: 'TcQsIk2sXOJc:0', kind: 'Fragment', metadata: {}, name: 'RelayMutationQueryRelayQL', type: 'CommentCreateResponsePayload' };})());
















      expect(node).
      toEqualQueryNode(expected);
      expect(tracker.getTrackedChildrenForID.mock.calls).toEqual([
      ['123']]);});



    it('includes fields from multiple tracked edges', function () {
      tracker.getTrackedChildrenForID.mockReturnValue(getNodeChildren((function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallValue', callValue: '10' } }], children: [{ fieldName: 'count', kind: 'Field', metadata: {}, type: 'Int' }, { children: [{ children: [{ children: [{ fieldName: 'text', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'body', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Text' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'Comment' }, { fieldName: 'cursor', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'CommentsEdge' }, { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true, isGenerated: true, isRequisite: true }, type: 'PageInfo' }], fieldName: 'comments', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'CommentsConnection' }, { calls: [{ kind: 'Call', metadata: {}, name: 'last', value: { kind: 'CallValue', callValue: 10 } }], children: [{ children: [{ children: [{ children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'author', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'User' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'Comment' }, { fieldName: 'cursor', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'CommentsEdge' }, { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true, isGenerated: true, isRequisite: true }, type: 'PageInfo' }], fieldName: 'comments', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'CommentsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'zvv7Z5ExVUMU:0', kind: 'Fragment', metadata: {}, name: 'RelayMutationQueryRelayQL', type: 'Feedback' };})()));






















      var node = require('RelayMutationQuery').buildFragmentForEdgeInsertion({ 
        fatQuery: fatQuery, 
        tracker: tracker, 
        connectionName: 'comments', 
        parentID: '123', 
        edgeName: 'feedbackCommentEdge', 
        rangeBehaviors: rangeBehaviors });

      var expected = getNodeWithoutSource((function () {return { children: [{ children: [{ fieldName: '__typename', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'cursor', kind: 'Field', metadata: { isRequisite: true }, type: 'String' }, { children: [{ children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'author', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'User' }, { children: [{ fieldName: 'text', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'body', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Text' }, { fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'Comment' }, { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }], fieldName: 'source', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Feedback' }], fieldName: 'feedbackCommentEdge', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'CommentsEdge' }], id: 'UKXt4+3CsUbD:0', kind: 'Fragment', metadata: {}, name: 'RelayMutationQueryRelayQL', type: 'CommentCreateResponsePayload' };})());



















      expect(node).
      toEqualQueryNode(expected);});


    it('excludes fields from tracked edges with different filters', function () {
      tracker.getTrackedChildrenForID.mockReturnValue(getNodeChildren((function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallValue', callValue: '10' } }], children: [{ fieldName: 'count', kind: 'Field', metadata: {}, type: 'Int' }, { children: [{ children: [{ children: [{ fieldName: 'text', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'body', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Text' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'Comment' }, { fieldName: 'cursor', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'CommentsEdge' }, { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true, isGenerated: true, isRequisite: true }, type: 'PageInfo' }], fieldName: 'comments', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'CommentsConnection' }, { calls: [{ kind: 'Call', metadata: {}, name: 'orderby', value: { kind: 'CallValue', callValue: 'ranked_threaded' } }, { kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallValue', callValue: '10' } }], children: [{ children: [{ children: [{ children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'author', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'User' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'Comment' }, { fieldName: 'cursor', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'CommentsEdge' }, { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true, isGenerated: true, isRequisite: true }, type: 'PageInfo' }], fieldName: 'comments', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'CommentsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'ikLGesRL9l/B:0', kind: 'Fragment', metadata: {}, name: 'RelayMutationQueryRelayQL', type: 'Feedback' };})()));






















      var node = require('RelayMutationQuery').buildFragmentForEdgeInsertion({ 
        fatQuery: fatQuery, 
        tracker: tracker, 
        connectionName: 'comments', 
        parentID: '123', 
        edgeName: 'feedbackCommentEdge', 
        rangeBehaviors: rangeBehaviors });

      var expected = getNodeWithoutSource((function () {return { children: [{ children: [{ fieldName: '__typename', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'cursor', kind: 'Field', metadata: { isRequisite: true }, type: 'String' }, { children: [{ children: [{ fieldName: 'text', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'body', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Text' }, { fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'Comment' }, { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }], fieldName: 'source', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Feedback' }], fieldName: 'feedbackCommentEdge', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'CommentsEdge' }], id: 'W7dwKfs/VDn2:0', kind: 'Fragment', metadata: {}, name: 'RelayMutationQueryRelayQL', type: 'CommentCreateResponsePayload' };})());
















      expect(node).
      toEqualQueryNode(expected);});


    it('refetches connections in the absence of a range config', function () {
      tracker.getTrackedChildrenForID.mockReturnValue(getNodeChildren((function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'orderby', value: { kind: 'CallValue', callValue: 'ranked_threaded' } }, { kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallValue', callValue: '10' } }], children: [{ children: [{ children: [{ children: [{ fieldName: 'text', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'body', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Text' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'Comment' }, { fieldName: 'cursor', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'CommentsEdge' }, { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true, isGenerated: true, isRequisite: true }, type: 'PageInfo' }], fieldName: 'comments', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'CommentsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'dtyexZdvFGsD:0', kind: 'Fragment', metadata: {}, name: 'RelayMutationQueryRelayQL', type: 'Feedback' };})()));












      var node = require('RelayMutationQuery').buildFragmentForEdgeInsertion({ 
        fatQuery: fatQuery, 
        tracker: tracker, 
        connectionName: 'comments', 
        parentID: '123', 
        edgeName: 'feedbackCommentEdge', 
        parentName: 'feedback', 
        rangeBehaviors: rangeBehaviors });

      var expected = getNodeWithoutSource((function () {return { children: [{ children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'orderby', value: { kind: 'CallValue', callValue: 'ranked_threaded' } }, { kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallValue', callValue: '10' } }], children: [{ children: [{ children: [{ children: [{ fieldName: 'text', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'body', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Text' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'Comment' }, { fieldName: 'cursor', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'CommentsEdge' }, { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true, isGenerated: true, isRequisite: true }, type: 'PageInfo' }], fieldName: 'comments', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'CommentsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'feedback', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Feedback' }], id: 'h4PBp+Wd9SfY:0', kind: 'Fragment', metadata: {}, name: 'RelayMutationQueryRelayQL', type: 'CommentCreateResponsePayload' };})());














      expect(node).
      toEqualQueryNode(expected);});


    it('includes non-edge fields for connections', function () {
      tracker.getTrackedChildrenForID.mockReturnValue(getNodeChildren((function () {return { children: [{ children: [{ fieldName: 'count', kind: 'Field', metadata: {}, type: 'Int' }], fieldName: 'comments', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'CommentsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'qYPtiHSCOTlp:0', kind: 'Fragment', metadata: {}, name: 'RelayMutationQueryRelayQL', type: 'Feedback' };})()));






      var node = require('RelayMutationQuery').buildFragmentForEdgeInsertion({ 
        fatQuery: fatQuery, 
        tracker: tracker, 
        connectionName: 'comments', 
        parentID: '123', 
        edgeName: 'feedbackCommentEdge', 
        parentName: 'feedback', 
        rangeBehaviors: rangeBehaviors });

      var expected = getNodeWithoutSource((function () {return { children: [{ children: [{ children: [{ fieldName: 'count', kind: 'Field', metadata: {}, type: 'Int' }], fieldName: 'comments', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'CommentsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'feedback', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Feedback' }], id: 'CIuw1apoa9KN:0', kind: 'Fragment', metadata: {}, name: 'RelayMutationQueryRelayQL', type: 'CommentCreateResponsePayload' };})());








      expect(node).
      toEqualQueryNode(expected);});


    it('throws for invalid parent name', function () {
      tracker.getTrackedChildrenForID.mockReturnValue(getNodeChildren((function () {return { children: [{ children: [{ fieldName: 'count', kind: 'Field', metadata: {}, type: 'Int' }], fieldName: 'comments', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'CommentsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'TKYJWQi7NkOc:0', kind: 'Fragment', metadata: {}, name: 'RelayMutationQueryRelayQL', type: 'Feedback' };})()));






      expect(function () {
        require('RelayMutationQuery').buildFragmentForEdgeInsertion({ 
          fatQuery: fatQuery, 
          tracker: tracker, 
          connectionName: 'comments', 
          parentID: '123', 
          edgeName: 'feedbackCommentEdge', 
          parentName: 'story', 
          rangeBehaviors: rangeBehaviors });}).

      toFailInvariant(
      'RelayMutationQuery: Invalid field name on fat query, `story`.');});});




  describe('optimistic update', function () {
    it('infers fields', function () {
      var fatQuery = require('fromGraphQL').Fragment((function () {return { children: [{ children: [{ fieldName: 'doesViewerLike', kind: 'Field', metadata: {}, type: 'Boolean' }, { fieldName: 'likers', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'LikersOfContentConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'feedback', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Feedback' }], id: 'zu5gyuPPiWAb:0', kind: 'Fragment', metadata: {}, name: 'RelayMutationQueryRelayQL', type: 'FeedbackLikeResponsePayload' };})());








      var mockData = {};
      require('RelayMutationQuery').buildFragmentForOptimisticUpdate({ 
        response: mockData, 
        fatQuery: fatQuery });


      expect(require('inferRelayFieldsFromData').mock.calls.length).toBe(1);
      expect(require('inferRelayFieldsFromData').mock.calls[0][0]).toBe(mockData);});


    it('builds query', function () {var _response;
      var fatQuery = require('fromGraphQL').Fragment((function () {return { children: [{ children: [{ fieldName: 'doesViewerLike', kind: 'Field', metadata: {}, type: 'Boolean' }, { fieldName: 'likers', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'LikersOfContentConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'feedback', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Feedback' }], id: 'zuiEo7D2keYK:0', kind: 'Fragment', metadata: {}, name: 'RelayMutationQueryRelayQL', type: 'FeedbackLikeResponsePayload' };})());







      var mutation = (function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'feedbackLike', value: { kind: 'CallVariable', callVariableName: 'input' } }], children: [{ fieldName: 'clientMutationId', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], kind: 'Mutation', metadata: { inputType: 'FeedbackLikeInput' }, name: 'RelayMutationQuery', responseType: 'FeedbackLikeResponsePayload' };})();

      var query = require('RelayMutationQuery').buildQueryForOptimisticUpdate({ 
        response: (_response = {}, _defineProperty(_response, 
        require('RelayConnectionInterface').CLIENT_MUTATION_ID, '1'), _defineProperty(_response, 'feedback', 
        { 
          doesViewerLike: true, 
          id: '1', 
          likers: { 
            count: 4 } }), _response), 



        fatQuery: fatQuery, 
        mutation: mutation });


      var variables = { input: '' };
      var expectedMutationQuery = filterGeneratedFields(
      getNodeWithoutSource((function (RQL_0) {return { calls: [{ kind: 'Call', metadata: {}, name: 'feedbackLike', value: { kind: 'CallVariable', callVariableName: 'input' } }], children: [].concat.apply([], [{ fieldName: 'clientMutationId', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, require('Relay').QL.__frag(RQL_0)]), kind: 'Mutation', metadata: { inputType: 'FeedbackLikeInput' }, name: 'RelayMutationQuery', responseType: 'FeedbackLikeResponsePayload' };})((function () {return { children: [{ fieldName: 'clientMutationId', kind: 'Field', metadata: {}, type: 'String' }, { children: [{ fieldName: 'doesViewerLike', kind: 'Field', metadata: {}, type: 'Boolean' }, { fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { children: [{ fieldName: 'count', kind: 'Field', metadata: {}, type: 'Int' }], fieldName: 'likers', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'LikersOfContentConnection' }], fieldName: 'feedback', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Feedback' }], id: 'YfrYwOk+ltxA:0', kind: 'Fragment', metadata: {}, name: 'RelayMutationQueryRelayQL', type: 'FeedbackLikeResponsePayload' };})()), 
















      variables));


      expect(query).
      toEqualQueryNode(expectedMutationQuery);});});



  describe('query', function () {
    it('creates a query for RANGE_ADD', function () {
      tracker.getTrackedChildrenForID.mockReturnValue([getNode((function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallValue', callValue: '10' } }], children: [{ children: [{ children: [{ children: [{ fieldName: 'text', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'body', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Text' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'Comment' }, { fieldName: 'cursor', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'CommentsEdge' }, { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true, isGenerated: true, isRequisite: true }, type: 'PageInfo' }], fieldName: 'comments', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'CommentsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'jNEeT6HQW/Up:0', kind: 'Fragment', metadata: {}, name: 'RelayMutationQueryRelayQL', type: 'Feedback' };})())]);












      var fatQuery = require('fromGraphQL').Fragment((function () {return { children: [{ children: [{ fieldName: 'comments', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'CommentsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'feedback', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Feedback' }, { children: [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'comment', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Comment' }, { children: [{ fieldName: 'cursor', kind: 'Field', metadata: { isRequisite: true }, type: 'String' }, { children: [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'Comment' }, { children: [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'source', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Feedback' }], fieldName: 'feedbackCommentEdge', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'CommentsEdge' }], id: 's41sfhzmv7kk:0', kind: 'Fragment', metadata: {}, name: 'RelayMutationQueryRelayQL', type: 'CommentCreateResponsePayload' };})());












      var parentName = 'feedback';
      var parentID = '123';
      var connectionName = 'comments';
      var edgeName = 'feedbackCommentEdge';
      var rangeBehaviors = { 
        '': require('GraphQLMutatorConstants').PREPEND };

      var configs = [
      { 
        type: require('RelayMutationType').RANGE_ADD, 
        parentName: parentName, 
        parentID: parentID, 
        connectionName: connectionName, 
        edgeName: edgeName, 
        rangeBehaviors: rangeBehaviors }];



      var mutation = (function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'commentCreate', value: { kind: 'CallVariable', callVariableName: 'input' } }], children: [{ fieldName: 'clientMutationId', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], kind: 'Mutation', metadata: { inputType: 'CommentCreateInput' }, name: 'RelayMutationQuery', responseType: 'CommentCreateResponsePayload' };})();
      var mutationName = 'CommentAddMutation';
      var variables = { input: '' };
      var query = require('RelayMutationQuery').buildQuery({ 
        tracker: tracker, 
        fatQuery: fatQuery, 
        configs: configs, 
        mutationName: mutationName, 
        mutation: mutation });


      var expectedMutationQuery = filterGeneratedFields(
      getNodeWithoutSource((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'commentCreate', value: { kind: 'CallVariable', callVariableName: 'input' } }], children: [{ fieldName: 'clientMutationId', kind: 'Field', metadata: { isRequisite: true }, type: 'String' }, { children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }], id: 'i2+Tl4llcqx6:0', kind: 'Fragment', metadata: {}, name: 'Feedback', type: 'Feedback' }], fieldName: 'feedback', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Feedback' }, { children: [{ fieldName: '__typename', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'cursor', kind: 'Field', metadata: { isRequisite: true }, type: 'String' }, { children: [{ children: [{ fieldName: 'text', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'body', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Text' }, { fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'Comment' }, { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }], fieldName: 'source', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Feedback' }], fieldName: 'feedbackCommentEdge', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'CommentsEdge' }], id: 'i2+Tl4llcqx6:1', kind: 'Fragment', metadata: {}, name: 'CommentCreateResponsePayload', type: 'CommentCreateResponsePayload' }], kind: 'Mutation', metadata: { inputType: 'CommentCreateInput' }, name: 'RelayMutationQuery', responseType: 'CommentCreateResponsePayload' };})(), 

























      variables));


      expect(query).
      toEqualQueryNode(expectedMutationQuery);});


    it('creates a query for NODE_DELETE', function () {
      tracker.getTrackedChildrenForID.mockReturnValue(getNodeChildren((function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallValue', callValue: '10' } }], children: [{ children: [{ children: [{ children: [{ fieldName: 'text', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'body', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Text' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'Comment' }, { fieldName: 'cursor', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'CommentsEdge' }, { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true, isGenerated: true, isRequisite: true }, type: 'PageInfo' }], fieldName: 'comments', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'CommentsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'xSV8RYtDc23Z:0', kind: 'Fragment', metadata: {}, name: 'RelayMutationQueryRelayQL', type: 'Feedback' };})()));












      var fatQuery = require('fromGraphQL').Fragment((function () {return { children: [{ children: [{ fieldName: 'comments', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'CommentsConnection' }, { fieldName: 'topLevelComments', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'TopLevelCommentsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'feedback', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Feedback' }], id: '6YWEC21m4kUM:0', kind: 'Fragment', metadata: {}, name: 'RelayMutationQueryRelayQL', type: 'CommentDeleteResponsePayload' };})());







      var parentName = 'feedback';
      var parentID = '123';
      var connectionName = 'comments';
      var deletedIDFieldName = 'deletedCommentId';
      var configs = [
      { 
        type: require('RelayMutationType').NODE_DELETE, 
        parentName: parentName, 
        parentID: parentID, 
        connectionName: connectionName, 
        deletedIDFieldName: deletedIDFieldName }];



      var mutation = (function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'commentDelete', value: { kind: 'CallVariable', callVariableName: 'input' } }], children: [{ fieldName: 'clientMutationId', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], kind: 'Mutation', metadata: { inputType: 'CommentDeleteInput' }, name: 'RelayMutationQuery', responseType: 'CommentDeleteResponsePayload' };})();
      var mutationName = 'CommentDeleteMutation';
      var variables = { input: '' };
      var query = require('RelayMutationQuery').buildQuery({ 
        tracker: tracker, 
        fatQuery: fatQuery, 
        configs: configs, 
        mutationName: mutationName, 
        mutation: mutation });


      var expectedMutationQuery = getNodeWithoutSource((function (RQL_0) {return { calls: [{ kind: 'Call', metadata: {}, name: 'commentDelete', value: { kind: 'CallVariable', callVariableName: 'input' } }], children: [].concat.apply([], [{ fieldName: 'clientMutationId', kind: 'Field', metadata: { isRequisite: true }, type: 'String' }, { fieldName: 'deletedCommentId', kind: 'Field', metadata: {}, type: 'ID' }, require('Relay').QL.__frag(RQL_0)]), kind: 'Mutation', metadata: { inputType: 'CommentDeleteInput' }, name: 'RelayMutationQuery', responseType: 'CommentDeleteResponsePayload' };})((function () {return { children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }], fieldName: 'feedback', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Feedback' }], id: 'RduLPrUHuheP:0', kind: 'Fragment', metadata: {}, name: 'RelayMutationQueryRelayQL', type: 'CommentDeleteResponsePayload' };})()), 













      variables);

      expect(query).
      toEqualQueryNode(expectedMutationQuery);});


    it('creates a query for RANGE_DELETE with a shallow deleted field', function () {
      tracker.getTrackedChildrenForID.mockReturnValue(getNodeChildren((function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallValue', callValue: '10' } }], children: [{ children: [{ children: [{ children: [{ fieldName: 'text', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'body', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Text' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'Comment' }, { fieldName: 'cursor', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'CommentsEdge' }, { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true, isGenerated: true, isRequisite: true }, type: 'PageInfo' }], fieldName: 'comments', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'CommentsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'FXWvPqq06ZiE:0', kind: 'Fragment', metadata: {}, name: 'RelayMutationQueryRelayQL', type: 'Feedback' };})()));












      var fatQuery = require('fromGraphQL').Fragment((function () {return { children: [{ children: [{ fieldName: 'comments', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'CommentsConnection' }, { fieldName: 'topLevelComments', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'TopLevelCommentsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'feedback', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Feedback' }], id: 'HsHLSnheC4ck:0', kind: 'Fragment', metadata: {}, name: 'RelayMutationQueryRelayQL', type: 'CommentDeleteResponsePayload' };})());







      var parentName = 'feedback';
      var parentID = '123';
      var connectionName = 'comments';
      var deletedIDFieldName = 'deletedCommentId';
      var configs = [
      { 
        type: require('RelayMutationType').RANGE_DELETE, 
        parentName: parentName, 
        parentID: parentID, 
        connectionName: connectionName, 
        deletedIDFieldName: deletedIDFieldName }];



      var mutation = (function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'commentDelete', value: { kind: 'CallVariable', callVariableName: 'input' } }], children: [{ fieldName: 'clientMutationId', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], kind: 'Mutation', metadata: { inputType: 'CommentDeleteInput' }, name: 'RelayMutationQuery', responseType: 'CommentDeleteResponsePayload' };})();
      var mutationName = 'CommentDeleteMutation';
      var variables = { input: '' };
      var query = require('RelayMutationQuery').buildQuery({ 
        tracker: tracker, 
        fatQuery: fatQuery, 
        configs: configs, 
        mutationName: mutationName, 
        mutation: mutation });


      var expectedMutationQuery = getNodeWithoutSource((function (RQL_0) {return { calls: [{ kind: 'Call', metadata: {}, name: 'commentDelete', value: { kind: 'CallVariable', callVariableName: 'input' } }], children: [].concat.apply([], [{ fieldName: 'clientMutationId', kind: 'Field', metadata: { isRequisite: true }, type: 'String' }, { fieldName: 'deletedCommentId', kind: 'Field', metadata: {}, type: 'ID' }, require('Relay').QL.__frag(RQL_0)]), kind: 'Mutation', metadata: { inputType: 'CommentDeleteInput' }, name: 'RelayMutationQuery', responseType: 'CommentDeleteResponsePayload' };})((function () {return { children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }], fieldName: 'feedback', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Feedback' }], id: 'J5RqBUDi8AkC:0', kind: 'Fragment', metadata: {}, name: 'RelayMutationQueryRelayQL', type: 'CommentDeleteResponsePayload' };})()), 













      variables);

      expect(query).
      toEqualQueryNode(expectedMutationQuery);});


    it('creates a query for RANGE_DELETE with a deep deleted field', function () {
      tracker.getTrackedChildrenForID.mockReturnValue(getNodeChildren((function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallValue', callValue: '10' } }], children: [{ children: [{ children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'User' }, { fieldName: 'cursor', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'FriendsEdge' }, { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true, isGenerated: true, isRequisite: true }, type: 'PageInfo' }], fieldName: 'friends', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'FriendsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: '0fjnATO7RSw4:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'RelayMutationQueryRelayQL', type: 'Actor' };})()));










      var fatQuery = require('fromGraphQL').Fragment((function () {return { children: [{ children: [{ fieldName: 'friends', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'FriendsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'actor', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true }, type: 'Actor' }, { fieldName: 'clientMutationId', kind: 'Field', metadata: {}, type: 'String' }], id: '7Bh2Lyzl96hV:0', kind: 'Fragment', metadata: {}, name: 'RelayMutationQueryRelayQL', type: 'UnfriendResponsePayload' };})());







      var configs = [
      { 
        type: require('RelayMutationType').RANGE_DELETE, 
        parentName: 'actor', 
        parentID: '123', 
        connectionName: 'friends', 
        deletedIDFieldName: ['formerFriend'], 
        pathToConnection: ['actor', 'friends'] }];



      var mutation = (function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'unfriend', value: { kind: 'CallVariable', callVariableName: 'input' } }], children: [{ fieldName: 'clientMutationId', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], kind: 'Mutation', metadata: { inputType: 'UnfriendInput' }, name: 'RelayMutationQuery', responseType: 'UnfriendResponsePayload' };})();
      var mutationName = 'UnfriendMutation';
      var variables = { input: '' };
      var query = require('RelayMutationQuery').buildQuery({ 
        tracker: tracker, 
        fatQuery: fatQuery, 
        configs: configs, 
        mutationName: mutationName, 
        mutation: mutation });


      var expectedConcreteNode = (function (RQL_0) {return { calls: [{ kind: 'Call', metadata: {}, name: 'unfriend', value: { kind: 'CallVariable', callVariableName: 'input' } }], children: [].concat.apply([], [{ fieldName: 'clientMutationId', kind: 'Field', metadata: { isRequisite: true }, type: 'String' }, { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }], fieldName: 'formerFriend', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'User' }, require('Relay').QL.__frag(RQL_0)]), kind: 'Mutation', metadata: { inputType: 'UnfriendInput' }, name: 'RelayMutationQuery', responseType: 'UnfriendResponsePayload' };})((function () {return { children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'actor', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true }, type: 'Actor' }], id: 'kbGCrd5EUOtB:0', kind: 'Fragment', metadata: {}, name: 'RelayMutationQueryRelayQL', type: 'UnfriendResponsePayload' };})());
















      expect(query).toEqualQueryNode(
      getNodeWithoutSource(expectedConcreteNode, variables));});



    it('creates a query for FIELDS_CHANGE', function () {
      tracker.getTrackedChildrenForID.mockReturnValue(getNodeChildren((function () {return { children: [{ fieldName: 'likers', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'LikersOfContentConnection' }, { fieldName: 'url', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'mtJRXmLKH/a3:0', kind: 'Fragment', metadata: {}, name: 'RelayMutationQueryRelayQL', type: 'Feedback' };})()));





      var fatQuery = require('fromGraphQL').Fragment((function () {return { children: [{ children: [{ fieldName: 'doesViewerLike', kind: 'Field', metadata: {}, type: 'Boolean' }, { fieldName: 'likers', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'LikersOfContentConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'feedback', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Feedback' }], id: 'IfgZqVXzb9U9:0', kind: 'Fragment', metadata: {}, name: 'RelayMutationQueryRelayQL', type: 'FeedbackLikeResponsePayload' };})());







      var fieldIDs = { 
        feedback: '123' };

      var configs = [
      { 
        type: require('RelayMutationType').FIELDS_CHANGE, 
        fieldIDs: fieldIDs }];



      var mutation = (function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'feedbackLike', value: { kind: 'CallVariable', callVariableName: 'input' } }], children: [{ fieldName: 'clientMutationId', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], kind: 'Mutation', metadata: { inputType: 'FeedbackLikeInput' }, name: 'RelayMutationQuery', responseType: 'FeedbackLikeResponsePayload' };})();
      var mutationName = 'FeedbackLikeMutation';
      var variables = { input: '' };
      var query = require('RelayMutationQuery').buildQuery({ 
        tracker: tracker, 
        fatQuery: fatQuery, 
        configs: configs, 
        mutationName: mutationName, 
        mutation: mutation });


      var expectedMutationQuery = getNodeWithoutSource((function (RQL_0) {return { calls: [{ kind: 'Call', metadata: {}, name: 'feedbackLike', value: { kind: 'CallVariable', callVariableName: 'input' } }], children: [].concat.apply([], [{ fieldName: 'clientMutationId', kind: 'Field', metadata: { isRequisite: true }, type: 'String' }, require('Relay').QL.__frag(RQL_0)]), kind: 'Mutation', metadata: { inputType: 'FeedbackLikeInput' }, name: 'RelayMutationQuery', responseType: 'FeedbackLikeResponsePayload' };})((function () {return { children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: 'likers', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'LikersOfContentConnection' }], fieldName: 'feedback', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Feedback' }], id: '3fOZv+Qllksq:0', kind: 'Fragment', metadata: {}, name: 'RelayMutationQueryRelayQL', type: 'FeedbackLikeResponsePayload' };})()), 













      variables);

      expect(query).
      toEqualQueryNode(expectedMutationQuery);});


    it('creates a query with additional required fragments', function () {
      tracker.getTrackedChildrenForID.mockReturnValue([getNode((function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallValue', callValue: '10' } }], children: [{ children: [{ children: [{ children: [{ fieldName: 'text', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'body', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Text' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'Comment' }, { fieldName: 'cursor', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'CommentsEdge' }, { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true, isGenerated: true, isRequisite: true }, type: 'PageInfo' }], fieldName: 'comments', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'CommentsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'L+LFi0Mu6zk+:0', kind: 'Fragment', metadata: {}, name: 'RelayMutationQueryRelayQL', type: 'Feedback' };})())]);












      var fatQuery = require('fromGraphQL').Fragment((function () {return { children: [{ children: [{ fieldName: 'comments', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'CommentsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'feedback', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Feedback' }, { children: [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'comment', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Comment' }, { children: [{ fieldName: 'cursor', kind: 'Field', metadata: { isRequisite: true }, type: 'String' }, { children: [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'Comment' }, { children: [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'source', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Feedback' }], fieldName: 'feedbackCommentEdge', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'CommentsEdge' }], id: 'Dd2HHszWuSpt:0', kind: 'Fragment', metadata: {}, name: 'RelayMutationQueryRelayQL', type: 'CommentCreateResponsePayload' };})());












      var parentName = 'feedback';
      var parentID = '123';
      var connectionName = 'comments';
      var edgeName = 'feedbackCommentEdge';
      var rangeBehaviors = { 
        '': require('GraphQLMutatorConstants').PREPEND };

      var configs = [
      { 
        type: require('RelayMutationType').RANGE_ADD, 
        parentName: parentName, 
        parentID: parentID, 
        connectionName: connectionName, 
        edgeName: edgeName, 
        rangeBehaviors: rangeBehaviors }, 

      { 
        type: require('RelayMutationType').REQUIRED_CHILDREN, 
        children: [(function () {return { children: [{ children: [{ fieldName: 'doesViewerLike', kind: 'Field', metadata: {}, type: 'Boolean' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'feedback', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Feedback' }], id: 'R1vd+9MZEA+G:0', kind: 'Fragment', metadata: {}, name: 'RelayMutationQueryRelayQL', type: 'CommentCreateResponsePayload' };})()] }];









      var mutation = (function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'commentCreate', value: { kind: 'CallVariable', callVariableName: 'input' } }], children: [{ fieldName: 'clientMutationId', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], kind: 'Mutation', metadata: { inputType: 'CommentCreateInput' }, name: 'RelayMutationQuery', responseType: 'CommentCreateResponsePayload' };})();
      var mutationName = 'CommentAddMutation';
      var variables = { input: '' };
      var query = require('RelayMutationQuery').buildQuery({ 
        tracker: tracker, 
        fatQuery: fatQuery, 
        configs: configs, 
        mutationName: mutationName, 
        mutation: mutation });


      var expectedMutationQuery = filterGeneratedFields(
      getNodeWithoutSource((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'commentCreate', value: { kind: 'CallVariable', callVariableName: 'input' } }], children: [{ fieldName: 'clientMutationId', kind: 'Field', metadata: { isRequisite: true }, type: 'String' }, { children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }], id: 'VJAxdop789Nq:0', kind: 'Fragment', metadata: {}, name: 'Feedback', type: 'Feedback' }], fieldName: 'feedback', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Feedback' }, { children: [{ fieldName: '__typename', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'cursor', kind: 'Field', metadata: { isRequisite: true }, type: 'String' }, { children: [{ children: [{ fieldName: 'text', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'body', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Text' }, { fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'Comment' }, { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }], fieldName: 'source', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Feedback' }], fieldName: 'feedbackCommentEdge', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'CommentsEdge' }], id: 'VJAxdop789Nq:1', kind: 'Fragment', metadata: {}, name: 'CommentCreateResponsePayload', type: 'CommentCreateResponsePayload' }, { children: [{ children: [{ fieldName: 'doesViewerLike', kind: 'Field', metadata: {}, type: 'Boolean' }, { fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }], fieldName: 'feedback', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Feedback' }], id: 'VJAxdop789Nq:2', kind: 'Fragment', metadata: {}, name: 'CommentCreateResponsePayload', type: 'CommentCreateResponsePayload' }], kind: 'Mutation', metadata: { inputType: 'CommentCreateInput' }, name: 'RelayMutationQuery', responseType: 'CommentCreateResponsePayload' };})(), 































      variables));


      expect(query).
      toEqualQueryNode(expectedMutationQuery);});


    it('creates a query for RANGE_ADD and FIELDS_CHANGE', function () {
      // Fictitious mutation that does multiple things
      tracker.getTrackedChildrenForID.mockReturnValue(getNodeChildren((function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallValue', callValue: '10' } }], children: [{ children: [{ children: [{ children: [{ fieldName: 'text', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'body', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Text' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'Comment' }, { fieldName: 'cursor', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'CommentsEdge' }, { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true, isGenerated: true, isRequisite: true }, type: 'PageInfo' }], fieldName: 'comments', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'CommentsConnection' }, { fieldName: 'likers', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'LikersOfContentConnection' }, { fieldName: 'url', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'hVG0gKnRPCL7:0', kind: 'Fragment', metadata: {}, name: 'RelayMutationQueryRelayQL', type: 'Feedback' };})()));














      var fatQuery = require('fromGraphQL').Fragment((function () {return { children: [{ children: [{ fieldName: 'comments', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'CommentsConnection' }, { fieldName: 'doesViewerLike', kind: 'Field', metadata: {}, type: 'Boolean' }, { fieldName: 'likers', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'LikersOfContentConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'feedback', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Feedback' }, { children: [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'comment', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Comment' }, { children: [{ fieldName: 'cursor', kind: 'Field', metadata: { isRequisite: true }, type: 'String' }, { children: [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'Comment' }, { children: [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'source', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Feedback' }], fieldName: 'feedbackCommentEdge', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'CommentsEdge' }], id: 'bNS6IgtmXIP+:0', kind: 'Fragment', metadata: {}, name: 'RelayMutationQueryRelayQL', type: 'CommentCreateResponsePayload' };})());














      var parentName = 'feedback';
      var parentID = '123';
      var connectionName = 'comments';
      var edgeName = 'feedbackCommentEdge';
      var rangeBehaviors = { 
        '': require('GraphQLMutatorConstants').PREPEND };

      var fieldIDs = { 
        feedback: '123' };

      var configs = [
      { 
        type: require('RelayMutationType').RANGE_ADD, 
        parentName: parentName, 
        parentID: parentID, 
        connectionName: connectionName, 
        edgeName: edgeName, 
        rangeBehaviors: rangeBehaviors }, 

      { 
        type: require('RelayMutationType').FIELDS_CHANGE, 
        fieldIDs: fieldIDs }];



      var mutation = (function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'commentCreate', value: { kind: 'CallVariable', callVariableName: 'input' } }], children: [{ fieldName: 'clientMutationId', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], kind: 'Mutation', metadata: { inputType: 'CommentCreateInput' }, name: 'RelayMutationQuery', responseType: 'CommentCreateResponsePayload' };})();
      var mutationName = 'CommentAddAndLikeMutation';
      var variables = { input: '' };
      var query = require('RelayMutationQuery').buildQuery({ 
        tracker: tracker, 
        fatQuery: fatQuery, 
        configs: configs, 
        mutationName: mutationName, 
        mutation: mutation });


      var expectedMutationQuery = getNodeWithoutSource((function (RQL_0, RQL_1) {return { calls: [{ kind: 'Call', metadata: {}, name: 'commentCreate', value: { kind: 'CallVariable', callVariableName: 'input' } }], children: [].concat.apply([], [{ fieldName: 'clientMutationId', kind: 'Field', metadata: { isRequisite: true }, type: 'String' }, require('Relay').QL.__frag(RQL_0), require('Relay').QL.__frag(RQL_1)]), kind: 'Mutation', metadata: { inputType: 'CommentCreateInput' }, name: 'RelayMutationQuery', responseType: 'CommentCreateResponsePayload' };})((function () {return { children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: 'likers', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'LikersOfContentConnection' }], fieldName: 'feedback', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Feedback' }, { children: [{ fieldName: '__typename', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'cursor', kind: 'Field', metadata: { isRequisite: true }, type: 'String' }, { children: [{ children: [{ fieldName: 'text', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'body', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Text' }, { fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'Comment' }, { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }], fieldName: 'source', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Feedback' }], fieldName: 'feedbackCommentEdge', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'CommentsEdge' }], id: 'GnL5XgoIroiH:0', kind: 'Fragment', metadata: {}, name: 'RelayMutationQueryRelayQL', type: 'CommentCreateResponsePayload' };})(), (function () {return { children: [{ children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallValue', callValue: '10' } }], children: [{ children: [{ fieldName: 'cursor', kind: 'Field', metadata: { isRequisite: true }, type: 'String' }, { children: [{ children: [{ fieldName: 'text', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'body', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Text' }, { fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'Comment' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'CommentsEdge' }, { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true, isRequisite: true }, type: 'PageInfo' }], fieldName: 'comments', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'CommentsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: 'likers', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'LikersOfContentConnection' }], fieldName: 'feedback', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Feedback' }], id: 'CuqTB/ROZehu:0', kind: 'Fragment', metadata: {}, name: 'RelayMutationQueryRelayQL', type: 'CommentCreateResponsePayload' };})()), 

















































      variables);

      expect(query).
      toEqualQueryNode(expectedMutationQuery);});


    it('complains about unknown config types', function () {
      var fatQuery = require('fromGraphQL').Fragment((function () {return { children: [{ fieldName: 'clientMutationId', kind: 'Field', metadata: {}, type: 'String' }], id: '6uuZieockhZw:0', kind: 'Fragment', metadata: {}, name: 'RelayMutationQueryRelayQL', type: 'UnfriendResponsePayload' };})());




      var configs = [
      { 
        type: 'COSMIC_RAY_BIT_FLIP' }];



      var mutation = (function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'unfriend', value: { kind: 'CallVariable', callVariableName: 'input' } }], children: [{ fieldName: 'clientMutationId', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], kind: 'Mutation', metadata: { inputType: 'UnfriendInput' }, name: 'RelayMutationQuery', responseType: 'UnfriendResponsePayload' };})();
      var mutationName = 'UnfriendMutation';
      expect(function () {return require('RelayMutationQuery').buildQuery({ 
          tracker: tracker, 
          fatQuery: fatQuery, 
          configs: configs, 
          mutationName: mutationName, 
          mutation: mutation });}).
      toFailInvariant(
      'RelayMutationQuery: Unrecognized config key `COSMIC_RAY_BIT_FLIP` ' + 
      'for `UnfriendMutation`.');});});});
var 































EventEmitter=function(){



function EventEmitter(){babelHelpers.classCallCheck(this,EventEmitter);
this.$EventEmitter_subscriber=new (require('EventSubscriptionVendor'))();}babelHelpers.createClass(EventEmitter,[{key:'addListener',value:function addListener(

















eventType,listener,context){
return this.$EventEmitter_subscriber.addSubscription(
eventType,
new (require('EmitterSubscription'))(this.$EventEmitter_subscriber,listener,context));}},{key:'once',value:function once(












eventType,listener,context){
var emitter=this;
return this.addListener(eventType,function(){
emitter.removeCurrentListener();
listener.apply(context,arguments);});}},{key:'removeAllListeners',value:function removeAllListeners(










eventType){
this.$EventEmitter_subscriber.removeAllSubscriptions(eventType);}},{key:'removeCurrentListener',value:function removeCurrentListener()























{
!
!!this.$EventEmitter_currentSubscription?require('fbjs/lib/invariant')(0,
'Not in an emitting cycle; there is no current subscription'):undefined;

this.$EventEmitter_subscriber.removeSubscription(this.$EventEmitter_currentSubscription);}},{key:'listeners',value:function listeners(









eventType){
var subscriptions=this.$EventEmitter_subscriber.getSubscriptionsForType(eventType);
return subscriptions?
subscriptions.filter(require('fbjs/lib/emptyFunction').thatReturnsTrue).map(
function(subscription){
return subscription.listener;}):

[];}},{key:'emit',value:function emit(
















eventType){
var subscriptions=this.$EventEmitter_subscriber.getSubscriptionsForType(eventType);
if(subscriptions){
var keys=Object.keys(subscriptions);
for(var ii=0;ii<keys.length;ii++){
var key=keys[ii];
var subscription=subscriptions[key];


if(subscription){
this.$EventEmitter_currentSubscription=subscription;
subscription.listener.apply(
subscription.context,
Array.prototype.slice.call(arguments,1));}}



this.$EventEmitter_currentSubscription=null;}}}]);return EventEmitter;}();




module.exports=EventEmitter;
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails oncall+relay
 */

'use strict';

require('configureForRelayOSS');

jest.
dontMock('GraphQLRange').
dontMock('GraphQLSegment');




describe('writeRelayQueryPayload()', function () {
  var RelayRecordStore;
  var RelayRecordWriter;var 

  getNode = require('RelayTestUtils').getNode;var writePayload = require('RelayTestUtils').writePayload;

  beforeEach(function () {
    jest.resetModuleRegistry();

    RelayRecordStore = require('RelayRecordStore');
    RelayRecordWriter = require('RelayRecordWriter');

    jasmine.addMatchers(require('RelayTestUtils').matchers);});


  describe('scalar fields', function () {
    it('created with null when the response is null', function () {
      var records = {};
      var store = new RelayRecordStore({ records: records });
      var writer = new RelayRecordWriter(records, {}, false);
      var query = getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '123' } }], children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'WriteRelayQueryPayload_scalarField', type: 'Node' };})());






      var payload = { 
        node: { 
          __typename: 'User', 
          id: '123', 
          name: null } };


      var results = writePayload(store, writer, query, payload);
      expect(results).toEqual({ 
        created: { 
          '123': true }, 

        updated: {} });

      expect(store.getField('123', 'name')).toBe(null);});


    it('adds null fields to an existing record when response is null', function () {
      var records = { 
        '123': { 
          __dataID__: '123', 
          id: '123' } };


      var store = new RelayRecordStore({ records: records });
      var writer = new RelayRecordWriter(records, {}, false);
      var query = getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '123' } }], children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'WriteRelayQueryPayload_scalarField', type: 'Node' };})());






      var payload = { 
        node: { 
          __typename: 'User', 
          id: '123', 
          name: null } };


      var results = writePayload(store, writer, query, payload);
      expect(results).toEqual({ 
        created: {}, 
        updated: { 
          '123': true } });


      expect(store.getField('123', 'name')).toBe(null);});


    it('updates fields when the response is null', function () {
      var records = { 
        '123': { 
          __dataID__: '123', 
          id: '123', 
          name: 'Joe' } };


      var store = new RelayRecordStore({ records: records });
      var writer = new RelayRecordWriter(records, {}, false);
      var query = getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '123' } }], children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'WriteRelayQueryPayload_scalarField', type: 'Node' };})());






      var payload = { 
        node: { 
          __typename: 'User', 
          id: '123', 
          name: null } };


      var results = writePayload(store, writer, query, payload);
      expect(results).toEqual({ 
        created: {}, 
        updated: { 
          '123': true } });


      expect(store.getField('123', 'name')).toBe(null);});


    it('does not add undefined fields to a new record', function () {
      var records = {};
      var store = new RelayRecordStore({ records: records });
      var writer = new RelayRecordWriter(records, {}, false);
      var query = getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '123' } }], children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'WriteRelayQueryPayload_scalarField', type: 'Node' };})());






      var payload = { 
        node: { 
          id: '123', 
          name: undefined, 
          __typename: 'User' } };


      writePayload(store, writer, query, payload);
      expect(store.getField('123', 'id')).toBe('123');
      expect(store.getField('123', 'name')).toBe(undefined);});


    it('does not add undefined fields to an existing record', function () {
      var records = { 
        '123': { 
          __dataID__: '123', 
          id: '123' } };


      var store = new RelayRecordStore({ records: records });
      var writer = new RelayRecordWriter(records, {}, false);
      var query = getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '123' } }], children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'WriteRelayQueryPayload_scalarField', type: 'Node' };})());






      var payload = { 
        node: { 
          __typename: 'User', 
          id: '123', 
          name: undefined } };


      writePayload(store, writer, query, payload);
      expect(store.getField('123', 'id')).toBe('123');
      expect(store.getField('123', 'name')).toBe(undefined);});


    it('does not update fields when the response is undefined', function () {
      var records = { 
        '123': { 
          __dataID__: '123', 
          id: '123', 
          name: 'Joe' } };


      var store = new RelayRecordStore({ records: records });
      var writer = new RelayRecordWriter(records, {}, false);
      var query = getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '123' } }], children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'WriteRelayQueryPayload_scalarField', type: 'Node' };})());






      var payload = { 
        node: { 
          __typename: 'User', 
          id: '123', 
          name: undefined } };


      writePayload(store, writer, query, payload);
      expect(store.getField('123', 'name')).toBe('Joe');});


    it('updates fields wth new scalar values', function () {
      var records = { 
        '123': { 
          __dataID__: '123', 
          id: '123', 
          name: 'Joe' } };


      var store = new RelayRecordStore({ records: records });
      var writer = new RelayRecordWriter(records, {}, false);
      var query = getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '123' } }], children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'WriteRelayQueryPayload_scalarField', type: 'Node' };})());






      var payload = { 
        node: { 
          __typename: 'User', 
          id: '123', 
          name: 'Joseph' } };


      var results = writePayload(store, writer, query, payload);
      expect(results).toEqual({ 
        created: {}, 
        updated: { 
          '123': true } });


      expect(store.getField('123', 'name')).toBe('Joseph');});});});
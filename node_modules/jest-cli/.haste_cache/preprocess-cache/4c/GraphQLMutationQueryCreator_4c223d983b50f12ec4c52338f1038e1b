'use strict';
























var GraphQLMutationQueryCreator={
createQuery:function(mutationType,idMap){
return toNullableFragment(
require('RelayMutationQuery').buildFragmentForFields({
fatQuery:getFatQuery(mutationType),
fieldIDs:idMap,
tracker:require('RelayStore').getStoreData().getQueryTracker()}));},




createRangeDeleteQuery:function(
mutationType,
parentID,
parentName,
connectionName)
{
return toNullableFragment(
require('RelayMutationQuery').buildFragmentForEdgeDeletion({
fatQuery:getFatQuery(mutationType),
connectionName:connectionName,
parentID:parentID,
parentName:parentName,
tracker:require('RelayStore').getStoreData().getQueryTracker()}));},




createRangeAddQuery:function(
mutationType,
connectionName,
edgeName,
parentID,
parentName)
{
var rangeBehaviors=upgradeRangeBehaviors(
require('GraphQLMutationProperties').getRangeConfigForType(mutationType));

return toNullableFragment(
require('RelayMutationQuery').buildFragmentForEdgeInsertion({
fatQuery:getFatQuery(mutationType),
connectionName:connectionName,
parentID:parentID,
edgeName:edgeName,
parentName:parentName,
tracker:require('RelayStore').getStoreData().getQueryTracker(),
rangeBehaviors:rangeBehaviors}));},




createQueryFromOptimisticPayload:function(response){
var mutationType=Object.keys(response)[0];
var fatQuery=getFatQuery(mutationType);
var fragment=require('RelayMutationQuery').buildFragmentForOptimisticUpdate({
response:response[mutationType],
fatQuery:fatQuery});


return require('QueryBuilder').createMutation({
name:'OptimisticQuery',
responseType:fragment.getType(),
calls:[require('QueryBuilder').createCall(mutationType,null)],
children:fragment.getChildren().map(require('toGraphQL').Field)});}};




function getFatQuery(mutationName){
return require('fromGraphQL').Fragment(
require('GraphQLMutationProperties').getFatQueryForType(mutationName));}



function toNullableFragment(fragment){
var flattenedFragment=require('flattenRelayQuery')(fragment);
return flattenedFragment?require('toGraphQL').Fragment(flattenedFragment):null;}







function upgradeRangeBehaviors(rangeBehaviors){






var rangeBehaviorsWithSortedKeys={};
require('forEachObject')(rangeBehaviors,function(value,key){
var sortedKey=undefined;
if(key===''){
sortedKey='';}else 
{
var keyParts=key.

slice(0,-1).

split(/\)\./);
sortedKey=keyParts.
sort().
join(').')+(
keyParts.length?')':'');
require('warning')(
sortedKey===key,
'RelayMutation: To define a range behavior key without sorting '+
'the arguments alphabetically is deprecated as of Relay 0.4.1 and '+
'will be disallowed in 0.5.0. Please sort the argument names of '+
'the range behavior key `%s`',
key);}


rangeBehaviorsWithSortedKeys[sortedKey]=value;});

return rangeBehaviorsWithSortedKeys;}


module.exports=GraphQLMutationQueryCreator;
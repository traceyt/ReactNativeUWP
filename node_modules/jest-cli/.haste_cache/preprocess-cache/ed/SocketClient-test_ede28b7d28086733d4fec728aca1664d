'use strict';









jest.setMock('worker-farm',function(){return function(){};}).
setMock('uglify-js').
mock('net').
dontMock('../SocketClient');






describe('SocketClient',function(){
var sock=undefined;
var bunser=undefined;

beforeEach(function(){var _require$requireActua=
require.requireActual('events');var EventEmitter=_require$requireActua.EventEmitter;
sock=new EventEmitter();
sock.write=jest.genMockFn();

require('net').connect.mockImpl(function(){return sock;});

bunser=new EventEmitter();
require('bser').BunserBuf.mockImpl(function(){return bunser;});
require('bser').dumpToBuffer.mockImpl(function(a){return a;});

require('../../Bundler/Bundle').fromJSON.mockImpl(function(a){return a;});});


pit('create a connection',function(){
var client=new (require('../SocketClient'))('/sock');
sock.emit('connect');
return client.onReady().then(function(c){
expect(c).toBe(client);
expect(require('net').connect).toBeCalledWith('/sock');});});



pit('buildBundle',function(){
var client=new (require('../SocketClient'))('/sock');
sock.emit('connect');
var options={entryFile:'/main'};

var promise=client.buildBundle(options);

expect(sock.write).toBeCalled();
var message=sock.write.mock.calls[0][0];
expect(message.type).toBe('buildBundle');
expect(message.data).toEqual(options);
expect(typeof message.id).toBe('string');

bunser.emit('value',{
id:message.id,
type:'result',
data:{bundle:'foo'}});


return promise.then(function(bundle){return expect(bundle).toEqual({bundle:'foo'});});});


pit('getDependencies',function(){
var client=new (require('../SocketClient'))('/sock');
sock.emit('connect');
var main='/main';

var promise=client.getDependencies(main);

expect(sock.write).toBeCalled();
var message=sock.write.mock.calls[0][0];
expect(message.type).toBe('getDependencies');
expect(message.data).toEqual(main);
expect(typeof message.id).toBe('string');

bunser.emit('value',{
id:message.id,
type:'result',
data:['a','b','c']});


return promise.then(function(result){return expect(result).toEqual(['a','b','c']);});});


pit('handle errors',function(){
var client=new (require('../SocketClient'))('/sock');
sock.emit('connect');
var main='/main';

var promise=client.getDependencies(main);

expect(sock.write).toBeCalled();
var message=sock.write.mock.calls[0][0];
expect(message.type).toBe('getDependencies');
expect(message.data).toEqual(main);
expect(typeof message.id).toBe('string');

bunser.emit('value',{
id:message.id,
type:'error',
data:'some error'});


return promise.catch(function(m){return expect(m.message).toContain('some error');});});});
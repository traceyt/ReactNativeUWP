/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails oncall+relay
 */

'use strict';

require('configureForRelayOSS');

jest.mock('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/warning');








describe('RelayRecordStore', function () {var 
  getNode = require('RelayTestUtils').getNode;

  beforeEach(function () {
    jest.resetModuleRegistry();

    jasmine.addMatchers(require('RelayTestUtils').matchers);});


  describe('getRecordState()', function () {
    it('returns "UNKNOWN" if an ID is unfetched', function () {
      var records = {};
      var store = new (require('RelayRecordStore'))({ records: records });
      expect(store.getRecordState('4')).toBe('UNKNOWN');});


    it('returns "NONEXISTENT" if an ID is deleted', function () {
      var records = { '4': null };
      var store = new (require('RelayRecordStore'))({ records: records });
      expect(store.getRecordState('4')).toBe('NONEXISTENT');});


    it('returns "EXISTENT" if the record exists', function () {
      var records = { 
        '4': { 
          id: '4', 
          __dataID__: '4' } };


      var store = new (require('RelayRecordStore'))({ records: records });
      expect(store.getRecordState('4')).toBe('EXISTENT');});


    it('prefers queued records over non-existent records', function () {
      var queuedRecord = { 
        id: '4', 
        __dataID__: '4' };

      var store = new (require('RelayRecordStore'))({ 
        records: {}, 
        queuedRecords: { '4': queuedRecord } });

      expect(store.getRecordState('4')).toBe('EXISTENT');});


    it('prefers queued records over deleted records', function () {
      var queuedRecord = { 
        id: '4', 
        __dataID__: '4' };

      var store = new (require('RelayRecordStore'))({ 
        records: { '4': null }, 
        queuedRecords: { '4': queuedRecord } });

      expect(store.getRecordState('4')).toBe('EXISTENT');});


    it('prefers queued records when they are deleted', function () {
      var record = { 
        id: '4', 
        __dataID__: '4' };

      var store = new (require('RelayRecordStore'))({ 
        records: { '4': record }, 
        queuedRecords: { '4': null } });

      expect(store.getRecordState('4')).toBe('NONEXISTENT');});


    it('prefers queued records over cached records', function () {
      var record = { 
        id: '4', 
        __dataID__: '4' };

      var store = new (require('RelayRecordStore'))({ 
        queuedRecords: { '4': record }, 
        records: {}, 
        cachedRecords: { '4': null } });

      expect(store.getRecordState('4')).toBe('EXISTENT');});


    it('prefers existing records over cached records', function () {
      var record = { 
        id: '4', 
        __dataID__: '4' };

      var store = new (require('RelayRecordStore'))({ 
        records: { '4': record }, 
        cachedRecords: { '4': null } });

      expect(store.getRecordState('4')).toBe('EXISTENT');});


    it('falls back to cached records when necessary', function () {
      var record = { 
        id: '4', 
        __dataID__: '4' };

      var store = new (require('RelayRecordStore'))({ 
        records: {}, 
        cachedRecords: { '4': record } });

      expect(store.getRecordState('4')).toBe('EXISTENT');});});



  describe('hasOptimisticUpdate', function () {
    it('returns true if record is queued', function () {
      var store = new (require('RelayRecordStore'))({ 
        records: {}, 
        queuedRecords: { '4': { __dataID__: '4' } } });

      expect(store.hasOptimisticUpdate('4')).toBe(true);});


    it('returns false if record is not queued', function () {
      var store = new (require('RelayRecordStore'))({ 
        records: { '4': { __dataID__: '4' } }, 
        queuedRecords: {} });

      expect(store.hasOptimisticUpdate('4')).toBe(false);});


    it('throws if called on a non-queued record store', function () {
      var store = new (require('RelayRecordStore'))({ 
        records: { '4': { __dataID__: '4' } } });

      expect(function () {
        store.hasOptimisticUpdate('4');}).
      toFailInvariant(
      'RelayRecordStore.hasOptimisticUpdate(): Optimistic updates require ' + 
      'queued records.');});});




  describe('getPathToRecord', function () {
    it('returns undefined for refetchable records', function () {
      var records = {};
      var store = new (require('RelayRecordStore'))({ records: records });
      var writer = new (require('RelayRecordWriter'))(records, {}, false);
      var query = getNode((function () {return { children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'actor', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true }, type: 'Actor' }], fieldName: 'viewer', kind: 'Query', metadata: {}, name: 'RelayRecordStore', type: 'Viewer' };})());








      var actorID = '123';
      var path = new (require('RelayQueryPath'))(query);
      path = path.getPath(query.getFieldByStorageKey('actor'), actorID);
      writer.putRecord(actorID, 'Type', path);
      expect(store.getPathToRecord(actorID)).toBe(undefined);});


    it('returns the path for non-refetchable records', function () {
      var records = {};
      var store = new (require('RelayRecordStore'))({ records: records });
      var writer = new (require('RelayRecordWriter'))(records, {}, false);
      var query = getNode((function () {return { children: [{ children: [{ children: [{ fieldName: 'city', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'address', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'StreetAddress' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'actor', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true }, type: 'Actor' }], fieldName: 'viewer', kind: 'Query', metadata: {}, name: 'RelayRecordStore', type: 'Viewer' };})());










      var actorID = '123';
      var addressID = 'client:1';
      var path = new (require('RelayQueryPath'))(query);
      path = path.getPath(query.getFieldByStorageKey('actor'), actorID);
      path = path.getPath(
      query.getFieldByStorageKey('actor').getFieldByStorageKey('address'), 
      addressID);

      writer.putRecord(addressID, 'Type', path);
      expect(store.getPathToRecord(addressID)).toMatchPath(path);});});



  describe('getField()', function () {
    it('returns undefined if the record is undefined', function () {
      var records = {};
      var store = new (require('RelayRecordStore'))({ records: records });
      expect(store.getField('4', 'name')).toBe(undefined);});


    it('returns null if the record is deleted', function () {
      var records = { '4': null };
      var store = new (require('RelayRecordStore'))({ records: records });
      expect(store.getField('4', 'name')).toBe(null);});


    it('returns undefined if the field is undefined', function () {
      var records = { '4': {} };
      var store = new (require('RelayRecordStore'))({ records: records });
      expect(store.getField('4', 'name')).toBe(undefined);});


    it('returns null if the field is deleted', function () {
      var records = { '4': { 'name': null } };
      var store = new (require('RelayRecordStore'))({ records: records });
      expect(store.getField('4', 'name')).toBe(null);});


    it('returns field values for scalar fields', function () {
      var records = { 
        '4': { 
          id: '4', 
          __dataID__: '4', 
          name: 'Zuck' } };


      var store = new (require('RelayRecordStore'))({ records: records });
      expect(store.getField('4', 'name')).toBe('Zuck');
      expect(store.getField('4', 'id')).toBe('4');

      var queuedStore = new (require('RelayRecordStore'))({ queuedRecords: records });
      expect(queuedStore.getField('4', 'name')).toBe('Zuck');
      expect(queuedStore.getField('4', 'id')).toBe('4');

      var cachedStore = new (require('RelayRecordStore'))({ cachedRecords: records });
      expect(cachedStore.getField('4', 'name')).toBe('Zuck');
      expect(cachedStore.getField('4', 'id')).toBe('4');});


    it('prefers fields from queued records', function () {
      var record = { 
        id: '4', 
        name: 'Zuck', 
        __dataID__: '4' };

      var queuedRecord = { 
        id: '4', 
        name: 'Mark', 
        __dataID__: '4' };

      var store = new (require('RelayRecordStore'))({ 
        records: { '4': record }, 
        queuedRecords: { '4': queuedRecord } });

      expect(store.getField('4', 'name')).toBe('Mark');});


    it('prefers fields from existing records over cached records', function () {
      var record = { 
        id: '4', 
        name: 'Zuck', 
        __dataID__: '4' };

      var cachedRecord = { 
        id: '4', 
        name: 'Mark', 
        __dataID__: '4' };

      var store = new (require('RelayRecordStore'))({ 
        records: { '4': record }, 
        cachedRecords: { '4': cachedRecord } });

      expect(store.getField('4', 'name')).toBe('Zuck');});


    it('falls through to existing records for fields not in the queued record', function () {
      var record = { 
        id: '4', 
        name: 'Zuck', 
        __dataID__: '4' };

      var queuedRecord = { 
        id: '4', 
        __dataID__: '4' };

      var store = new (require('RelayRecordStore'))({ 
        records: { '4': record }, 
        queuedRecords: { '4': queuedRecord } });

      expect(store.getField('4', 'name')).toBe('Zuck');});


    it('falls through to cached records for fields not in the existing record', function () {
      var record = { 
        id: '4', 
        __dataID__: '4' };

      var cachedRecord = { 
        id: '4', 
        name: 'Mark', 
        __dataID__: '4' };

      var store = new (require('RelayRecordStore'))({ 
        cachedRecords: { '4': cachedRecord }, 
        records: { '4': record } });

      expect(store.getField('4', 'name')).toBe('Mark');});});



  describe('getLinkedRecordID()', function () {
    it('throws if the data is an unexpected format', function () {
      var records = { 
        story: { 
          feedback: 'not an object' } };


      var store = new (require('RelayRecordStore'))({ records: records });
      expect(function () {
        store.getLinkedRecordID('story', 'feedback');}).
      toThrow();});


    it('returns undefined for unfetched objects', function () {
      var records = { 
        '4': { 
          id: '4', 
          __dataID__: '4' } };


      var store = new (require('RelayRecordStore'))({ records: records });
      expect(store.getLinkedRecordID('4', 'address')).toBe(undefined);});


    it('returns null for deleted linked fields', function () {
      var records = { 
        '4': { 
          id: '4', 
          __dataID__: '4', 
          address: null } };


      var store = new (require('RelayRecordStore'))({ records: records });
      expect(store.getLinkedRecordID('4', 'address')).toBe(null);});


    it('returns the data ID for linked fields', function () {
      var records = { 
        '4': { 
          id: '4', 
          __dataID__: '4', 
          address: { 
            __dataID__: 'client:1' } }, 


        'client:1': { 
          street: '1 Hacker Way' } };


      var store = new (require('RelayRecordStore'))({ records: records });
      expect(store.getLinkedRecordID('4', 'address')).toBe('client:1');});});



  describe('getLinkedRecordIDs()', function () {
    it('throws if the data is an unexpected format', function () {
      var records = { 
        'story': { 
          actors: ['not an object'] } };


      var store = new (require('RelayRecordStore'))({ records: records });
      expect(function () {
        store.getLinkedRecordIDs('story', 'actors');}).
      toThrow();});


    it('returns undefined for unfetched fields', function () {
      var records = { 
        '4': { 
          id: '4', 
          __dataID__: '4' } };


      var store = new (require('RelayRecordStore'))({ records: records });
      expect(store.getLinkedRecordIDs('4', 'actors')).toBe(undefined);});


    it('returns null for deleted linked fields', function () {
      var records = { 
        '4': { 
          id: '4', 
          __dataID__: '4', 
          actors: null } };


      var store = new (require('RelayRecordStore'))({ records: records });
      expect(store.getLinkedRecordIDs('4', 'actors')).toBe(null);});


    it('returns an array of linked data IDs', function () {
      var records = { 
        '4': { 
          id: '4', 
          __dataID__: '4', 
          actors: [
          { __dataID__: 'item:1' }, 
          { __dataID__: 'item:2' }] } };



      var store = new (require('RelayRecordStore'))({ records: records });
      expect(store.getLinkedRecordIDs('4', 'actors')).toEqual([
      'item:1', 
      'item:2']);});});




  describe('getRangeMetadata()', function () {
    var mockRange, records;

    beforeEach(function () {
      mockRange = new (require('GraphQLRange'))();
      records = { 
        '4': { 
          id: '4', 
          __dataID__: '4', 
          'friends': { 
            __dataID__: 'client:1' } }, 


        'client:1': { 
          __range__: mockRange }, 

        'edge:1': { 
          __dataID__: 'edge:1', 
          node: { 
            __dataID__: 'node:1' } }, 


        'node:1': { 
          __dataID__: 'node:1' } };});




    it('returns null/undefined if the connection ID is null-ish', function () {
      var store = new (require('RelayRecordStore'))({ records: {} });
      expect(store.getRangeMetadata(null, [])).toBe(null);
      expect(store.getRangeMetadata(undefined, [])).toBe(undefined);});


    it('returns undefined if the `edges` are unfetched', function () {
      delete records['client:1'].__range__;
      var store = new (require('RelayRecordStore'))({ records: records });
      var calls = [
      { name: 'first', value: '10' }, 
      { name: 'orderby', value: 'TOP_STORIES' }];

      expect(store.getRangeMetadata('client:1', calls)).toBe(undefined);});


    it('throws if the range is null', function () {
      records['client:1'].__range__ = null;
      var store = new (require('RelayRecordStore'))({ records: records });
      store.getRangeMetadata('client:1', []);
      expect([
      'RelayRecordStore.getRangeMetadata(): Expected range to exist if ' + 
      '`edges` has been fetched.']).
      toBeWarnedNTimes(1);});


    it('filters out edges without nodes', function () {
      records['node:1'] = null;
      var store = new (require('RelayRecordStore'))({ records: records });
      mockRange.retrieveRangeInfoForQuery.mockReturnValue({ 
        requestedEdgeIDs: ['edge:1'] });

      var metadata = store.getRangeMetadata(
      'client:1', 
      [{ name: 'first', value: 1 }]);

      expect(metadata.filteredEdges).toEqual([]);});


    it('returns empty diff calls if range is already fetched', function () {
      var diffCalls = [];
      mockRange.retrieveRangeInfoForQuery.mockReturnValue({ diffCalls: diffCalls });
      var store = new (require('RelayRecordStore'))({ records: records });
      var rangeInfo = store.getRangeMetadata('client:1', []);
      expect(rangeInfo.diffCalls).toEqual([]);
      expect(rangeInfo.filterCalls).toEqual([]);
      expect(rangeInfo.filteredEdges).toEqual([]);});


    it('returns diff/filter calls and requested edges from the range', function () {
      mockRange.retrieveRangeInfoForQuery.mockReturnValue({ 
        requestedEdgeIDs: ['edge:1'], 
        diffCalls: [
        { name: 'first', value: '1' }, 
        { name: 'after', value: 'edge:1' }] });


      var store = new (require('RelayRecordStore'))({ records: records });
      var rangeInfo = store.getRangeMetadata('client:1', [
      { name: 'orderby', value: ['TOP_STORIES'] }, 
      { name: 'first', value: 2 }]);

      expect(mockRange.retrieveRangeInfoForQuery).toBeCalled();
      expect(rangeInfo.diffCalls).toEqual([
      { name: 'orderby', value: ['TOP_STORIES'] }, 
      { name: 'first', value: '1' }, 
      { name: 'after', value: 'edge:1' }]);

      expect(rangeInfo.filteredEdges).toEqual([{ 
        edgeID: 'edge:1', 
        nodeID: 'node:1' }]);

      expect(rangeInfo.filterCalls).toEqual([
      { name: 'orderby', value: ['TOP_STORIES'] }]);});});




  describe('getRangeFilterCalls', function () {
    it('returns null/undefined for deleted/unfetched records', function () {
      var records = { 
        deleted: null, 
        notARange: {} };

      var store = new (require('RelayRecordStore'))({ records: records });

      expect(store.getRangeFilterCalls('unfetched')).toBe(undefined);
      expect(store.getRangeFilterCalls('deleted')).toBe(null);
      expect(store.getRangeFilterCalls('notARange')).toBe(undefined);});


    it('returns filter calls for range records', function () {
      var calls = [
      { 
        name: 'orderby', 
        value: 'TOP_STORIES' }];


      var records = { 
        'client:1': { 
          __range__: new (require('GraphQLRange'))(), 
          __filterCalls__: calls } };


      var store = new (require('RelayRecordStore'))({ records: records });

      expect(store.getRangeFilterCalls('client:1')).toEqual(calls);});});



  describe('getConnectionIDsForRecord', function () {
    it('returns null for non-existent records', function () {
      var records = { 
        deleted: null };

      var store = new (require('RelayRecordStore'))({ records: records });
      expect(store.getConnectionIDsForRecord('unfetched')).toBe(null);
      expect(store.getConnectionIDsForRecord('deleted')).toBe(null);});


    it('returns null if the record is not in a connection', function () {
      var records = { 
        '1': { 
          __dataID__: '1' } };


      var store = new (require('RelayRecordStore'))({ records: records });
      expect(store.getConnectionIDsForRecord('1')).toBe(null);});


    it('returns the connection ids containing the node', function () {
      var records = { 
        '1': { 
          __dataID__: '1' }, 

        'range:1': { 
          __dataID__: 'range:1' }, 

        'range:2': { 
          __dataID__: 'range:2' } };


      var nodeRangeMap = { 
        '1': { 
          'range:1': true, 
          'range:2': true } };


      var store = new (require('RelayRecordStore'))({ records: records }, null, nodeRangeMap);
      var writer = new (require('RelayRecordWriter'))(records, {}, false, nodeRangeMap);
      expect(store.getConnectionIDsForRecord('1')).toEqual([
      'range:1', 
      'range:2']);


      // node/connection link is cleared when the node is deleted
      writer.deleteRecord('1');
      expect(store.getConnectionIDsForRecord('1')).toEqual(null);});});



  describe('getConnectionIDsForField()', function () {
    it('returns null/undefined for non-existent records', function () {
      var records = { 
        'deleted': null };

      var store = new (require('RelayRecordStore'))({ records: records });
      expect(store.getConnectionIDsForField('unfetched', 'news_feed')).toBe(
      undefined);

      expect(store.getConnectionIDsForField('deleted', 'news_feed')).toBe(null);});


    it('returns undefined if the connection is unfetched', function () {
      var records = {};
      var store = new (require('RelayRecordStore'))({ records: records });
      var writer = new (require('RelayRecordWriter'))(records, {}, false);
      writer.putRecord('1', 'Type');
      expect(store.getConnectionIDsForField('1', 'news_feed')).toBe(undefined);});


    it('returns all fetched connections', function () {
      var records = { 
        '1': { 
          __dataID__: '1', 
          'photos': { 
            __dataID__: '2' }, 

          'photos{orderby:"likes"}': { 
            __dataID__: '3' } } };



      var store = new (require('RelayRecordStore'))({ records: records });
      expect(store.getConnectionIDsForField('1', 'photos')).toEqual(['2', '3']);});});



  describe('getRootCallID', function () {
    it('returns undefined if unfetched and not cached', function () {
      var records = {};
      var store = new (require('RelayRecordStore'))({ records: records });
      expect(store.getDataID('viewer')).toBe(undefined);});


    it('returns cached id if unfetched', function () {
      var id = 'client:1';
      var cachedRootCallMap = { viewer: { '': id } };
      var rootCallMap = {};
      var records = {};

      var store = new (require('RelayRecordStore'))(
      { records: records }, 
      { rootCallMap: rootCallMap, cachedRootCallMap: cachedRootCallMap });

      expect(store.getDataID('viewer')).toBe(id);});


    it('returns fetched id over cached id', function () {
      var cachedID = 'client:cached';
      var cachedRootCallMap = { viewer: { '': cachedID } };
      var id = 'client:fetched';
      var rootCallMap = { viewer: { '': id } };
      var records = {};

      var store = new (require('RelayRecordStore'))(
      { records: records }, 
      { rootCallMap: rootCallMap, cachedRootCallMap: cachedRootCallMap });

      expect(store.getDataID('viewer')).toBe(id);});});



  describe('removeRecord', function () {
    it('completely removes the data from the store', function () {
      var cachedRecords = { 'a': { __dataID__: 'a' } };
      var queuedRecords = { 'a': { __dataID__: 'a' } };
      var records = { 'a': { __dataID__: 'a' } };
      var nodeConnectionMap = { 
        a: { 'client:1': true } };

      var store = new (require('RelayRecordStore'))(
      { cachedRecords: cachedRecords, queuedRecords: queuedRecords, records: records }, 
      null, 
      nodeConnectionMap);

      expect(cachedRecords.hasOwnProperty('a')).toBe(true);
      expect(queuedRecords.hasOwnProperty('a')).toBe(true);
      expect(records.hasOwnProperty('a')).toBe(true);
      expect(nodeConnectionMap.hasOwnProperty('a')).toBe(true);
      store.removeRecord('a');
      expect(cachedRecords.hasOwnProperty('a')).toBe(false);
      expect(queuedRecords.hasOwnProperty('a')).toBe(false);
      expect(records.hasOwnProperty('a')).toBe(false);
      expect(nodeConnectionMap.hasOwnProperty('a')).toBe(false);});});



  describe('hasDeferredFragmentData()', function () {
    it('returns true when a fragment has been marked as resolved', function () {
      var records = { 
        'a': { '__resolvedFragmentMap__': { 'fragID': true } } };

      var store = new (require('RelayRecordStore'))({ records: records });
      expect(store.hasDeferredFragmentData('a', 'fragID')).toBe(true);});


    it('returns false when a fragment has not been marked as resolved', function () {
      var records = { 
        // No resolved fragment map at all
        'a': {}, 
        // Map does not contain a key corresponding to our fragment
        'b': { '__resolvedFragmentMap__': { 'otherFragID': true } } };

      var store = new (require('RelayRecordStore'))({ records: records });
      expect(store.hasDeferredFragmentData('a', 'fragID')).toBe(false);
      expect(store.hasDeferredFragmentData('b', 'fragID')).toBe(false);});});});
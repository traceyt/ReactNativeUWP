/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails oncall+relay
 */

'use strict';

jest.mock('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/warning');






describe('RelayReadyState', function () {
  var onReadyStateChange = undefined;
  var readyState = undefined;

  beforeEach(function () {
    jest.resetModuleRegistry();

    onReadyStateChange = jest.genMockFunction();
    readyState = new (require('RelayReadyState'))(onReadyStateChange);

    jasmine.addMatchers(require('RelayTestUtils').matchers);});


  it('invokes the callback asynchronously when state changes', function () {
    readyState.update({ ready: true });

    expect(onReadyStateChange).not.toBeCalled();

    jest.runAllTimers();

    expect(onReadyStateChange.mock.calls).toEqual([
    [{ aborted: false, done: false, error: null, ready: true, stale: false }]]);});



  it('invokes the callback once per immediate', function () {
    readyState.update({ ready: true, stale: true });
    readyState.update({ ready: true, stale: false });
    readyState.update({ done: true, ready: true });
    jest.runAllTimers();

    expect(onReadyStateChange.mock.calls).toEqual([
    [{ aborted: false, done: true, error: null, ready: true, stale: false }]]);});



  it('ignores asynchronous state changes after being aborted', function () {
    readyState.update({ aborted: true });
    jest.runAllTimers();

    readyState.update({ ready: true });
    jest.runAllTimers();

    expect(onReadyStateChange.mock.calls).toEqual([
    [{ aborted: true, done: false, error: null, ready: false, stale: false }]]);});



  it('ignores synchronous state changes after being aborted', function () {
    readyState.update({ aborted: true });
    readyState.update({ ready: true });
    jest.runAllTimers();

    expect(onReadyStateChange.mock.calls).toEqual([
    [{ aborted: true, done: false, error: null, ready: false, stale: false }]]);});



  it('warns about state changes after being done', function () {
    readyState.update({ done: true, ready: true });
    jest.runAllTimers();
    readyState.update({ ready: true });

    expect([
    'RelayReadyState: Invalid state change from `%s` to `%s`.', 
    JSON.stringify(
    { aborted: false, done: true, error: null, ready: true, stale: false }), 

    JSON.stringify({ ready: true })]).
    toBeWarnedNTimes(1);

    expect(onReadyStateChange.mock.calls.length).toBe(1);
    jest.runAllTimers();
    expect(onReadyStateChange.mock.calls.length).toBe(1);});


  it('warns about state changes after encountering errors', function () {
    var error = new Error('Expected error.');
    readyState.update({ error: error });
    jest.runAllTimers();
    readyState.update({ ready: true });

    expect([
    'RelayReadyState: Invalid state change from `%s` to `%s`.', 
    JSON.stringify(
    { aborted: false, done: false, error: error, ready: false, stale: false }), 

    JSON.stringify({ ready: true })]).
    toBeWarnedNTimes(1);

    expect(onReadyStateChange.mock.calls.length).toBe(1);
    jest.runAllTimers();
    expect(onReadyStateChange.mock.calls.length).toBe(1);});


  it('ignores state changed to aborted when done', function () {
    readyState.update({ done: true, ready: true });
    jest.runAllTimers();

    readyState.update({ aborted: true });
    jest.runAllTimers();

    expect(require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/warning')).not.toBeCalled();
    expect(onReadyStateChange.mock.calls.length).toBe(1);});


  it('ignores state changed to aborted when an error occurred', function () {
    readyState.update({ error: new Error('Expected error.') });
    jest.runAllTimers();

    readyState.update({ aborted: true });
    jest.runAllTimers();

    expect(require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/warning')).not.toBeCalled();
    expect(onReadyStateChange.mock.calls.length).toBe(1);});});
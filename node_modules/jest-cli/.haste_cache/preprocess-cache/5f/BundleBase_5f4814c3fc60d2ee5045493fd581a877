'use strict';var 












BundleBase=function(){
function BundleBase(){babelHelpers.classCallCheck(this,BundleBase);
this._finalized=false;
this._modules=[];
this._assets=[];
this._mainModuleId=undefined;}babelHelpers.createClass(BundleBase,[{key:'isEmpty',value:function isEmpty()


{
return this._modules.length===0&&this._assets.length===0;}},{key:'getMainModuleId',value:function getMainModuleId()


{
return this._mainModuleId;}},{key:'setMainModuleId',value:function setMainModuleId(


moduleId){
this._mainModuleId=moduleId;}},{key:'addModule',value:function addModule(


module){
if(!module instanceof require('../lib/ModuleTransport')){
throw new Error('Expeceted a ModuleTransport object');}


this._modules.push(module);}},{key:'getModules',value:function getModules()


{
return this._modules;}},{key:'getAssets',value:function getAssets()


{
return this._assets;}},{key:'addAsset',value:function addAsset(


asset){
this._assets.push(asset);}},{key:'finalize',value:function finalize(


options){
Object.freeze(this._modules);
Object.seal(this._modules);
Object.freeze(this._assets);
Object.seal(this._assets);
this._finalized=true;}},{key:'getSource',value:function getSource(


options){
this.assertFinalized();

if(this._source){
return this._source;}


this._source=require('underscore').pluck(this._modules,'code').join('\n');
return this._source;}},{key:'assertFinalized',value:function assertFinalized(


message){
if(!this._finalized){
throw new Error(message||'Bundle needs to be finalized before getting any source');}}},{key:'toJSON',value:function toJSON()



{
return {
modules:this._modules,
assets:this._assets,
mainModuleId:this.getMainModuleId()};}}],[{key:'fromJSON',value:function fromJSON(



bundle,json){
bundle._assets=json.assets;
bundle._modules=json.modules;
bundle.setMainModuleId(json.mainModuleId);

Object.freeze(bundle._modules);
Object.seal(bundle._modules);
Object.freeze(bundle._assets);
Object.seal(bundle._assets);
bundle._finalized=true;}}]);return BundleBase;}();



module.exports=BundleBase;
'use strict';









jest.dontMock('MatrixMath');
jest.dontMock('fbjs/lib/invariant');



function degreesToRadians(degrees){
return degrees*Math.PI/180;}


function convertZeroes(degrees){
return degrees.map(function(value){return value===-0?0:value;});}


describe('MatrixMath',function(){

it('decomposes a 4x4 matrix to produce accurate Z-axis angles',function(){
expect(require('MatrixMath').decomposeMatrix([
1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]).
rotationDegrees).toEqual([0,0,0]);

[30,45,60,75,90,100,115,120,133,167].forEach(function(angle){
var mat=require('MatrixMath').createRotateZ(degreesToRadians(angle));
expect(convertZeroes(require('MatrixMath').decomposeMatrix(mat).rotationDegrees)).
toEqual([0,0,angle]);

mat=require('MatrixMath').createRotateZ(degreesToRadians(-angle));
expect(convertZeroes(require('MatrixMath').decomposeMatrix(mat).rotationDegrees)).
toEqual([0,0,-angle]);});


expect(require('MatrixMath').decomposeMatrix(
require('MatrixMath').createRotateZ(degreesToRadians(180))).
rotationDegrees).toEqual([0,0,180]);



expect(require('MatrixMath').decomposeMatrix(
require('MatrixMath').createRotateZ(degreesToRadians(222))).
rotationDegrees).toEqual([0,0,-138]);

expect(require('MatrixMath').decomposeMatrix(
require('MatrixMath').createRotateZ(degreesToRadians(270))).
rotationDegrees).toEqual([0,0,-90]);


expect(require('MatrixMath').decomposeMatrix(
require('MatrixMath').createRotateZ(degreesToRadians(360))).
rotationDegrees).toEqual([0,0,-0]);

expect(require('MatrixMath').decomposeMatrix(
require('MatrixMath').createRotateZ(degreesToRadians(33.33333333))).
rotationDegrees).toEqual([0,0,33.333]);

expect(require('MatrixMath').decomposeMatrix(
require('MatrixMath').createRotateZ(degreesToRadians(86.75309))).
rotationDegrees).toEqual([0,0,86.753]);

expect(require('MatrixMath').decomposeMatrix(
require('MatrixMath').createRotateZ(degreesToRadians(42.00000000001))).
rotationDegrees).toEqual([0,0,42]);

expect(require('MatrixMath').decomposeMatrix(
require('MatrixMath').createRotateZ(degreesToRadians(42.99999999999))).
rotationDegrees).toEqual([0,0,43]);

expect(require('MatrixMath').decomposeMatrix(
require('MatrixMath').createRotateZ(degreesToRadians(42.49999999999))).
rotationDegrees).toEqual([0,0,42.5]);

expect(require('MatrixMath').decomposeMatrix(
require('MatrixMath').createRotateZ(degreesToRadians(42.55555555555))).
rotationDegrees).toEqual([0,0,42.556]);});


it('decomposes a 4x4 matrix to produce accurate Y-axis angles',function(){
var mat;
[30,45,60,75,90,100,110,120,133,167].forEach(function(angle){
mat=require('MatrixMath').createIdentityMatrix();
require('MatrixMath').reuseRotateYCommand(mat,degreesToRadians(angle));
expect(convertZeroes(require('MatrixMath').decomposeMatrix(mat).rotationDegrees)).
toEqual([0,angle,0]);

mat=require('MatrixMath').createIdentityMatrix();
require('MatrixMath').reuseRotateYCommand(mat,degreesToRadians(-angle));
expect(convertZeroes(require('MatrixMath').decomposeMatrix(mat).rotationDegrees)).
toEqual([0,-angle,0]);});




mat=require('MatrixMath').createIdentityMatrix();
require('MatrixMath').reuseRotateYCommand(mat,degreesToRadians(222));
expect(require('MatrixMath').decomposeMatrix(mat).rotationDegrees).
toEqual([0,-138,0]);

mat=require('MatrixMath').createIdentityMatrix();
require('MatrixMath').reuseRotateYCommand(mat,degreesToRadians(270));
expect(require('MatrixMath').decomposeMatrix(mat).rotationDegrees).
toEqual([0,-90,0]);

mat=require('MatrixMath').createIdentityMatrix();
require('MatrixMath').reuseRotateYCommand(mat,degreesToRadians(360));
expect(require('MatrixMath').decomposeMatrix(mat).rotationDegrees).
toEqual([0,0,0]);});


it('decomposes a 4x4 matrix to produce accurate X-axis angles',function(){
var mat;
[30,45,60,75,90,100,110,120,133,167].forEach(function(angle){
mat=require('MatrixMath').createIdentityMatrix();
require('MatrixMath').reuseRotateXCommand(mat,degreesToRadians(angle));
expect(convertZeroes(require('MatrixMath').decomposeMatrix(mat).rotationDegrees)).
toEqual([angle,0,0]);});




mat=require('MatrixMath').createIdentityMatrix();
require('MatrixMath').reuseRotateXCommand(mat,degreesToRadians(222));
expect(require('MatrixMath').decomposeMatrix(mat).rotationDegrees).
toEqual([-138,0,0]);

mat=require('MatrixMath').createIdentityMatrix();
require('MatrixMath').reuseRotateXCommand(mat,degreesToRadians(270));
expect(require('MatrixMath').decomposeMatrix(mat).rotationDegrees).
toEqual([-90,0,0]);

mat=require('MatrixMath').createIdentityMatrix();
require('MatrixMath').reuseRotateXCommand(mat,degreesToRadians(360));
expect(require('MatrixMath').decomposeMatrix(mat).rotationDegrees).
toEqual([0,0,0]);});});
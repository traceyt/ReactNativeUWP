/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails oncall+relay
 */

'use strict';

require('configureForRelayOSS');







describe('validateRelayReadQuery', function () {
  // Helper functions.
  var getNode = require('RelayTestUtils').getNode;

  // Other variables.
  var mockConsoleError;
  var realConsoleError;

  beforeEach(function () {
    jest.resetModuleRegistry();

    realConsoleError = console.error;
    mockConsoleError = console.error = jest.genMockFunction();

    jasmine.addMatchers({ 
      toLogErrorFor: function () {
        return { 
          compare: function (actual, alias) {
            expect(actual).toBeCalledWith(
            '`%s` is used as an alias more than once. Please use unique ' + 
            'aliases.', 
            alias);

            return { 
              pass: true };} };} });});







  afterEach(function () {
    console.error = realConsoleError;});


  it('logs an error if fragment and containing query have no aliases', function () {
    var fragment = (function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'size', value: { kind: 'CallValue', callValue: '100' } }], children: [{ fieldName: 'height', kind: 'Field', metadata: {}, type: 'Int' }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'NxP+N6YdPJSx:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'ValidateRelayReadQueryRelayQL', type: 'Node' };})();






    var query = getNode((function (RQL_0) {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '4' } }], children: [].concat.apply([], [{ calls: [{ kind: 'Call', metadata: {}, name: 'size', value: { kind: 'CallValue', callValue: '50' } }], children: [{ fieldName: 'height', kind: 'Field', metadata: {}, type: 'Int' }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'ValidateRelayReadQuery', type: 'Node' };})(





    fragment));



    require('validateRelayReadQuery')(query);
    expect(mockConsoleError).toLogErrorFor('profilePicture');});


  it('logs an error for two local fragments without aliases', function () {
    var fragment = (function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'size', value: { kind: 'CallValue', callValue: '100' } }], children: [{ fieldName: 'height', kind: 'Field', metadata: {}, type: 'Int' }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: '27E2V4EDJnNc:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'ValidateRelayReadQueryRelayQL', type: 'Node' };})();






    var otherFragment = (function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'size', value: { kind: 'CallValue', callValue: '50' } }], children: [{ fieldName: 'height', kind: 'Field', metadata: {}, type: 'Int' }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: '/7K2ZbX5FoKk:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'ValidateRelayReadQueryRelayQL', type: 'Node' };})();






    var query = getNode((function (RQL_0, RQL_1) {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '4' } }], children: [].concat.apply([], [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, require('Relay').QL.__frag(RQL_0), require('Relay').QL.__frag(RQL_1)]), fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'ValidateRelayReadQuery', type: 'Node' };})(


    fragment, 
    otherFragment));



    require('validateRelayReadQuery')(query);
    expect(mockConsoleError).toLogErrorFor('profilePicture');});


  it('logs an error for local fragments containing linked fields', function () {
    var nestedFragment = (function () {return { children: [{ children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'size', value: { kind: 'CallValue', callValue: '100' } }], children: [{ fieldName: 'height', kind: 'Field', metadata: {}, type: 'Int' }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'actor', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true }, type: 'Actor' }], id: '+4gx27r1Yazk:0', kind: 'Fragment', metadata: {}, name: 'ValidateRelayReadQueryRelayQL', type: 'Viewer' };})();








    var fragment = (function (RQL_0) {return { children: [].concat.apply([], [{ children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'size', value: { kind: 'CallValue', callValue: '50' } }], children: [{ fieldName: 'height', kind: 'Field', metadata: {}, type: 'Int' }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'actor', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true }, type: 'Actor' }, require('Relay').QL.__frag(RQL_0)]), id: 'UaA+ZYsNK1to:0', kind: 'Fragment', metadata: {}, name: 'ValidateRelayReadQueryRelayQL', type: 'Viewer' };})(






    nestedFragment);


    var query = getNode((function (RQL_0) {return { children: [].concat.apply([], [require('Relay').QL.__frag(RQL_0)]), fieldName: 'viewer', kind: 'Query', metadata: {}, name: 'ValidateRelayReadQuery', type: 'Viewer' };})(


    fragment));



    require('validateRelayReadQuery')(query);
    expect(mockConsoleError).toLogErrorFor('profilePicture');});


  it('logs an error for colliding fields within the same query', function () {
    var query = getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '4' } }], children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'size', value: { kind: 'CallValue', callValue: '50' } }], children: [{ fieldName: 'height', kind: 'Field', metadata: {}, type: 'Int' }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { calls: [{ kind: 'Call', metadata: {}, name: 'size', value: { kind: 'CallValue', callValue: '100' } }], children: [{ fieldName: 'height', kind: 'Field', metadata: {}, type: 'Int' }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'ValidateRelayReadQuery', type: 'Node' };})());











    require('validateRelayReadQuery')(query);
    expect(mockConsoleError).toLogErrorFor('profilePicture');});


  it('logs an error if both fields have aliases but they collide', function () {
    var query = getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '4' } }], children: [{ alias: 'pic', calls: [{ kind: 'Call', metadata: {}, name: 'size', value: { kind: 'CallValue', callValue: '50' } }], children: [{ fieldName: 'height', kind: 'Field', metadata: {}, type: 'Int' }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { alias: 'pic', calls: [{ kind: 'Call', metadata: {}, name: 'size', value: { kind: 'CallValue', callValue: '100' } }], children: [{ fieldName: 'height', kind: 'Field', metadata: {}, type: 'Int' }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'ValidateRelayReadQuery', type: 'Node' };})());











    require('validateRelayReadQuery')(query);
    expect(mockConsoleError).toLogErrorFor('pic');});


  it('logs an error for two different fields with colliding aliases', function () {
    var query = getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '4' } }], children: [{ alias: 'special', calls: [{ kind: 'Call', metadata: {}, name: 'size', value: { kind: 'CallValue', callValue: '50' } }], children: [{ fieldName: 'height', kind: 'Field', metadata: {}, type: 'Int' }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { alias: 'special', fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'ValidateRelayReadQuery', type: 'Node' };})());









    require('validateRelayReadQuery')(query);
    expect(mockConsoleError).toLogErrorFor('special');});


  it('logs an error when a collision occurs within pageInfo', function () {
    // We test this separately because we traverse pageInfo as though it were a
    // linked field.
    var query = getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '4' } }], children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallValue', callValue: '1' } }], children: [{ children: [{ alias: 'my_cursor', fieldName: 'startCursor', kind: 'Field', metadata: {}, type: 'String' }, { alias: 'my_cursor', fieldName: 'endCursor', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'hasNextPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'PageInfo' }], fieldName: 'friends', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'FriendsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'ValidateRelayReadQuery', type: 'Node' };})());











    require('validateRelayReadQuery')(query);
    expect(mockConsoleError).toLogErrorFor('my_cursor');});


  it('logs no error when alias is the same as a connection subfield', function () {
    var query = getNode((function () {return { children: [{ alias: 'count', children: [{ fieldName: 'count', kind: 'Field', metadata: {}, type: 'Int' }], fieldName: 'friends', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'FriendsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'TAnVlSpKf1VH:0', kind: 'Fragment', metadata: {}, name: 'ValidateRelayReadQueryRelayQL', type: 'User' };})());






    require('validateRelayReadQuery')(query);
    expect(mockConsoleError).not.toBeCalled();});


  it('logs no error if containing query has a distinguishing alias ', function () {
    var fragment = (function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'size', value: { kind: 'CallValue', callValue: '100' } }], children: [{ fieldName: 'height', kind: 'Field', metadata: {}, type: 'Int' }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'Tf3eQ3tv6y7c:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'ValidateRelayReadQueryRelayQL', type: 'Node' };})();






    var query = getNode((function (RQL_0) {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '4' } }], children: [].concat.apply([], [{ alias: 'medium_profile', calls: [{ kind: 'Call', metadata: {}, name: 'size', value: { kind: 'CallValue', callValue: '50' } }], children: [{ fieldName: 'height', kind: 'Field', metadata: {}, type: 'Int' }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'ValidateRelayReadQuery', type: 'Node' };})(





    fragment));



    require('validateRelayReadQuery')(query);
    expect(mockConsoleError).not.toBeCalled();});


  it('logs no error if fragment has a distinguishing alias', function () {
    var fragment = (function () {return { children: [{ alias: 'large_profile', calls: [{ kind: 'Call', metadata: {}, name: 'size', value: { kind: 'CallValue', callValue: '100' } }], children: [{ fieldName: 'height', kind: 'Field', metadata: {}, type: 'Int' }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'YSpOqUBf7w+o:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'ValidateRelayReadQueryRelayQL', type: 'Node' };})();






    var query = getNode((function (RQL_0) {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '4' } }], children: [].concat.apply([], [{ calls: [{ kind: 'Call', metadata: {}, name: 'size', value: { kind: 'CallValue', callValue: '50' } }], children: [{ fieldName: 'height', kind: 'Field', metadata: {}, type: 'Int' }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'ValidateRelayReadQuery', type: 'Node' };})(





    fragment));



    require('validateRelayReadQuery')(query);
    expect(mockConsoleError).not.toBeCalled();});


  it('logs no error when both fragment and query have aliases', function () {
    var fragment = (function () {return { children: [{ alias: 'large_profile', calls: [{ kind: 'Call', metadata: {}, name: 'size', value: { kind: 'CallValue', callValue: '100' } }], children: [{ fieldName: 'height', kind: 'Field', metadata: {}, type: 'Int' }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: '9K0bEN/ps4mB:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'ValidateRelayReadQueryRelayQL', type: 'Node' };})();






    var query = getNode((function (RQL_0) {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '4' } }], children: [].concat.apply([], [{ alias: 'medium_profile', calls: [{ kind: 'Call', metadata: {}, name: 'size', value: { kind: 'CallValue', callValue: '50' } }], children: [{ fieldName: 'height', kind: 'Field', metadata: {}, type: 'Int' }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'ValidateRelayReadQuery', type: 'Node' };})(





    fragment));



    require('validateRelayReadQuery')(query);
    expect(mockConsoleError).not.toBeCalled();});


  it('logs no error when one of two fields in a query has an alias', function () {
    var query = getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '4' } }], children: [{ alias: 'medium_profile', calls: [{ kind: 'Call', metadata: {}, name: 'size', value: { kind: 'CallValue', callValue: '50' } }], children: [{ fieldName: 'height', kind: 'Field', metadata: {}, type: 'Int' }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { calls: [{ kind: 'Call', metadata: {}, name: 'size', value: { kind: 'CallValue', callValue: '100' } }], children: [{ fieldName: 'height', kind: 'Field', metadata: {}, type: 'Int' }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'ValidateRelayReadQuery', type: 'Node' };})());











    require('validateRelayReadQuery')(query);
    expect(mockConsoleError).not.toBeCalled();});


  it('logs no error when two fields in a query both have aliases', function () {
    var query = getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '4' } }], children: [{ alias: 'medium_profile', calls: [{ kind: 'Call', metadata: {}, name: 'size', value: { kind: 'CallValue', callValue: '50' } }], children: [{ fieldName: 'height', kind: 'Field', metadata: {}, type: 'Int' }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { alias: 'large_profile', calls: [{ kind: 'Call', metadata: {}, name: 'size', value: { kind: 'CallValue', callValue: '100' } }], children: [{ fieldName: 'height', kind: 'Field', metadata: {}, type: 'Int' }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'ValidateRelayReadQuery', type: 'Node' };})());











    require('validateRelayReadQuery')(query);
    expect(mockConsoleError).not.toBeCalled();});


  it('logs no error for a non-local fragment which would collide', function () {
    var fragment = require('RelayFragmentReference').createForContainer(
    function () {return (function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'size', value: { kind: 'CallValue', callValue: '100' } }], children: [{ fieldName: 'height', kind: 'Field', metadata: {}, type: 'Int' }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'NGMF0Bs6NlUR:0', kind: 'Fragment', metadata: {}, name: 'ValidateRelayReadQueryRelayQL', type: 'User' };})();}, 
    {});

    var query = getNode((function (RQL_0) {return { children: [].concat.apply([], [{ calls: [{ kind: 'Call', metadata: {}, name: 'size', value: { kind: 'CallValue', callValue: '50' } }], children: [{ fieldName: 'height', kind: 'Field', metadata: {}, type: 'Int' }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, require('Relay').QL.__frag(RQL_0)]), id: 'UHJNnigBam5L:0', kind: 'Fragment', metadata: {}, name: 'ValidateRelayReadQueryRelayQL', type: 'User' };})(




    fragment));


    require('validateRelayReadQuery')(query);
    expect(mockConsoleError).not.toBeCalled();});


  it('logs no error for fields at different levels', function () {
    var query = getNode((function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'size', value: { kind: 'CallValue', callValue: '50' } }], children: [{ fieldName: 'height', kind: 'Field', metadata: {}, type: 'Int' }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallValue', callValue: '1' } }], children: [{ children: [{ children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'size', value: { kind: 'CallValue', callValue: '100' } }], children: [{ fieldName: 'height', kind: 'Field', metadata: {}, type: 'Int' }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'User' }, { fieldName: 'cursor', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'FriendsEdge' }, { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true, isGenerated: true, isRequisite: true }, type: 'PageInfo' }], fieldName: 'friends', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'FriendsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: '/7/Cic5pUPu4:0', kind: 'Fragment', metadata: {}, name: 'ValidateRelayReadQueryRelayQL', type: 'User' };})());















    require('validateRelayReadQuery')(query);
    expect(mockConsoleError).not.toBeCalled();});});
'use strict';









































function flattenRelayQuery(
node,
options)
{
var flattener=new RelayQueryFlattener(
options&&options.shouldRemoveFragments);

var state={
node:node,
type:node.getType(),
flattenedFieldMap:new (require('Map'))(),
flattenedFragmentMap:new (require('Map'))()};

flattener.traverse(node,state);
return toQuery(node,state,!!(options&&options.preserveEmptyNodes));}


function toQuery(
node,_ref,




preserveEmptyNodes)
{var flattenedFieldMap=_ref.flattenedFieldMap;var flattenedFragmentMap=_ref.flattenedFragmentMap;
var children=[];
var aliases=Array.from(flattenedFieldMap.keys()).sort(require('sortTypeFirst'));
aliases.forEach(function(alias){
var field=flattenedFieldMap.get(alias);
if(field){
children.push(toQuery(field.node,field,preserveEmptyNodes));}});


Array.from(flattenedFragmentMap.keys()).forEach(function(type){
var fragment=flattenedFragmentMap.get(type);
if(fragment){
children.push(toQuery(fragment.node,fragment,preserveEmptyNodes));}});




if(preserveEmptyNodes&&node.canHaveSubselections()&&!children.length){
return node;}

return node.clone(children);}var 


RelayQueryFlattener=function(_RelayQueryVisitor){babelHelpers.inherits(RelayQueryFlattener,_RelayQueryVisitor);


function RelayQueryFlattener(shouldRemoveFragments){babelHelpers.classCallCheck(this,RelayQueryFlattener);var _this=babelHelpers.possibleConstructorReturn(this,Object.getPrototypeOf(RelayQueryFlattener).call(this));

_this.$RelayQueryFlattener_shouldRemoveFragments=!!shouldRemoveFragments;return _this;}babelHelpers.createClass(RelayQueryFlattener,[{key:'visitFragment',value:function visitFragment(



node,
state)
{
var type=node.getType();
if(this.$RelayQueryFlattener_shouldRemoveFragments||type===state.type){
this.traverse(node,state);
return;}

var flattenedFragment=state.flattenedFragmentMap.get(type);
if(!flattenedFragment){
flattenedFragment={
node:node,
type:type,
flattenedFieldMap:new (require('Map'))(),
flattenedFragmentMap:new (require('Map'))()};

state.flattenedFragmentMap.set(type,flattenedFragment);}

this.traverse(node,flattenedFragment);}},{key:'visitField',value:function visitField(



node,
state)
{
var hash=node.getShallowHash();
var flattenedField=state.flattenedFieldMap.get(hash);
if(!flattenedField){
flattenedField={
node:node,
type:node.getType(),
flattenedFieldMap:new (require('Map'))(),
flattenedFragmentMap:new (require('Map'))()};

state.flattenedFieldMap.set(hash,flattenedField);}

this.traverse(node,flattenedField);}}]);return RelayQueryFlattener;}(require('RelayQueryVisitor'));



module.exports=require('RelayProfiler').instrument(
'flattenRelayQuery',
flattenRelayQuery);
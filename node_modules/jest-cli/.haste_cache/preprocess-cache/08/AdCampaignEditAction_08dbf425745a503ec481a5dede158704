'use strict';
















var AdCampaignEditAction={













editBudgetAndSchedule:function(
campaignID,
campaignGroupID,
budgetType,
budget,
startTimeISO,
stopTimeISO,
onSuccess,
onFailure)
{
!
require('isValidRecordID')(campaignID)?require('invariant')(0,
'Action taken on unknown ad campaign id '+campaignID):undefined;

!
require('isValidRecordID')(campaignGroupID)?require('invariant')(0,
'Action taken on unknown ad campaign group id '+campaignGroupID):undefined;


var mutationFrag=require('GraphQLMutationQueryCreator').createQuery(
'ad_campaign_edit',
{
ad_campaign:campaignID,
ad_campaign_group:campaignGroupID});



var mutation=function(RQL_0){return {calls:[{kind:'Call',metadata:{},name:'ad_campaign_edit',value:{kind:'CallVariable',callVariableName:'input'}}],children:[].concat.apply([],[{fieldName:'client_mutation_id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},require('Relay').QL.__frag(RQL_0)]),kind:'Mutation',metadata:{inputType:'AdCampaignEditData!'},name:'AdCampaignEditAction',responseType:'AdCampaignEditResponsePayload'};}(


mutationFrag);




var input={
ad_campaign_id:campaignID,
start_time_iso:startTimeISO,
stop_time_iso:stopTimeISO};


if(budgetType===require('AdsBudgetTypes').DAILY){
input.daily_budget=budget;}else 
{
input.lifetime_budget=budget;}


var action=new (require('AdsManagerMutationAction'))(
require('MobileAdsManagerLoggerConsts').events.EDIT_CAMPAIGN_BUDGET_SCHEDULE);


action.runServerAction(
mutation,
input,
function(err,response){
if(err){
onFailure(err);}else 
{
onSuccess(response);}


var id=action.getClientMutationID();
require('defaultRQLMutationCallback')(err,response,mutation,id);});},












editAudience:function(
campaignID,
campaignGroupID,
previousAudienceID,
audienceID,
onSuccess,
onFailure)
{
var mutationParams={audience_id:audienceID};
var mutationResponses={ad_audience:audienceID};
if(previousAudienceID!==null){
mutationResponses.previous_ad_audience=previousAudienceID;}

AdCampaignEditAction._editTargetSpec(
campaignID,
campaignGroupID,
mutationParams,
mutationResponses,
onSuccess,
onFailure);},









editPlacementSpec:function(
campaignID,
placementSpec,
onSuccess,
onFailure)
{
!
require('isValidRecordID')(campaignID)?require('invariant')(0,
'Action taken on unknown ad campaign id '+campaignID):undefined;


var mutationFrag=require('GraphQLMutationQueryCreator').createQuery(
'ad_campaign_edit',
{
ad_campaign:campaignID});



var mutation=function(RQL_0){return {calls:[{kind:'Call',metadata:{},name:'ad_campaign_edit',value:{kind:'CallVariable',callVariableName:'input'}}],children:[].concat.apply([],[{fieldName:'client_mutation_id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},require('Relay').QL.__frag(RQL_0)]),kind:'Mutation',metadata:{inputType:'AdCampaignEditData!'},name:'AdCampaignEditAction',responseType:'AdCampaignEditResponsePayload'};}(


mutationFrag);




var input={
ad_campaign_id:campaignID,
placement_spec:placementSpec};


var action=new (require('AdsManagerMutationAction'))(
require('MobileAdsManagerLoggerConsts').events.EDIT_CAMPAIGN_PLACEMENT);


action.runServerAction(
mutation,
input,
function(err,response){
if(err){
onFailure(err);}else 
{
onSuccess(response);}


var id=action.getClientMutationID();
require('defaultRQLMutationCallback')(err,response,mutation,id);});},












editTargetSpec:function(
campaignID,
campaignGroupID,
previousAudienceID,
targetSpec,
onSuccess,
onFailure)
{
var mutationResponses={};
if(previousAudienceID!==null){
mutationResponses.previous_ad_audience=previousAudienceID;}

AdCampaignEditAction._editTargetSpec(
campaignID,
campaignGroupID,
{target_spec:targetSpec},
mutationResponses,
onSuccess,
onFailure);},











createAndSaveNewAudienceToCampaign:function(
campaignID,
campaignGroupID,
audienceName,
targetSpec,
onSuccess,
onFailure)
{
var mutationResponses={};
AdCampaignEditAction._editTargetSpec(
campaignID,
campaignGroupID,
{
new_audience:{
name:audienceName,
target_spec:targetSpec}},


mutationResponses,
onSuccess,
onFailure);},











_editTargetSpec:function(
campaignID,
campaignGroupID,
mutationParams,
mutationResponses,
onSuccess,
onFailure)
{
!
require('isValidRecordID')(campaignID)?require('invariant')(0,
'Action taken on unknown ad campaign id '+campaignID):undefined;

!
require('isValidRecordID')(campaignGroupID)?require('invariant')(0,
'Action taken on unknown ad campaign group id '+campaignGroupID):undefined;


var mutationResponsesWithCampaign=babelHelpers.extends({},
mutationResponses,{
ad_campaign:campaignID,
ad_campaign_group:campaignGroupID});


var mutationFrag=require('GraphQLMutationQueryCreator').createQuery(
'ad_campaign_edit',
mutationResponsesWithCampaign);


var mutation=function(RQL_0){return {calls:[{kind:'Call',metadata:{},name:'ad_campaign_edit',value:{kind:'CallVariable',callVariableName:'input'}}],children:[].concat.apply([],[{fieldName:'client_mutation_id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},require('Relay').QL.__frag(RQL_0)]),kind:'Mutation',metadata:{inputType:'AdCampaignEditData!'},name:'AdCampaignEditAction',responseType:'AdCampaignEditResponsePayload'};}(


mutationFrag);




var action=new (require('AdsManagerMutationAction'))(
require('MobileAdsManagerLoggerConsts').events.EDIT_CAMPAIGN_TARGET);

var mutationParamsWithCampaign=babelHelpers.extends({},
mutationParams,{
ad_campaign_id:campaignID});

action.runServerAction(
mutation,
mutationParamsWithCampaign,
function(err,response){
if(err){
onFailure(err);}else 
{
onSuccess(response);}


var id=action.getClientMutationID();
require('defaultRQLMutationCallback')(err,response,mutation,id);});}};





module.exports=AdCampaignEditAction;
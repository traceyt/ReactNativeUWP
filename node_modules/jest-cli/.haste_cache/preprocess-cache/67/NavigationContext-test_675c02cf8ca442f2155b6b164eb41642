'use strict';

























jest.
autoMockOff().
mock('ErrorUtils');




describe('NavigationContext',function(){
it('defaults `currentRoute` to null',function(){
var context=new (require('NavigationContext'))();
expect(context.currentRoute).toEqual(null);});


it('updates `currentRoute`',function(){
var context=new (require('NavigationContext'))();
context.emit('didfocus',{route:{name:'a'}});
expect(context.currentRoute.name).toEqual('a');});


it('has parent',function(){
var parent=new (require('NavigationContext'))();
var child=new (require('NavigationContext'))();
parent.appendChild(child);
expect(child.parent).toBe(parent);});


it('has `top`',function(){
var top=new (require('NavigationContext'))();
var parent=new (require('NavigationContext'))();
var child=new (require('NavigationContext'))();
top.appendChild(parent);
parent.appendChild(child);
expect(child.top).toBe(top);});


it('captures event',function(){
var parent=new (require('NavigationContext'))();
var child=new (require('NavigationContext'))();
parent.appendChild(child);

var logs=[];

var listener=function(event){var 
currentTarget=event.currentTarget;var eventPhase=event.eventPhase;var target=event.target;var type=event.type;
logs.push({
currentTarget:currentTarget,
eventPhase:eventPhase,
target:target,
type:type});};



parent.addListener('yo',listener,true);
child.addListener('yo',listener,true);

child.emit('yo');

expect(logs).toEqual([
{
currentTarget:parent,
eventPhase:require('NavigationEvent').CAPTURING_PHASE,
target:child,
type:'yo'},

{
currentTarget:child,
eventPhase:require('NavigationEvent').AT_TARGET,
target:child,
type:'yo'}]);});




it('bubbles events',function(){
var parent=new (require('NavigationContext'))();
var child=new (require('NavigationContext'))();
parent.appendChild(child);

var logs=[];

var listener=function(event){var 
currentTarget=event.currentTarget;var eventPhase=event.eventPhase;var target=event.target;var type=event.type;
logs.push({
currentTarget:currentTarget,
eventPhase:eventPhase,
target:target,
type:type});};



parent.addListener('yo',listener);
child.addListener('yo',listener);

child.emit('yo');

expect(logs).toEqual([
{
currentTarget:child,
eventPhase:require('NavigationEvent').AT_TARGET,
target:child,
type:'yo'},

{
currentTarget:parent,
eventPhase:require('NavigationEvent').BUBBLING_PHASE,
target:child,
type:'yo'}]);});




it('stops event propagation at capture phase',function(){
var parent=new (require('NavigationContext'))();
var child=new (require('NavigationContext'))();
parent.appendChild(child);

var counter=0;

parent.addListener('yo',function(event){return event.stopPropagation();},true);
child.addListener('yo',function(event){return counter++;},true);

child.emit('yo');

expect(counter).toBe(0);});


it('stops event propagation at bubbling phase',function(){
var parent=new (require('NavigationContext'))();
var child=new (require('NavigationContext'))();
parent.appendChild(child);

var counter=0;

parent.addListener('yo',function(event){return counter++;});
child.addListener('yo',function(event){return event.stopPropagation();});

child.emit('yo');

expect(counter).toBe(0);});


it('prevents event at capture phase',function(){
var parent=new (require('NavigationContext'))();
var child=new (require('NavigationContext'))();
parent.appendChild(child);

var val;
parent.addListener('yo',function(event){return event.preventDefault();},true);
child.addListener('yo',function(event){return val=event.defaultPrevented;},true);

child.emit('yo');

expect(val).toBe(true);});


it('prevents event at bubble phase',function(){
var parent=new (require('NavigationContext'))();
var child=new (require('NavigationContext'))();
parent.appendChild(child);

var val;
parent.addListener('yo',function(event){return val=event.defaultPrevented;});
child.addListener('yo',function(event){return event.preventDefault();});

child.emit('yo');

expect(val).toBe(true);});


it('emits nested events in order at capture phase',function(){
var parent=new (require('NavigationContext'))();
var child=new (require('NavigationContext'))();
parent.appendChild(child);

var logs=[];

var listener=function(event){var 
currentTarget=event.currentTarget;var type=event.type;
logs.push({
currentTarget:currentTarget,
type:type});};



child.addListener('yo',function(event){


child.emit('didyo');});


parent.addListener('yo',listener,true);
parent.addListener('didyo',listener,true);
child.addListener('yo',listener,true);

child.emit('yo');

expect(logs).toEqual([
{type:'yo',currentTarget:parent},
{type:'yo',currentTarget:child},
{type:'didyo',currentTarget:parent}]);});



it('emits nested events in order at bubbling phase',function(){
var parent=new (require('NavigationContext'))();
var child=new (require('NavigationContext'))();
parent.appendChild(child);

var logs=[];

var listener=function(event){var 
currentTarget=event.currentTarget;var type=event.type;
logs.push({
currentTarget:currentTarget,
type:type});};



child.addListener('yo',function(event){


child.emit('didyo');});


parent.addListener('yo',listener);
child.addListener('yo',listener);
parent.addListener('didyo',listener);

child.emit('yo');

expect(logs).toEqual([
{type:'yo',currentTarget:child},
{type:'yo',currentTarget:parent},
{type:'didyo',currentTarget:parent}]);});});
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

'use strict';

var GraphQLQueryRunner = jest.genMockFromModule('GraphQLQueryRunner');



/**
 * Mock object to simulate the behavior of a request. Example usage:
 *
 *   GraphQLQueryRunner.run(...);
 *   GraphQLQueryRunner.run.mock.requests[0].block();
 *   GraphQLQueryRunner.run.mock.requests[0].fail(new Error());
 *
 * A normal request should follow one of the following behaviors:
 *
 *   block? -> resolve* -> succeed
 *   block? -> resolve* -> fail
 *
 */
function genMockRequest(args) {
  var ready = false;
  return { 
    abort: function () {
      args[1]({ aborted: true, done: false, error: null, ready: ready, stale: false });}, 

    block: function () {
      args[1]({ aborted: false, done: false, error: null, ready: ready, stale: false });}, 

    resolve: function () {
      ready = true;
      args[1]({ aborted: false, done: false, error: null, ready: ready, stale: false });}, 

    succeed: function () {
      ready = true;
      args[1]({ aborted: false, done: true, error: null, ready: ready, stale: false });}, 

    fail: function (error) {
      args[1]({ aborted: false, done: false, error: error, ready: ready, stale: false });} };}




GraphQLQueryRunner.mockImplementation(function () {var _this = this;
  this.run.mock.abort = [];
  this.run.mock.requests = [];
  this.run.mockImplementation(function () {for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}
    var request = genMockRequest(args);
    var returnValue = { 
      abort: jest.genMockFunction().mockImplementation(function () {
        require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/resolveImmediate')(request.abort);}) };


    _this.run.mock.abort.push(returnValue.abort);
    _this.run.mock.requests.push(request);
    return returnValue;});


  this.forceFetch.mock.abort = [];
  this.forceFetch.mock.requests = [];
  this.forceFetch.mockImplementation(function () {for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {args[_key2] = arguments[_key2];}
    var request = genMockRequest(args);
    var returnValue = { 
      abort: jest.genMockFunction().mockImplementation(function () {
        require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/resolveImmediate')(request.abort);}) };


    _this.forceFetch.mock.abort.push(returnValue.abort);
    _this.forceFetch.mock.requests.push(request);
    return returnValue;});


  return this;});


module.exports = GraphQLQueryRunner;
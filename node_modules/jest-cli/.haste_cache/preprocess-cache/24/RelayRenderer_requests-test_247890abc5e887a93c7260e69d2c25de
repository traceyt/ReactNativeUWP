/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails oncall+relay
 */

'use strict';

require('configureForRelayOSS');

jest.dontMock('RelayRenderer');










describe('RelayRenderer', function () {
  var MockComponent = undefined;
  var MockContainer = undefined;

  var container = undefined;
  var queryConfig = undefined;

  beforeEach(function () {
    jest.resetModuleRegistry();

    MockComponent = require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createClass({ displayName: 'MockComponent', render: function () {return require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement('div', null);} });
    MockContainer = require('Relay').createContainer(MockComponent, { 
      fragments: {} });


    container = document.createElement('div');
    queryConfig = require('RelayQueryConfig').genMockInstance();
    require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react-dom').render(
    require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(require('RelayRenderer'), { Container: MockContainer, queryConfig: queryConfig }), 
    container);});



  it('primes queries created from `Component` and `queryConfig`', function () {
    expect(require('getRelayQueries')).toBeCalledWith(MockContainer, queryConfig);
    expect(require('RelayStore').primeCache).toBeCalled();});


  it('does nothing when `Component` and `queryConfig` are unchanged', function () {
    require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react-dom').render(
    require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(require('RelayRenderer'), { Container: MockContainer, queryConfig: queryConfig }), 
    container);

    expect(require('getRelayQueries').mock.calls).toEqual([[MockContainer, queryConfig]]);
    expect(require('RelayStore').primeCache.mock.calls.length).toBe(1);});


  it('does nothing when `Component` and `queryConfig` are resolved', function () {
    require('RelayStore').primeCache.mock.requests[0].succeed();

    require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react-dom').render(
    require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(require('RelayRenderer'), { Container: MockContainer, queryConfig: queryConfig }), 
    container);

    expect(require('getRelayQueries').mock.calls).toEqual([[MockContainer, queryConfig]]);
    expect(require('RelayStore').primeCache.mock.calls.length).toBe(1);});


  it('primes new queries when `Component` changes', function () {
    var AnotherComponent = require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createClass({ displayName: 'AnotherComponent', render: function () {return require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement('div', null);} });
    var AnotherContainer = require('Relay').createContainer(AnotherComponent, { 
      fragments: {} });

    require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react-dom').render(
    require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(require('RelayRenderer'), { 
      Container: AnotherContainer, 
      queryConfig: queryConfig }), 

    container);

    expect(require('getRelayQueries').mock.calls).toEqual([
    [MockContainer, queryConfig], 
    [AnotherContainer, queryConfig]]);

    expect(require('RelayStore').primeCache.mock.calls.length).toBe(2);});


  it('primes new queries when `queryConfig` changes', function () {
    var anotherQueryConfig = require('RelayQueryConfig').genMockInstance();
    require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react-dom').render(
    require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(require('RelayRenderer'), { 
      Container: MockContainer, 
      queryConfig: anotherQueryConfig }), 

    container);

    expect(require('getRelayQueries').mock.calls).toEqual([
    [MockContainer, queryConfig], 
    [MockContainer, anotherQueryConfig]]);

    expect(require('RelayStore').primeCache.mock.calls.length).toBe(2);});


  it('force fetches when the `forceFetch` prop is true', function () {
    require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react-dom').render(
    require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(require('RelayRenderer'), { 
      Container: MockContainer, 
      queryConfig: queryConfig, 
      forceFetch: true }), 

    container);

    expect(require('getRelayQueries')).toBeCalledWith(MockContainer, queryConfig);
    expect(require('RelayStore').forceFetch).toBeCalled();});


  it('calls `onForceFetch` hook if supplied', function () {
    var onForceFetch = jest.genMockFunction();
    var onPrimeCache = jest.genMockFunction();

    require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react-dom').render(
    require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(require('RelayRenderer'), { 
      Container: MockContainer, 
      queryConfig: queryConfig, 
      forceFetch: true, 
      onForceFetch: onForceFetch, 
      onPrimeCache: onPrimeCache }), 

    container);

    expect(onForceFetch).toBeCalled();
    expect(onPrimeCache).not.toBeCalled();});


  it('calls `onPrimeCache` hook if supplied', function () {
    var anotherQueryConfig = require('RelayQueryConfig').genMockInstance();
    var onForceFetch = jest.genMockFunction();
    var onPrimeCache = jest.genMockFunction();

    require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react-dom').render(
    require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(require('RelayRenderer'), { 
      Container: MockContainer, 
      queryConfig: anotherQueryConfig, 
      onForceFetch: onForceFetch, 
      onPrimeCache: onPrimeCache }), 

    container);

    expect(onForceFetch).not.toBeCalled();
    expect(onPrimeCache).toBeCalled();});});
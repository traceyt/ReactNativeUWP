'use strict';























var TYPE='__type__';var 

RelayQueryTracker=function(){





function RelayQueryTracker(){babelHelpers.classCallCheck(this,RelayQueryTracker);
this.$RelayQueryTracker_trackedNodesByID={};}babelHelpers.createClass(RelayQueryTracker,[{key:'trackNodeForID',value:function trackNodeForID(



node,
dataID,
path)
{


if(require('RelayRecord').isClientID(dataID)){
!
path?require('invariant')(0,
'RelayQueryTracker.trackNodeForID(): Expected `path` for client ID, '+
'`%s`.',
dataID):undefined;

if(!require('RelayQueryPath').isRootPath(path)){
return;}}



if(node instanceof require('RelayQuery').Field&&node.getSchemaName()===TYPE){
return;}


this.$RelayQueryTracker_trackedNodesByID[dataID]=this.$RelayQueryTracker_trackedNodesByID[dataID]||{
trackedNodes:[],
isMerged:false};

this.$RelayQueryTracker_trackedNodesByID[dataID].trackedNodes.push(node);
this.$RelayQueryTracker_trackedNodesByID[dataID].isMerged=false;}},{key:'getTrackedChildrenForID',value:function getTrackedChildrenForID(






dataID)
{
var trackedNodesByID=this.$RelayQueryTracker_trackedNodesByID[dataID];
if(!trackedNodesByID){
return [];}var 

isMerged=trackedNodesByID.isMerged;var trackedNodes=trackedNodesByID.trackedNodes;
if(!isMerged){(function(){
var trackedChildren=[];
trackedNodes.forEach(function(trackedQuery){
trackedChildren.push.apply(trackedChildren,babelHelpers.toConsumableArray(trackedQuery.getChildren()));});

trackedNodes.length=0;
trackedNodesByID.isMerged=true;
var containerNode=require('RelayQuery').Fragment.build(
'RelayQueryTracker',
require('RelayNodeInterface').NODE_TYPE,
trackedChildren);

if(containerNode){
trackedNodes.push(containerNode);}})();}


var trackedNode=trackedNodes[0];
if(trackedNode){
return trackedNode.getChildren();}

return [];}},{key:'untrackNodesForID',value:function untrackNodesForID(







dataID)
{
delete this.$RelayQueryTracker_trackedNodesByID[dataID];}}]);return RelayQueryTracker;}();



module.exports=RelayQueryTracker;
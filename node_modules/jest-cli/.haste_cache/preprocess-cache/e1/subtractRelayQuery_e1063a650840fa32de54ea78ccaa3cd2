'use strict';


































function subtractRelayQuery(
minuend,
subtrahend)
{
var visitor=new RelayQuerySubtractor();
var state={
isEmpty:true,
subtrahend:subtrahend};

var diff=visitor.visit(minuend,state);
if(!state.isEmpty){
!(
diff instanceof require('RelayQuery').Root)?require('invariant')(0,
'subtractRelayQuery(): Expected a subtracted query root.'):undefined;

return diff;}

return null;}var 


RelayQuerySubtractor=function(_RelayQueryTransform){babelHelpers.inherits(RelayQuerySubtractor,_RelayQueryTransform);function RelayQuerySubtractor(){babelHelpers.classCallCheck(this,RelayQuerySubtractor);return babelHelpers.possibleConstructorReturn(this,Object.getPrototypeOf(RelayQuerySubtractor).apply(this,arguments));}babelHelpers.createClass(RelayQuerySubtractor,[{key:'visitRoot',value:function visitRoot(

node,
state)
{var 
subtrahend=state.subtrahend;
!(
subtrahend instanceof require('RelayQuery').Root)?require('invariant')(0,
'subtractRelayQuery(): Cannot subtract a non-root node from a root.'):undefined;

if(!canSubtractRoot(node,subtrahend)){
state.isEmpty=false;
return node;}

return this.$RelayQuerySubtractor_subtractChildren(node,state);}},{key:'visitFragment',value:function visitFragment(



node,
state)
{
return this.$RelayQuerySubtractor_subtractChildren(node,state);}},{key:'visitField',value:function visitField(



node,
state)
{
var diff=undefined;
if(!node.canHaveSubselections()){
diff=this.$RelayQuerySubtractor_subtractScalar(node,state);}else 
if(node.isConnection()){
diff=this.$RelayQuerySubtractor_subtractConnection(node,state);}else 
{
diff=this.$RelayQuerySubtractor_subtractField(node,state);}

if(diff&&(diff.isRequisite()||!state.isEmpty)){
return diff;}

return null;}},{key:'$RelayQuerySubtractor_subtractScalar',value:function $RelayQuerySubtractor_subtractScalar(



node,
state)
{
var subField=state.subtrahend.getField(node);

if(subField&&!node.isRequisite()){
return null;}

state.isEmpty=isEmptyField(node);
return node;}},{key:'$RelayQuerySubtractor_subtractConnection',value:function $RelayQuerySubtractor_subtractConnection(



node,
state)
{
var subtrahendRanges=getMatchingRangeFields(node,state.subtrahend);

if(!subtrahendRanges.length){
state.isEmpty=isEmptyField(node);
return node;}


var diff=node;
for(var ii=0;ii<subtrahendRanges.length;ii++){
var fieldState={
isEmpty:true,
subtrahend:subtrahendRanges[ii]};

diff=this.$RelayQuerySubtractor_subtractChildren(diff,fieldState);
state.isEmpty=fieldState.isEmpty;
if(!diff){
break;}}


return diff;}},{key:'$RelayQuerySubtractor_subtractField',value:function $RelayQuerySubtractor_subtractField(






node,
state)
{
var subField=state.subtrahend.getField(node);

if(!subField){
state.isEmpty=isEmptyField(node);
return node;}


var fieldState={
isEmpty:true,
subtrahend:subField};

var diff=this.$RelayQuerySubtractor_subtractChildren(node,fieldState);
state.isEmpty=fieldState.isEmpty;
return diff;}},{key:'$RelayQuerySubtractor_subtractChildren',value:function $RelayQuerySubtractor_subtractChildren(






node,
state)
{var _this2=this;
return node.clone(node.getChildren().map(function(child){
var childState={
isEmpty:true,
subtrahend:state.subtrahend};

var diff=_this2.visit(child,childState);
state.isEmpty=state.isEmpty&&childState.isEmpty;
return diff;}));}}]);return RelayQuerySubtractor;}(require('RelayQueryTransform'));








function isEmptyField(
node)
{
if(node instanceof require('RelayQuery').Field&&!node.canHaveSubselections()){


return (
node.isRequisite()&&
!node.isRefQueryDependency()&&
node.getApplicationName()===node.getSchemaName());}else 

{
return node.getChildren().every(isEmptyField);}}






function canSubtractRoot(
min,
sub)
{
var minIdentifyingCall=min.getIdentifyingArg();
var subIdentifyingCall=sub.getIdentifyingArg();
return (
min.getFieldName()===sub.getFieldName()&&
require('areEqual')(minIdentifyingCall,subIdentifyingCall));}






function getMatchingRangeFields(
node,
subtrahend)
{
return subtrahend.getChildren().filter(
function(child){return child instanceof require('RelayQuery').Field&&canSubtractField(node,child);});}







function canSubtractField(
minField,
subField)
{
if(minField.getSchemaName()!==subField.getSchemaName()){
return false;}

var minArgs=minField.getCallsWithValues();
var subArgs=subField.getCallsWithValues();
if(minArgs.length!==subArgs.length){
return false;}

return minArgs.every(function(minArg,ii){
var subArg=subArgs[ii];
if(subArg==null){
return false;}

if(minArg.name!==subArg.name){
return false;}

if(minArg.name==='first'||minArg.name==='last'){







return parseInt(''+minArg.value,10)<=parseInt(''+subArg.value,10);}

return require('areEqual')(minArg.value,subArg.value);});}



module.exports=require('RelayProfiler').instrument(
'subtractRelayQuery',
subtractRelayQuery);
'use strict';



















var CREATION_SOURCE='mobile';
var PRIVACY_STATE='everyone';

var AdsManagerCreatePostAction={







createPost:function(
pageID,
bodyText,
imageURI,
onSuccess,
onFailure)
{var _this=this;
this._retrievePageAccessToken(
pageID,
function(pageAccessToken){
_this._uploadTemporaryPhoto(
imageURI,
pageID,
pageAccessToken,
function(photoID){
_this._createPost(
pageID,
bodyText,
photoID,
onSuccess,
onFailure);},


onFailure);},


onFailure);},





_retrievePageAccessToken:function(
pageID,
onSuccess,
onFailure)
{
new (require('FBGraphRequest'))(pageID).
setMethod('GET').
setSuccessHandler(function(response){return onSuccess(response.access_token);}).
setFailureHandler(onFailure).
setData({fields:'access_token'}).
send();},


_uploadTemporaryPhoto:function(
imageURI,
pageID,
pageAccessToken,
onSuccess,
onFailure)
{
var clientMutationID=require('ClientIDs').getNewClientID();
var query_params={
input:JSON.stringify({
client_mutation_id:clientMutationID,
actor_id:pageID,
source:CREATION_SOURCE})};


var mutation=require('RelayQuery').Node.create(function(){return {calls:[{kind:'Call',metadata:{},name:'viewer_create_temporary_photo',value:{kind:'CallVariable',callVariableName:'input'}}],children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'photo',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Photo'},{fieldName:'client_mutation_id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],kind:'Mutation',metadata:{inputType:'ViewerCreateTemporaryPhotoData!'},name:'AdsManagerCreatePostAction',responseType:'ViewerCreateTemporaryPhotoResponsePayload'};}(),









require('RelayMetaRoute').get('AdsManagerCreatePostAction'),
query_params);

var request_params={
pretty:(!!__DEV__).toString(),
q:require('printRelayQuery')(mutation).text,
query_params:JSON.stringify(query_params),
access_token:pageAccessToken,
photo:require('FBGraphRequest').imageFileFromSystemURI(imageURI)};

new (require('FBGraphRequest'))(require('RelayAPIConfig').graphURI.getPath()).
setMethod('POST').
setData(request_params).
setSuccessHandler(function(response){
if(!response||!response.viewer_create_temporary_photo||
!response.viewer_create_temporary_photo.photo){
onFailure&&onFailure();}

var photoID=response.viewer_create_temporary_photo.photo.id;
onSuccess&&onSuccess(photoID);}).

setFailureHandler(onFailure).
send();},


_createPost:function(
pageID,
bodyText,
photoID,
onSuccess,
onFailure)
{
var action=new (require('AdsManagerMutationAction'))(
require('MobileAdsManagerLoggerConsts').events.CREATE_NEW_POST);

var mutationFrag=require('GraphQLMutationQueryCreator').createRangeAddQuery(
'story_create',
'timeline_stories',
'timeline_stories_edge',
pageID,
'page');


var mutation=function(RQL_0){return {calls:[{kind:'Call',metadata:{},name:'story_create',value:{kind:'CallVariable',callVariableName:'input'}}],children:[].concat.apply([],[{fieldName:'client_mutation_id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},require('Relay').QL.__frag(RQL_0)]),kind:'Mutation',metadata:{inputType:'StoryCreateData!'},name:'AdsManagerCreatePostAction',responseType:'StoryCreateResponsePayload'};}(


mutationFrag);



var params={
attachments:[{
photo:{
id:photoID}}],


message:{
text:bodyText},

audience:{
privacy:{
base_state:PRIVACY_STATE}},


source:CREATION_SOURCE,
actor_id:pageID};

action.runServerAction(
mutation,
params,
function(err,response){
if(err){
onFailure&&onFailure(err);}else 
{
onSuccess&&onSuccess(response);}


var id=action.getClientMutationID();
require('defaultRQLMutationCallback')(err,response,mutation,id);});}};





module.exports=AdsManagerCreatePostAction;
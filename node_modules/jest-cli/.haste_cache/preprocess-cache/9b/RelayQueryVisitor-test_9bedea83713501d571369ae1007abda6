/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails oncall+relay
 */

'use strict';function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError('Cannot call a class as a function');}}function _inherits(subClass, superClass) {if (typeof superClass !== 'function' && superClass !== null) {throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

require('configureForRelayOSS');






describe('RelayQueryVisitor', function () {var 
  getNode = require('RelayTestUtils').getNode;
  var query;

  beforeEach(function () {
    var variables = { 
      first: 10, 
      after: 'offset' };


    var fragment = (function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallVariable', callVariableName: 'first' } }, { kind: 'Call', metadata: {}, name: 'after', value: { kind: 'CallVariable', callVariableName: 'after' } }], children: [{ children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { children: [{ fieldName: 'city', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'address', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'StreetAddress' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'User' }, { fieldName: 'cursor', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'FriendsEdge' }, { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true, isGenerated: true, isRequisite: true }, type: 'PageInfo' }], fieldName: 'friends', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'FriendsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'MFspIREz+4Zb:0', kind: 'Fragment', metadata: {}, name: 'RelayQueryVisitorRelayQL', type: 'User' };})();














    query = getNode((function (RQL_0) {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '4' } }], children: [].concat.apply([], [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallVariable', callVariableName: 'first' } }, { kind: 'Call', metadata: {}, name: 'after', value: { kind: 'CallVariable', callVariableName: 'after' } }], children: [{ children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: 'firstName', kind: 'Field', metadata: {}, type: 'String' }, { children: [{ fieldName: 'city', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'address', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'StreetAddress' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'User' }, { fieldName: 'cursor', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'FriendsEdge' }, { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true, isGenerated: true, isRequisite: true }, type: 'PageInfo' }], fieldName: 'friends', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'FriendsConnection' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'RelayQueryVisitor', type: 'Node' };})(



    fragment), 













    null, variables);});


  it('traverses fields in-order', function () {var 
    InOrder = (function (_RelayQueryVisitor) {_inherits(InOrder, _RelayQueryVisitor);function InOrder() {_classCallCheck(this, InOrder);_RelayQueryVisitor.apply(this, arguments);}InOrder.prototype.
      visitField = function visitField(field, state) {
        state.push(field.getSchemaName());
        this.traverse(field, state);};return InOrder;})(require('RelayQueryVisitor'));


    var transform = new InOrder();
    var fields = [];
    transform.visit(query, fields);

    var expectedFields = [];
    function traverse(node) {
      if (node instanceof require('RelayQuery').Field) {
        expectedFields.push(node.getSchemaName());}

      node.getChildren().forEach(function (c) {return traverse(c);});}

    traverse(query);

    expect(fields.length).toBe(expectedFields.length);
    expect(fields.every(function (f, ii) {return f === expectedFields[ii];})).toBeTruthy();});


  it('returns original input', function () {var 
    Visitor = (function (_RelayQueryVisitor2) {_inherits(Visitor, _RelayQueryVisitor2);function Visitor() {_classCallCheck(this, Visitor);_RelayQueryVisitor2.apply(this, arguments);}return Visitor;})(require('RelayQueryVisitor'));

    var transform = new Visitor();
    var output = transform.visit(query, null);
    expect(output === query).toBeTruthy();});


  it('returns the query intact when the visit methods return `null`', function () {var 
    NullReturningVisitor = (function (_RelayQueryVisitor3) {_inherits(NullReturningVisitor, _RelayQueryVisitor3);function NullReturningVisitor() {_classCallCheck(this, NullReturningVisitor);_RelayQueryVisitor3.apply(this, arguments);}NullReturningVisitor.prototype.
      visitField = function visitField(field, state) {
        this.traverse(field, state);
        return null;};return NullReturningVisitor;})(require('RelayQueryVisitor'));



    var transform = new NullReturningVisitor();
    var output = transform.visit(query, null);
    expect(output).toBe(query);});


  it('does not automatically traverse subtrees when visitor is defined', function () {var 
    NoTraversal = (function (_RelayQueryVisitor4) {_inherits(NoTraversal, _RelayQueryVisitor4);function NoTraversal() {_classCallCheck(this, NoTraversal);_RelayQueryVisitor4.apply(this, arguments);}NoTraversal.prototype.
      visitField = function visitField(
      field, 
      state) 
      {
        // should never get here
        state.push(field.getSchemaName());
        return field;};NoTraversal.prototype.


      visitFragment = function visitFragment(
      fragment, 
      state) 
      {
        // should never get here
        state.push(fragment.getName());
        return fragment;};NoTraversal.prototype.


      visitRoot = function visitRoot(
      root, 
      state) 
      {
        state.push(query.getName());
        // should stop transform from looking at fields/fragments
        return root;};return NoTraversal;})(require('RelayQueryVisitor'));



    var transform = new NoTraversal();
    var fields = [];
    transform.visit(query, fields);
    expect(fields).toEqual(['RelayQueryVisitor']);});});
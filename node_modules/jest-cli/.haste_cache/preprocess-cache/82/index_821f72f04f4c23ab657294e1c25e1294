'use strict';














function makeTransformParams(filename,sourceCode,options){
if(filename.endsWith('.json')){
sourceCode='module.exports='+sourceCode;}

return {filename:filename,sourceCode:sourceCode,options:options};}


function transformCode(transform,filename,sourceCode,options,callback){
var params=makeTransformParams(filename,sourceCode,options.transform);
var isJson=filename.endsWith('.json');

transform(params,function(error,transformed){
if(error){
callback(error);
return;}


var code,map;
if(options.minify){
var optimized=
require('./constant-folding')(filename,require('./inline')(filename,transformed,options));
code=optimized.code;
map=optimized.map;}else 
{
code=transformed.code;
map=transformed.map;}


if(isJson){
code=code.replace(/^\w+\.exports=/,'');}


var result=isJson||options.extern?
{dependencies:[],dependencyOffsets:[]}:
require('./extract-dependencies')(code);

result.code=code;
result.map=map;

callback(null,result);});}



exports.transformAndExtractDependencies=function(
transform,
filename,
sourceCode,
options,
callback)
{
transformCode(require(transform),filename,sourceCode,options||{},callback);};


exports.minify=function(filename,code,sourceMap,callback){
var result;
try{
result=require('./minify')(filename,code,sourceMap);}
catch(error){
callback(error);}

callback(null,result);};


exports.transformCode=transformCode;
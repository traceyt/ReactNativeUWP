'use strict';var 

































RelayGarbageCollector=function(){








function RelayGarbageCollector(
storeData,
scheduler)
{babelHelpers.classCallCheck(this,RelayGarbageCollector);
this.$RelayGarbageCollector_activeHoldCount=0;
this.$RelayGarbageCollector_collectionQueue=[];
this.$RelayGarbageCollector_isCollecting=false;
this.$RelayGarbageCollector_isScheduled=false;
this.$RelayGarbageCollector_refCounts={};
this.$RelayGarbageCollector_scheduler=scheduler;
this.$RelayGarbageCollector_storeData=storeData;}babelHelpers.createClass(RelayGarbageCollector,[{key:'register',value:function register(


dataID){
if(!this.$RelayGarbageCollector_refCounts.hasOwnProperty(dataID)){
this.$RelayGarbageCollector_refCounts[dataID]=0;}}},{key:'incrementReferenceCount',value:function incrementReferenceCount(



dataID){

if(!this.$RelayGarbageCollector_refCounts.hasOwnProperty(dataID)){
this.$RelayGarbageCollector_refCounts[dataID]=0;}

this.$RelayGarbageCollector_refCounts[dataID]++;}},{key:'decrementReferenceCount',value:function decrementReferenceCount(


dataID){
if(
!this.$RelayGarbageCollector_refCounts.hasOwnProperty(dataID)||
this.$RelayGarbageCollector_refCounts[dataID]<=0)
{
require('warning')(
false,
'RelayGarbageCollector: Expected id `%s` be referenced before being '+
'unreferenced.',
dataID);

this.$RelayGarbageCollector_refCounts[dataID]=0;
return;}

this.$RelayGarbageCollector_refCounts[dataID]--;}},{key:'acquireHold',value:function acquireHold()














{var _this=this;
var isReleased=false;
this.$RelayGarbageCollector_activeHoldCount++;
return {
release:function(){
!
!isReleased?require('invariant')(0,
'RelayGarbageCollector: hold can only be released once.'):undefined;

!(
_this.$RelayGarbageCollector_activeHoldCount>0)?require('invariant')(0,
'RelayGarbageCollector: cannot decrease hold count below zero.'):undefined;

isReleased=true;
_this.$RelayGarbageCollector_activeHoldCount--;
if(_this.$RelayGarbageCollector_activeHoldCount===0){
_this.$RelayGarbageCollector_scheduleCollection();}}};}},{key:'collectFromNode',value:function collectFromNode(








dataID){
if(this.$RelayGarbageCollector_refCounts[dataID]===0){
this.$RelayGarbageCollector_collectionQueue.push(dataID);
this.$RelayGarbageCollector_scheduleCollection();}}},{key:'collect',value:function collect()






{var _this2=this;
require('forEachObject')(this.$RelayGarbageCollector_refCounts,function(refCount,dataID){
if(refCount===0){
_this2.$RelayGarbageCollector_collectionQueue.push(dataID);}});


this.$RelayGarbageCollector_scheduleCollection();}},{key:'$RelayGarbageCollector_scheduleCollection',value:function $RelayGarbageCollector_scheduleCollection()


{var _this3=this;
if(this.$RelayGarbageCollector_isScheduled){
return;}

this.$RelayGarbageCollector_isScheduled=true;
require('resolveImmediate')(function(){
_this3.$RelayGarbageCollector_isScheduled=false;
_this3.$RelayGarbageCollector_processQueue();});}},{key:'$RelayGarbageCollector_processQueue',value:function $RelayGarbageCollector_processQueue()



{var _this4=this;
if(
this.$RelayGarbageCollector_isCollecting||
this.$RelayGarbageCollector_activeHoldCount||
!this.$RelayGarbageCollector_collectionQueue.length)
{

return;}

this.$RelayGarbageCollector_isCollecting=true;

var cachedRecords=this.$RelayGarbageCollector_storeData.getCachedData();
var freshRecords=this.$RelayGarbageCollector_storeData.getNodeData();
this.$RelayGarbageCollector_scheduler(function(){

if(_this4.$RelayGarbageCollector_activeHoldCount){
_this4.$RelayGarbageCollector_isCollecting=false;
return false;}


var dataID=_this4.$RelayGarbageCollector_getNextUnreferencedID();
if(dataID){
var cachedRecord=cachedRecords[dataID];
if(cachedRecord){
_this4.$RelayGarbageCollector_traverseRecord(cachedRecord);}

var freshRecord=freshRecords[dataID];
if(freshRecord){
_this4.$RelayGarbageCollector_traverseRecord(freshRecord);}

_this4.$RelayGarbageCollector_collectRecord(dataID);}




_this4.$RelayGarbageCollector_isCollecting=!!_this4.$RelayGarbageCollector_collectionQueue.length;
return _this4.$RelayGarbageCollector_isCollecting;});}},{key:'$RelayGarbageCollector_getNextUnreferencedID',value:function $RelayGarbageCollector_getNextUnreferencedID()



{
while(this.$RelayGarbageCollector_collectionQueue.length){
var dataID=this.$RelayGarbageCollector_collectionQueue.shift();
if(
this.$RelayGarbageCollector_refCounts.hasOwnProperty(dataID)&&
this.$RelayGarbageCollector_refCounts[dataID]===0)
{
return dataID;}}


return null;}},{key:'$RelayGarbageCollector_traverseRecord',value:function $RelayGarbageCollector_traverseRecord(


record){var _this5=this;
require('forEachObject')(record,function(value,storageKey){
if(storageKey===require('RelayRecord').MetadataKey.PATH){
return;}else 
if(value instanceof require('GraphQLRange')){
value.getEdgeIDs().forEach(function(id){
if(id!=null){
_this5.$RelayGarbageCollector_collectionQueue.push(id);}});}else 


if(Array.isArray(value)){
value.forEach(function(item){
if(typeof item==='object'&&item!==null){
var linkedID=require('RelayRecord').getDataID(item);
if(linkedID!=null){
_this5.$RelayGarbageCollector_collectionQueue.push(linkedID);}}});}else 



if(typeof value==='object'&&value!==null){
var linkedID=require('RelayRecord').getDataID(value);
if(linkedID!=null){
_this5.$RelayGarbageCollector_collectionQueue.push(linkedID);}}});}},{key:'$RelayGarbageCollector_collectRecord',value:function $RelayGarbageCollector_collectRecord(





dataID){
this.$RelayGarbageCollector_storeData.getQueryTracker().untrackNodesForID(dataID);
this.$RelayGarbageCollector_storeData.getQueuedStore().removeRecord(dataID);
this.$RelayGarbageCollector_storeData.getRangeData().removeRecord(dataID);
delete this.$RelayGarbageCollector_refCounts[dataID];}}]);return RelayGarbageCollector;}();



module.exports=RelayGarbageCollector;
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails oncall+relay
 */

'use strict';



describe('testEditDistance()', function () {
  it('considers empty strings to be identical', function () {
    expect(require('testEditDistance')('', '', 0)).toBe(true);});


  it('detects non-empty identical strings', function () {
    expect(require('testEditDistance')('foo', 'foo', 0)).toBe(true);});


  it('works with one empty and one non-empty string', function () {
    expect(require('testEditDistance')('', 'foo', 2)).toBe(false);
    expect(require('testEditDistance')('', 'foo', 3)).toBe(true);
    expect(require('testEditDistance')('foo', '', 2)).toBe(false);
    expect(require('testEditDistance')('foo', '', 3)).toBe(true);});


  it('detects deletions', function () {
    expect(require('testEditDistance')('foobar', 'fbar', 1)).toBe(false);
    expect(require('testEditDistance')('foobar', 'fbar', 2)).toBe(true);});


  it('detects insertions', function () {
    expect(require('testEditDistance')('foo', '<foo>', 1)).toBe(false);
    expect(require('testEditDistance')('foo', '<foo>', 2)).toBe(true);});


  it('detects substitutions', function () {
    expect(require('testEditDistance')('foobar', 'FooBar', 1)).toBe(false);
    expect(require('testEditDistance')('foobar', 'FooBar', 2)).toBe(true);});


  it('detects adjacent transpositions', function () {
    expect(require('testEditDistance')('foobar', 'foboar', 0)).toBe(false);
    expect(require('testEditDistance')('foobar', 'foboar', 1)).toBe(true);});


  it('treats non-adjacent transposition as unrelated operations', function () {
    expect(require('testEditDistance')('foobar', 'boofar', 1)).toBe(false);
    expect(require('testEditDistance')('foobar', 'boofar', 2)).toBe(true);});


  it('detects distances involving multiple edit operations', function () {
    expect(
    require('testEditDistance')(
    'String involving multiple changes.', 
    'strni ginvolvinG mmultiple cangs!', 
    7)).

    toBe(false);
    expect(
    require('testEditDistance')(
    'String involving multiple changes.', 
    'strni ginvolvinG mmultiple cangs!', 
    8)).

    toBe(true);});});
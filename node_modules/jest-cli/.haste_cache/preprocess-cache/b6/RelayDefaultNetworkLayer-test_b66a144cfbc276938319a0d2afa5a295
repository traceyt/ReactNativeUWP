'use strict';var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;} /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2013-present, Facebook, Inc.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This source code is licensed under the BSD-style license found in the
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * LICENSE file in the root directory of this source tree. An additional grant
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * of patent rights can be found in the PATENTS file in the same directory.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @emails oncall+relay
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

'use strict';

require('configureForRelayOSS');













describe('RelayDefaultNetworkLayer', function () {
  var networkConfig;
  var networkLayer;

  function genResponse(data) {
    return { 
      json: function () {return require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/Promise').resolve(data);}, 
      status: 200 };}



  beforeEach(function () {
    jest.resetModuleRegistry();

    networkConfig = { 
      uri: '/graphql', 
      init: { 
        fetchTimeout: 15000, 
        headers: { 
          // This should be merged into headers.
          'Content-Encoding': 'gzip', 
          // This should always be ignored.
          'Content-Type': 'application/bogus' }, 

        // This should always be ignored.
        method: 'GET', 
        retryDelays: [1000, 3000] } };


    // Spread properties to test that functions are bound correctly.
    networkLayer = _extends({}, 
    new (require('RelayDefaultNetworkLayer'))(
    networkConfig.uri, 
    networkConfig.init));



    jasmine.addMatchers(require('RelayTestUtils').matchers);});


  describe('sendMutation', function () {
    var request;
    var variables;
    var responseCallback;
    var rejectCallback;

    beforeEach(function () {var _input;
      responseCallback = jest.genMockFunction();
      rejectCallback = jest.genMockFunction();

      variables = { 
        input: (_input = {}, _defineProperty(_input, 
        require('RelayConnectionInterface').CLIENT_MUTATION_ID, 'client:a'), _defineProperty(_input, 'actor_id', 
        4), _input) };


      var mutation = require('RelayQuery').Mutation.build(
      'FeedbackLikeMutation', 
      'FeedbackLikeResponsePayload', 
      'feedback_like', 
      variables.input, 
      [require('RelayQuery').Field.build({ 
        fieldName: 'does_viewer_like', 
        type: 'Boolean' })], 

      { inputType: 'FeedbackLikeInput' });

      request = new (require('RelayMutationRequest'))(mutation);
      request.getPromise().then(responseCallback)['catch'](rejectCallback);});


    it('sends correct data to server', function () {
      expect(require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/fetch')).not.toBeCalled();
      networkLayer.sendMutation(request);
      expect(require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/fetch')).toBeCalled();

      var call = require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/fetch').mock.calls[0];
      expect(call[0]).toBe(networkConfig.uri);var _call$1 = 
      call[1];var body = _call$1.body;var headers = _call$1.headers;var method = _call$1.method;

      expect(method).toBe('POST');
      expect(headers).toEqual({ 
        'Accept': '*/*', 
        'Content-Encoding': 'gzip', 
        'Content-Type': 'application/json' });

      expect(body).toEqual(JSON.stringify({ 
        query: request.getQueryString(), 
        variables: { 
          input_0: variables.input } }));});




    it('handles responses', function () {
      var response = { 
        data: { 
          test_call: { 
            field: 1 } } };




      expect(require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/fetch')).not.toBeCalled();
      networkLayer.sendMutation(request);
      expect(require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/fetch')).toBeCalled();

      require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/fetch').mock.deferreds[0].resolve(genResponse(response));
      jest.runAllTimers();

      expect(rejectCallback.mock.calls.length).toBe(0);
      expect(responseCallback.mock.calls.length).toBe(1);
      expect(responseCallback.mock.calls[0][0]).toEqual({ 
        response: response.data });});



    it('handles errors', function () {
      var response = { 
        errors: [{ 
          message: 'Something went wrong.', 
          locations: [{ 
            column: 10, 
            line: 1 }] }] };




      expect(require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/fetch')).not.toBeCalled();
      networkLayer.sendMutation(request);
      expect(require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/fetch')).toBeCalled();

      require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/fetch').mock.deferreds[0].resolve(genResponse(response));
      jest.runAllTimers();

      expect(rejectCallback.mock.calls.length).toBe(1);
      var error = rejectCallback.mock.calls[0][0];
      expect(error instanceof Error).toBe(true);
      expect(error.message).toEqual([
      'Server request for mutation \`FeedbackLikeMutation\` failed for the ' + 
      'following reasons:', 
      '', 
      '1. Something went wrong.', 
      '   ' + request.getQueryString().substr(0, 60), 
      '            ^^^'].
      join('\n'));
      expect(error.source).toEqual(response);});


    it('handles custom errors', function () {
      var response = { 
        errors: [{ 
          message: 'Something went wrong.' }] };



      expect(require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/fetch')).not.toBeCalled();
      networkLayer.sendMutation(request);
      expect(require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/fetch')).toBeCalled();

      require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/fetch').mock.deferreds[0].resolve(genResponse(response));
      jest.runAllTimers();

      expect(rejectCallback.mock.calls.length).toBe(1);
      var error = rejectCallback.mock.calls[0][0];
      expect(error instanceof Error).toBe(true);
      expect(error.message).toEqual([
      'Server request for mutation \`FeedbackLikeMutation\` failed for the ' + 
      'following reasons:', 
      '', 
      '1. Something went wrong.'].
      join('\n'));
      expect(error.source).toEqual(response);});});




  describe('sendQueries', function () {
    var queryA;
    var queryB;
    var requestA;
    var requestB;
    var route;

    beforeEach(function () {
      route = require('RelayMetaRoute').get('$fetchRelayQuery');
      queryA = require('RelayQuery').Root.create((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '123' } }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'RelayDefaultNetworkLayer', type: 'Node' };})(), 
      route, {});

      queryB = require('RelayQuery').Root.create((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '456' } }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'RelayDefaultNetworkLayer', type: 'Node' };})(), 
      route, {});

      requestA = new (require('RelayQueryRequest'))(queryA);
      requestB = new (require('RelayQueryRequest'))(queryB);});


    it('invokes `fetchWithRetries` with the correct values', function () {
      expect(require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/fetchWithRetries')).not.toBeCalled();
      networkLayer.sendQueries([requestA]);
      expect(require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/fetchWithRetries')).toBeCalled();
      var call = require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/fetchWithRetries').mock.calls[0];
      expect(call[0]).toBe(networkConfig.uri);var _call$12 = 
      call[1];var body = _call$12.body;var fetchTimeout = _call$12.fetchTimeout;var headers = _call$12.headers;var method = _call$12.method;var retryDelays = _call$12.retryDelays;
      expect(body).toBe(JSON.stringify({ 
        query: requestA.getQueryString(), 
        variables: queryA.getVariables() }));

      expect(fetchTimeout).toBe(networkConfig.init.fetchTimeout);
      expect(headers).toEqual({ 
        'Accept': '*/*', 
        'Content-Encoding': 'gzip', 
        'Content-Type': 'application/json' });

      expect(method).toBe('POST');
      expect(retryDelays).toEqual(networkConfig.init.retryDelays);});


    it('resolves with fetched response payloads', function () {
      var resolveACallback = jest.genMockFunction();
      var resolveBCallback = jest.genMockFunction();
      networkLayer.sendQueries([requestA, requestB]);
      requestA.getPromise().done(resolveACallback);
      requestB.getPromise().done(resolveBCallback);
      jest.runAllTimers();

      var payloadA = { 
        data: { '123': { id: '123' } } };

      var payloadB = { 
        data: { '456': { id: '456' } } };

      require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/fetchWithRetries').mock.deferreds[0].resolve(genResponse(payloadA));
      require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/fetchWithRetries').mock.deferreds[1].resolve(genResponse(payloadB));
      jest.runAllTimers();

      expect(resolveACallback.mock.calls.length).toBe(1);
      expect(resolveACallback.mock.calls[0][0]).toEqual({ 
        response: payloadA.data });

      expect(resolveBCallback.mock.calls.length).toBe(1);
      expect(resolveBCallback.mock.calls[0][0]).toEqual({ 
        response: payloadB.data });});



    it('rejects invalid JSON response payloads', function () {
      var rejectCallback = jest.genMockFunction();
      networkLayer.sendQueries([requestA]);
      requestA.getPromise()['catch'](rejectCallback);
      jest.runAllTimers();

      require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/fetchWithRetries').mock.deferreds[0].resolve({ 
        json: function () {return require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/Promise').reject(JSON.parse('{ // invalid'));}, 
        status: 200 });

      jest.runAllTimers();

      expect(rejectCallback).toBeCalled();
      expect(rejectCallback.mock.calls[0][0].message).toEqual(
      'Unexpected token /');});



    it('rejects errors in query responses', function () {
      var rejectCallback = jest.genMockFunction();
      networkLayer.sendQueries([requestA]);
      requestA.getPromise()['catch'](rejectCallback);
      jest.runAllTimers();

      var payloadA = { 
        data: {}, 
        errors: [{ 
          message: 'Something went wrong.', 
          locations: [{ 
            column: 7, 
            line: 1 }] }] };



      require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/fetchWithRetries').mock.deferreds[0].resolve(genResponse(payloadA));
      jest.runAllTimers();

      expect(rejectCallback).toBeCalled();
      var error = rejectCallback.mock.calls[0][0];
      expect(error.message).toEqual([
      'Server request for query `RelayDefaultNetworkLayer` failed for the ' + 
      'following reasons:', 
      '', 
      '1. Something went wrong.', 
      '   ' + requestA.getQueryString().substr(0, 60), 
      '         ^^^'].
      join('\n'));
      expect(error.source).toEqual(payloadA);});


    it('rejects requests with missing responses', function () {
      var rejectACallback = jest.genMockFunction();
      var resolveBCallback = jest.genMockFunction();
      networkLayer.sendQueries([requestA, requestB]);
      requestA.getPromise()['catch'](rejectACallback);
      requestB.getPromise().done(resolveBCallback);
      jest.runAllTimers();

      var payload = { 
        data: { '456': { id: '456' } } };

      require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/fetchWithRetries').mock.deferreds[0].resolve(genResponse({}));
      require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/fetchWithRetries').mock.deferreds[1].resolve(genResponse(payload));
      jest.runAllTimers();

      expect(resolveBCallback).toBeCalled();
      expect(rejectACallback).toBeCalled();
      expect(rejectACallback.mock.calls[0][0].message).toEqual(
      'Server response was missing for query `RelayDefaultNetworkLayer`.');});});});
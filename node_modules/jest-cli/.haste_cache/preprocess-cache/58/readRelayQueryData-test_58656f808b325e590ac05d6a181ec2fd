/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails oncall+relay
 */

'use strict';function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}

require('configureForRelayOSS');












describe('readRelayQueryData', function () {
  var RelayRecordStore = undefined;var 

  getNode = require('RelayTestUtils').getNode;var getVerbatimNode = require('RelayTestUtils').getVerbatimNode;
  var END_CURSOR = undefined, HAS_NEXT_PAGE = undefined, HAS_PREV_PAGE = undefined, PAGE_INFO = undefined, START_CURSOR = undefined;

  function getStoreData(records) {
    var recordStore = new RelayRecordStore(records);
    var storeData = new (require('RelayStoreData'))();

    storeData.getQueuedStore = jest.genMockFunction().mockImplementation(function () {
      return recordStore;});


    return storeData;}


  function readData(storeData, queryNode, dataID, options) {
    return require('readRelayQueryData')(
    storeData, 
    queryNode, 
    dataID, 
    options).
    data;}


  beforeEach(function () {
    jest.resetModuleRegistry();

    RelayRecordStore = require('RelayRecordStore');


    END_CURSOR = require('RelayConnectionInterface').END_CURSOR;
    HAS_NEXT_PAGE = require('RelayConnectionInterface').HAS_NEXT_PAGE;
    HAS_PREV_PAGE = require('RelayConnectionInterface').HAS_PREV_PAGE;
    PAGE_INFO = require('RelayConnectionInterface').PAGE_INFO;
    START_CURSOR = require('RelayConnectionInterface').START_CURSOR;


    jasmine.addMatchers(require('RelayTestUtils').matchers);});


  it('returns undefined for data that is not in the store', function () {
    var records = {};
    var query = getNode((function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'Upiwj0LNAm+D:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'ReadRelayQueryDataRelayQL', type: 'Actor' };})());
    var data = readData(getStoreData({ records: records }), query, '1055790163');
    expect(data).toBe(undefined);});


  it('returns null for data that is null in the store', function () {
    var records = { 1055790163: null };
    var query = getNode((function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'Kn26o/fhhN1H:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'ReadRelayQueryDataRelayQL', type: 'Actor' };})());
    var data = readData(getStoreData({ records: records }), query, '1055790163');
    expect(data).toBe(null);});


  it('retrieves data that is in the store', function () {
    var records = { 
      'client:1': { 
        __dataID__: 'client:1', 
        actor: { 
          __dataID__: '660361306' } }, 


      660361306: { 
        __dataID__: '660361306', 
        firstName: 'Greg' } };


    var query = getNode((function () {return { children: [{ children: [{ fieldName: 'firstName', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'actor', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true }, type: 'Actor' }], fieldName: 'viewer', kind: 'Query', metadata: {}, name: 'ReadRelayQueryData', type: 'Viewer' };})());
    var data = readData(getStoreData({ records: records }), query, 'client:1');
    expect(data).toEqual({ 
      __dataID__: 'client:1', 
      actor: { 
        __dataID__: '660361306', 
        firstName: 'Greg' } });});




  it('returns the ids for all read data', function () {
    var records = { 
      address: null, 
      date: { day: 21 }, 
      hometown: { name: 'Vancouver' }, 
      node: { 
        name: 'Chris', 
        birthdate: { __dataID__: 'date' }, 
        address: { __dataID__: 'address' }, 
        hometown: { __dataID__: 'hometown' } } };


    var hometownFragmentReference = require('RelayFragmentReference').createForContainer(
    function () {return (function () {return { children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'Ea1A2Ezkp6bE:0', kind: 'Fragment', metadata: {}, name: 'ReadRelayQueryDataRelayQL', type: 'Page' };})();}, 
    {});

    var query = getNode((function (RQL_0) {return { children: [{ children: [{ fieldName: 'city', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'address', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'StreetAddress' }, { children: [{ fieldName: 'day', kind: 'Field', metadata: {}, type: 'Int' }], fieldName: 'birthdate', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Date' }, { children: [].concat.apply([], [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'hometown', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Page' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'MSifaFmIarzA:0', kind: 'Fragment', metadata: {}, name: 'ReadRelayQueryDataRelayQL', type: 'User' };})(



    hometownFragmentReference));var _readRelayQueryData = 


    require('readRelayQueryData')(
    getStoreData({ records: records }), 
    query, 
    'node');var dataIDs = _readRelayQueryData.dataIDs;

    expect(dataIDs).toEqual({ 
      address: true, 
      date: true, 
      hometown: true, 
      node: true });});



  it('retrieves data that references null nodes in the store', function () {
    var records = { 
      1055790163: { 
        address: { __dataID__: 'client:1' }, 
        firstName: 'Yuzhi' }, 

      'client:1': null };

    var query = getNode((function () {return { children: [{ children: [{ fieldName: 'city', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'address', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'StreetAddress' }, { fieldName: 'firstName', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'GtK0j9O1wzYU:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'ReadRelayQueryDataRelayQL', type: 'Actor' };})());







    var data = readData(getStoreData({ records: records }), query, '1055790163');
    expect(data).toEqual({ 
      __dataID__: '1055790163', 
      address: null, 
      firstName: 'Yuzhi' });});



  it('includes `null` scalar values along with existing sibling fields', function () {
    var records = { 
      feedbackID: { 
        __dataID__: 'feedbackID', 
        doesViewerLike: null, 
        id: 'feedbackID' } };


    var query = getNode((function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: 'doesViewerLike', kind: 'Field', metadata: {}, type: 'Boolean' }], id: 'ZhALr3iZz5rk:0', kind: 'Fragment', metadata: {}, name: 'ReadRelayQueryDataRelayQL', type: 'Feedback' };})());





    var data = readData(getStoreData({ records: records }), query, 'feedbackID');
    expect(data.id).toBe('feedbackID');
    expect(data.doesViewerLike).toBeNull();

    records = { 
      feedbackID: { 
        __dataID__: 'feedbackID', 
        id: 'feedbackID' } };


    data = readData(getStoreData({ records: records }), query, 'feedbackID');
    expect(data.id).toBe('feedbackID');
    expect(data.doesViewerLike).toBeUndefined();
    expect('doesViewerLike' in data).toBe(false);});


  it('retrieves empty plural fields', function () {
    var records = { 
      user_id: { 
        id: 'user_id', 
        websites: [] } };


    var query = getNode((function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: 'websites', kind: 'Field', metadata: { isPlural: true }, type: 'String' }], id: 'ykVSyYjLZecj:0', kind: 'Fragment', metadata: {}, name: 'ReadRelayQueryDataRelayQL', type: 'User' };})());
    var data = readData(getStoreData({ records: records }), query, 'user_id');
    expect(data.websites).toEqual([]);});


  it('retrieves plural fields', function () {
    var websites = ['website1', 'website2'];

    var records = { 
      user_id: { 
        id: 'user_id', 
        websites: websites } };


    var query = getNode((function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: 'websites', kind: 'Field', metadata: { isPlural: true }, type: 'String' }], id: 's4FwUX/0zIh0:0', kind: 'Fragment', metadata: {}, name: 'ReadRelayQueryDataRelayQL', type: 'User' };})());
    var data = readData(getStoreData({ records: records }), query, 'user_id');
    expect(data.websites).toEqual(
    ['website1', 'website2']);});



  it('retrieves status information for nodes with queued changes', function () {
    var STATUS = require('RelayRecordStatusMap').setOptimisticStatus(
    require('RelayRecordStatusMap').setErrorStatus(0, true), 
    0);

    var records = { 
      660361306: { 
        __dataID__: '660361306', 
        firstName: 'Greg' } };


    var queuedRecords = { 
      660361306: { 
        __dataID__: '660361306', 
        __status__: STATUS, 
        firstName: 'Snoop Lion' } };


    var query = getNode((function () {return { children: [{ fieldName: 'firstName', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: '5m+CrNal2C3Z:0', kind: 'Fragment', metadata: {}, name: 'ReadRelayQueryDataRelayQL', type: 'User' };})());
    var storeData = getStoreData({ records: records, queuedRecords: queuedRecords });
    var data = readData(storeData, query, '660361306');
    expect(data).toEqual({ 
      __dataID__: '660361306', 
      __status__: STATUS, 
      firstName: 'Snoop Lion' });});



  it('retrieves resolved fragment map generation information', function () {
    var records = { 
      'a': { 
        __dataID__: 'a', 
        __resolvedFragmentMapGeneration__: 42, 
        firstName: 'Steve' } };


    var query = getNode((function () {return { children: [{ fieldName: 'firstName', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: '9RcOJ+sqiWZ7:0', kind: 'Fragment', metadata: {}, name: 'ReadRelayQueryDataRelayQL', type: 'User' };})());
    var data = readData(getStoreData({ records: records }), query, 'a');
    expect(data).toEqual({ 
      __dataID__: 'a', 
      __resolvedFragmentMapGeneration__: 42, 
      firstName: 'Steve' });});



  it('retrieves resolved fragment map info for fragment references', function () {
    var records = { 
      user: { 
        __dataID__: 'a', 
        address: { 
          __dataID__: 'address' } }, 


      address: { 
        __dataID__: 'address', 
        __resolvedFragmentMapGeneration__: 42, 
        city: 'Menlo Park' } };


    var fragment = (function () {return { children: [{ fieldName: 'city', kind: 'Field', metadata: {}, type: 'String' }], id: 'QamG4/DtdsNG:0', kind: 'Fragment', metadata: {}, name: 'ReadRelayQueryDataRelayQL', type: 'StreetAddress' };})();
    var fragmentReference = require('RelayFragmentReference').createForContainer(
    function () {return fragment;}, 
    {});

    var query = getVerbatimNode((function (RQL_0) {return { children: [{ children: [].concat.apply([], [require('Relay').QL.__frag(RQL_0)]), fieldName: 'address', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'StreetAddress' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'DchWMIz3+9gf:0', kind: 'Fragment', metadata: {}, name: 'ReadRelayQueryDataRelayQL', type: 'User' };})(


    fragmentReference));



    var data = readData(getStoreData({ records: records }), query, 'user');
    expect(data).toEqual({ 
      __dataID__: 'user', 
      address: { 
        __dataID__: 'address', 
        __fragments__: _defineProperty({}, 
        fragment.id, 'address'), 

        __resolvedFragmentMapGeneration__: 42 } });});




  it('populates data ID for nodes containing only non-local fragments', function () {
    var records = { 
      'client:1': { 
        __dataID__: 'client:1', 
        actor: { 
          __dataID__: '660361306' } }, 


      660361306: { 
        __dataID__: '660361306', 
        firstName: 'Greg' } };


    var fragment = (function () {return { children: [{ children: [{ fieldName: 'firstName', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'actor', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true }, type: 'Actor' }], id: 'wNyy/IgBWdjJ:0', kind: 'Fragment', metadata: {}, name: 'ReadRelayQueryDataRelayQL', type: 'Viewer' };})();
    var fragmentReference = require('RelayFragmentReference').createForContainer(
    function () {return fragment;}, 
    {});

    var query = getNode((function (RQL_0) {return { children: [].concat.apply([], [require('Relay').QL.__frag(RQL_0)]), fieldName: 'viewer', kind: 'Query', metadata: {}, name: 'ReadRelayQueryData', type: 'Viewer' };})(fragmentReference));
    var data = readData(getStoreData({ records: records }), query, 'client:1');
    expect(data.__dataID__).toBe('client:1');
    expect(data.__fragments__).toEqual(_defineProperty({}, 
    getNode(fragment).getConcreteFragmentID(), 'client:1'));});



  it('reads data for non-container fragment references', function () {
    var records = { 
      'client:1': { 
        __dataID__: 'client:1', 
        actor: { 
          __dataID__: '660361306' } }, 


      660361306: { 
        __dataID__: '660361306', 
        firstName: 'Greg' } };


    var fragmentReference = new (require('RelayFragmentReference'))(
    function () {return (function () {return { children: [{ children: [{ fieldName: 'firstName', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'actor', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true }, type: 'Actor' }], id: 'ziMzN6N3VZdJ:0', kind: 'Fragment', metadata: {}, name: 'ReadRelayQueryDataRelayQL', type: 'Viewer' };})();}, 
    {});

    var query = getNode((function (RQL_0) {return { children: [].concat.apply([], [require('Relay').QL.__frag(RQL_0)]), fieldName: 'viewer', kind: 'Query', metadata: {}, name: 'ReadRelayQueryData', type: 'Viewer' };})(fragmentReference));
    var data = readData(getStoreData({ records: records }), query, 'client:1');
    expect(data).toEqual({ 
      __dataID__: 'client:1', 
      actor: { 
        __dataID__: '660361306', 
        firstName: 'Greg' } });});




  it('merges data from multiple fragments that reference the same node', function () {
    var records = { 
      1055790163: { 
        __dataID__: '1055790163', 
        address: { __dataID__: 'client:1' }, 
        last_name: 'Zheng' }, 

      'client:1': { 
        __dataID__: 'client:1', 
        city: 'San Francisco', 
        country: 'US' } };



    var fragment1 = (function () {return { children: [{ children: [{ fieldName: 'city', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'address', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'StreetAddress' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'wLMkHW1nVjl5:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'ReadRelayQueryDataRelayQL', type: 'Actor' };})();
    var fragment2 = (function () {return { children: [{ children: [{ fieldName: 'country', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'address', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'StreetAddress' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'x1m2lVLzY8Nx:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'ReadRelayQueryDataRelayQL', type: 'Actor' };})();
    var query = getNode((function (RQL_0, RQL_1) {return { children: [].concat.apply([], [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, require('Relay').QL.__frag(RQL_0), require('Relay').QL.__frag(RQL_1)]), id: 'mTD7QDfnODob:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'ReadRelayQueryDataRelayQL', type: 'Actor' };})(
    fragment1, 
    fragment2));

    var data = readData(getStoreData({ records: records }), query, '1055790163');
    expect(data).toEqual({ 
      __dataID__: '1055790163', 
      address: { 
        __dataID__: 'client:1', 
        city: 'San Francisco', 
        country: 'US' } });});




  it('retrieves non-edge fields from filtered connections', function () {var _pageInfo;
    var records = { 
      'client:123': { 
        id: 'client:123', 
        count: 42, 
        __dataID__: 'client:123', 
        __range__: new (require('GraphQLRange'))() } };


    var query = getNode((function () {return { children: [{ fieldName: 'count', kind: 'Field', metadata: {}, type: 'Int' }], id: 'lIpABVVyou0f:0', kind: 'Fragment', metadata: {}, name: 'ReadRelayQueryDataRelayQL', type: 'FriendsConnection' };})());




    var storeData = getStoreData({ records: records });
    var rangeID = storeData.getRangeData().getClientIDForRangeWithID(
    require('callsToGraphQL')([
    { name: 'is_viewer_friend', value: null }, 
    { name: 'first', value: 10 }]), 

    {}, 
    'client:123');

    expect(rangeID).toBe('client:123_is_viewer_friend(),first(10)');

    require('GraphQLRange').prototype.retrieveRangeInfoForQuery.mockReturnValue({ 
      requestedEdgeIDs: [], 
      diffCalls: [], 
      pageInfo: (_pageInfo = {}, _defineProperty(_pageInfo, 
      START_CURSOR, 'cursor'), _defineProperty(_pageInfo, 
      END_CURSOR, 'cursor'), _defineProperty(_pageInfo, 
      HAS_NEXT_PAGE, false), _defineProperty(_pageInfo, 
      HAS_PREV_PAGE, false), _pageInfo) });


    var data = readData(storeData, query, rangeID);
    expect(data).toEqual({ 
      __dataID__: rangeID, 
      count: 42 });});



  it('retrieves non-edge fields from a connection', function () {
    var records = { 
      feedback_id: { 
        __dataID__: 'feedback_id', 
        likers: { 
          __dataID__: 'likers_id' } }, 


      likers_id: { 
        __dataID__: 'likers_id', 
        count: 31337 } };


    var query = getNode((function () {return { children: [{ children: [{ fieldName: 'count', kind: 'Field', metadata: {}, type: 'Int' }], fieldName: 'likers', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'LikersOfContentConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: '3kTudCUGkz93:0', kind: 'Fragment', metadata: {}, name: 'ReadRelayQueryDataRelayQL', type: 'Feedback' };})());
    var data = readData(getStoreData({ records: records }), query, 'feedback_id');
    expect(data).toEqual({ 
      __dataID__: 'feedback_id', 
      likers: { 
        __dataID__: 'likers_id', 
        count: 31337 } });});




  it('retrieves non-"range" fields within a connection', function () {var _pageInfo2;
    // This is a silly query (we don't need the `first(1)` call here) but was
    // seen in the wild and should be handled gracefully.
    var query = getNode((function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallValue', callValue: '1' } }], children: [{ fieldName: 'count', kind: 'Field', metadata: {}, type: 'Int' }], fieldName: 'topLevelComments', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'TopLevelCommentsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'oo765RZYo25L:0', kind: 'Fragment', metadata: {}, name: 'ReadRelayQueryDataRelayQL', type: 'Feedback' };})());







    var records = { 
      feedbackID: { 
        __dataID__: 'feedbackID', 
        topLevelComments: { 
          __dataID__: 'commentsID' } }, 


      commentsID: { 
        __dataID__: 'commentsID', 
        __range__: new (require('GraphQLRange'))(), 
        count: 57 } };



    require('GraphQLRange').prototype.retrieveRangeInfoForQuery.mockReturnValue({ 
      requestedEdgeIDs: ['comment_edge_id'], 
      diffCalls: [], 
      pageInfo: (_pageInfo2 = {}, _defineProperty(_pageInfo2, 
      START_CURSOR, 'cursor'), _defineProperty(_pageInfo2, 
      END_CURSOR, 'cursor'), _defineProperty(_pageInfo2, 
      HAS_NEXT_PAGE, true), _defineProperty(_pageInfo2, 
      HAS_PREV_PAGE, false), _pageInfo2) });



    var data = readData(getStoreData({ records: records }), query, 'feedbackID');
    expect(data).toEqual({ 
      __dataID__: 'feedbackID', 
      topLevelComments: { 
        __dataID__: 'commentsID_first(1)', 
        count: 57 } });});




  it('retrieves a mixture of "range" and non-"range" connection fields', function () {var _pageInfo3;
    var query = getNode((function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallValue', callValue: '1' } }], children: [{ fieldName: 'count', kind: 'Field', metadata: {}, type: 'Int' }, { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'PageInfo' }], fieldName: 'topLevelComments', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'TopLevelCommentsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'mmStYMyhFviM:0', kind: 'Fragment', metadata: {}, name: 'ReadRelayQueryDataRelayQL', type: 'Feedback' };})());










    var records = { 
      feedbackID: { 
        __dataID__: 'feedbackID', 
        topLevelComments: { 
          __dataID__: 'commentsID' } }, 


      commentsID: { 
        __dataID__: 'commentsID', 
        __range__: new (require('GraphQLRange'))(), 
        count: 57 } };



    require('GraphQLRange').prototype.retrieveRangeInfoForQuery.mockReturnValue({ 
      requestedEdgeIDs: ['comment_edge_id'], 
      diffCalls: [], 
      pageInfo: (_pageInfo3 = {}, _defineProperty(_pageInfo3, 
      START_CURSOR, 'cursor'), _defineProperty(_pageInfo3, 
      END_CURSOR, 'cursor'), _defineProperty(_pageInfo3, 
      HAS_NEXT_PAGE, true), _defineProperty(_pageInfo3, 
      HAS_PREV_PAGE, false), _pageInfo3) });



    var data = readData(getStoreData({ records: records }), query, 'feedbackID');
    expect(data).toEqual({ 
      __dataID__: 'feedbackID', 
      topLevelComments: _defineProperty({ 
        __dataID__: 'commentsID_first(1)', 
        count: 57 }, 
      PAGE_INFO, _defineProperty({}, 
      HAS_NEXT_PAGE, true)) });});





  it('requires filter calls on connections with range fields', function () {
    var records = { 
      story_id: { 
        __dataID__: 'story_id', 
        feedback: { 
          __dataID__: 'feedback_id' } }, 


      feedback_id: { 
        __dataID__: 'feedback_id', 
        likers: { 
          __dataID__: 'likers_id' } }, 


      likers_id: { 
        __dataID__: 'likers_id', 
        __range__: new (require('GraphQLRange'))(), 
        count: 31337 } };


    var error = 
    'readRelayQueryData(): The field `likers` is a connection. ' + 
    'Fields `edges` and `pageInfo` cannot be fetched without a ' + 
    '`first`, `last` or `find` argument.';

    // Use fragment because all inline violations are caugh at transform time.
    var edgesFragment = (function () {return { children: [{ children: [{ children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true, isRequisite: true }, type: 'Actor' }, { fieldName: 'cursor', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'LikersEdge' }, { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true, isGenerated: true, isRequisite: true }, type: 'PageInfo' }], id: 'Ta/X7JQMmdqq:0', kind: 'Fragment', metadata: {}, name: 'ReadRelayQueryDataRelayQL', type: 'LikersOfContentConnection' };})();








    var query = getNode((function (RQL_0) {return { children: [{ children: [{ children: [].concat.apply([], [require('Relay').QL.__frag(RQL_0)]), fieldName: 'likers', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'LikersOfContentConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'feedback', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Feedback' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'cbifibC2evtz:0', kind: 'Fragment', metadata: {}, name: 'ReadRelayQueryDataRelayQL', type: 'Story' };})(



    edgesFragment));




    expect(
    function () {return readData(getStoreData({ records: records }), query, 'story_id');}).
    toThrowError(error);

    // Note that `pageInfo` also triggers the error...
    var pageInfoFragment = (function () {return { children: [{ children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'PageInfo' }], id: '32bFtPd0H3bP:0', kind: 'Fragment', metadata: {}, name: 'ReadRelayQueryDataRelayQL', type: 'LikersOfContentConnection' };})();






    query = getNode((function (RQL_0) {return { children: [{ children: [{ children: [].concat.apply([], [require('Relay').QL.__frag(RQL_0)]), fieldName: 'likers', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'LikersOfContentConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'feedback', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Feedback' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'bQPVwgXtOTKW:0', kind: 'Fragment', metadata: {}, name: 'ReadRelayQueryDataRelayQL', type: 'Story' };})(



    pageInfoFragment));




    expect(
    function () {return readData(getStoreData({ records: records }), query, 'story_id');}).
    toThrowError(error);

    // ...but not `count`:
    query = getNode((function () {return { children: [{ children: [{ children: [{ fieldName: 'count', kind: 'Field', metadata: {}, type: 'Int' }], fieldName: 'likers', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'LikersOfContentConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'feedback', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Feedback' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: '4rQShgkZVY9q:0', kind: 'Fragment', metadata: {}, name: 'ReadRelayQueryDataRelayQL', type: 'Story' };})());
    expect(
    function () {return readData(getStoreData({ records: records }), query, 'story_id');}).
    not.toThrowError();});


  it('requires filter calls on connections with filtered range fields ', function () {
    var records = { 
      story_id: { 
        __dataID__: 'story_id', 
        feedback: { 
          __dataID__: 'feedback_id' } }, 


      feedback_id: { 
        __dataID__: 'feedback_id', 
        likers: { 
          __dataID__: 'likers_id' } }, 


      likers_id: { 
        __dataID__: 'likers_id', 
        __range__: new (require('GraphQLRange'))(), 
        count: 31337 } };


    var error = 
    'readRelayQueryData(): The field `likers` is a connection. ' + 
    'Fields `edges` and `pageInfo` cannot be fetched without a ' + 
    '`first`, `last` or `find` argument.';

    var fragmentReference = require('RelayFragmentReference').createForContainer(
    function () {return (function () {return { children: [{ children: [{ children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true, isRequisite: true }, type: 'Actor' }, { fieldName: 'cursor', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'LikersEdge' }, { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true, isGenerated: true, isRequisite: true }, type: 'PageInfo' }], id: 'Pg/5B7kyU2iD:0', kind: 'Fragment', metadata: {}, name: 'ReadRelayQueryDataRelayQL', type: 'LikersOfContentConnection' };})();}, 
    {});

    var query = getNode((function (RQL_0) {return { children: [{ children: [{ children: [].concat.apply([], [require('Relay').QL.__frag(RQL_0)]), fieldName: 'likers', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'LikersOfContentConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'feedback', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Feedback' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'QulYrlCs8hVh:0', kind: 'Fragment', metadata: {}, name: 'ReadRelayQueryDataRelayQL', type: 'Story' };})(
    fragmentReference));

    expect(function () {return readData(getStoreData({ records: records }), query, 'story_id');}).
    toThrowError(error);

    var fragment = (function () {return { children: [{ children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'PageInfo' }], id: 'VPD5oyOObr3n:0', kind: 'Fragment', metadata: {}, name: 'ReadRelayQueryDataRelayQL', type: 'LikersOfContentConnection' };})();
    query = getNode((function (RQL_0) {return { children: [{ children: [{ children: [].concat.apply([], [require('Relay').QL.__frag(RQL_0)]), fieldName: 'likers', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'LikersOfContentConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'feedback', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Feedback' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'oyNxpQhlIdXK:0', kind: 'Fragment', metadata: {}, name: 'ReadRelayQueryDataRelayQL', type: 'Story' };})(fragment));
    expect(function () {return readData(getStoreData({ records: records }), query, 'story_id');}).
    toThrowError(error);

    fragment = (function () {return { children: [{ fieldName: 'count', kind: 'Field', metadata: {}, type: 'Int' }], id: 'IxDI1bHQdoG3:0', kind: 'Fragment', metadata: {}, name: 'ReadRelayQueryDataRelayQL', type: 'LikersOfContentConnection' };})();
    query = getNode((function (RQL_0) {return { children: [{ children: [{ children: [].concat.apply([], [require('Relay').QL.__frag(RQL_0)]), fieldName: 'likers', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'LikersOfContentConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'feedback', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Feedback' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'gi03T8M/5p5P:0', kind: 'Fragment', metadata: {}, name: 'ReadRelayQueryDataRelayQL', type: 'Story' };})(fragment));
    expect(function () {return readData(getStoreData({ records: records }), query, 'story_id');}).
    not.toThrowError();});


  it('reads `edge`/`pageInfo` without range info like linked records', function () {
    var records = { 
      feedback_id: { 
        __dataID__: 'feedback_id', 
        likers: { 
          __dataID__: 'likers_id' } }, 


      likers_id: _defineProperty({ 
        __dataID__: 'likers_id', 
        edges: [
        { 
          __dataID__: 'likers_edge_id' }] }, 


      PAGE_INFO, { 
        __dataID__: 'likers_page_info_id' }), 


      likers_edge_id: { 
        __dataID__: 'likers_edge_id', 
        node: { 
          __dataID__: 'liker_id' } }, 


      likers_page_info_id: _defineProperty({ 
        __dataID__: 'likers_page_info_id' }, 
      HAS_NEXT_PAGE, true), 

      liker_id: { 
        __dataID__: 'liker_id', 
        name: 'Tim' } };



    var query = getNode((function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallValue', callValue: '1' } }], children: [{ children: [{ children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true, isRequisite: true }, type: 'Actor' }, { fieldName: 'cursor', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'LikersEdge' }, { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true, isGenerated: true, isRequisite: true }, type: 'PageInfo' }], fieldName: 'likers', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'LikersOfContentConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: '98PaA3SXs9rV:0', kind: 'Fragment', metadata: {}, name: 'ReadRelayQueryDataRelayQL', type: 'Feedback' };})());


    var data = readData(getStoreData({ records: records }), query, 'feedback_id');
    expect(data).toEqual({ 
      __dataID__: 'feedback_id', 
      likers: { 
        __dataID__: 'likers_id_first(1)', 
        edges: [
        { 
          __dataID__: 'likers_edge_id', 
          node: { 
            __dataID__: 'liker_id', 
            name: 'Tim' } }] } });






    query = getNode((function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallValue', callValue: '1' } }], children: [{ children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'PageInfo' }], fieldName: 'likers', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'LikersOfContentConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: '7tHUXjfAinRm:0', kind: 'Fragment', metadata: {}, name: 'ReadRelayQueryDataRelayQL', type: 'Feedback' };})());


    data = readData(getStoreData({ records: records }), query, 'feedback_id');
    expect(data).toEqual({ 
      __dataID__: 'feedback_id', 
      likers: _defineProperty({ 
        __dataID__: 'likers_id_first(1)' }, 
      PAGE_INFO, _defineProperty({ 
        __dataID__: 'likers_page_info_id' }, 
      HAS_NEXT_PAGE, true)) });});





  it('recurses through fragments when retrieving pageInfo', function () {var _pageInfo4, _PAGE_INFO3;
    var records = { 
      feedback_id: { 
        __dataID__: 'feedback_id', 
        comments: { 
          __dataID__: 'comments_id' } }, 


      comments_id: { 
        __dataID__: 'comments_id', 
        __range__: new (require('GraphQLRange'))() } };


    var fragmentReference = require('RelayFragmentReference').createForContainer(
    function () {return (function () {return { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: {}, type: 'Boolean' }], id: 'L/A6Ej7Pct7x:0', kind: 'Fragment', metadata: {}, name: 'ReadRelayQueryDataRelayQL', type: 'PageInfo' };})();}, 
    {});

    var query = getNode((function (RQL_0) {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallValue', callValue: '1' } }], children: [{ children: [].concat.apply([], [{ fieldName: 'startCursor', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'hasNextPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'PageInfo' }], fieldName: 'comments', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'CommentsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'zFoHVSNPiABY:0', kind: 'Fragment', metadata: {}, name: 'ReadRelayQueryDataRelayQL', type: 'Feedback' };})(



    fragmentReference));




    require('GraphQLRange').prototype.retrieveRangeInfoForQuery.mockReturnValue({ 
      requestedEdgeIDs: [], 
      diffCalls: [], 
      pageInfo: (_pageInfo4 = {}, _defineProperty(_pageInfo4, 
      START_CURSOR, 'cursor'), _defineProperty(_pageInfo4, 
      END_CURSOR, 'cursor'), _defineProperty(_pageInfo4, 
      HAS_NEXT_PAGE, true), _defineProperty(_pageInfo4, 
      HAS_PREV_PAGE, false), _pageInfo4) });



    var data = readData(
    getStoreData({ records: records }), 
    query, 
    'feedback_id', 
    { traverseFragmentReferences: true });


    expect(data.comments).toEqual(_defineProperty({ 
      __dataID__: 'comments_id_first(1)' }, 
    PAGE_INFO, (_PAGE_INFO3 = {}, _defineProperty(_PAGE_INFO3, 
    START_CURSOR, 'cursor'), _defineProperty(_PAGE_INFO3, 
    HAS_NEXT_PAGE, true), _PAGE_INFO3)));



    data = readData(getStoreData({ records: records }), query, 'feedback_id');

    var fragmentSourceID = 
    getNode(fragmentReference.getFragment()).getConcreteFragmentID();
    expect(data.comments.pageInfo.__fragments__).toEqual(_defineProperty({}, 
    fragmentSourceID, 'comments_id_first(1)'));});



  it('retrieves data and fragment pointers from range', function () {var _pageInfo5;
    var records = { 
      feedback_id: { 
        __dataID__: 'feedback_id', 
        comments: { 
          __dataID__: 'comments_id' } }, 


      comments_id: { 
        __dataID__: 'comments_id', 
        __range__: new (require('GraphQLRange'))() }, 

      comment_node_id: { 
        __dataID__: 'comment_node_id', 
        id: 'comment_node_id' }, 

      comment_edge_id: { 
        __dataID__: 'comment_edge_id', 
        node: { __dataID__: 'comment_node_id' }, 
        cursor: 'cursor' } };


    var fragmentReference = require('RelayFragmentReference').createForContainer(
    function () {return (function () {return { children: [{ children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'Comment' }, { fieldName: 'cursor', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'CommentsEdge' }, { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true, isGenerated: true, isRequisite: true }, type: 'PageInfo' }], id: '3hNncyAOJo8/:0', kind: 'Fragment', metadata: {}, name: 'ReadRelayQueryDataRelayQL', type: 'CommentsConnection' };})();}, 
    {});

    var query = getNode((function (RQL_0) {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallValue', callValue: '1' } }], children: [].concat.apply([], [{ children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'Comment' }, { fieldName: 'cursor', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'CommentsEdge' }, { children: [{ fieldName: 'startCursor', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'hasNextPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true, isRequisite: true }, type: 'PageInfo' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'comments', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'CommentsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'k3PN1zatF1f0:0', kind: 'Fragment', metadata: {}, name: 'ReadRelayQueryDataRelayQL', type: 'Feedback' };})(









    fragmentReference));



    require('GraphQLRange').prototype.retrieveRangeInfoForQuery.mockReturnValue({ 
      requestedEdgeIDs: ['comment_edge_id'], 
      diffCalls: [], 
      pageInfo: (_pageInfo5 = {}, _defineProperty(_pageInfo5, 
      START_CURSOR, 'cursor'), _defineProperty(_pageInfo5, 
      END_CURSOR, 'cursor'), _defineProperty(_pageInfo5, 
      HAS_NEXT_PAGE, true), _defineProperty(_pageInfo5, 
      HAS_PREV_PAGE, false), _pageInfo5) });



    var data = readData(
    getStoreData({ records: records }), 
    query, 
    'feedback_id', 
    { traverseFragmentReferences: true });


    expect(data.comments).toEqual(_defineProperty({ 
      __dataID__: 'comments_id_first(1)', 
      edges: [{ 
        __dataID__: 'comment_edge_id', 
        node: { 
          __dataID__: 'comment_node_id', 
          id: 'comment_node_id' } }] }, 


    PAGE_INFO, _defineProperty({}, 
    START_CURSOR, 'cursor')));



    data = readData(getStoreData({ records: records }), query, 'feedback_id');

    var fragmentSourceID = 
    getNode(fragmentReference.getFragment()).getConcreteFragmentID();
    expect(data.comments.__fragments__).toEqual(_defineProperty({}, 
    fragmentSourceID, 'comments_id_first(1)'));});



  it('returns RelayFragmentPointers for child queries', function () {
    var records = { 
      user_id: { 
        __dataID__: 'user_id', 
        id: 'user_id', 
        screennames: [
        { __dataID__: 'client1' }, 
        { __dataID__: 'client2' }], 

        hometown: { __dataID__: 'hometown_id' } }, 

      hometown_id: { 
        __dataID__: 'hometown_id', 
        id: 'hometown_id', 
        name: 'hometown name' }, 

      client1: { 
        __dataID__: 'client1', 
        service: 'GTALK', 
        name: '123' }, 

      client2: { 
        __dataID__: 'client1', 
        service: 'TWITTER', 
        name: '123' } };


    var fragmentReference = require('RelayFragmentReference').createForContainer(
    function () {return (function () {return { children: [{ fieldName: 'service', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }], id: 'Hq3nlgG+yOe0:0', kind: 'Fragment', metadata: {}, name: 'ReadRelayQueryDataRelayQL', type: 'Screenname' };})();}, 
    {});

    var query = getNode((function (RQL_0) {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'hometown', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Page' }, { children: [].concat.apply([], [require('Relay').QL.__frag(RQL_0)]), fieldName: 'screennames', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'Screenname' }], id: 'H8hXTFbs8jK3:0', kind: 'Fragment', metadata: {}, name: 'ReadRelayQueryDataRelayQL', type: 'User' };})(






    fragmentReference));




    // Mark top fragment as local, and child fragment as non-local.
    var data = readData(getStoreData({ records: records }), query, 'user_id');

    expect(data.id).toBe('user_id');
    expect(data.hometown.name).toEqual('hometown name');
    expect(data.screennames.length).toBe(2);
    var screennames = data.screennames;
    var fragmentSourceID0 = 
    getNode(fragmentReference.getFragment()).getConcreteFragmentID();
    expect(screennames[0].__fragments__).toEqual(_defineProperty({}, 
    fragmentSourceID0, 'client1'));

    var fragmentSourceID1 = 
    getNode(fragmentReference.getFragment()).getConcreteFragmentID();
    expect(screennames[1].__fragments__).toEqual(_defineProperty({}, 
    fragmentSourceID1, 'client2'));});



  it('reads dataID if a linked dataID is `null` or `undefined`', function () {
    var query = getNode((function () {return { children: [{ children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'actor', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true }, type: 'Actor' }], fieldName: 'viewer', kind: 'Query', metadata: {}, name: 'ReadRelayQueryData', type: 'Viewer' };})());








    var records = { 
      'client:1': { 
        __dataID__: 'client:1', 
        actor: null } };


    var data = readData(getStoreData({ records: records }), query, 'client:1');
    expect(data.actor).toBeNull();

    records = { 
      'client:1': { 
        __dataID__: 'client:1' } };


    data = readData(getStoreData({ records: records }), query, 'client:1');
    expect(data.actor).toBeUndefined();});


  it('does not clobber previously-read sibling fields when a linked dataID is `null` or `undefined`', function () {
    var query = getNode((function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { children: [{ fieldName: 'city', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'address', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'StreetAddress' }], id: '6aEZGUd8gD0r:0', kind: 'Fragment', metadata: {}, name: 'ReadRelayQueryDataRelayQL', type: 'User' };})());







    var records = { 
      user_id: { 
        __dataID__: 'user_id', 
        id: 'user_id', 
        address: null } };


    var data = readData(getStoreData({ records: records }), query, 'user_id');
    expect(data.address).toBeNull();
    expect(data.id).toBe('user_id');

    records = { 
      user_id: { 
        __dataID__: 'user_id', 
        id: 'user_id' } };


    data = readData(getStoreData({ records: records }), query, 'user_id');
    expect(data.address).toBeUndefined();
    expect(data.id).toBe('user_id');});


  it('does not set undefined value if linked dataID missing', function () {
    var query = getNode((function () {return { children: [{ children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'actor', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true }, type: 'Actor' }], fieldName: 'viewer', kind: 'Query', metadata: {}, name: 'ReadRelayQueryData', type: 'Viewer' };})());









    var records = { 
      'client:1': { 
        __dataID__: 'client:1' } };



    var data = readData(getStoreData({ records: records }), query, 'client:1');
    expect(data).toEqual({ __dataID__: 'client:1' });

    // Extra assertion because `toEqual` matcher skips over properties with
    // undefined values...
    expect('actor' in data).toBe(false);});


  it('allocates linked fields even if all child fields are null', function () {
    var query = getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '123' } }], children: [{ children: [{ fieldName: 'year', kind: 'Field', metadata: {}, type: 'Int' }], fieldName: 'birthdate', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Date' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'ReadRelayQueryData', type: 'Node' };})());








    var records = { 
      '123': { 
        __dataID__: '123', 
        birthdate: { 
          __dataID__: 'client:1' } }, 


      'client:1': { 
        __dataID__: 'client:1', 
        year: null } };


    var data = readData(getStoreData({ records: records }), query, '123');

    expect(data.birthdate).not.toBeNull();
    expect(data.birthdate.year).toBeNull();});


  it('reads fields for connections without calls', function () {var _pageInfo6;
    var query = getNode((function () {return { children: [{ children: [{ fieldName: 'count', kind: 'Field', metadata: {}, type: 'Int' }], fieldName: 'friends', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'FriendsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'Baurb+lVtwGd:0', kind: 'Fragment', metadata: {}, name: 'ReadRelayQueryDataRelayQL', type: 'User' };})());






    var records = { 
      'user_id': { 
        __dataID__: 'user_id', 
        friends: { 
          __dataID__: 'client:1' } }, 


      'client:1': { 
        __dataID__: 'client:1', 
        count: 42 } };


    var data = readData(getStoreData({ records: records }), query, 'user_id');
    expect(data.friends.count).toBe(42);

    // Now imagine another query (say, a deferred query) has populated the store
    // with range info for this connection.
    records = { 
      'user_id': { 
        __dataID__: 'user_id', 
        friends: { 
          __dataID__: 'client:1' } }, 


      'client:1': { 
        __dataID__: 'client:1', 
        __range__: new (require('GraphQLRange'))(), 
        count: 42 } };


    require('GraphQLRange').prototype.retrieveRangeInfoForQuery.mockReturnValue({ 
      requestedEdgeIDs: ['edgeID'], 
      diffCalls: [], 
      pageInfo: (_pageInfo6 = {}, _defineProperty(_pageInfo6, 
      START_CURSOR, 'cursor'), _defineProperty(_pageInfo6, 
      END_CURSOR, 'cursor'), _defineProperty(_pageInfo6, 
      HAS_NEXT_PAGE, true), _defineProperty(_pageInfo6, 
      HAS_PREV_PAGE, false), _pageInfo6) });


    data = readData(getStoreData({ records: records }), query, 'user_id');
    expect(data.friends.count).toBe(42);});


  it('handles "empty" ref query dependencies', function () {
    // People normally won't write queries like this by hand, but they can be
    // produced as the result of splitting deferred queries.
    //
    // The `feedback` field here only has a generated `id`, so is "empty".
    var query = getNode((function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { children: [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'feedback', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Feedback' }], id: 'yt5CANNcKdNi:0', kind: 'Fragment', metadata: {}, name: 'ReadRelayQueryDataRelayQL', type: 'Story' };})());






    // Mark the `id` field in `feedback{id}` as a ref query dependency.
    query = query.clone(
    query.getChildren().map(function (outerChild, ii) {
      if (ii === 1) {
        return outerChild.clone(
        outerChild.getChildren().map(function (innerChild, jj) {
          if (jj === 0) {
            return innerChild.cloneAsRefQueryDependency();} else 
          {
            return innerChild;}}));} else 



      {
        return outerChild;}}));




    var records = { 
      storyID: { 
        __dataID__: 'storyID', 
        id: 'storyID', 
        feedback: { 
          __dataID__: 'feedbackID' } }, 


      feedbackID: { 
        __dataID__: 'feedbackID', 
        id: 'feedbackID' } };


    var data = readData(getStoreData({ records: records }), query, 'storyID');
    expect(data).toEqual({ 
      __dataID__: 'storyID', 
      id: 'storyID', 
      feedback: { 
        __dataID__: 'feedbackID' } });});




  it('parses range client IDs', function () {var _pageInfo7;
    var fragmentReference = require('RelayFragmentReference').createForContainer(
    function () {return (function () {return { children: [{ children: [{ children: [{ children: [{ fieldName: 'city', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'country', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'address', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'StreetAddress' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'User' }, { fieldName: 'cursor', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'FriendsEdge' }, { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true, isGenerated: true, isRequisite: true }, type: 'PageInfo' }], id: 'cR7KEDOUK6wc:0', kind: 'Fragment', metadata: {}, name: 'ReadRelayQueryDataRelayQL', type: 'FriendsConnection' };})();}, 











    {});

    var query = getNode((function (RQL_0) {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallValue', callValue: '25' } }], children: [].concat.apply([], [require('Relay').QL.__frag(RQL_0)]), fieldName: 'friends', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'FriendsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'MVUe/Tj0Tuva:0', kind: 'Fragment', metadata: {}, name: 'ReadRelayQueryDataRelayQL', type: 'User' };})(


    fragmentReference));




    var records = { 
      userID: { 
        __dataID__: 'userID', 
        friends: { 
          __dataID__: 'friendsID' } }, 


      friendsID: { 
        __dataID__: 'friendsID', 
        __range__: new (require('GraphQLRange'))() }, 

      edgeID: { 
        __dataID__: 'edgeID', 
        node: { 
          __dataID__: 'friendID' }, 

        cursor: 'cursor' }, 

      friendID: { 
        __dataID__: 'friendID', 
        address: { 
          __dataID__: 'addressID' } }, 


      addressID: { 
        __dataID__: 'addressID', 
        city: 'Menlo Park', 
        country: 'USA' } };


    var storeData = getStoreData({ records: records });

    require('GraphQLRange').prototype.retrieveRangeInfoForQuery.mockReturnValue({ 
      requestedEdgeIDs: ['edgeID'], 
      diffCalls: [], 
      pageInfo: (_pageInfo7 = {}, _defineProperty(_pageInfo7, 
      START_CURSOR, 'cursor'), _defineProperty(_pageInfo7, 
      END_CURSOR, 'cursor'), _defineProperty(_pageInfo7, 
      HAS_NEXT_PAGE, false), _defineProperty(_pageInfo7, 
      HAS_PREV_PAGE, false), _pageInfo7) });



    // First we read the outer fragment, which populates the
    // GraphQLStoreRangeUtils rangeData cache.
    // (TODO: task to fix that hidden global state: #7250441)
    var data = readData(storeData, query, 'userID');
    var fragmentSourceID = 
    getNode(fragmentReference.getFragment()).getConcreteFragmentID();
    expect(data).toEqual({ 
      __dataID__: 'userID', 
      friends: { 
        __dataID__: 'friendsID_first(25)', 
        __fragments__: _defineProperty({}, 
        fragmentSourceID, 'friendsID_first(25)') } });




    // Now we read the inner (non-local) fragment, using the range client ID.
    data = readData(
    storeData, 
    getNode(fragmentReference.getFragment()), 
    'friendsID_first(25)');

    expect(data).toEqual({ 
      __dataID__: 'friendsID_first(25)', 
      edges: [
      { 
        __dataID__: 'edgeID', 
        node: { 
          __dataID__: 'friendID', 
          address: { 
            __dataID__: 'addressID', 
            city: 'Menlo Park', 
            country: 'USA' } } }] });});







  it('can be configured to read generated fields (scalar case)', function () {
    var records = { 
      'client:1': { 
        __dataID__: 'client:1', 
        actor: { 
          __dataID__: '660361306' } }, 


      660361306: { 
        __dataID__: '660361306', 
        __typename: 'User', 
        firstName: 'Greg', 
        id: '660361306' } };


    var query = getNode((function () {return { children: [{ children: [{ fieldName: 'firstName', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'actor', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true }, type: 'Actor' }], fieldName: 'viewer', kind: 'Query', metadata: {}, name: 'ReadRelayQueryData', type: 'Viewer' };})());
    var data = readData(
    getStoreData({ records: records }), 
    query, 
    'client:1', 
    { traverseGeneratedFields: true });

    expect(data).toEqual({ 
      __dataID__: 'client:1', 
      actor: { 
        __dataID__: '660361306', 
        __typename: 'User', 
        firstName: 'Greg', 
        id: '660361306' } });});




  it('can be configured to read generated fields (page info case)', function () {var _pageInfo8, _PAGE_INFO5;
    var query = getNode((function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallValue', callValue: '1' } }], children: [{ children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'PageInfo' }], fieldName: 'topLevelComments', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'TopLevelCommentsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'b+wry43xlpBO:0', kind: 'Fragment', metadata: {}, name: 'ReadRelayQueryDataRelayQL', type: 'Feedback' };})());









    var records = { 
      feedbackID: { 
        __dataID__: 'feedbackID', 
        topLevelComments: { 
          __dataID__: 'commentsID' } }, 


      commentsID: { 
        __dataID__: 'commentsID', 
        __range__: new (require('GraphQLRange'))(), 
        count: 57 } };



    require('GraphQLRange').prototype.retrieveRangeInfoForQuery.mockReturnValue({ 
      requestedEdgeIDs: ['comment_edge_id'], 
      diffCalls: [], 
      pageInfo: (_pageInfo8 = {}, _defineProperty(_pageInfo8, 
      START_CURSOR, 'cursor'), _defineProperty(_pageInfo8, 
      END_CURSOR, 'cursor'), _defineProperty(_pageInfo8, 
      HAS_NEXT_PAGE, true), _defineProperty(_pageInfo8, 
      HAS_PREV_PAGE, false), _pageInfo8) });



    var data = readData(
    getStoreData({ records: records }), 
    query, 
    'feedbackID', 
    { traverseGeneratedFields: true });

    expect(data).toEqual({ 
      __dataID__: 'feedbackID', 
      topLevelComments: _defineProperty({ 
        __dataID__: 'commentsID_first(1)' }, 
      PAGE_INFO, (_PAGE_INFO5 = {}, _defineProperty(_PAGE_INFO5, 
      HAS_NEXT_PAGE, true), _defineProperty(_PAGE_INFO5, 
      HAS_PREV_PAGE, false), _PAGE_INFO5)) });});





  it('does not attempt to traverse missing data IDs', function () {
    var records = {};

    // If we did traverse, this fragment reference would lead us to create an
    // object with a __dataID__ instead of the desired `undefined`.
    var fragmentReference = require('RelayFragmentReference').createForContainer(
    function () {return (function () {return { children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'eM02RUvWMZBA:0', kind: 'Fragment', metadata: {}, name: 'ReadRelayQueryDataRelayQL', type: 'User' };})();}, 
    {});

    var query = getNode((function (RQL_0) {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '4' } }], children: [].concat.apply([], [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'ReadRelayQueryData', type: 'Node' };})(fragmentReference));
    var data = readData(getStoreData({ records: records }), query, '4');
    expect(data).toBe(undefined);});


  it('does not attempt to traverse non-existent data IDs', function () {
    var records = { 4: null };

    // If we did traverse, this fragment reference would lead us to create an
    // object with a __dataID__ instead of the desired `null`.
    var fragmentReference = require('RelayFragmentReference').createForContainer(
    function () {return (function () {return { children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'a/idycnO9bFj:0', kind: 'Fragment', metadata: {}, name: 'ReadRelayQueryDataRelayQL', type: 'User' };})();}, 
    {});

    var query = getNode((function (RQL_0) {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '4' } }], children: [].concat.apply([], [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'ReadRelayQueryData', type: 'Node' };})(fragmentReference));
    var data = readData(getStoreData({ records: records }), query, '4');
    expect(data).toBe(null);});


  it('reads data for matching fragments', function () {
    var records = { 
      123: { 
        __dataID__: '123', 
        id: '123', 
        __typename: 'User' } };


    var query = getNode((function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }], id: 'mSw/ENaUpzFl:0', kind: 'Fragment', metadata: {}, name: 'ReadRelayQueryDataRelayQL', type: 'User' };})());
    var data = readData(getStoreData({ records: records }), query, '123');
    expect(data).toEqual({ 
      __dataID__: '123', 
      id: '123' });});



  it('returns undefined for non-matching fragments', function () {
    var records = { 
      123: { 
        __dataID__: '123', 
        id: '123', 
        __typename: 'User' } };


    var query = getNode((function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }], id: 'DqbsdEhbJIkF:0', kind: 'Fragment', metadata: {}, name: 'ReadRelayQueryDataRelayQL', type: 'Page' };})());
    var data = readData(getStoreData({ records: records }), query, '123');
    expect(data).toEqual(undefined);});


  it('skips non-matching child fragments', function () {
    var records = { 
      123: { 
        __dataID__: '123', 
        id: '123', 
        __typename: 'User', 
        name: 'Greg' } };


    var query = getNode((function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, { children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'V4hYPy6tjas9:0', kind: 'Fragment', metadata: {}, name: 'User', type: 'User' }, { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }], id: 'V4hYPy6tjas9:1', kind: 'Fragment', metadata: {}, name: 'Page', type: 'Page' }], id: 'V4hYPy6tjas9:2', kind: 'Fragment', metadata: { isAbstract: true }, name: 'ReadRelayQueryDataRelayQL', type: 'Actor' };})());







    var data = readData(getStoreData({ records: records }), query, '123');
    expect(data).toEqual({ 
      __dataID__: '123', 
      name: 'Greg' });});



  // TODO: Fix these tests, #10252182.

  // describe('readRelayQueryData-partialStatus', () => {
  //   it('marks nodes with missing scalar field as partial', () => {
  //     const records = {
  //       feedbackID: {
  //         __dataID__: 'feedbackID',
  //         id: 'feedbackID',
  //       },
  //     };
  //     // Missing `doesViewerLike` in store
  //     const query = getNode(Relay.QL`
  //       fragment on Feedback {
  //         id,
  //         doesViewerLike,
  //       }
  //     `);

  //     const data = readData(getStoreData({records}), query, 'feedbackID');
  //     expect(RelayRecordStatusMap.isPartialStatus(data.__status__))
  //       .toBe(true);
  //   });

  //   it('marks nested nodes with missing field as partial', () => {
  //     const records = {
  //       feedbackID: {
  //         __dataID__: 'feedbackID',
  //         id: 'feedbackID',
  //         comments: {__dataID__: 'client:1'},
  //       },
  //       'client:1': {
  //         __dataID__:'client:1',
  //       },
  //     };
  //     // Missing `comments {count}` in store
  //     const query = getNode(Relay.QL`
  //       fragment on Feedback {
  //         id,
  //         comments {count}
  //       }
  //     `);

  //     const data = readData(getStoreData({records}), query, 'feedbackID');
  //     expect(RelayRecordStatusMap.isPartialStatus(data.__status__))
  //       .toBe(true);
  //     expect(RelayRecordStatusMap.isPartialStatus(data.comments.__status__))
  //       .toBe(true);
  //   });

  //   it('marks nodes with missing linked nodes as partial', () => {
  //     const records = {
  //       'client:1': {
  //         __dataID__: 'client:1',
  //         actor: {
  //           __dataID__: '660361306',
  //         },
  //       },
  //     };
  //     // Missing the actor node.
  //     const query = getNode(Relay.QL`query{viewer{actor{firstName}}}`);
  //     const data = readData(getStoreData({records}), query, 'client:1');
  //     expect(RelayRecordStatusMap.isPartialStatus(data.__status__))
  //       .toBe(true);
  //   });

  //   it('marks nodes with missing plural linked nodes as partial', () => {
  //     const records = {
  //       '660361306': {
  //         __dataID__: '660361306',
  //         allPhones: [{__dataID__: 'client:1'}, {__dataID__: 'client:1'}],
  //       },
  //       'client:1': {
  //         __dataID__: 'client:1',
  //       },
  //       'client:2': {
  //         __dataID__: 'client:2',
  //         isVerified: true,
  //       },
  //     };
  //     // Missing the `isVerified` in the first element.
  //     const query = getNode(Relay.QL`
  //       fragment on User {
  //         allPhones {
  //           isVerified,
  //         },
  //       }
  //     `);
  //     const data = readData(getStoreData({records}), query, '660361306');
  //     expect(RelayRecordStatusMap.isPartialStatus(data.__status__))
  //       .toBe(true);
  //     const firstPhone = data.allPhones[0];
  //     expect(RelayRecordStatusMap.isPartialStatus(firstPhone.__status__))
  //       .toBe(true);
  //   });

  //   it('marks nodes with missing edges as partial', () => {
  //     const records = {
  //       feedback_id: {
  //         __dataID__: 'feedback_id',
  //         comments: {
  //           __dataID__: 'comments_id',
  //         },
  //       },
  //       comments_id: {
  //         __dataID__: 'comments_id',
  //         __range__: new GraphQLRange(),
  //       },
  //       comment_node_id: {
  //         __dataID__: 'comment_node_id',
  //         id: 'comment_node_id',
  //       },
  //       comment_edge_id: {
  //         __dataID__: 'comment_edge_id',
  //         node: {__dataID__: 'comment_node_id'},
  //         cursor: 'cursor',
  //       },
  //     };
  //     const query = getNode(Relay.QL`
  //       fragment on Feedback {
  //         comments(first:"5") {
  //           edges {
  //             node {
  //               id
  //             },
  //           },
  //           pageInfo {
  //             startCursor
  //           },
  //         },
  //       },
  //     `);

  //     // Missing edges due to non-empty diffCalls.
  //     GraphQLRange.prototype.retrieveRangeInfoForQuery.mockReturnValue({
  //       requestedEdgeIDs: ['comment_edge_id'],
  //       diffCalls: [RelayTestUtils.createCall('first', 4)],
  //       pageInfo: {
  //         [START_CURSOR]: 'cursor',
  //         [END_CURSOR]: 'cursor',
  //         [HAS_NEXT_PAGE]: true,
  //         [HAS_PREV_PAGE]: false,
  //       },
  //     });

  //     const data = readData(
  //       getStoreData({records}),
  //       query,
  //       'feedback_id',
  //       {traverseFragmentReferences: true}
  //     );
  //     expect(RelayRecordStatusMap.isPartialStatus(data.__status__))
  //       .toBe(true);
  //     const comments = data[comments];
  //     expect(RelayRecordStatusMap.isPartialStatus(comments.__status__))
  //       .toBe(true);
  //   });

  //   it('marks nodes with missing edge data as partial', () => {
  //     const records = {
  //       feedback_id: {
  //         __dataID__: 'feedback_id',
  //         comments: {
  //           __dataID__: 'comments_id',
  //         },
  //       },
  //       comments_id: {
  //         __dataID__: 'comments_id',
  //         __range__: new GraphQLRange(),
  //       },
  //       comment_node_id: {
  //         __dataID__: 'comment_node_id',
  //         id: 'comment_node_id',
  //       },
  //       comment_edge_id: {
  //         __dataID__: 'comment_edge_id',
  //         node: {__dataID__: 'comment_node_id'},
  //         cursor: 'cursor',
  //       },
  //     };
  //     // Missing `body{text}` on the comment
  //     const query = getNode(Relay.QL`
  //       fragment on Feedback {
  //         comments(first:"1") {
  //           edges {
  //             node {
  //               id,
  //               body {text}
  //             },
  //           },
  //           pageInfo {
  //             startCursor
  //           }
  //         }
  //       }
  //     `);

  //     GraphQLRange.prototype.retrieveRangeInfoForQuery.mockReturnValue({
  //       requestedEdgeIDs: ['comment_edge_id'],
  //       diffCalls: [],
  //       pageInfo: {
  //         [START_CURSOR]: 'cursor',
  //         [END_CURSOR]: 'cursor',
  //         [HAS_NEXT_PAGE]: true,
  //         [HAS_PREV_PAGE]: false,
  //       },
  //     });

  //     const data = readData(
  //       getStoreData({records}),
  //       query,
  //       'feedback_id',
  //       {traverseFragmentReferences: true}
  //     );
  //     expect(RelayRecordStatusMap.isPartialStatus(data.__status__))
  //       .toBe(true);
  //     const comments = data[comments];
  //     expect(RelayRecordStatusMap.isPartialStatus(comments.__status__))
  //       .toBe(true);
  //     const comment = comments.edges[0].node;
  //     expect(RelayRecordStatusMap.isPartialStatus(comment.__status__))
  //       .toBe(true);
  //   });
  // });
});
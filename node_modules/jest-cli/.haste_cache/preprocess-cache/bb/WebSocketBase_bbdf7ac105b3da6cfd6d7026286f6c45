'use strict';














var CONNECTING=0;
var OPEN=1;
var CLOSING=2;
var CLOSED=3;var 




WebSocketBase=function(_EventTarget){babelHelpers.inherits(WebSocketBase,_EventTarget);

















function WebSocketBase(url,protocols,options){babelHelpers.classCallCheck(this,WebSocketBase);var _this=babelHelpers.possibleConstructorReturn(this,Object.getPrototypeOf(WebSocketBase).call(this));

_this.CONNECTING=CONNECTING;
_this.OPEN=OPEN;
_this.CLOSING=CLOSING;
_this.CLOSED=CLOSED;

if(typeof protocols==='string'){
protocols=[protocols];}


if(!Array.isArray(protocols)){
protocols=null;}


_this.readyState=_this.CONNECTING;
_this.connectToSocketImpl(url,protocols,options);return _this;}babelHelpers.createClass(WebSocketBase,[{key:'close',value:function close()


{
if(this.readyState===this.CLOSING||
this.readyState===this.CLOSED){
return;}


if(this.readyState===this.CONNECTING){
this.cancelConnectionImpl();}


this.readyState=this.CLOSING;
this.closeConnectionImpl();}},{key:'send',value:function send(


data){
if(this.readyState===this.CONNECTING){
throw new Error('INVALID_STATE_ERR');}


if(typeof data==='string'){
this.sendStringImpl(data);}else 
if(data instanceof ArrayBuffer){
this.sendArrayBufferImpl(data);}else 
{
throw new Error('Not supported data type');}}},{key:'closeConnectionImpl',value:function closeConnectionImpl()



{
throw new Error('Subclass must define closeConnectionImpl method');}},{key:'connectToSocketImpl',value:function connectToSocketImpl(


url,protocols,options){
throw new Error('Subclass must define connectToSocketImpl method');}},{key:'cancelConnectionImpl',value:function cancelConnectionImpl()


{
throw new Error('Subclass must define cancelConnectionImpl method');}},{key:'sendStringImpl',value:function sendStringImpl(


message){
throw new Error('Subclass must define sendStringImpl method');}},{key:'sendArrayBufferImpl',value:function sendArrayBufferImpl()


{
throw new Error('Subclass must define sendArrayBufferImpl method');}}]);return WebSocketBase;}(require('event-target-shim'));



WebSocketBase.CONNECTING=CONNECTING;
WebSocketBase.OPEN=OPEN;
WebSocketBase.CLOSING=CLOSING;
WebSocketBase.CLOSED=CLOSED;

module.exports=WebSocketBase;
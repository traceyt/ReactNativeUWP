'use strict';var _RelayConnectionInter=require('RelayConnectionInterface');var 























































CLIENT_MUTATION_ID=_RelayConnectionInter.CLIENT_MUTATION_ID;

var transactionIDCounter=0;var 








RelayMutationQueue=function(){






function RelayMutationQueue(storeData){babelHelpers.classCallCheck(this,RelayMutationQueue);
this.$RelayMutationQueue_collisionQueueMap={};
this.$RelayMutationQueue_pendingTransactionMap={};
this.$RelayMutationQueue_queue=[];
this.$RelayMutationQueue_storeData=storeData;
this.$RelayMutationQueue_willBatchRefreshQueuedData=false;}babelHelpers.createClass(RelayMutationQueue,[{key:'createTransaction',value:function createTransaction(



mutation,
callbacks)
{
var id=require('base62')(transactionIDCounter++);
var mutationTransaction=new (require('RelayMutationTransaction'))(this,id);
var transaction=new PendingTransaction({
id:id,
mutation:mutation,
mutationTransaction:mutationTransaction,
onFailure:callbacks&&callbacks.onFailure,
onSuccess:callbacks&&callbacks.onSuccess});

this.$RelayMutationQueue_pendingTransactionMap[id]=transaction;
this.$RelayMutationQueue_queue.push(transaction);
this.$RelayMutationQueue_handleOptimisticUpdate(transaction);

return mutationTransaction;}},{key:'getTransaction',value:function getTransaction(


id){
return this.$RelayMutationQueue_get(id).mutationTransaction;}},{key:'getError',value:function getError(


id){
return this.$RelayMutationQueue_get(id).error;}},{key:'getStatus',value:function getStatus(



id)
{
return this.$RelayMutationQueue_get(id).status;}},{key:'commit',value:function commit(


id){
var transaction=this.$RelayMutationQueue_get(id);
var collisionKey=transaction.getCollisionKey();
var collisionQueue=
collisionKey&&this.$RelayMutationQueue_collisionQueueMap[collisionKey];
if(collisionQueue){
collisionQueue.push(transaction);
transaction.status=require('RelayMutationTransactionStatus').COMMIT_QUEUED;
transaction.error=null;
return;}

if(collisionKey){
this.$RelayMutationQueue_collisionQueueMap[collisionKey]=[transaction];}

this.$RelayMutationQueue_handleCommit(transaction);}},{key:'rollback',value:function rollback(


id){
var transaction=this.$RelayMutationQueue_get(id);
var collisionKey=transaction.getCollisionKey();
if(collisionKey){
var collisionQueue=this.$RelayMutationQueue_collisionQueueMap[collisionKey];
if(collisionQueue){
var index=collisionQueue.indexOf(transaction);
if(index!==-1){
collisionQueue.splice(index,1);}

if(collisionQueue.length===0){
delete this.$RelayMutationQueue_collisionQueueMap[collisionKey];}}}



this.$RelayMutationQueue_handleRollback(transaction);}},{key:'$RelayMutationQueue_get',value:function $RelayMutationQueue_get(


id){
var transaction=this.$RelayMutationQueue_pendingTransactionMap[id];
!
transaction?require('invariant')(0,
'RelayMutationQueue: `%s` is not a valid pending transaction ID.',
id):undefined;

return transaction;}},{key:'$RelayMutationQueue_handleOptimisticUpdate',value:function $RelayMutationQueue_handleOptimisticUpdate(


transaction){
var optimisticResponse=transaction.getOptimisticResponse();
var optimisticQuery=transaction.getOptimisticQuery(this.$RelayMutationQueue_storeData);
if(optimisticResponse&&optimisticQuery){
var configs=
transaction.getOptimisticConfigs()||transaction.getConfigs();
this.$RelayMutationQueue_storeData.handleUpdatePayload(
optimisticQuery,
optimisticResponse,
{
configs:configs,
isOptimisticUpdate:true});}}},{key:'$RelayMutationQueue_handleCommitFailure',value:function $RelayMutationQueue_handleCommitFailure(






transaction,
error)
{
var status=error?
require('RelayMutationTransactionStatus').COMMIT_FAILED:
require('RelayMutationTransactionStatus').COLLISION_COMMIT_FAILED;
transaction.status=status;
transaction.error=error;

var shouldRollback=true;
var onFailure=transaction.onFailure;
if(onFailure){
var preventAutoRollback=function(){shouldRollback=false;};
require('ErrorUtils').applyWithGuard(
onFailure,
null,
[transaction.mutationTransaction,preventAutoRollback],
null,
'RelayMutationTransaction:onCommitFailure');}



if(error){
this.$RelayMutationQueue_failCollisionQueue(transaction);}



if(
shouldRollback&&
this.$RelayMutationQueue_pendingTransactionMap.hasOwnProperty(transaction.id))
{
this.$RelayMutationQueue_handleRollback(transaction);}

this.$RelayMutationQueue_batchRefreshQueuedData();}},{key:'$RelayMutationQueue_handleCommitSuccess',value:function $RelayMutationQueue_handleCommitSuccess(



transaction,
response)
{
this.$RelayMutationQueue_advanceCollisionQueue(transaction);
this.$RelayMutationQueue_clearPendingTransaction(transaction);

this.$RelayMutationQueue_refreshQueuedData();
this.$RelayMutationQueue_storeData.handleUpdatePayload(
transaction.getQuery(this.$RelayMutationQueue_storeData),
response[transaction.getCallName()],
{
configs:transaction.getConfigs(),
isOptimisticUpdate:false});



var onSuccess=transaction.onSuccess;
if(onSuccess){
require('ErrorUtils').applyWithGuard(
onSuccess,
null,
[response],
null,
'RelayMutationTransaction:onCommitSuccess');}}},{key:'$RelayMutationQueue_handleCommit',value:function $RelayMutationQueue_handleCommit(




transaction){var _this=this;
transaction.status=require('RelayMutationTransactionStatus').COMMITTING;
transaction.error=null;

var request=new (require('RelayMutationRequest'))(
transaction.getQuery(this.$RelayMutationQueue_storeData),
transaction.getFiles());

this.$RelayMutationQueue_storeData.getNetworkLayer().sendMutation(request);

request.getPromise().done(
function(result){return _this.$RelayMutationQueue_handleCommitSuccess(transaction,result.response);},
function(error){return _this.$RelayMutationQueue_handleCommitFailure(transaction,error);});}},{key:'$RelayMutationQueue_handleRollback',value:function $RelayMutationQueue_handleRollback(



transaction){
this.$RelayMutationQueue_clearPendingTransaction(transaction);
this.$RelayMutationQueue_batchRefreshQueuedData();}},{key:'$RelayMutationQueue_clearPendingTransaction',value:function $RelayMutationQueue_clearPendingTransaction(


transaction){
delete this.$RelayMutationQueue_pendingTransactionMap[transaction.id];
this.$RelayMutationQueue_queue=this.$RelayMutationQueue_queue.filter(function(tx){return tx!==transaction;});}},{key:'$RelayMutationQueue_advanceCollisionQueue',value:function $RelayMutationQueue_advanceCollisionQueue(


transaction){
var collisionKey=transaction.getCollisionKey();
if(collisionKey){
var collisionQueue=require('nullthrows')(this.$RelayMutationQueue_collisionQueueMap[collisionKey]);

collisionQueue.shift();

if(collisionQueue.length){
this.$RelayMutationQueue_handleCommit(collisionQueue[0]);}else 
{
delete this.$RelayMutationQueue_collisionQueueMap[collisionKey];}}}},{key:'$RelayMutationQueue_failCollisionQueue',value:function $RelayMutationQueue_failCollisionQueue(




transaction){var _this2=this;
var collisionKey=transaction.getCollisionKey();
if(collisionKey){
var collisionQueue=require('nullthrows')(this.$RelayMutationQueue_collisionQueueMap[collisionKey]);

collisionQueue.shift();
collisionQueue.forEach(
function(queuedTransaction){return _this2.$RelayMutationQueue_handleCommitFailure(queuedTransaction,null);});

delete this.$RelayMutationQueue_collisionQueueMap[collisionKey];}}},{key:'$RelayMutationQueue_batchRefreshQueuedData',value:function $RelayMutationQueue_batchRefreshQueuedData()



{var _this3=this;
if(!this.$RelayMutationQueue_willBatchRefreshQueuedData){
this.$RelayMutationQueue_willBatchRefreshQueuedData=true;
require('resolveImmediate')(function(){
_this3.$RelayMutationQueue_willBatchRefreshQueuedData=false;
_this3.$RelayMutationQueue_refreshQueuedData();});}}},{key:'$RelayMutationQueue_refreshQueuedData',value:function $RelayMutationQueue_refreshQueuedData()




{var _this4=this;
this.$RelayMutationQueue_storeData.clearQueuedData();
this.$RelayMutationQueue_queue.forEach(
function(transaction){return _this4.$RelayMutationQueue_handleOptimisticUpdate(transaction);});}}]);return RelayMutationQueue;}();var 







PendingTransaction=function(){
























function PendingTransaction(
transactionData)
{babelHelpers.classCallCheck(this,PendingTransaction);
this.error=null;
this.id=transactionData.id;
this.mutation=transactionData.mutation;
this.mutationTransaction=transactionData.mutationTransaction;
this.onFailure=transactionData.onFailure;
this.onSuccess=transactionData.onSuccess;
this.status=require('RelayMutationTransactionStatus').UNCOMMITTED;}babelHelpers.createClass(PendingTransaction,[{key:'getCallName',value:function getCallName()


{
if(!this.$PendingTransaction_callName){
this.$PendingTransaction_callName=this.getMutationNode().calls[0].name;}

return this.$PendingTransaction_callName;}},{key:'getCollisionKey',value:function getCollisionKey()


{
if(this.$PendingTransaction_collisionKey===undefined){
this.$PendingTransaction_collisionKey=this.mutation.getCollisionKey()||null;}

return this.$PendingTransaction_collisionKey;}},{key:'getConfigs',value:function getConfigs()


{
if(!this.$PendingTransaction_configs){
this.$PendingTransaction_configs=this.mutation.getConfigs();}

return this.$PendingTransaction_configs;}},{key:'getFatQuery',value:function getFatQuery()


{
if(!this.$PendingTransaction_fatQuery){
var fragment=require('fromGraphQL').Fragment(this.mutation.getFatQuery());
!(
fragment instanceof require('RelayQuery').Fragment)?require('invariant')(0,
'RelayMutationQueue: Expected `getFatQuery` to return a GraphQL '+
'Fragment'):undefined;

this.$PendingTransaction_fatQuery=require('nullthrows')(require('flattenRelayQuery')(
fragment,
{












preserveEmptyNodes:true,
shouldRemoveFragments:true}));}



return this.$PendingTransaction_fatQuery;}},{key:'getFiles',value:function getFiles()


{
if(this.$PendingTransaction_files===undefined){
this.$PendingTransaction_files=this.mutation.getFiles()||null;}

return this.$PendingTransaction_files;}},{key:'getInputVariable',value:function getInputVariable()


{
if(!this.$PendingTransaction_inputVariable){
var inputVariable=babelHelpers.extends({},
this.mutation.getVariables(),babelHelpers.defineProperty({},
CLIENT_MUTATION_ID,this.id));

this.$PendingTransaction_inputVariable=inputVariable;}

return this.$PendingTransaction_inputVariable;}},{key:'getMutationNode',value:function getMutationNode()


{
if(!this.$PendingTransaction_mutationNode){
var mutationNode=require('QueryBuilder').getMutation(this.mutation.getMutation());
!
mutationNode?require('invariant')(0,
'RelayMutation: Expected `getMutation` to return a mutation created '+
'with Relay.QL`mutation { ... }`.'):undefined;

this.$PendingTransaction_mutationNode=mutationNode;}

return this.$PendingTransaction_mutationNode;}},{key:'getOptimisticConfigs',value:function getOptimisticConfigs()


{
if(this.$PendingTransaction_optimisticConfigs===undefined){
this.$PendingTransaction_optimisticConfigs=this.mutation.getOptimisticConfigs()||null;}

return this.$PendingTransaction_optimisticConfigs;}},{key:'getOptimisticQuery',value:function getOptimisticQuery(


storeData){
if(this.$PendingTransaction_optimisticQuery===undefined){
var optimisticResponse=this.getOptimisticResponse();
if(optimisticResponse){
var optimisticConfigs=this.getOptimisticConfigs();
if(optimisticConfigs){
this.$PendingTransaction_optimisticQuery=require('RelayMutationQuery').buildQuery({
configs:optimisticConfigs,
fatQuery:this.getFatQuery(),
input:this.getInputVariable(),
mutationName:this.mutation.constructor.name,
mutation:this.getMutationNode(),
tracker:storeData.getQueryTracker()});}else 

{
this.$PendingTransaction_optimisticQuery=
require('RelayMutationQuery').buildQueryForOptimisticUpdate({
response:optimisticResponse,
fatQuery:this.getFatQuery(),
mutation:this.getMutationNode(),
tracker:storeData.getQueryTracker()});}}else 


{
this.$PendingTransaction_optimisticQuery=null;}}


return this.$PendingTransaction_optimisticQuery;}},{key:'getOptimisticResponse',value:function getOptimisticResponse()


{
if(this.$PendingTransaction_optimisticResponse===undefined){
var optimisticResponse=this.mutation.getOptimisticResponse()||null;
if(optimisticResponse){
optimisticResponse[CLIENT_MUTATION_ID]=this.id;}

this.$PendingTransaction_optimisticResponse=optimisticResponse;}

return this.$PendingTransaction_optimisticResponse;}},{key:'getQuery',value:function getQuery(


storeData){
if(!this.$PendingTransaction_query){
this.$PendingTransaction_query=require('RelayMutationQuery').buildQuery({
configs:this.getConfigs(),
fatQuery:this.getFatQuery(),
input:this.getInputVariable(),
mutationName:this.getMutationNode().name,
mutation:this.getMutationNode(),
tracker:storeData.getQueryTracker()});}


return this.$PendingTransaction_query;}}]);return PendingTransaction;}();



module.exports=RelayMutationQueue;
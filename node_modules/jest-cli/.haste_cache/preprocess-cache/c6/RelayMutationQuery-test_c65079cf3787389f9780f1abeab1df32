'use strict';












require('configureForRelayOSS');

jest.dontMock('RelayMutationQuery');














describe('RelayMutationQuery',function(){var _RelayTestUtils=require('RelayTestUtils');var 
filterGeneratedFields=_RelayTestUtils.filterGeneratedFields;var getNode=_RelayTestUtils.getNode;

function getNodeChildren(fragment){
return require('fromGraphQL').Fragment(fragment).getChildren();}

function getNodeWithoutSource(){var _RelayTestUtils2;
var filterCallback=require('RelayConnectionInterface').EDGES_HAVE_SOURCE_FIELD?
function(){return true;}:
function(node){return !node.getSchemaName||node.getSchemaName()!=='source';};
return require('filterRelayQuery')((_RelayTestUtils2=require('RelayTestUtils')).getNode.apply(_RelayTestUtils2,arguments),filterCallback);}


var tracker=undefined;

beforeEach(function(){
jest.resetModuleRegistry();

tracker=new (require('RelayQueryTracker'))();

jasmine.addMatchers(require('RelayTestUtils').matchers);});


describe('fields',function(){
it('throws for invalid field names',function(){
var fatQuery=require('fromGraphQL').Fragment(function(){return {children:[{children:[{fieldName:'subscribers',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'SubscribersConnection'},{fieldName:'subscribeStatus',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'subscribee',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true},type:'Actor'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'RelayMutationQueryRelayQL',type:'ActorSubscribeResponsePayload'};}());







expect(function(){
require('RelayMutationQuery').buildFragmentForFields({
fatQuery:fatQuery,
tracker:tracker,
fieldIDs:{
unsubscribee:'4'}});}).


toFailInvariant(
'RelayMutationQuery: Invalid field name on fat query, `unsubscribee`.');});



it('maps a field to a single ID',function(){
var fatQuery=require('fromGraphQL').Fragment(function(){return {children:[{children:[{fieldName:'doesViewerLike',kind:'Field',metadata:{},type:'Boolean'},{fieldName:'likers',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'LikersOfContentConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'RelayMutationQueryRelayQL',type:'FeedbackLikeResponsePayload'};}());







tracker.getTrackedChildrenForID.mockReturnValue(getNodeChildren(function(){return {children:[{fieldName:'likers',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'LikersOfContentConnection'},{fieldName:'url',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'RelayMutationQueryRelayQL',type:'Feedback'};}()));





var node=require('RelayMutationQuery').buildFragmentForFields({
fatQuery:fatQuery,
tracker:tracker,
fieldIDs:{
feedback:'123'}});


var expected=getNodeWithoutSource(function(){return {children:[{children:[{fieldName:'likers',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'LikersOfContentConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'RelayMutationQueryRelayQL',type:'FeedbackLikeResponsePayload'};}());






expect(node).
toEqualQueryNode(expected);
expect(tracker.getTrackedChildrenForID.mock.calls).toEqual([
['123']]);});



it('maps a plural field to an array of IDs',function(){
var fatQuery=require('fromGraphQL').Fragment(function(){return {children:[{children:[{fieldName:'seenState',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'stories',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isPlural:true},type:'Story'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'RelayMutationQueryRelayQL',type:'ViewerNotificationsUpdateAllSeenStateResponsePayload'};}());






tracker.getTrackedChildrenForID.mockReturnValue(getNodeChildren(function(){return {children:[{children:[{fieldName:'text',kind:'Field',metadata:{},type:'String'}],fieldName:'message',kind:'Field',metadata:{canHaveSubselections:true},type:'Text'},{fieldName:'seenState',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'RelayMutationQueryRelayQL',type:'Story'};}()));







var node=require('RelayMutationQuery').buildFragmentForFields({
fatQuery:fatQuery,
tracker:tracker,
fieldIDs:{
stories:['123']}});


var expected=getNodeWithoutSource(function(){return {children:[{children:[{fieldName:'seenState',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'stories',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isPlural:true},type:'Story'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'RelayMutationQueryRelayQL',type:'ViewerNotificationsUpdateAllSeenStateResponsePayload'};}());






expect(node).
toEqualQueryNode(expected);
expect(tracker.getTrackedChildrenForID.mock.calls).toEqual([
['123']]);});



it('merges tracked nodes for IDs of plural fields',function(){
var fatQuery=require('fromGraphQL').Fragment(function(){return {children:[{children:[{fieldName:'seenState',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'stories',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isPlural:true},type:'Story'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'RelayMutationQueryRelayQL',type:'ViewerNotificationsUpdateAllSeenStateResponsePayload'};}());






var trackedNodes={
'123':require('fromGraphQL').Fragment(function(){return {children:[{children:[{fieldName:'text',kind:'Field',metadata:{},type:'String'}],fieldName:'message',kind:'Field',metadata:{canHaveSubselections:true},type:'Text'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'RelayMutationQueryRelayQL',type:'Story'};}()),






'456':require('fromGraphQL').Fragment(function(){return {children:[{children:[{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'actors',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true,isPlural:true},type:'Actor'},{fieldName:'seenState',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'RelayMutationQueryRelayQL',type:'Story'};}())};








tracker.getTrackedChildrenForID.mockImplementation(
function(dataID){return [trackedNodes[dataID]];});

require('RelayMutationQuery').buildFragmentForFields({
fatQuery:fatQuery,
tracker:tracker,
fieldIDs:{
stories:['123','456']}});


var node=require('intersectRelayQuery').mock.calls[0][0];
var expected=require('RelayTestUtils').getVerbatimNode(function(){return {children:[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{children:[{fieldName:'text',kind:'Field',metadata:{},type:'String'}],fieldName:'message',kind:'Field',metadata:{canHaveSubselections:true},type:'Text'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'Story',type:'Story'},{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{children:[{fieldName:'__typename',kind:'Field',metadata:{isRequisite:true},type:'String'},{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'name',kind:'Field',metadata:{},type:'String'}],fieldName:'actors',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true,isPlural:true},type:'Actor'},{fieldName:'seenState',kind:'Field',metadata:{},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'Story',type:'Story'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'RelayMutationQueryRelayQL',type:'Story'};}());



















expect(expected.clone(node.getChildren())).
toEqualQueryNode(expected);
expect(tracker.getTrackedChildrenForID.mock.calls).toEqual([
['123'],
['456']]);});});




describe('edge deletion',function(){
var fatQuery=undefined;
beforeEach(function(){
fatQuery=require('fromGraphQL').Fragment(function(){return {children:[{children:[{fieldName:'comments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'CommentsConnection'},{fieldName:'topLevelComments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'TopLevelCommentsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'RelayMutationQueryRelayQL',type:'CommentDeleteResponsePayload'};}());});









it('throws for invalid parent name',function(){
expect(function(){
require('RelayMutationQuery').buildFragmentForEdgeDeletion({
fatQuery:fatQuery,
tracker:tracker,
connectionName:'comments',
parentID:'123',
parentName:'story'});}).

toFailInvariant(
'RelayMutationQuery: Invalid field name on fat query, `story`.');});



it('creates a fragment for connection metadata',function(){
tracker.getTrackedChildrenForID.mockReturnValue(getNodeChildren(function(){return {children:[{fieldName:'doesViewerLike',kind:'Field',metadata:{},type:'Boolean'},{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'10'}}],children:[{fieldName:'count',kind:'Field',metadata:{},type:'Int'},{children:[{children:[{children:[{fieldName:'text',kind:'Field',metadata:{},type:'String'}],fieldName:'body',kind:'Field',metadata:{canHaveSubselections:true},type:'Text'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'Comment'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'CommentsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],fieldName:'comments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'CommentsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'RelayMutationQueryRelayQL',type:'Feedback'};}()));














var node=require('RelayMutationQuery').buildFragmentForEdgeDeletion({
fatQuery:fatQuery,
tracker:tracker,
connectionName:'comments',
parentID:'123',
parentName:'feedback'});

var expected=getNodeWithoutSource(function(){return {children:[{children:[{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'10'}}],children:[{fieldName:'count',kind:'Field',metadata:{},type:'Int'}],fieldName:'comments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'CommentsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'RelayMutationQueryRelayQL',type:'CommentDeleteResponsePayload'};}());








expect(node).
toEqualQueryNode(expected);
expect(tracker.getTrackedChildrenForID.mock.calls).toEqual([
['123']]);});});




describe('edge insertion',function(){
var fatQuery=undefined,rangeBehaviors=undefined;

beforeEach(function(){
fatQuery=require('fromGraphQL').Fragment(function(){return {children:[{children:[{fieldName:'comments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'CommentsConnection'},{fieldName:'topLevelComments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'TopLevelCommentsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'},{children:[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'comment',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Comment'},{children:[{fieldName:'cursor',kind:'Field',metadata:{isRequisite:true},type:'String'},{children:[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'Comment'},{children:[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'source',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'}],fieldName:'feedbackCommentEdge',kind:'Field',metadata:{canHaveSubselections:true},type:'CommentsEdge'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'RelayMutationQueryRelayQL',type:'CommentCreateResponsePayload'};}());













rangeBehaviors={
'':require('GraphQLMutatorConstants').PREPEND,
'orderby(toplevel)':require('GraphQLMutatorConstants').PREPEND};});



it('includes edge fields for connections with range config',function(){
tracker.getTrackedChildrenForID.mockReturnValue(getNodeChildren(function(){return {children:[{calls:[{kind:'Call',metadata:{},name:'orderby',value:{kind:'CallValue',callValue:'toplevel'}},{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'10'}}],children:[{children:[{children:[{children:[{fieldName:'text',kind:'Field',metadata:{},type:'String'}],fieldName:'body',kind:'Field',metadata:{canHaveSubselections:true},type:'Text'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'Comment'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'CommentsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],fieldName:'comments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'CommentsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'RelayMutationQueryRelayQL',type:'Feedback'};}()));












var node=require('RelayMutationQuery').buildFragmentForEdgeInsertion({
fatQuery:fatQuery,
tracker:tracker,
connectionName:'comments',
parentID:'123',
edgeName:'feedbackCommentEdge',
rangeBehaviors:rangeBehaviors});

var expected=getNodeWithoutSource(function(){return {children:[{children:[{fieldName:'__typename',kind:'Field',metadata:{},type:'String'},{fieldName:'cursor',kind:'Field',metadata:{isRequisite:true},type:'String'},{children:[{children:[{fieldName:'text',kind:'Field',metadata:{},type:'String'}],fieldName:'body',kind:'Field',metadata:{canHaveSubselections:true},type:'Text'},{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'Comment'},{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'source',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'}],fieldName:'feedbackCommentEdge',kind:'Field',metadata:{canHaveSubselections:true},type:'CommentsEdge'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'RelayMutationQueryRelayQL',type:'CommentCreateResponsePayload'};}());
















expect(node).
toEqualQueryNode(expected);
expect(tracker.getTrackedChildrenForID.mock.calls).toEqual([
['123']]);});



it('includes fields from multiple tracked edges',function(){
tracker.getTrackedChildrenForID.mockReturnValue(getNodeChildren(function(){return {children:[{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'10'}}],children:[{fieldName:'count',kind:'Field',metadata:{},type:'Int'},{children:[{children:[{children:[{fieldName:'text',kind:'Field',metadata:{},type:'String'}],fieldName:'body',kind:'Field',metadata:{canHaveSubselections:true},type:'Text'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'Comment'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'CommentsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],fieldName:'comments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'CommentsConnection'},{calls:[{kind:'Call',metadata:{},name:'last',value:{kind:'CallValue',callValue:10}}],children:[{children:[{children:[{children:[{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'author',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'User'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'Comment'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'CommentsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],fieldName:'comments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'CommentsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'RelayMutationQueryRelayQL',type:'Feedback'};}()));






















var node=require('RelayMutationQuery').buildFragmentForEdgeInsertion({
fatQuery:fatQuery,
tracker:tracker,
connectionName:'comments',
parentID:'123',
edgeName:'feedbackCommentEdge',
rangeBehaviors:rangeBehaviors});

var expected=getNodeWithoutSource(function(){return {children:[{children:[{fieldName:'__typename',kind:'Field',metadata:{},type:'String'},{fieldName:'cursor',kind:'Field',metadata:{isRequisite:true},type:'String'},{children:[{children:[{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'author',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'User'},{children:[{fieldName:'text',kind:'Field',metadata:{},type:'String'}],fieldName:'body',kind:'Field',metadata:{canHaveSubselections:true},type:'Text'},{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'Comment'},{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'source',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'}],fieldName:'feedbackCommentEdge',kind:'Field',metadata:{canHaveSubselections:true},type:'CommentsEdge'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'RelayMutationQueryRelayQL',type:'CommentCreateResponsePayload'};}());



















expect(node).
toEqualQueryNode(expected);});


it('excludes fields from tracked edges with different filters',function(){
tracker.getTrackedChildrenForID.mockReturnValue(getNodeChildren(function(){return {children:[{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'10'}}],children:[{fieldName:'count',kind:'Field',metadata:{},type:'Int'},{children:[{children:[{children:[{fieldName:'text',kind:'Field',metadata:{},type:'String'}],fieldName:'body',kind:'Field',metadata:{canHaveSubselections:true},type:'Text'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'Comment'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'CommentsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],fieldName:'comments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'CommentsConnection'},{calls:[{kind:'Call',metadata:{},name:'orderby',value:{kind:'CallValue',callValue:'ranked_threaded'}},{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'10'}}],children:[{children:[{children:[{children:[{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'author',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'User'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'Comment'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'CommentsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],fieldName:'comments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'CommentsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'RelayMutationQueryRelayQL',type:'Feedback'};}()));






















var node=require('RelayMutationQuery').buildFragmentForEdgeInsertion({
fatQuery:fatQuery,
tracker:tracker,
connectionName:'comments',
parentID:'123',
edgeName:'feedbackCommentEdge',
rangeBehaviors:rangeBehaviors});

var expected=getNodeWithoutSource(function(){return {children:[{children:[{fieldName:'__typename',kind:'Field',metadata:{},type:'String'},{fieldName:'cursor',kind:'Field',metadata:{isRequisite:true},type:'String'},{children:[{children:[{fieldName:'text',kind:'Field',metadata:{},type:'String'}],fieldName:'body',kind:'Field',metadata:{canHaveSubselections:true},type:'Text'},{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'Comment'},{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'source',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'}],fieldName:'feedbackCommentEdge',kind:'Field',metadata:{canHaveSubselections:true},type:'CommentsEdge'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'RelayMutationQueryRelayQL',type:'CommentCreateResponsePayload'};}());
















expect(node).
toEqualQueryNode(expected);});


it('refetches connections in the absence of a range config',function(){
tracker.getTrackedChildrenForID.mockReturnValue(getNodeChildren(function(){return {children:[{calls:[{kind:'Call',metadata:{},name:'orderby',value:{kind:'CallValue',callValue:'ranked_threaded'}},{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'10'}}],children:[{children:[{children:[{children:[{fieldName:'text',kind:'Field',metadata:{},type:'String'}],fieldName:'body',kind:'Field',metadata:{canHaveSubselections:true},type:'Text'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'Comment'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'CommentsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],fieldName:'comments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'CommentsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'RelayMutationQueryRelayQL',type:'Feedback'};}()));












var node=require('RelayMutationQuery').buildFragmentForEdgeInsertion({
fatQuery:fatQuery,
tracker:tracker,
connectionName:'comments',
parentID:'123',
edgeName:'feedbackCommentEdge',
parentName:'feedback',
rangeBehaviors:rangeBehaviors});

var expected=getNodeWithoutSource(function(){return {children:[{children:[{calls:[{kind:'Call',metadata:{},name:'orderby',value:{kind:'CallValue',callValue:'ranked_threaded'}},{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'10'}}],children:[{children:[{children:[{children:[{fieldName:'text',kind:'Field',metadata:{},type:'String'}],fieldName:'body',kind:'Field',metadata:{canHaveSubselections:true},type:'Text'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'Comment'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'CommentsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],fieldName:'comments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'CommentsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'RelayMutationQueryRelayQL',type:'CommentCreateResponsePayload'};}());














expect(node).
toEqualQueryNode(expected);});


it('includes non-edge fields for connections',function(){
tracker.getTrackedChildrenForID.mockReturnValue(getNodeChildren(function(){return {children:[{children:[{fieldName:'count',kind:'Field',metadata:{},type:'Int'}],fieldName:'comments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'CommentsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'RelayMutationQueryRelayQL',type:'Feedback'};}()));






var node=require('RelayMutationQuery').buildFragmentForEdgeInsertion({
fatQuery:fatQuery,
tracker:tracker,
connectionName:'comments',
parentID:'123',
edgeName:'feedbackCommentEdge',
parentName:'feedback',
rangeBehaviors:rangeBehaviors});

var expected=getNodeWithoutSource(function(){return {children:[{children:[{children:[{fieldName:'count',kind:'Field',metadata:{},type:'Int'}],fieldName:'comments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'CommentsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'RelayMutationQueryRelayQL',type:'CommentCreateResponsePayload'};}());








expect(node).
toEqualQueryNode(expected);});


it('throws for invalid parent name',function(){
tracker.getTrackedChildrenForID.mockReturnValue(getNodeChildren(function(){return {children:[{children:[{fieldName:'count',kind:'Field',metadata:{},type:'Int'}],fieldName:'comments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'CommentsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'RelayMutationQueryRelayQL',type:'Feedback'};}()));






expect(function(){
require('RelayMutationQuery').buildFragmentForEdgeInsertion({
fatQuery:fatQuery,
tracker:tracker,
connectionName:'comments',
parentID:'123',
edgeName:'feedbackCommentEdge',
parentName:'story',
rangeBehaviors:rangeBehaviors});}).

toFailInvariant(
'RelayMutationQuery: Invalid field name on fat query, `story`.');});});




describe('optimistic update',function(){
it('infers fields',function(){
var fatQuery=require('fromGraphQL').Fragment(function(){return {children:[{children:[{fieldName:'doesViewerLike',kind:'Field',metadata:{},type:'Boolean'},{fieldName:'likers',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'LikersOfContentConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'RelayMutationQueryRelayQL',type:'FeedbackLikeResponsePayload'};}());








var mockData={};
require('RelayMutationQuery').buildFragmentForOptimisticUpdate({
response:mockData,
fatQuery:fatQuery});


expect(require('inferRelayFieldsFromData').mock.calls.length).toBe(1);
expect(require('inferRelayFieldsFromData').mock.calls[0][0]).toBe(mockData);});


it('builds query',function(){var _response;
var fatQuery=require('fromGraphQL').Fragment(function(){return {children:[{children:[{fieldName:'doesViewerLike',kind:'Field',metadata:{},type:'Boolean'},{fieldName:'likers',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'LikersOfContentConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'RelayMutationQueryRelayQL',type:'FeedbackLikeResponsePayload'};}());







var mutation=function(){return {calls:[{kind:'Call',metadata:{},name:'feedbackLike',value:{kind:'CallVariable',callVariableName:'input'}}],children:[{fieldName:'clientMutationId',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],kind:'Mutation',metadata:{inputType:'FeedbackLikeInput'},name:'RelayMutationQuery',responseType:'FeedbackLikeResponsePayload'};}();

var query=require('RelayMutationQuery').buildQueryForOptimisticUpdate({
response:(_response={},babelHelpers.defineProperty(_response,
require('RelayConnectionInterface').CLIENT_MUTATION_ID,'1'),babelHelpers.defineProperty(_response,'feedback',
{
doesViewerLike:true,
id:'1',
likers:{
count:4}}),_response),



fatQuery:fatQuery,
mutation:mutation});


var variables={input:''};
var expectedMutationQuery=filterGeneratedFields(
getNodeWithoutSource(function(RQL_0){return {calls:[{kind:'Call',metadata:{},name:'feedbackLike',value:{kind:'CallVariable',callVariableName:'input'}}],children:[].concat.apply([],[{fieldName:'clientMutationId',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'},require('Relay').QL.__frag(RQL_0)]),kind:'Mutation',metadata:{inputType:'FeedbackLikeInput'},name:'RelayMutationQuery',responseType:'FeedbackLikeResponsePayload'};}(function(){return {children:[{fieldName:'clientMutationId',kind:'Field',metadata:{},type:'String'},{children:[{fieldName:'doesViewerLike',kind:'Field',metadata:{},type:'Boolean'},{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{children:[{fieldName:'count',kind:'Field',metadata:{},type:'Int'}],fieldName:'likers',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'LikersOfContentConnection'}],fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'RelayMutationQueryRelayQL',type:'FeedbackLikeResponsePayload'};}()),
















variables));


expect(query).
toEqualQueryNode(expectedMutationQuery);});});



describe('query',function(){
it('creates a query for RANGE_ADD',function(){
tracker.getTrackedChildrenForID.mockReturnValue([getNode(function(){return {children:[{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'10'}}],children:[{children:[{children:[{children:[{fieldName:'text',kind:'Field',metadata:{},type:'String'}],fieldName:'body',kind:'Field',metadata:{canHaveSubselections:true},type:'Text'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'Comment'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'CommentsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],fieldName:'comments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'CommentsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'RelayMutationQueryRelayQL',type:'Feedback'};}())]);












var fatQuery=require('fromGraphQL').Fragment(function(){return {children:[{children:[{fieldName:'comments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'CommentsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'},{children:[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'comment',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Comment'},{children:[{fieldName:'cursor',kind:'Field',metadata:{isRequisite:true},type:'String'},{children:[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'Comment'},{children:[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'source',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'}],fieldName:'feedbackCommentEdge',kind:'Field',metadata:{canHaveSubselections:true},type:'CommentsEdge'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'RelayMutationQueryRelayQL',type:'CommentCreateResponsePayload'};}());












var parentName='feedback';
var parentID='123';
var connectionName='comments';
var edgeName='feedbackCommentEdge';
var rangeBehaviors={
'':require('GraphQLMutatorConstants').PREPEND};

var configs=[
{
type:require('RelayMutationType').RANGE_ADD,
parentName:parentName,
parentID:parentID,
connectionName:connectionName,
edgeName:edgeName,
rangeBehaviors:rangeBehaviors}];



var mutation=function(){return {calls:[{kind:'Call',metadata:{},name:'commentCreate',value:{kind:'CallVariable',callVariableName:'input'}}],children:[{fieldName:'clientMutationId',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],kind:'Mutation',metadata:{inputType:'CommentCreateInput'},name:'RelayMutationQuery',responseType:'CommentCreateResponsePayload'};}();
var mutationName='CommentAddMutation';
var variables={input:''};
var query=require('RelayMutationQuery').buildQuery({
tracker:tracker,
fatQuery:fatQuery,
configs:configs,
mutationName:mutationName,
mutation:mutation});


var expectedMutationQuery=filterGeneratedFields(
getNodeWithoutSource(function(){return {calls:[{kind:'Call',metadata:{},name:'commentCreate',value:{kind:'CallVariable',callVariableName:'input'}}],children:[{fieldName:'clientMutationId',kind:'Field',metadata:{isRequisite:true},type:'String'},{children:[{children:[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'Feedback',type:'Feedback'}],fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'},{children:[{fieldName:'__typename',kind:'Field',metadata:{},type:'String'},{fieldName:'cursor',kind:'Field',metadata:{isRequisite:true},type:'String'},{children:[{children:[{fieldName:'text',kind:'Field',metadata:{},type:'String'}],fieldName:'body',kind:'Field',metadata:{canHaveSubselections:true},type:'Text'},{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'Comment'},{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'source',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'}],fieldName:'feedbackCommentEdge',kind:'Field',metadata:{canHaveSubselections:true},type:'CommentsEdge'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'CommentCreateResponsePayload',type:'CommentCreateResponsePayload'}],kind:'Mutation',metadata:{inputType:'CommentCreateInput'},name:'RelayMutationQuery',responseType:'CommentCreateResponsePayload'};}(),

























variables));


expect(query).
toEqualQueryNode(expectedMutationQuery);});


it('creates a query for NODE_DELETE',function(){
tracker.getTrackedChildrenForID.mockReturnValue(getNodeChildren(function(){return {children:[{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'10'}}],children:[{children:[{children:[{children:[{fieldName:'text',kind:'Field',metadata:{},type:'String'}],fieldName:'body',kind:'Field',metadata:{canHaveSubselections:true},type:'Text'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'Comment'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'CommentsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],fieldName:'comments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'CommentsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'RelayMutationQueryRelayQL',type:'Feedback'};}()));












var fatQuery=require('fromGraphQL').Fragment(function(){return {children:[{children:[{fieldName:'comments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'CommentsConnection'},{fieldName:'topLevelComments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'TopLevelCommentsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'RelayMutationQueryRelayQL',type:'CommentDeleteResponsePayload'};}());







var parentName='feedback';
var parentID='123';
var connectionName='comments';
var deletedIDFieldName='deletedCommentId';
var configs=[
{
type:require('RelayMutationType').NODE_DELETE,
parentName:parentName,
parentID:parentID,
connectionName:connectionName,
deletedIDFieldName:deletedIDFieldName}];



var mutation=function(){return {calls:[{kind:'Call',metadata:{},name:'commentDelete',value:{kind:'CallVariable',callVariableName:'input'}}],children:[{fieldName:'clientMutationId',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],kind:'Mutation',metadata:{inputType:'CommentDeleteInput'},name:'RelayMutationQuery',responseType:'CommentDeleteResponsePayload'};}();
var mutationName='CommentDeleteMutation';
var variables={input:''};
var query=require('RelayMutationQuery').buildQuery({
tracker:tracker,
fatQuery:fatQuery,
configs:configs,
mutationName:mutationName,
mutation:mutation});


var expectedMutationQuery=getNodeWithoutSource(function(RQL_0){return {calls:[{kind:'Call',metadata:{},name:'commentDelete',value:{kind:'CallVariable',callVariableName:'input'}}],children:[].concat.apply([],[{fieldName:'clientMutationId',kind:'Field',metadata:{isRequisite:true},type:'String'},{fieldName:'deletedCommentId',kind:'Field',metadata:{},type:'ID'},require('Relay').QL.__frag(RQL_0)]),kind:'Mutation',metadata:{inputType:'CommentDeleteInput'},name:'RelayMutationQuery',responseType:'CommentDeleteResponsePayload'};}(function(){return {children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'RelayMutationQueryRelayQL',type:'CommentDeleteResponsePayload'};}()),













variables);

expect(query).
toEqualQueryNode(expectedMutationQuery);});


it('creates a query for RANGE_DELETE with a shallow deleted field',function(){
tracker.getTrackedChildrenForID.mockReturnValue(getNodeChildren(function(){return {children:[{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'10'}}],children:[{children:[{children:[{children:[{fieldName:'text',kind:'Field',metadata:{},type:'String'}],fieldName:'body',kind:'Field',metadata:{canHaveSubselections:true},type:'Text'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'Comment'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'CommentsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],fieldName:'comments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'CommentsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'RelayMutationQueryRelayQL',type:'Feedback'};}()));












var fatQuery=require('fromGraphQL').Fragment(function(){return {children:[{children:[{fieldName:'comments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'CommentsConnection'},{fieldName:'topLevelComments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'TopLevelCommentsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'RelayMutationQueryRelayQL',type:'CommentDeleteResponsePayload'};}());







var parentName='feedback';
var parentID='123';
var connectionName='comments';
var deletedIDFieldName='deletedCommentId';
var configs=[
{
type:require('RelayMutationType').RANGE_DELETE,
parentName:parentName,
parentID:parentID,
connectionName:connectionName,
deletedIDFieldName:deletedIDFieldName}];



var mutation=function(){return {calls:[{kind:'Call',metadata:{},name:'commentDelete',value:{kind:'CallVariable',callVariableName:'input'}}],children:[{fieldName:'clientMutationId',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],kind:'Mutation',metadata:{inputType:'CommentDeleteInput'},name:'RelayMutationQuery',responseType:'CommentDeleteResponsePayload'};}();
var mutationName='CommentDeleteMutation';
var variables={input:''};
var query=require('RelayMutationQuery').buildQuery({
tracker:tracker,
fatQuery:fatQuery,
configs:configs,
mutationName:mutationName,
mutation:mutation});


var expectedMutationQuery=getNodeWithoutSource(function(RQL_0){return {calls:[{kind:'Call',metadata:{},name:'commentDelete',value:{kind:'CallVariable',callVariableName:'input'}}],children:[].concat.apply([],[{fieldName:'clientMutationId',kind:'Field',metadata:{isRequisite:true},type:'String'},{fieldName:'deletedCommentId',kind:'Field',metadata:{},type:'ID'},require('Relay').QL.__frag(RQL_0)]),kind:'Mutation',metadata:{inputType:'CommentDeleteInput'},name:'RelayMutationQuery',responseType:'CommentDeleteResponsePayload'};}(function(){return {children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'RelayMutationQueryRelayQL',type:'CommentDeleteResponsePayload'};}()),













variables);

expect(query).
toEqualQueryNode(expectedMutationQuery);});


it('creates a query for RANGE_DELETE with a deep deleted field',function(){
tracker.getTrackedChildrenForID.mockReturnValue(getNodeChildren(function(){return {children:[{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'10'}}],children:[{children:[{children:[{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'User'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'FriendsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],fieldName:'friends',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'FriendsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'RelayMutationQueryRelayQL',type:'Actor'};}()));










var fatQuery=require('fromGraphQL').Fragment(function(){return {children:[{children:[{fieldName:'friends',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'FriendsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'actor',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true},type:'Actor'},{fieldName:'clientMutationId',kind:'Field',metadata:{},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'RelayMutationQueryRelayQL',type:'UnfriendResponsePayload'};}());







var configs=[
{
type:require('RelayMutationType').RANGE_DELETE,
parentName:'actor',
parentID:'123',
connectionName:'friends',
deletedIDFieldName:['formerFriend'],
pathToConnection:['actor','friends']}];



var mutation=function(){return {calls:[{kind:'Call',metadata:{},name:'unfriend',value:{kind:'CallVariable',callVariableName:'input'}}],children:[{fieldName:'clientMutationId',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],kind:'Mutation',metadata:{inputType:'UnfriendInput'},name:'RelayMutationQuery',responseType:'UnfriendResponsePayload'};}();
var mutationName='UnfriendMutation';
var variables={input:''};
var query=require('RelayMutationQuery').buildQuery({
tracker:tracker,
fatQuery:fatQuery,
configs:configs,
mutationName:mutationName,
mutation:mutation});


var expectedConcreteNode=function(RQL_0){return {calls:[{kind:'Call',metadata:{},name:'unfriend',value:{kind:'CallVariable',callVariableName:'input'}}],children:[].concat.apply([],[{fieldName:'clientMutationId',kind:'Field',metadata:{isRequisite:true},type:'String'},{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'formerFriend',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'User'},require('Relay').QL.__frag(RQL_0)]),kind:'Mutation',metadata:{inputType:'UnfriendInput'},name:'RelayMutationQuery',responseType:'UnfriendResponsePayload'};}(function(){return {children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'actor',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true},type:'Actor'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'RelayMutationQueryRelayQL',type:'UnfriendResponsePayload'};}());
















expect(query).toEqualQueryNode(
getNodeWithoutSource(expectedConcreteNode,variables));});



it('creates a query for FIELDS_CHANGE',function(){
tracker.getTrackedChildrenForID.mockReturnValue(getNodeChildren(function(){return {children:[{fieldName:'likers',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'LikersOfContentConnection'},{fieldName:'url',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'RelayMutationQueryRelayQL',type:'Feedback'};}()));





var fatQuery=require('fromGraphQL').Fragment(function(){return {children:[{children:[{fieldName:'doesViewerLike',kind:'Field',metadata:{},type:'Boolean'},{fieldName:'likers',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'LikersOfContentConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'RelayMutationQueryRelayQL',type:'FeedbackLikeResponsePayload'};}());







var fieldIDs={
feedback:'123'};

var configs=[
{
type:require('RelayMutationType').FIELDS_CHANGE,
fieldIDs:fieldIDs}];



var mutation=function(){return {calls:[{kind:'Call',metadata:{},name:'feedbackLike',value:{kind:'CallVariable',callVariableName:'input'}}],children:[{fieldName:'clientMutationId',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],kind:'Mutation',metadata:{inputType:'FeedbackLikeInput'},name:'RelayMutationQuery',responseType:'FeedbackLikeResponsePayload'};}();
var mutationName='FeedbackLikeMutation';
var variables={input:''};
var query=require('RelayMutationQuery').buildQuery({
tracker:tracker,
fatQuery:fatQuery,
configs:configs,
mutationName:mutationName,
mutation:mutation});


var expectedMutationQuery=getNodeWithoutSource(function(RQL_0){return {calls:[{kind:'Call',metadata:{},name:'feedbackLike',value:{kind:'CallVariable',callVariableName:'input'}}],children:[].concat.apply([],[{fieldName:'clientMutationId',kind:'Field',metadata:{isRequisite:true},type:'String'},require('Relay').QL.__frag(RQL_0)]),kind:'Mutation',metadata:{inputType:'FeedbackLikeInput'},name:'RelayMutationQuery',responseType:'FeedbackLikeResponsePayload'};}(function(){return {children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'likers',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'LikersOfContentConnection'}],fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'RelayMutationQueryRelayQL',type:'FeedbackLikeResponsePayload'};}()),













variables);

expect(query).
toEqualQueryNode(expectedMutationQuery);});


it('creates a query with additional required fragments',function(){
tracker.getTrackedChildrenForID.mockReturnValue([getNode(function(){return {children:[{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'10'}}],children:[{children:[{children:[{children:[{fieldName:'text',kind:'Field',metadata:{},type:'String'}],fieldName:'body',kind:'Field',metadata:{canHaveSubselections:true},type:'Text'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'Comment'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'CommentsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],fieldName:'comments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'CommentsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'RelayMutationQueryRelayQL',type:'Feedback'};}())]);












var fatQuery=require('fromGraphQL').Fragment(function(){return {children:[{children:[{fieldName:'comments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'CommentsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'},{children:[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'comment',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Comment'},{children:[{fieldName:'cursor',kind:'Field',metadata:{isRequisite:true},type:'String'},{children:[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'Comment'},{children:[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'source',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'}],fieldName:'feedbackCommentEdge',kind:'Field',metadata:{canHaveSubselections:true},type:'CommentsEdge'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'RelayMutationQueryRelayQL',type:'CommentCreateResponsePayload'};}());












var parentName='feedback';
var parentID='123';
var connectionName='comments';
var edgeName='feedbackCommentEdge';
var rangeBehaviors={
'':require('GraphQLMutatorConstants').PREPEND};

var configs=[
{
type:require('RelayMutationType').RANGE_ADD,
parentName:parentName,
parentID:parentID,
connectionName:connectionName,
edgeName:edgeName,
rangeBehaviors:rangeBehaviors},

{
type:require('RelayMutationType').REQUIRED_CHILDREN,
children:[function(){return {children:[{children:[{fieldName:'doesViewerLike',kind:'Field',metadata:{},type:'Boolean'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'RelayMutationQuery_ChildrenRelayQL',type:'CommentCreateResponsePayload'};}()]}];









var mutation=function(){return {calls:[{kind:'Call',metadata:{},name:'commentCreate',value:{kind:'CallVariable',callVariableName:'input'}}],children:[{fieldName:'clientMutationId',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],kind:'Mutation',metadata:{inputType:'CommentCreateInput'},name:'RelayMutationQuery',responseType:'CommentCreateResponsePayload'};}();
var mutationName='CommentAddMutation';
var variables={input:''};
var query=require('RelayMutationQuery').buildQuery({
tracker:tracker,
fatQuery:fatQuery,
configs:configs,
mutationName:mutationName,
mutation:mutation});


var expectedMutationQuery=filterGeneratedFields(
getNodeWithoutSource(function(){return {calls:[{kind:'Call',metadata:{},name:'commentCreate',value:{kind:'CallVariable',callVariableName:'input'}}],children:[{fieldName:'clientMutationId',kind:'Field',metadata:{isRequisite:true},type:'String'},{children:[{children:[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'Feedback',type:'Feedback'}],fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'},{children:[{fieldName:'__typename',kind:'Field',metadata:{},type:'String'},{fieldName:'cursor',kind:'Field',metadata:{isRequisite:true},type:'String'},{children:[{children:[{fieldName:'text',kind:'Field',metadata:{},type:'String'}],fieldName:'body',kind:'Field',metadata:{canHaveSubselections:true},type:'Text'},{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'Comment'},{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'source',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'}],fieldName:'feedbackCommentEdge',kind:'Field',metadata:{canHaveSubselections:true},type:'CommentsEdge'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'CommentCreateResponsePayload',type:'CommentCreateResponsePayload'},{children:[{children:[{fieldName:'doesViewerLike',kind:'Field',metadata:{},type:'Boolean'},{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'CommentCreateResponsePayload',type:'CommentCreateResponsePayload'}],kind:'Mutation',metadata:{inputType:'CommentCreateInput'},name:'RelayMutationQuery',responseType:'CommentCreateResponsePayload'};}(),































variables));


expect(query).
toEqualQueryNode(expectedMutationQuery);});


it('creates a query for RANGE_ADD and FIELDS_CHANGE',function(){

tracker.getTrackedChildrenForID.mockReturnValue(getNodeChildren(function(){return {children:[{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'10'}}],children:[{children:[{children:[{children:[{fieldName:'text',kind:'Field',metadata:{},type:'String'}],fieldName:'body',kind:'Field',metadata:{canHaveSubselections:true},type:'Text'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'Comment'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'CommentsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],fieldName:'comments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'CommentsConnection'},{fieldName:'likers',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'LikersOfContentConnection'},{fieldName:'url',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'RelayMutationQueryRelayQL',type:'Feedback'};}()));














var fatQuery=require('fromGraphQL').Fragment(function(){return {children:[{children:[{fieldName:'comments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'CommentsConnection'},{fieldName:'doesViewerLike',kind:'Field',metadata:{},type:'Boolean'},{fieldName:'likers',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'LikersOfContentConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'},{children:[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'comment',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Comment'},{children:[{fieldName:'cursor',kind:'Field',metadata:{isRequisite:true},type:'String'},{children:[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'Comment'},{children:[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'source',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'}],fieldName:'feedbackCommentEdge',kind:'Field',metadata:{canHaveSubselections:true},type:'CommentsEdge'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'RelayMutationQueryRelayQL',type:'CommentCreateResponsePayload'};}());














var parentName='feedback';
var parentID='123';
var connectionName='comments';
var edgeName='feedbackCommentEdge';
var rangeBehaviors={
'':require('GraphQLMutatorConstants').PREPEND};

var fieldIDs={
feedback:'123'};

var configs=[
{
type:require('RelayMutationType').RANGE_ADD,
parentName:parentName,
parentID:parentID,
connectionName:connectionName,
edgeName:edgeName,
rangeBehaviors:rangeBehaviors},

{
type:require('RelayMutationType').FIELDS_CHANGE,
fieldIDs:fieldIDs}];



var mutation=function(){return {calls:[{kind:'Call',metadata:{},name:'commentCreate',value:{kind:'CallVariable',callVariableName:'input'}}],children:[{fieldName:'clientMutationId',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],kind:'Mutation',metadata:{inputType:'CommentCreateInput'},name:'RelayMutationQuery',responseType:'CommentCreateResponsePayload'};}();
var mutationName='CommentAddAndLikeMutation';
var variables={input:''};
var query=require('RelayMutationQuery').buildQuery({
tracker:tracker,
fatQuery:fatQuery,
configs:configs,
mutationName:mutationName,
mutation:mutation});


var expectedMutationQuery=getNodeWithoutSource(function(RQL_0,RQL_1){return {calls:[{kind:'Call',metadata:{},name:'commentCreate',value:{kind:'CallVariable',callVariableName:'input'}}],children:[].concat.apply([],[{fieldName:'clientMutationId',kind:'Field',metadata:{isRequisite:true},type:'String'},require('Relay').QL.__frag(RQL_0),require('Relay').QL.__frag(RQL_1)]),kind:'Mutation',metadata:{inputType:'CommentCreateInput'},name:'RelayMutationQuery',responseType:'CommentCreateResponsePayload'};}(function(){return {children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'likers',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'LikersOfContentConnection'}],fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'},{children:[{fieldName:'__typename',kind:'Field',metadata:{},type:'String'},{fieldName:'cursor',kind:'Field',metadata:{isRequisite:true},type:'String'},{children:[{children:[{fieldName:'text',kind:'Field',metadata:{},type:'String'}],fieldName:'body',kind:'Field',metadata:{canHaveSubselections:true},type:'Text'},{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'Comment'},{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'source',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'}],fieldName:'feedbackCommentEdge',kind:'Field',metadata:{canHaveSubselections:true},type:'CommentsEdge'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'RelayMutationQueryRelayQL',type:'CommentCreateResponsePayload'};}(),function(){return {children:[{children:[{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'10'}}],children:[{children:[{fieldName:'cursor',kind:'Field',metadata:{isRequisite:true},type:'String'},{children:[{children:[{fieldName:'text',kind:'Field',metadata:{},type:'String'}],fieldName:'body',kind:'Field',metadata:{canHaveSubselections:true},type:'Text'},{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'Comment'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'CommentsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isRequisite:true},type:'PageInfo'}],fieldName:'comments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'CommentsConnection'},{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'likers',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'LikersOfContentConnection'}],fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'RelayMutationQueryRelayQL',type:'CommentCreateResponsePayload'};}()),

















































variables);

expect(query).
toEqualQueryNode(expectedMutationQuery);});


it('complains about unknown config types',function(){
var fatQuery=require('fromGraphQL').Fragment(function(){return {children:[{fieldName:'clientMutationId',kind:'Field',metadata:{},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'RelayMutationQueryRelayQL',type:'UnfriendResponsePayload'};}());




var configs=[
{
type:'COSMIC_RAY_BIT_FLIP'}];



var mutation=function(){return {calls:[{kind:'Call',metadata:{},name:'unfriend',value:{kind:'CallVariable',callVariableName:'input'}}],children:[{fieldName:'clientMutationId',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],kind:'Mutation',metadata:{inputType:'UnfriendInput'},name:'RelayMutationQuery',responseType:'UnfriendResponsePayload'};}();
var mutationName='UnfriendMutation';
expect(function(){return require('RelayMutationQuery').buildQuery({
tracker:tracker,
fatQuery:fatQuery,
configs:configs,
mutationName:mutationName,
mutation:mutation});}).
toFailInvariant(
'RelayMutationQuery: Unrecognized config key `COSMIC_RAY_BIT_FLIP` '+
'for `UnfriendMutation`.');});});});
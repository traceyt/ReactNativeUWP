/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails oncall+relay
 */

'use strict';

require('configureForRelayOSS');








describe('RelayQuery', function () {var 
  getNode = require('RelayTestUtils').getNode;

  function buildIdField() {
    return require('RelayQuery').Field.build({ 
      fieldName: 'id', 
      type: 'String' });}



  beforeEach(function () {
    jest.resetModuleRegistry();

    jasmine.addMatchers(require('RelayTestUtils').matchers);});


  describe('Root', function () {
    describe('build()', function () {
      it('creates roots', function () {
        var field = buildIdField();
        var root = require('RelayQuery').Root.build(
        'RelayQueryTest', 
        'node', 
        '4', 
        [field]);

        expect(root instanceof require('RelayQuery').Root).toBe(true);
        expect(root.getChildren().length).toBe(1);
        expect(root.getChildren()[0]).toBe(field);});


      it('creates deferred roots', function () {
        var field = buildIdField();
        var root = require('RelayQuery').Root.build(
        'RelayQueryTest', 
        'node', 
        '4', 
        [field], 
        { isDeferred: true });

        expect(root instanceof require('RelayQuery').Root).toBe(true);
        expect(root.getChildren().length).toBe(1);
        expect(root.getChildren()[0]).toBe(field);});


      it('creates roots with batch calls', function () {
        var root = require('RelayQuery').Root.build(
        'RelayQueryTest', 
        'node', 
        require('QueryBuilder').createBatchCallVariable('q0', '$.*.id'), 
        []);

        expect(root instanceof require('RelayQuery').Root).toBe(true);
        expect(root.getBatchCall()).toEqual({ 
          refParamName: 'ref_q0', 
          sourceQueryID: 'q0', 
          sourceQueryPath: '$.*.id' });});});




    describe('getCallsWithValues()', function () {
      it('returns an empty array when there are no arguments', function () {
        var root = require('RelayQuery').Root.build('RelayQueryTest', 'viewer');
        expect(root.getCallsWithValues()).toEqual([]);});


      it('returns an array including the identifying argument', function () {
        var root = require('RelayQuery').Root.build(
        'RelayQueryTest', 
        'foo', 
        '123', 
        null, 
        { identifyingArgName: 'id' });

        expect(root.getCallsWithValues()).toEqual([
        { name: 'id', value: '123' }]);});



      // it('returns an array of every argument', () => {
      //   //   TODO: When it's possible to do so, create a root with both
      //   //         identifying and non-identifying arguments.
      //   const root;
      //   expect(root.getCallsWithValues()).toEqual([
      //     /* all of the arguments */
      //   ]);
      // });
    });

    describe('getFieldName()', function () {
      it('returns the name of the root field', function () {
        var root = require('RelayQuery').Root.build('RelayQueryTest', 'viewer');
        expect(root.getFieldName()).toBe('viewer');});});



    describe('getIdentifyingArg()', function () {
      it('returns nothing when there is no identifying argument', function () {
        var root = require('RelayQuery').Root.build('RelayQueryTest', 'viewer');
        expect(root.getIdentifyingArg()).toBeUndefined();});


      it('returns the sole identifying argument', function () {
        var root = require('RelayQuery').Root.build(
        'RelayQueryTest', 
        'foo', 
        '123', 
        null, 
        { identifyingArgName: 'id' });

        expect(root.getIdentifyingArg()).toEqual({ 
          name: 'id', 
          value: '123' });});



      it('returns the identifying argument with type', function () {
        var root = require('RelayQuery').Root.build(
        'RelayQueryTest', 
        'foo', 
        '123', 
        null, 
        { identifyingArgName: 'id', identifyingArgType: 'scalar' });

        expect(root.getIdentifyingArg()).toEqual({ 
          name: 'id', 
          type: 'scalar', 
          value: '123' });});



      // it('returns only the identifying argument', () => {
      //   TODO: When it's possible to do so, create a root with both
      //         identifying and non-identifying arguments.
      //   const root;
      //   expect(root.getIdentifyingArg()).toBe({
      //    /* only the identifying one */
      //   });
      // });
    });});


  describe('Fragment', function () {
    describe('build()', function () {
      it('creates empty fragments', function () {
        var fragment = require('RelayQuery').Fragment.build(
        'TestFragment', 
        'Node', 
        []);

        expect(fragment instanceof require('RelayQuery').Fragment).toBe(true);
        expect(fragment.getDebugName()).toBe('TestFragment');
        expect(fragment.getType()).toBe('Node');
        expect(fragment.getChildren().length).toBe(0);
        expect(fragment.isPlural()).toBe(false);});


      it('creates fragments', function () {
        var field = buildIdField();
        var fragment = require('RelayQuery').Fragment.build(
        'TestFragment', 
        'Node', 
        [field], 
        { plural: true });

        expect(fragment instanceof require('RelayQuery').Fragment).toBe(true);
        expect(fragment.getDebugName()).toBe('TestFragment');
        expect(fragment.getType()).toBe('Node');
        expect(fragment.getChildren().length).toBe(1);
        expect(fragment.getChildren()[0]).toBe(field);
        expect(fragment.isPlural()).toBe(true);});});



    describe('getConcreteFragmentID()', function () {
      it('returns the same id for two different RelayQuery nodes', function () {
        var concreteNode = (function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'jKuSkSSHC8WL:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'RelayQueryRelayQL', type: 'Node' };})();
        var fragmentA = getNode(concreteNode);
        var fragmentB = getNode(concreteNode);
        expect(fragmentA.getConcreteFragmentID()).
        toBe(fragmentB.getConcreteFragmentID());});


      it('returns a different id for two different concrete nodes', function () {
        var fragmentA = getNode((function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'IStsNGrPQZ3+:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'RelayQueryRelayQL', type: 'Node' };})());
        var fragmentB = getNode((function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'dOWb/k8YHJrW:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'RelayQueryRelayQL', type: 'Node' };})());
        expect(fragmentA.getConcreteFragmentID()).
        not.toBe(fragmentB.getConcreteFragmentID());});});



    describe('getCompositeHash()', function () {
      it('returns one hash for nodes with the same variables / route', function () {
        var node = (function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: '62wq8lBPeMck:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'RelayQueryRelayQL', type: 'Node' };})();
        var route = require('RelayMetaRoute').get('route');
        var variables = { foo: 123 };
        expect(
        new (require('RelayQuery').Fragment)(node, route, variables).getCompositeHash()).
        toBe(
        new (require('RelayQuery').Fragment)(node, route, variables).getCompositeHash());});



      it('returns different hashes for nodes with different variables', function () {
        var node = (function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'E1qlLFxURArm:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'RelayQueryRelayQL', type: 'Node' };})();
        var route = require('RelayMetaRoute').get('route');
        var variablesA = { foo: 123 };
        var variablesB = { foo: 456 };
        expect(
        new (require('RelayQuery').Fragment)(node, route, variablesA).getCompositeHash()).
        not.toBe(
        new (require('RelayQuery').Fragment)(node, route, variablesB).getCompositeHash());});



      it('returns different hashes for nodes with different routes', function () {
        var node = (function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: '5inbpzPsu+GQ:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'RelayQueryRelayQL', type: 'Node' };})();
        var routeA = require('RelayMetaRoute').get('routeA');
        var routeB = require('RelayMetaRoute').get('routeB');
        var variables = { foo: 123 };
        expect(
        new (require('RelayQuery').Fragment)(node, routeA, variables).getCompositeHash()).
        not.toBe(
        new (require('RelayQuery').Fragment)(node, routeB, variables).getCompositeHash());});



      it('returns one hash for nodes cloned with the same children', function () {
        var fragment = getNode((function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isRequisite: true }, type: 'String' }], id: 'ENtCSL9CQMaz:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'RelayQueryRelayQL', type: 'Node' };})());
        var fragmentClone = fragment.clone(fragment.getChildren());
        expect(fragmentClone.getCompositeHash()).
        toBe(fragment.getCompositeHash());});


      it('returns different hashes for nodes cloned with new children', function () {
        var fragment = getNode((function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isRequisite: true }, type: 'String' }], id: 'GvM3aRQnQN4s:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'RelayQueryRelayQL', type: 'Node' };})());
        var fragmentClone = fragment.clone(fragment.getChildren().slice(1));
        expect(fragmentClone.getCompositeHash()).
        not.toBe(fragment.getCompositeHash());});});});




  describe('Field', function () {
    describe('build()', function () {
      it('builds scalar fields', function () {
        var field = buildIdField();
        expect(field instanceof require('RelayQuery').Field).toBe(true);
        expect(field.getSchemaName()).toBe('id');
        expect(field.getApplicationName()).toBe('id');
        expect(field.canHaveSubselections()).toBe(false);
        expect(field.getChildren().length).toBe(0);
        expect(field.getCallsWithValues()).toEqual([]);});


      it('builds fields with children', function () {
        var child = buildIdField();
        var fragment = getNode((function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'OkF6NDLwhLop:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'RelayQueryRelayQL', type: 'Node' };})());
        var field = require('RelayQuery').Field.build({ 
          fieldName: 'node', 
          children: [child, fragment], 
          metadata: { canHaveSubselections: true }, 
          type: 'Node' });

        expect(field.canHaveSubselections()).toBe(true);
        var children = field.getChildren();
        expect(children.length).toBe(2);
        expect(children[0]).toBe(child);
        expect(children[1]).toBe(fragment);});


      it('builds fields with calls', function () {
        var field = require('RelayQuery').Field.build({ 
          fieldName: 'profilePicture', 
          calls: [
          { name: 'size', value: 32 }], 

          metadata: { canHaveSubselections: true }, 
          type: 'ProfilePicture' });

        expect(field.getCallsWithValues()).toEqual([
        { name: 'size', value: 32 }]);

        field = require('RelayQuery').Field.build({ 
          fieldName: 'profilePicture', 
          calls: [
          { name: 'size', value: ['32'] }], 

          metadata: { canHaveSubselections: true }, 
          type: 'ProfilePicture' });

        expect(field.getCallsWithValues()).toEqual([
        { name: 'size', value: ['32'] }]);});



      it('builds directives with argument values', function () {
        var field = require('RelayQuery').Field.build({ 
          directives: [{ 
            args: [{ 
              name: 'bar', 
              value: 'baz' }], 

            name: 'foo' }], 

          fieldName: 'profilePicture', 
          type: 'ProfilePicture' });

        expect(field.getDirectives()).toEqual([{ 
          args: [{ name: 'bar', value: 'baz' }], 
          name: 'foo' }]);});});});





  describe('Mutation', function () {
    describe('buildMutation()', function () {
      it('builds mutation with value', function () {
        var field = require('RelayQuery').Field.build({ 
          fieldName: 'does_viewer_like', 
          type: 'Boolean' });

        var mutation = require('RelayQuery').Mutation.build(
        'FeedbackLikeMutation', 
        'FeedbackLikeResponsePayload', 
        'feedback_like', 
        { feedback_id: '123' }, 
        [field]);


        expect(mutation instanceof require('RelayQuery').Mutation).toBe(true);
        expect(mutation.getName()).toBe('FeedbackLikeMutation');
        expect(mutation.getResponseType()).toBe('FeedbackLikeResponsePayload');
        expect(mutation.getChildren().length).toBe(1);
        expect(mutation.getChildren()[0]).toBe(field);
        expect(mutation.getCall()).
        toEqual({ name: 'feedback_like', value: { feedback_id: '123' } });
        expect(mutation.getCallVariableName()).toEqual('input');});


      it('builds mutation with variable', function () {
        var field = require('RelayQuery').Field.build({ 
          fieldName: 'does_viewer_like', 
          type: 'Boolean' });

        var mutation = require('RelayQuery').Mutation.build(
        'FeedbackLikeMutation', 
        'FeedbackLikeResponsePayload', 
        'feedback_like', 
        undefined, 
        [field]);


        expect(mutation instanceof require('RelayQuery').Mutation).toBe(true);
        expect(mutation.getName()).toBe('FeedbackLikeMutation');
        expect(mutation.getResponseType()).toBe('FeedbackLikeResponsePayload');
        expect(mutation.getChildren().length).toBe(1);
        expect(mutation.getChildren()[0]).toBe(field);
        expect(mutation.getCall()).
        toEqual({ name: 'feedback_like', value: '' });
        expect(mutation.getCallVariableName()).toEqual('input');});});});




  describe('isEquivalent()', function () {
    it('returns false for different concrete nodes', function () {
      var node1 = getNode((function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'AkSjUPrFfh3i:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'RelayQueryRelayQL', type: 'Node' };})());
      var ndoe2 = getNode((function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'tz4+bPTO+0Xx:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'RelayQueryRelayQL', type: 'Node' };})());
      expect(node1.isEquivalent(ndoe2)).toBe(false);});


    it('return false for different variables', function () {
      var fragment = (function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'Up8LU0B3WEqo:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'RelayQueryRelayQL', type: 'Node' };})();

      var node1 = getNode(fragment, { a: true });
      var ndoe2 = getNode(fragment, { a: false });
      expect(node1.isEquivalent(ndoe2)).toBe(false);});


    it('returns false for different routes', function () {
      var fragment = (function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'ek1fFSrSYTUf:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'RelayQueryRelayQL', type: 'Node' };})();
      var variables = { a: false };
      var route1 = require('RelayMetaRoute').get('route1');
      var route2 = require('RelayMetaRoute').get('route2');

      var node1 = require('RelayQuery').Fragment.create(fragment, route1, variables);
      var node2 = require('RelayQuery').Fragment.create(fragment, route2, variables);
      expect(node1.isEquivalent(node2)).toBe(false);});


    it('returns true for identical node, route, and variables', function () {
      var fragment = (function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: '96dIs3NEyaC8:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'RelayQueryRelayQL', type: 'Node' };})();
      var variables = { a: false };
      var route = require('RelayMetaRoute').get('route1');

      var node1 = require('RelayQuery').Fragment.create(fragment, route, variables);
      var node2 = require('RelayQuery').Fragment.create(fragment, route, variables);
      expect(node1.isEquivalent(node2)).toBe(true);});});



  describe('getChildren()', function () {
    it('expands fragment references', function () {
      var innerFragment = (function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { calls: [{ kind: 'Call', metadata: {}, name: 'size', value: { kind: 'CallVariable', callVariableName: 'size' } }], children: [{ fieldName: 'uri', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }], id: '5mgH7xGZqHb2:0', kind: 'Fragment', metadata: {}, name: 'RelayQueryRelayQL', type: 'User' };})();







      var reference = new (require('RelayFragmentReference'))(
      function () {return innerFragment;}, 
      { 
        size: 'default' }, 

      { 
        size: require('QueryBuilder').createCallVariable('outerSize') });


      var fragment = getNode((function (RQL_0) {return { children: [].concat.apply([], [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, require('Relay').QL.__frag(RQL_0)]), id: 'PfbEPwf+yRxT:0', kind: 'Fragment', metadata: {}, name: 'RelayQueryRelayQL', type: 'User' };})(


      reference), 

      { 
        outerSize: 'override' });

      var children = fragment.getChildren();
      expect(children.length).toBe(2);
      expect(children[0].getSchemaName()).toBe('id');

      // the reference is expanded with overridden query variables
      expect(children[1] instanceof require('RelayQuery').Fragment);
      expect(children[1].getType()).toBe('User');
      var grandchildren = children[1].getChildren();
      expect(grandchildren.length).toBe(2);
      expect(grandchildren[0].getSchemaName()).toBe('id');
      expect(grandchildren[1].getSchemaName()).toBe('profilePicture');
      expect(grandchildren[1].getCallsWithValues()).toEqual([
      { name: 'size', value: 'override' }]);});});});
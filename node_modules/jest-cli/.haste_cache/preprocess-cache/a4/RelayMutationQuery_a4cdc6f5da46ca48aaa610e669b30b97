'use strict';var _RelayConnectionInter=require('RelayConnectionInterface');var 



































































CLIENT_MUTATION_ID=_RelayConnectionInter.CLIENT_MUTATION_ID;var _RelayNodeInterface=require('RelayNodeInterface');var 
ANY_TYPE=_RelayNodeInterface.ANY_TYPE;var ID=_RelayNodeInterface.ID;var TYPENAME=_RelayNodeInterface.TYPENAME;











var RelayMutationQuery={








buildFragmentForFields:function(_ref)





{var fatQuery=_ref.fatQuery;var fieldIDs=_ref.fieldIDs;var tracker=_ref.tracker;
var mutatedFields=[];
require('forEachObject')(fieldIDs,function(dataIDOrIDs,fieldName){
var fatField=getFieldFromFatQuery(fatQuery,fieldName);
var dataIDs=[].concat(dataIDOrIDs);
var trackedChildren=[];
dataIDs.forEach(function(dataID){
trackedChildren.push.apply(trackedChildren,babelHelpers.toConsumableArray(tracker.getTrackedChildrenForID(dataID)));});

var trackedField=fatField.clone(trackedChildren);
if(trackedField){
var mutationField=require('intersectRelayQuery')(trackedField,fatField);
if(mutationField){
mutatedFields.push(mutationField);}}});



return buildMutationFragment(fatQuery,mutatedFields);},


















buildFragmentForEdgeDeletion:function(_ref2)







{var fatQuery=_ref2.fatQuery;var connectionName=_ref2.connectionName;var parentID=_ref2.parentID;var parentName=_ref2.parentName;var tracker=_ref2.tracker;
var fatParent=getFieldFromFatQuery(fatQuery,parentName);
var mutatedFields=[];
var trackedParent=fatParent.clone(
tracker.getTrackedChildrenForID(parentID));

if(trackedParent){
var filterUnterminatedRange=function(node){return (
node.getSchemaName()===connectionName);};

var mutatedField=require('intersectRelayQuery')(
trackedParent,
fatParent,
filterUnterminatedRange);

if(mutatedField){
mutatedFields.push(mutatedField);}}


return buildMutationFragment(fatQuery,mutatedFields);},






















buildFragmentForEdgeInsertion:function(_ref3)









{var fatQuery=_ref3.fatQuery;var connectionName=_ref3.connectionName;var parentID=_ref3.parentID;var edgeName=_ref3.edgeName;var parentName=_ref3.parentName;var rangeBehaviors=_ref3.rangeBehaviors;var tracker=_ref3.tracker;
var trackedChildren=tracker.getTrackedChildrenForID(parentID);

var mutatedFields=[];
var trackedConnections=[];
trackedChildren.forEach(function(trackedChild){
trackedConnections.push.apply(trackedConnections,babelHelpers.toConsumableArray(
findDescendantFields(trackedChild,connectionName)));});



if(trackedConnections.length){(function(){
var keysWithoutRangeBehavior={};
var mutatedEdgeFields=[];
trackedConnections.forEach(function(trackedConnection){
var trackedEdges=findDescendantFields(trackedConnection,'edges');
if(!trackedEdges.length){
return;}

if(trackedConnection.getRangeBehaviorKey() in rangeBehaviors){


trackedEdges.forEach(function(trackedEdge){
mutatedEdgeFields.push.apply(mutatedEdgeFields,babelHelpers.toConsumableArray(trackedEdge.getChildren()));});}else 

{

keysWithoutRangeBehavior[trackedConnection.getShallowHash()]=true;}});


if(mutatedEdgeFields.length){
mutatedFields.push(
buildEdgeField(parentID,edgeName,mutatedEdgeFields));}




if(parentName!=null){
var fatParent=getFieldFromFatQuery(fatQuery,parentName);
var trackedParent=fatParent.clone(trackedChildren);
if(trackedParent){
var filterUnterminatedRange=function(node){return (
!keysWithoutRangeBehavior.hasOwnProperty(node.getShallowHash()));};

var mutatedParent=require('intersectRelayQuery')(
trackedParent,
fatParent,
filterUnterminatedRange);

if(mutatedParent){
mutatedFields.push(mutatedParent);}}}})();}




return buildMutationFragment(fatQuery,mutatedFields);},





buildFragmentForOptimisticUpdate:function(_ref4)

{var response=_ref4.response;var fatQuery=_ref4.fatQuery;


var mutatedFields=require('inferRelayFieldsFromData')(response);
return buildMutationFragment(fatQuery,mutatedFields);},





buildQueryForOptimisticUpdate:function(_ref5)






{var fatQuery=_ref5.fatQuery;var mutation=_ref5.mutation;var response=_ref5.response;var tracker=_ref5.tracker;
var children=[
require('nullthrows')(RelayMutationQuery.buildFragmentForOptimisticUpdate({
response:response,
fatQuery:fatQuery,
tracker:tracker}))];


return require('RelayQuery').Mutation.build(
'OptimisticQuery',
fatQuery.getType(),
mutation.calls[0].name,
null,
children,
mutation.metadata);},









buildQuery:function(_ref6)















{var configs=_ref6.configs;var fatQuery=_ref6.fatQuery;var input=_ref6.input;var mutationName=_ref6.mutationName;var mutation=_ref6.mutation;var tracker=_ref6.tracker;
var children=[
require('RelayQuery').Field.build({
fieldName:CLIENT_MUTATION_ID,
type:'String',
metadata:{isRequisite:true}})];



configs.forEach(function(config){
switch(config.type){
case require('RelayMutationType').REQUIRED_CHILDREN:
children=children.concat(config.children.map(function(child){return (
require('RelayQuery').Fragment.create(
child,
require('RelayMetaRoute').get('$buildQuery'),
{}));}));


break;

case require('RelayMutationType').RANGE_ADD:
children.push(RelayMutationQuery.buildFragmentForEdgeInsertion({
connectionName:config.connectionName,
edgeName:config.edgeName,
fatQuery:fatQuery,
parentID:config.parentID,
parentName:config.parentName,
rangeBehaviors:sanitizeRangeBehaviors(config.rangeBehaviors),
tracker:tracker}));

break;

case require('RelayMutationType').RANGE_DELETE:
case require('RelayMutationType').NODE_DELETE:
children.push(RelayMutationQuery.buildFragmentForEdgeDeletion({
connectionName:config.connectionName,
fatQuery:fatQuery,
parentID:config.parentID,
parentName:config.parentName,
tracker:tracker}));

children.push(
Array.isArray(config.deletedIDFieldName)?
buildDeletedConnectionNodeIDField(config.deletedIDFieldName):
require('RelayQuery').Field.build({
fieldName:config.deletedIDFieldName,
type:'String'}));


break;

case require('RelayMutationType').FIELDS_CHANGE:
children.push(RelayMutationQuery.buildFragmentForFields({
fatQuery:fatQuery,
fieldIDs:config.fieldIDs,
tracker:tracker}));

break;

default:
!
false?require('invariant')(0,
'RelayMutationQuery: Unrecognized config key `%s` for `%s`.',
config.type,
mutationName):undefined;}});




return require('RelayQuery').Mutation.build(
mutationName,
fatQuery.getType(),
mutation.calls[0].name,
input,
children.filter(function(child){return child!=null;}),
mutation.metadata);}};




function getFieldFromFatQuery(
fatQuery,
fieldName)
{
var field=fatQuery.getFieldByStorageKey(fieldName);
!
field?require('invariant')(0,
'RelayMutationQuery: Invalid field name on fat query, `%s`.',
fieldName):undefined;

return field;}


function buildMutationFragment(
fatQuery,
fields)
{
var fragment=require('RelayQuery').Fragment.build(
'MutationQuery',
fatQuery.getType(),
fields);

if(fragment){
!(
fragment instanceof require('RelayQuery').Fragment)?require('invariant')(0,
'RelayMutationQuery: Expected a fragment.'):undefined;

return fragment;}

return null;}


function buildDeletedConnectionNodeIDField(
fieldNames)
{
var field=require('RelayQuery').Field.build({
fieldName:ID,
type:'String'});

for(var ii=fieldNames.length-1;ii>=0;ii--){
field=require('RelayQuery').Field.build({
fieldName:fieldNames[ii],
type:ANY_TYPE,
children:[field],
metadata:{
canHaveSubselections:true}});}



return field;}


function buildEdgeField(
parentID,
edgeName,
edgeFields)
{
var fields=[
require('RelayQuery').Field.build({
fieldName:'cursor',
type:'String'}),

require('RelayQuery').Field.build({
fieldName:TYPENAME,
type:'String'})];


if(require('RelayConnectionInterface').EDGES_HAVE_SOURCE_FIELD&&
!require('RelayRecord').isClientID(parentID)){
fields.push(
require('RelayQuery').Field.build({
children:[
require('RelayQuery').Field.build({
fieldName:ID,
type:'String'}),

require('RelayQuery').Field.build({
fieldName:TYPENAME,
type:'String'})],


fieldName:'source',
metadata:{canHaveSubselections:true},
type:ANY_TYPE}));}



fields.push.apply(fields,babelHelpers.toConsumableArray(edgeFields));
var edgeField=require('flattenRelayQuery')(require('RelayQuery').Field.build({
children:fields,
fieldName:edgeName,
metadata:{canHaveSubselections:true},
type:ANY_TYPE}));

!(
edgeField instanceof require('RelayQuery').Field)?require('invariant')(0,
'RelayMutationQuery: Expected a field.'):undefined;

return edgeField;}


function sanitizeRangeBehaviors(
rangeBehaviors)
{



var unsortedKeys=undefined;
require('forEachObject')(rangeBehaviors,function(value,key){
if(key!==''){
var keyParts=key.

slice(0,-1).

split(/\)\./);
var sortedKey=keyParts.
sort().
join(').')+(
keyParts.length?')':'');
if(sortedKey!==key){
unsortedKeys=unsortedKeys||[];
unsortedKeys.push(key);}}});



if(unsortedKeys){
!
false?require('invariant')(0,
'RelayMutation: To define a range behavior key without sorting '+
'the arguments alphabetically is disallowed as of Relay 0.5.1. Please '+
'sort the argument names of the range behavior key%s `%s`%s.',
unsortedKeys.length===1?'':'s',
unsortedKeys.length===1?
unsortedKeys[0]:
unsortedKeys.length===2?
unsortedKeys[0]+'` and `'+unsortedKeys[1]:
unsortedKeys.slice(0,-1).join('`, `'),
unsortedKeys.length>2?', and `'+unsortedKeys.slice(-1)+'`':''):undefined;}


return rangeBehaviors;}






function findDescendantFields(
rootNode,
fieldName)
{
var fields=[];
function traverse(node){
if(node instanceof require('RelayQuery').Field){
if(node.getSchemaName()===fieldName){
fields.push(node);
return;}}


if(
node===rootNode||
node instanceof require('RelayQuery').Fragment)
{


node.getChildren().forEach(function(child){return traverse(child);});}}


traverse(rootNode);
return fields;}


module.exports=RelayMutationQuery;
'use strict';









jest.autoMockOff();var 

transform=require('babel-core').transform;var transformFromAst=require('babel-core').transformFromAst;

var babelOptions={
babelrc:false,
compact:true};


function toString(ast){
return normalize(transformFromAst(ast,babelOptions).code);}


function normalize(code){
return transform(code,babelOptions).code;}


function toAst(code){
return transform(code,babelHelpers.extends({},babelOptions,{code:false})).ast;}


describe('inline constants',function(){
it('replaces __DEV__ in the code',function(){
var code='function a() {\n      var a = __DEV__ ? 1 : 2;\n      var b = a.__DEV__;\n      var c = function __DEV__(__DEV__) {};\n    }';var _inline=




require('../inline')('arbitrary.js',{code:code},{dev:true});var ast=_inline.ast;
expect(toString(ast)).toEqual(normalize(code.replace(/__DEV__/,'true')));});


it('replaces Platform.OS in the code if Platform is a global',function(){
var code='function a() {\n      var a = Platform.OS;\n      var b = a.Platform.OS;\n    }';var _inline2=



require('../inline')('arbitrary.js',{code:code},{platform:'ios'});var ast=_inline2.ast;
expect(toString(ast)).toEqual(normalize(code.replace(/Platform\.OS/,'"ios"')));});


it('replaces Platform.OS in the code if Platform is a top level import',function(){
var code='\n      var Platform = require(\'Platform\');\n      function a() {\n        if (Platform.OS === \'android\') a = function() {};\n        var b = a.Platform.OS;\n      }';var _inline3=





require('../inline')('arbitrary.js',{code:code},{platform:'ios'});var ast=_inline3.ast;
expect(toString(ast)).toEqual(normalize(code.replace(/Platform\.OS/,'"ios"')));});


it('replaces require("Platform").OS in the code',function(){
var code='function a() {\n      var a = require(\'Platform\').OS;\n      var b = a.require(\'Platform\').OS;\n    }';var _inline4=



require('../inline')('arbitrary.js',{code:code},{platform:'android'});var ast=_inline4.ast;
expect(toString(ast)).toEqual(
normalize(code.replace(/require\('Platform'\)\.OS/,'"android"')));});


it('replaces React.Platform.OS in the code if React is a global',function(){
var code='function a() {\n      var a = React.Platform.OS;\n      var b = a.React.Platform.OS;\n    }';var _inline5=



require('../inline')('arbitrary.js',{code:code},{platform:'ios'});var ast=_inline5.ast;
expect(toString(ast)).toEqual(normalize(code.replace(/React\.Platform\.OS/,'"ios"')));});


it('replaces React.Platform.OS in the code if React is a top level import',function(){
var code='\n      var React = require(\'React\');\n      function a() {\n        if (React.Platform.OS === \'android\') a = function() {};\n        var b = a.React.Platform.OS;\n      }';var _inline6=





require('../inline')('arbitrary.js',{code:code},{platform:'ios'});var ast=_inline6.ast;
expect(toString(ast)).toEqual(normalize(code.replace(/React.Platform\.OS/,'"ios"')));});


it('replaces require("React").Platform.OS in the code',function(){
var code='function a() {\n      var a = require(\'React\').Platform.OS;\n      var b = a.require(\'React\').Platform.OS;\n    }';var _inline7=



require('../inline')('arbitrary.js',{code:code},{platform:'android'});var ast=_inline7.ast;
expect(toString(ast)).toEqual(
normalize(code.replace(/require\('React'\)\.Platform\.OS/,'"android"')));});


it('replaces process.env.NODE_ENV in the code',function(){
var code='function a() {\n      if (process.env.NODE_ENV === \'production\') {\n        return require(\'Prod\');\n      }\n      return require(\'Dev\');\n    }';var _inline8=





require('../inline')('arbitrary.js',{code:code},{dev:false});var ast=_inline8.ast;
expect(toString(ast)).toEqual(
normalize(code.replace(/process\.env\.NODE_ENV/,'"production"')));});


it('replaces process.env.NODE_ENV in the code',function(){
var code='function a() {\n      if (process.env.NODE_ENV === \'production\') {\n        return require(\'Prod\');\n      }\n      return require(\'Dev\');\n    }';var _inline9=





require('../inline')('arbitrary.js',{code:code},{dev:true});var ast=_inline9.ast;
expect(toString(ast)).toEqual(
normalize(code.replace(/process\.env\.NODE_ENV/,'"development"')));});


it('accepts an AST as input',function(){
var code='function ifDev(a,b){return __DEV__?a:b;}';var _inline10=
require('../inline')('arbitrary.hs',{ast:toAst(code)},{dev:false});var ast=_inline10.ast;
expect(toString(ast)).toEqual(code.replace(/__DEV__/,'false'));});});
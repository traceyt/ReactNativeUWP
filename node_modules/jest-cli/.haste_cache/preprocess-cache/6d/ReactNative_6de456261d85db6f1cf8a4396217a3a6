'use strict';
































console.log(require.resolve('ReactNativeDefaultInjection'));
require('ReactNativeDefaultInjection').inject();

var createElement=require('ReactElement').createElement;
var createFactory=require('ReactElement').createFactory;
var cloneElement=require('ReactElement').cloneElement;

if(__DEV__){
createElement=require('ReactElementValidator').createElement;
createFactory=require('ReactElementValidator').createFactory;
cloneElement=require('ReactElementValidator').cloneElement;}


var resolveDefaultProps=function(element){

var defaultProps=element.type.defaultProps;
var props=element.props;
for(var propName in defaultProps){
if(props[propName]===undefined){
props[propName]=defaultProps[propName];}}};





var augmentElement=function(element){
if(__DEV__){
!
false?require('fbjs/lib/invariant')(0,
'This optimized path should never be used in DEV mode because '+
'it does not provide validation. Check your JSX transform.'):undefined;}


element._owner=require('ReactCurrentOwner').current;
if(element.type.defaultProps){
resolveDefaultProps(element);}

return element;};


var render=function(
element,
mountInto,
callback)
{
return require('ReactNativeMount').renderComponent(element,mountInto,callback);};


var ReactNative={
hasReactNativeInitialized:false,
Children:{
map:require('ReactChildren').map,
forEach:require('ReactChildren').forEach,
count:require('ReactChildren').count,
toArray:require('ReactChildren').toArray,
only:require('onlyChild')},

Component:require('ReactComponent'),
PropTypes:require('ReactPropTypes'),
createClass:require('ReactClass').createClass,
createElement:createElement,
createFactory:createFactory,
cloneElement:cloneElement,
_augmentElement:augmentElement,
findNodeHandle:require('findNodeHandle'),
render:render,
unmountComponentAtNode:require('ReactNativeMount').unmountComponentAtNode,


unstable_batchedUpdates:require('ReactUpdates').batchedUpdates,



__spread:Object.assign,

unmountComponentAtNodeAndRemoveContainer:require('ReactNativeMount').unmountComponentAtNodeAndRemoveContainer,
isValidClass:require('ReactElement').isValidFactory,
isValidElement:require('ReactElement').isValidElement,


renderComponent:function(
element,
mountInto,
callback)
{
require('fbjs/lib/warning')('Use React.render instead of React.renderComponent');
return ReactNative.render(element,mountInto,callback);}};






if(
typeof __REACT_DEVTOOLS_GLOBAL_HOOK__!=='undefined'&&
typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject==='function'){
__REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
CurrentOwner:require('ReactCurrentOwner'),
InstanceHandles:require('ReactInstanceHandles'),
Mount:require('ReactNativeMount'),
Reconciler:require('ReactReconciler'),
TextComponent:require('ReactNativeTextComponent')});}



module.exports=ReactNative;
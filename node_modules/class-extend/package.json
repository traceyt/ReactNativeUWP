{
  "_args": [
    [
      "class-extend@https://registry.npmjs.org/class-extend/-/class-extend-0.1.2.tgz",
      "C:\\gitRepo\\f8app"
    ]
  ],
  "_from": "class-extend@>=0.1.0 <0.2.0",
  "_id": "class-extend@0.1.2",
  "_inCache": true,
  "_location": "/class-extend",
  "_phantomChildren": {},
  "_requested": {
    "name": "class-extend",
    "raw": "class-extend@https://registry.npmjs.org/class-extend/-/class-extend-0.1.2.tgz",
    "rawSpec": "https://registry.npmjs.org/class-extend/-/class-extend-0.1.2.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/class-extend/-/class-extend-0.1.2.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/ast-query",
    "/yeoman-generator"
  ],
  "_resolved": "https://registry.npmjs.org/class-extend/-/class-extend-0.1.2.tgz",
  "_shasum": "8057a82b00f53f82a5d62c50ef8cffdec6fabc34",
  "_shrinkwrap": null,
  "_spec": "class-extend@https://registry.npmjs.org/class-extend/-/class-extend-0.1.2.tgz",
  "_where": "C:\\gitRepo\\f8app",
  "author": {
    "name": "Simon Boudrias"
  },
  "bugs": {
    "url": "https://github.com/sboudrias/class-extend/issues"
  },
  "dependencies": {
    "object-assign": "^2.0.0"
  },
  "description": "Backbone like Class.extend utility for Node",
  "devDependencies": {
    "mocha": "^2.1.0",
    "sinon": "^1.12.2"
  },
  "files": [
    "index.js"
  ],
  "homepage": "https://github.com/sboudrias/class-extend#readme",
  "keywords": [
    "inheritance",
    "oop",
    "class",
    "extend"
  ],
  "license": "MIT",
  "name": "class-extend",
  "optionalDependencies": {},
  "readme": "Class.extend [![Build Status](https://travis-ci.org/yeoman/generator.png?branch=master)](https://travis-ci.org/SBoudrias/class-extend)\n============\n\nBackbone's `.extend` like inheritance helper for Node.js\n\nUsage\n------------\n\nYou basically got two options:\n\n``` javascript\n// 1. Extend from the blank class\nvar Base = require('class-extend');\nvar Sub = Base.extend();\n\n// 2. Add the .extend helper to a class\nMyClass.extend = require('class-extend').extend;\n```\n\n#### `.extend()`\n\n`.extend` allow you to assign prototype and static methods.\n\nIf no `constructor` method is assigned, the parent constructor method will be called by default.\n\n``` javascript\n// Extend a class\nvar Sub = Parent.extend({\n  // Overwrite the default constructor\n  constructor: function () {},\n\n  // Sub class prototypes methods\n  hello: function () { console.log('hello'); }\n}, {\n  // Constructor static methods\n  hey: function () { console.log('hey'); }\n});\n\nSub.hey();\n// LOG: hey\n\nvar instance = new Sub();\ninstance.hello();\n// LOG: hello\n```\n\n#### `.__super__`\n\nSub classes are assigned a `__super__` static property pointing to their parent prototype.\n\n``` javascript\nvar Sub = Parent.extend();\nassert(Sub.__super__ === Parent.prototype);\n```\n\nLicense\n---------------\n\nCopyright (c) 2013 Simon Boudrias  \nLicensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/sboudrias/class-extend.git"
  },
  "scripts": {
    "test": "mocha"
  },
  "version": "0.1.2"
}

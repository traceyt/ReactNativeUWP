'use strict';


































































var IMAGE_UPLOAD_MAX_SIZE={
width:2048,
height:2048};


var _uploadedImageHashes={};

function _getImageCacheKey(
uri,
transformData)
{
return JSON.stringify({uri:uri,transformData:transformData});}var 


AdsManagerImageUploadController=function(){function AdsManagerImageUploadController(){babelHelpers.classCallCheck(this,AdsManagerImageUploadController);}babelHelpers.createClass(AdsManagerImageUploadController,[{key:'fetchPreviewURLs',value:function fetchPreviewURLs(

options){
if(options.shouldSkipImageProcessing){
require('AdsManagerCreativeUtils').fetchPreviewURLs(
options.accountID,
options.creativeSpec,
options.postSpec,
options.onSuccess,
options.onFailure);

return;}


this.cropAndUpload(
options.accountID,
options.legacyAccountID,
options.uri,
options.transformData,
{
onUploadStarted:null,
onUploadSucceeded:function(imageHash){
var creativeSpec=
require('AdsManagerCreativeUtils').updateCreativeSpecWithImageHash(
options.creativeSpec,
imageHash);

require('AdsManagerCreativeUtils').fetchPreviewURLs(
options.accountID,
creativeSpec,
options.postSpec,
options.onSuccess,
options.onFailure);},


onUploadFailed:options.onFailure,
onUploadProgressChanged:null,
onCropFailed:options.onFailure});}},{key:'cropAndUpload',value:function cropAndUpload(





accountID,
legacyAccountID,
uri,
imageTransformData,
callbacks)
{var _this=this;
if(!imageTransformData){
callbacks.onCropFailed&&callbacks.onCropFailed(
'Image crop: invalid imageTransformData');

return;}






var cacheKey=_getImageCacheKey(uri,imageTransformData);
var existingHash=_uploadedImageHashes[cacheKey];
if(existingHash){
callbacks.onUploadSucceeded&&
callbacks.onUploadSucceeded(existingHash);
return;}


require('ImageEditor').cropImage(
uri,
this.$AdsManagerImageUploadController_getScaledTransformData(imageTransformData),
function(croppedImageURI){
callbacks.onUploadStarted&&callbacks.onUploadStarted();
_this.$AdsManagerImageUploadController_uploadImage(
accountID,
legacyAccountID,
croppedImageURI,
cacheKey,babelHelpers.extends({},

callbacks,{
onUploadSucceeded:function(imageHash){
callbacks.onUploadSucceeded&&callbacks.onUploadSucceeded(imageHash);

require('ImageStore').removeImageForTag(croppedImageURI);},

onUploadFailed:function(error){
callbacks.onUploadFailed&&callbacks.onUploadFailed(error);

require('ImageStore').removeImageForTag(croppedImageURI);}}));},




function(error){
callbacks.onCropFailed&&callbacks.onCropFailed(
'Image crop: '+error.message);});}},{key:'$AdsManagerImageUploadController_uploadImage',value:function $AdsManagerImageUploadController_uploadImage(






accountID,
legacyAccountID,
uri,
cacheKey,
callbacks)
{




var clientMutationID=require('ClientIDs').getNewClientID();
var query_params={
input:JSON.stringify({
client_mutation_id:clientMutationID,
actor_id:require('RelayAPIConfig').actorID,
ad_account_id:accountID})};


var mutation=require('RelayQuery').Node.create(function(){return {calls:[{kind:'Call',metadata:{},name:'ad_account_upload_image',value:{kind:'CallVariable',callVariableName:'input'}}],children:[{children:[{fieldName:'hash',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'image',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'AdImage'},{fieldName:'client_mutation_id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],kind:'Mutation',metadata:{inputType:'AdAccountUploadImageData!'},name:'AdsManagerImageUploadController',responseType:'AdAccountUploadImageResponsePayload'};}(),









require('RelayMetaRoute').get('AdsManagerImageUploadController'),
query_params);


var request_params={
pretty:(!!__DEV__).toString(),
q:require('printRelayQuery')(mutation).text,
query_params:JSON.stringify(query_params),
media:require('FBGraphRequest').imageFileFromSystemURI(uri)};


new (require('FBGraphRequest'))(require('RelayAPIConfig').graphURI.getPath()).
setMethod('POST').
setData(request_params).
setFailureHandler(function(error){
callbacks.onUploadFailed&&callbacks.onUploadFailed(
'Image upload: error => '+error);}).


setSuccessHandler(function(response){
if(!response){
callbacks.onUploadFailed&&callbacks.onUploadFailed(
'Image upload: empty response');

return;}


var mutationResult=response.ad_account_upload_image;
if(!mutationResult||
mutationResult.client_mutation_id!==clientMutationID||
!mutationResult.image){
callbacks.onUploadFailed&&callbacks.onUploadFailed(
'Image upload: invalid mutation result => '+mutationResult);

return;}


var imageHash=mutationResult.image.hash;
_uploadedImageHashes[cacheKey]=imageHash;
callbacks.onUploadSucceeded&&
callbacks.onUploadSucceeded(imageHash,cacheKey);}).

setUploadProgressListener(
function(progress){return callbacks.onUploadProgressChanged&&
callbacks.onUploadProgressChanged(progress);}).

send();}},{key:'$AdsManagerImageUploadController_getScaledTransformData',value:function $AdsManagerImageUploadController_getScaledTransformData(



originalTransformData)
{
var displaySize=babelHelpers.extends({},originalTransformData.size);
if(displaySize.width<=IMAGE_UPLOAD_MAX_SIZE.width&&
displaySize.height<=IMAGE_UPLOAD_MAX_SIZE.height){

return originalTransformData;}


if(displaySize.width>=displaySize.height){
displaySize.height=Math.ceil(
IMAGE_UPLOAD_MAX_SIZE.width*displaySize.height/displaySize.width);

displaySize.width=IMAGE_UPLOAD_MAX_SIZE.width;}else 
{
displaySize.width=Math.ceil(
IMAGE_UPLOAD_MAX_SIZE.height*displaySize.width/displaySize.height);

displaySize.height=IMAGE_UPLOAD_MAX_SIZE.height;}





return babelHelpers.extends({},originalTransformData,{displaySize:displaySize});}}]);return AdsManagerImageUploadController;}();



module.exports=new AdsManagerImageUploadController();
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails oncall+relay
 */

'use strict';

require('configureForRelayOSS');




describe('RelayQueryNode.prototype.getCallsWithValues()', function () {var 
  getNode = require('RelayTestUtils').getNode;

  function getProfilePicture(callValue, variables) {
    return getNode(
    require('QueryBuilder').createField({ 
      calls: [require('QueryBuilder').createCall('size', callValue)], 
      fieldName: 'profile_picture' }), 

    variables);}



  describe('scalar-valued calls', function () {
    describe('with inline values', function () {
      it('are null when empty', function () {
        var field = getProfilePicture(null);
        expect(field.getCallsWithValues()).toEqual([{ 
          name: 'size', 
          value: null }]);});



      it('return singular values', function () {
        var field = getProfilePicture(require('QueryBuilder').createCallValue(32));
        expect(field.getCallsWithValues()).toEqual([{ 
          name: 'size', 
          value: 32 }]);});});




    describe('with variables', function () {
      it('return `null` for empty values', function () {
        var field = getProfilePicture(require('QueryBuilder').createCallVariable('size'), { 
          size: null });

        expect(field.getCallsWithValues()).toEqual([{ 
          name: 'size', 
          value: null }]);});



      it('return empty arrays', function () {
        var field = getProfilePicture(require('QueryBuilder').createCallVariable('size'), { 
          size: [] });

        expect(field.getCallsWithValues()).toEqual([{ 
          name: 'size', 
          value: [] }]);});



      it('return singular values', function () {
        var field = getProfilePicture(require('QueryBuilder').createCallVariable('size'), { 
          size: 32 });

        expect(field.getCallsWithValues()).toEqual([{ 
          name: 'size', 
          value: 32 }]);});



      it('return array values', function () {
        var field = getProfilePicture(require('QueryBuilder').createCallVariable('size'), { 
          size: [32] });

        expect(field.getCallsWithValues()).toEqual([{ 
          name: 'size', 
          value: [32] }]);});});});





  describe('array-valued calls', function () {
    describe('with inline values', function () {
      it('return empty arrays', function () {
        var field = getProfilePicture([]);
        expect(field.getCallsWithValues()).toEqual([{ 
          name: 'size', 
          value: [] }]);});



      it('return an array of values', function () {
        var field = getProfilePicture([
        require('QueryBuilder').createCallValue(64)]);

        expect(field.getCallsWithValues()).toEqual([{ 
          name: 'size', 
          value: [64] }]);});});




    describe('with variable', function () {
      it('return `[null]` for empty values', function () {
        var field = getProfilePicture(
        [require('QueryBuilder').createCallVariable('size')], 
        { size: null });

        expect(field.getCallsWithValues()).toEqual([{ 
          name: 'size', 
          value: [null] }]);});



      it('return empty arrays', function () {
        var field = getProfilePicture(
        [require('QueryBuilder').createCallVariable('size')], 
        { size: [] });

        expect(field.getCallsWithValues()).toEqual([{ 
          name: 'size', 
          value: [[]] }]);});



      it('return arrays for singular values', function () {
        var field = getProfilePicture(
        [require('QueryBuilder').createCallVariable('size')], 
        { size: 32 });

        expect(field.getCallsWithValues()).toEqual([{ 
          name: 'size', 
          value: [32] }]);});



      it('return nested ararys for array values', function () {
        var field = getProfilePicture(
        [require('QueryBuilder').createCallVariable('size')], 
        { size: [32] });

        expect(field.getCallsWithValues()).toEqual([{ 
          name: 'size', 
          value: [[32]] }]);});



      it('returns flat arrays for scalar values', function () {
        var field = getProfilePicture([
        require('QueryBuilder').createCallVariable('width'), 
        require('QueryBuilder').createCallVariable('height')], 
        { 
          width: 32, 
          height: 64 });

        expect(field.getCallsWithValues()).toEqual([{ 
          name: 'size', 
          value: [32, 64] }]);});});});});
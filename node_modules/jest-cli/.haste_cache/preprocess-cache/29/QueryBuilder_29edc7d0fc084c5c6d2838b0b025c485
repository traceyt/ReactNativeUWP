'use strict';








































var EMPTY_CALLS=[];
var EMPTY_CHILDREN=[];
var EMPTY_DIRECTIVES=[];
var EMPTY_METADATA={};

if(__DEV__){
Object.freeze(EMPTY_CALLS);
Object.freeze(EMPTY_CHILDREN);
Object.freeze(EMPTY_DIRECTIVES);
Object.freeze(EMPTY_METADATA);}







var QueryBuilder={
createBatchCallVariable:function(
sourceQueryID,
jsonPath)
{
return {
kind:'BatchCallVariable',
sourceQueryID:sourceQueryID,
jsonPath:jsonPath};},



createCall:function(
name,
value,
type)
{
return {
kind:'Call',
name:name,
metadata:{
type:type||null},

value:value};},



createCallValue:function(
callValue)
{
return {
kind:'CallValue',
callValue:callValue};},



createCallVariable:function(
callVariableName)
{
return {
kind:'CallVariable',
callVariableName:callVariableName};},



createDirective:function(
name,
args)
{
return {
args:args,
kind:'Directive',
name:name};},



createDirectiveArgument:function(
name,
value)
{
return {
name:name,
value:value};},



createField:function(partialField)







{
var partialMetadata=partialField.metadata||EMPTY_METADATA;
return {
alias:partialField.alias,
calls:partialField.calls||EMPTY_CALLS,
children:partialField.children||EMPTY_CHILDREN,
directives:partialField.directives||EMPTY_DIRECTIVES,
fieldName:partialField.fieldName,
kind:'Field',
metadata:{
canHaveSubselections:!!partialMetadata.canHaveSubselections,
inferredRootCallName:partialMetadata.inferredRootCallName,
inferredPrimaryKey:partialMetadata.inferredPrimaryKey,
isConnection:!!partialMetadata.isConnection,
isFindable:!!partialMetadata.isFindable,
isGenerated:!!partialMetadata.isGenerated,
isPlural:!!partialMetadata.isPlural,
isRequisite:!!partialMetadata.isRequisite,
isAbstract:!!partialMetadata.isAbstract},

type:partialField.type};},



createFragment:function(partialFragment)






{
var metadata=partialFragment.metadata||EMPTY_METADATA;
return {
children:partialFragment.children||EMPTY_CHILDREN,
directives:partialFragment.directives||EMPTY_DIRECTIVES,
id:require('generateConcreteFragmentID')(),
kind:'Fragment',
metadata:{
isAbstract:!!metadata.isAbstract,
pattern:!!metadata.pattern,
plural:!!metadata.plural},

name:partialFragment.name,
type:partialFragment.type};},



createFragmentReference:function(
fragment)
{
return {
kind:'FragmentReference',
fragment:fragment};},



createMutation:function(partialMutation)






{
var metadata=partialMutation.metadata||EMPTY_METADATA;
return {
calls:partialMutation.calls||EMPTY_CALLS,
children:partialMutation.children||EMPTY_CHILDREN,
directives:partialMutation.directives||EMPTY_DIRECTIVES,
kind:'Mutation',
metadata:{
inputType:metadata.inputType},

name:partialMutation.name,
responseType:partialMutation.responseType};},



createQuery:function(partialQuery)








{
var metadata=partialQuery.metadata||EMPTY_METADATA;
var calls=[];
var identifyingArgName=metadata.identifyingArgName;
if(
identifyingArgName==null&&
require('RelayNodeInterface').isNodeRootCall(partialQuery.fieldName))
{
identifyingArgName=require('RelayNodeInterface').ID;}

if(identifyingArgName!=null){
!(
partialQuery.identifyingArgValue!=null)?require('invariant')(0,
'QueryBuilder.createQuery(): An argument value is required for '+
'query `%s(%s: ???)`.',
partialQuery.fieldName,
identifyingArgName):undefined;

calls=[QueryBuilder.createCall(
identifyingArgName,
partialQuery.identifyingArgValue,
metadata.identifyingArgType)];}


return {
calls:calls,
children:partialQuery.children||EMPTY_CHILDREN,
directives:partialQuery.directives||EMPTY_DIRECTIVES,
fieldName:partialQuery.fieldName,
isDeferred:!!(partialQuery.isDeferred||metadata.isDeferred),
kind:'Query',
metadata:{
identifyingArgName:identifyingArgName,
identifyingArgType:metadata.identifyingArgType,
isAbstract:!!metadata.isAbstract,
isPlural:!!metadata.isPlural},

name:partialQuery.name,
type:partialQuery.type};},



createSubscription:function(partialSubscription)






{
var metadata=partialSubscription.metadata||EMPTY_METADATA;
return {
calls:partialSubscription.calls||EMPTY_CALLS,
children:partialSubscription.children||EMPTY_CHILDREN,
directives:partialSubscription.directives||EMPTY_DIRECTIVES,
kind:'Subscription',
metadata:{
inputType:metadata.inputType},

name:partialSubscription.name,
responseType:partialSubscription.responseType};},



getBatchCallVariable:function(node){
if(isConcreteKind(node,'BatchCallVariable')){
return node;}},



getCallVariable:function(node){
if(isConcreteKind(node,'CallVariable')){
return node;}},



getField:function(node){
if(isConcreteKind(node,'Field')){
return node;}},



getFragment:function(node){
if(isConcreteKind(node,'Fragment')){
return node;}},



getFragmentReference:function(node){
if(isConcreteKind(node,'FragmentReference')){
return node;}},



getMutation:function(node){
if(isConcreteKind(node,'Mutation')){
return node;}},



getQuery:function(node){
if(isConcreteKind(node,'Query')){
return node;}},



getSubscription:function(node){
if(isConcreteKind(node,'Subscription')){
return node;}}};




function isConcreteKind(node,kind){
return (
typeof node==='object'&&
node!==null&&
node.kind===kind);}



module.exports=QueryBuilder;
'use strict';









jest.autoMockOff();



function parse(code){
return require('babel-core').transform(code,{code:false,babelrc:false,compact:true});}


var babelOptions={
babelrc:false,
compact:true,
retainLines:false};


function normalize(_ref){var code=_ref.code;
return require('babel-core').transform(code,babelOptions).code;}


describe('constant expressions',function(){
it('can optimize conditional expressions with constant conditions',function(){
var code='\n      a(\n        \'production\'=="production",\n        \'production\'!==\'development\',\n        false && 1 || 0 || 2,\n        true || 3,\n        \'android\'===\'ios\' ? null : {},\n        \'android\'===\'android\' ? {a:1} : {a:0},\n        \'foo\'===\'bar\' ? b : c,\n        f() ? g() : h()\n      );';










expect(normalize(require('../constant-folding')('arbitrary.js',parse(code)))).
toEqual('a(true,true,2,true,{},{a:1},c,f()?g():h());');});


it('can optimize ternary expressions with constant conditions',function(){
var code='var a = true ? 1 : 2;\n       var b = \'android\' == \'android\'\n         ? (\'production\' != \'production\' ? \'a\' : \'A\')\n         : \'i\';';




expect(normalize(require('../constant-folding')('arbitrary.js',parse(code)))).
toEqual('var a=1;var b=\'A\';');});


it('can optimize logical operator expressions with constant conditions',function(){
var code='\n      var a = true || 1;\n      var b = \'android\' == \'android\' &&\n        \'production\' != \'production\' || null || "A";';



expect(normalize(require('../constant-folding')('arbitrary.js',parse(code)))).
toEqual('var a=true;var b="A";');});


it('can optimize logical operators with partly constant operands',function(){
var code='\n      var a = "truthy" || z();\n      var b = "truthy" && z();\n      var c = null && z();\n      var d = null || z();\n      var e = !1 && z();\n    ';






expect(normalize(require('../constant-folding')('arbitrary.js',parse(code)))).
toEqual('var a="truthy";var b=z();var c=null;var d=z();var e=false;');});


it('can remode an if statement with a falsy constant test',function(){
var code='\n      if (\'production\' === \'development\' || false) {\n        var a = 1;\n      }\n    ';




expect(normalize(require('../constant-folding')('arbitrary.js',parse(code)))).
toEqual('');});


it('can optimize if-else-branches with constant conditions',function(){
var code='\n      if (\'production\' == \'development\') {\n        var a = 1;\n        var b = a + 2;\n      } else if (\'development\' == \'development\') {\n        var a = 3;\n        var b = a + 4;\n      } else {\n        var a = \'b\';\n      }\n    ';










expect(normalize(require('../constant-folding')('arbitrary.js',parse(code)))).
toEqual('{var a=3;var b=a+4;}');});


it('can optimize nested if-else constructs',function(){
var code='\n      if (\'ios\' === "android") {\n        if (true) {\n          require(\'a\');\n        } else {\n          require(\'b\');\n        }\n      } else if (\'android\' === \'android\') {\n        if (true) {\n          require(\'c\');\n        } else {\n          require(\'d\');\n        }\n      }\n    ';














expect(normalize(require('../constant-folding')('arbitrary.js',parse(code)))).
toEqual('{{require(\'c\');}}');});});
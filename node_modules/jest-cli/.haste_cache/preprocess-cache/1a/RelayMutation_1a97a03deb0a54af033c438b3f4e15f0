'use strict';var 










































RelayMutation=function(){














function RelayMutation(props){babelHelpers.classCallCheck(this,RelayMutation);
this.$RelayMutation_didShowFakeDataWarning=false;
this.$RelayMutation_unresolvedProps=props;}babelHelpers.createClass(RelayMutation,[{key:'bindContext',value:function bindContext(





context){
if(!this.$RelayMutation_context){
this.$RelayMutation_context=context;
this.$RelayMutation_resolveProps();}else 
{
!(
context===this.$RelayMutation_context)?require('invariant')(0,
'%s: Mutation instance cannot be used in different Relay contexts.',
this.constructor.name):undefined;}}},{key:'getMutation',value:function getMutation()








{
!
false?require('invariant')(0,
'%s: Expected abstract method `getMutation` to be implemented.',
this.constructor.name):undefined;}},{key:'getFatQuery',value:function getFatQuery()

























{
!
false?require('invariant')(0,
'%s: Expected abstract method `getFatQuery` to be implemented.',
this.constructor.name):undefined;}},{key:'getConfigs',value:function getConfigs()













































































{
!
false?require('invariant')(0,
'%s: Expected abstract method `getConfigs` to be implemented.',
this.constructor.name):undefined;}},{key:'getVariables',value:function getVariables()






{
!
false?require('invariant')(0,
'%s: Expected abstract method `getVariables` to be implemented.',
this.constructor.name):undefined;}},{key:'getFiles',value:function getFiles()






{
return null;}},{key:'getOptimisticResponse',value:function getOptimisticResponse()














{
return null;}},{key:'getOptimisticConfigs',value:function getOptimisticConfigs()








{
return null;}},{key:'getCollisionKey',value:function getCollisionKey()








{
return null;}},{key:'$RelayMutation_resolveProps',value:function $RelayMutation_resolveProps()


{var _this=this;
var fragments=this.constructor.fragments;
var initialVariables=this.constructor.initialVariables||{};

var props=this.$RelayMutation_unresolvedProps;
var resolvedProps=babelHelpers.extends({},props);
require('forEachObject')(fragments,function(fragmentBuilder,fragmentName){
var propValue=props[fragmentName];
require('warning')(
propValue!==undefined,
'RelayMutation: Expected data for fragment `%s` to be supplied to '+
'`%s` as a prop. Pass an explicit `null` if this is intentional.',
fragmentName,
_this.constructor.name);


if(propValue==null){
return;}

if(typeof propValue!=='object'){
require('warning')(
false,
'RelayMutation: Expected data for fragment `%s` supplied to `%s` '+
'to be an object.',
fragmentName,
_this.constructor.name);

return;}


var fragment=require('RelayQuery').Fragment.create(
buildMutationFragment(
_this.constructor.name,
fragmentName,
fragmentBuilder,
initialVariables),

require('RelayMetaRoute').get('$RelayMutation_'+_this.constructor.name),
initialVariables);


if(fragment.isPlural()){
!
Array.isArray(propValue)?require('invariant')(0,
'RelayMutation: Invalid prop `%s` supplied to `%s`, expected an '+
'array of records because the corresponding fragment is plural.',
fragmentName,
_this.constructor.name):undefined;

var dataIDs=propValue.map(function(item,ii){
!(
typeof item==='object'&&item!=null)?require('invariant')(0,
'RelayMutation: Invalid prop `%s` supplied to `%s`, '+
'expected element at index %s to have query data.',
fragmentName,
_this.constructor.name,
ii):undefined;

var dataID=require('RelayFragmentPointer').getDataID(item,fragment);
!
dataID?require('invariant')(0,
'RelayMutation: Invalid prop `%s` supplied to `%s`, '+
'expected element at index %s to have query data.',
fragmentName,
_this.constructor.name,
ii):undefined;

return dataID;});


resolvedProps[fragmentName]=dataIDs.map(
function(dataID){return _this.$RelayMutation_context.read(fragment,dataID);});}else 

{
!
!Array.isArray(propValue)?require('invariant')(0,
'RelayMutation: Invalid prop `%s` supplied to `%s`, expected a '+
'single record because the corresponding fragment is not plural.',
fragmentName,
_this.constructor.name):undefined;

var dataID=require('RelayFragmentPointer').getDataID(propValue,fragment);
if(dataID){
resolvedProps[fragmentName]=_this.$RelayMutation_context.read(fragment,dataID);}else 
{
if(__DEV__){
if(!_this.$RelayMutation_didShowFakeDataWarning){
_this.$RelayMutation_didShowFakeDataWarning=true;
require('warning')(
false,
'RelayMutation: Expected prop `%s` supplied to `%s` to '+
'be data fetched by Relay. This is likely an error unless '+
'you are purposely passing in mock data that conforms to '+
'the shape of this mutation\'s fragment.',
fragmentName,
_this.constructor.name);}}}}});






this.props=resolvedProps;}}],[{key:'getFragment',value:function getFragment(



fragmentName,
variableMapping)
{var _this2=this;

var fragments=this.fragments;
var fragmentBuilder=fragments[fragmentName];
if(!fragmentBuilder){
!
false?require('invariant')(0,
'%s.getFragment(): `%s` is not a valid fragment name. Available '+
'fragments names: %s',
this.name,
fragmentName,
Object.keys(fragments).map(function(name){return '`'+name+'`';}).join(', ')):undefined;}



var initialVariables=this.initialVariables||{};
var prepareVariables=this.prepareVariables;

return require('RelayFragmentReference').createForContainer(
function(){return buildMutationFragment(
_this2.name,
fragmentName,
fragmentBuilder,
initialVariables);},

initialVariables,
variableMapping,
prepareVariables);}}]);return RelayMutation;}();







function buildMutationFragment(
mutationName,
fragmentName,
fragmentBuilder,
variables)
{
var fragment=require('buildRQL').Fragment(
fragmentBuilder,
variables);

!
fragment?require('invariant')(0,
'Relay.QL defined on mutation `%s` named `%s` is not a valid fragment. '+
'A typical fragment is defined using: Relay.QL`fragment on Type {...}`',
mutationName,
fragmentName):undefined;

return fragment;}


module.exports=RelayMutation;
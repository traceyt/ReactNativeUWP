/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails oncall+relay
 */

'use strict';

require('configureForRelayOSS');

jest.dontMock('RelayRenderer');










describe('RelayRenderer.render', function () {
  var MockComponent = undefined;
  var MockContainer = undefined;

  var container = undefined;
  var queryConfig = undefined;
  var renderedComponent = undefined;

  function renderElement(element) {
    renderedComponent = require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react-dom').render(element, container);}


  function getRenderOutput() {
    return require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react/lib/ReactTestUtils.js').findRenderedComponentWithType(
    renderedComponent, require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react-static-container'));}




  beforeEach(function () {
    jest.resetModuleRegistry();

    MockComponent = require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createClass({ displayName: 'MockComponent', render: function () {return require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement('div', null);} });
    MockContainer = require('Relay').createContainer(MockComponent, { 
      fragments: {} });


    container = document.createElement('div');
    queryConfig = require('RelayQueryConfig').genMockInstance();

    jasmine.addMatchers({ 
      toBeUpdated: function () {
        return { 
          compare: function (actual) {
            return { 
              pass: actual.props.shouldUpdate };} };}, 




      toBeRenderedChild: function () {
        return { 
          compare: function (actual) {
            return { 
              pass: getRenderOutput().props.children === actual };} };} });});







  it('defaults to null if unready and `render` is not supplied', function () {
    renderElement(
    require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(require('RelayRenderer'), { Container: MockContainer, queryConfig: queryConfig }));

    expect(null).toBeRenderedChild();});


  it('defaults to component if ready and `render` is not supplied', function () {
    renderElement(
    require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(require('RelayRenderer'), { Container: MockContainer, queryConfig: queryConfig }));

    require('RelayStore').primeCache.mock.requests[0].resolve();

    var output = getRenderOutput().props.children;
    expect(output.type).toBe(MockContainer);
    expect(output.props).toEqual({});});


  it('renders null if `render` returns null', function () {
    renderElement(
    require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(require('RelayRenderer'), { 
      Container: MockContainer, 
      queryConfig: queryConfig, 
      render: function () {return null;} }));


    require('RelayStore').primeCache.mock.requests[0].block();
    expect(null).toBeRenderedChild();});


  it('renders previous view if `render` returns undefined', function () {
    var prevView = require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement('span', null);
    renderElement(
    require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(require('RelayRenderer'), { 
      Container: MockContainer, 
      queryConfig: queryConfig, 
      render: function () {return prevView;} }));


    require('RelayStore').primeCache.mock.requests[0].block();
    expect(prevView).toBeRenderedChild();

    renderElement(
    require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(require('RelayRenderer'), { 
      Container: MockContainer, 
      queryConfig: queryConfig, 
      render: function () {return undefined;} }));


    expect(getRenderOutput()).not.toBeUpdated();});


  it('renders new view if `render` return a new view', function () {
    var prevView = require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement('span', null);
    renderElement(
    require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(require('RelayRenderer'), { 
      Container: MockContainer, 
      queryConfig: queryConfig, 
      render: function () {return prevView;} }));


    require('RelayStore').primeCache.mock.requests[0].block();
    expect(prevView).toBeRenderedChild();

    var nextView = require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement('div', null);
    renderElement(
    require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(require('RelayRenderer'), { 
      Container: MockContainer, 
      queryConfig: queryConfig, 
      render: function () {return nextView;} }));


    expect(nextView).toBeRenderedChild();});


  it('renders when mounted before a request is sent', function () {
    var initialView = require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement('div', null);
    var render = jest.genMockFunction().mockReturnValue(initialView);
    renderElement(
    require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(require('RelayRenderer'), { 
      Container: MockContainer, 
      queryConfig: queryConfig, 
      render: render }));


    expect(render).toBeCalled();
    expect(initialView).toBeRenderedChild();});


  it('renders when updated before the initial request is sent', function () {
    renderElement(
    require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(require('RelayRenderer'), { Container: MockContainer, queryConfig: queryConfig }));

    var loadingView = require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement('div', null);
    renderElement(
    require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(require('RelayRenderer'), { 
      Container: MockContainer, 
      queryConfig: require('RelayQueryConfig').genMockInstance(), 
      render: function () {return loadingView;} }));


    // Since RelayRenderer has not yet sent a request, view gets to update.
    expect(getRenderOutput()).toBeUpdated();});


  it('does not render when updated after the initial request is sent', function () {
    renderElement(
    require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(require('RelayRenderer'), { Container: MockContainer, queryConfig: queryConfig }));

    require('RelayStore').primeCache.mock.requests[0].block();

    var loadingView = require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement('div', null);
    renderElement(
    require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(require('RelayRenderer'), { 
      Container: MockContainer, 
      queryConfig: require('RelayQueryConfig').genMockInstance(), 
      render: function () {return loadingView;} }));


    // RelayRenderer does not synchronously update because the ready state (and
    // therefore render arguments) for the new `queryConfig` is not yet known.
    expect(getRenderOutput()).not.toBeUpdated();
    require('RelayStore').primeCache.mock.requests[1].block();
    expect(loadingView).toBeRenderedChild();});


  it('renders whenever updated after request is sent', function () {
    var render = jest.genMockFunction();
    function update() {
      renderElement(
      require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(require('RelayRenderer'), { 
        Container: MockContainer, 
        queryConfig: queryConfig, 
        render: render }));}



    update();
    require('RelayStore').primeCache.mock.requests[0].block();

    expect(render.mock.calls.length).toBe(2);

    update();
    update();
    update();

    expect(render.mock.calls.length).toBe(5);});


  it('renders once after each ready state change', function () {
    var render = jest.genMockFunction();

    renderElement(
    require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(require('RelayRenderer'), { 
      Container: MockContainer, 
      queryConfig: queryConfig, 
      render: render }));



    var request = require('RelayStore').primeCache.mock.requests[0];

    expect(render.mock.calls.length).toBe(1);

    request.block();
    expect(render.mock.calls.length).toBe(2);

    request.resolve();
    expect(render.mock.calls.length).toBe(3);

    request.succeed();
    expect(render.mock.calls.length).toBe(4);});


  describe('GC integration', function () {
    var garbageCollector = undefined;

    beforeEach(function () {
      var storeData = require('RelayStore').getStoreData();
      storeData.initializeGarbageCollector(jest.genMockFunction());
      garbageCollector = storeData.getGarbageCollector();});


    it('acquires a GC hold when mounted', function () {
      garbageCollector.acquireHold = jest.genMockFunction();
      renderElement(
      require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(require('RelayRenderer'), { Container: MockContainer, queryConfig: queryConfig }));

      expect(garbageCollector.acquireHold).toBeCalled();});


    it('releases its GC hold when unmounted', function () {
      var release = jest.genMockFunction();
      garbageCollector.acquireHold = 
      jest.genMockFunction().mockReturnValue({ release: release });
      renderElement(
      require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(require('RelayRenderer'), { Container: MockContainer, queryConfig: queryConfig }));

      expect(release).not.toBeCalled();
      require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react-dom').unmountComponentAtNode(container);
      expect(release).toBeCalled();});});});
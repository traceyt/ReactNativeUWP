/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails oncall+relay
 */

'use strict';var _slicedToArray = (function () {function sliceIterator(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i['return']) _i['return']();} finally {if (_d) throw _e;}}return _arr;}return function (arr, i) {if (Array.isArray(arr)) {return arr;} else if (Symbol.iterator in Object(arr)) {return sliceIterator(arr, i);} else {throw new TypeError('Invalid attempt to destructure non-iterable instance');}};})();function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}

require('configureForRelayOSS');








describe('transformClientPayload()', function () {var 
  getNode = require('RelayTestUtils').getNode;

  it('transforms singular root payloads', function () {
    var query = getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '123' } }], children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallValue', callValue: '1' } }], children: [{ fieldName: 'count', kind: 'Field', metadata: {}, type: 'Int' }, { children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'size', value: { kind: 'CallValue', callValue: '32' } }], children: [{ fieldName: 'uri', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'UiuVrcX0C6Sw:0', kind: 'Fragment', metadata: {}, name: 'User', type: 'User' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'User' }, { fieldName: 'cursor', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'FriendsEdge' }, { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true, isGenerated: true, isRequisite: true }, type: 'PageInfo' }], fieldName: 'friends', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'FriendsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'TransformRelayQueryPayload', type: 'Node' };})());


















    var payload = { 
      node: { 
        id: '123', 
        friends: { 
          count: 1, 
          edges: [
          { 
            cursor: 'friend:cursor', 
            node: { 
              id: 'client:1', 
              profilePicture: { 
                uri: 'friend.jpg' } } }] } } };







    expect(require('transformRelayQueryPayload')(query, payload)).toEqual({ 
      node: _defineProperty({ 
        __typename: undefined, 
        id: '123' }, 
      require('generateRQLFieldAlias')('friends.first(1)'), { 
        count: 1, 
        edges: [
        { 
          cursor: 'friend:cursor', 
          node: _defineProperty({ 
            id: 'client:1' }, 
          require('generateRQLFieldAlias')('profilePicture.size(32)'), { 
            uri: 'friend.jpg' }) }], 




        pageInfo: undefined }) });});





  it('transforms plural root payloads of arrays', function () {
    var query = getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'ids', value: [{ kind: 'CallValue', callValue: '123' }, { kind: 'CallValue', callValue: '456' }] }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'size', value: { kind: 'CallValue', callValue: '32' } }], children: [{ fieldName: 'uri', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'u99XFKBk6UF4:0', kind: 'Fragment', metadata: {}, name: 'User', type: 'User' }], fieldName: 'nodes', kind: 'Query', metadata: { isPlural: true, isAbstract: true, identifyingArgName: 'ids' }, name: 'TransformRelayQueryPayload', type: 'Node' };})());










    var payload = { 
      123: { 
        id: '123', 
        profilePicture: { 
          uri: '123.jpg' } }, 


      456: { 
        id: '456', 
        profilePicture: { 
          uri: '456.jpg' } } };



    expect(require('transformRelayQueryPayload')(query, payload)).toEqual({ 
      123: _defineProperty({ 
        __typename: undefined, 
        id: '123' }, 
      require('generateRQLFieldAlias')('profilePicture.size(32)'), { 
        uri: '123.jpg' }), 


      456: _defineProperty({ 
        __typename: undefined, 
        id: '456' }, 
      require('generateRQLFieldAlias')('profilePicture.size(32)'), { 
        uri: '456.jpg' }) });});





  it('transforms plural root payloads of objects (OSS)', function () {
    var query = getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'ids', value: [{ kind: 'CallValue', callValue: '123' }, { kind: 'CallValue', callValue: '456' }] }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'size', value: { kind: 'CallValue', callValue: '32' } }], children: [{ fieldName: 'uri', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: '4rmmoCGo3GgL:0', kind: 'Fragment', metadata: {}, name: 'User', type: 'User' }], fieldName: 'nodes', kind: 'Query', metadata: { isPlural: true, isAbstract: true, identifyingArgName: 'ids' }, name: 'TransformRelayQueryPayload', type: 'Node' };})());










    var payload = { 
      nodes: [
      { 
        id: '123', 
        profilePicture: { 
          uri: '123.jpg' } }, 


      { 
        id: '456', 
        profilePicture: { 
          uri: '456.jpg' } }] };




    expect(require('transformRelayQueryPayload')(query, payload)).toEqual({ 
      nodes: [_defineProperty({ 

        __typename: undefined, 
        id: '123' }, 
      require('generateRQLFieldAlias')('profilePicture.size(32)'), { 
        uri: '123.jpg' }), _defineProperty({ 



        __typename: undefined, 
        id: '456' }, 
      require('generateRQLFieldAlias')('profilePicture.size(32)'), { 
        uri: '456.jpg' })] });});






  it('transforms plural root payloads of objects (FB)', function () {
    var query = getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'ids', value: [{ kind: 'CallValue', callValue: '123' }, { kind: 'CallValue', callValue: '456' }] }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'size', value: { kind: 'CallValue', callValue: '32' } }], children: [{ fieldName: 'uri', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'oDm0Cb19bRgU:0', kind: 'Fragment', metadata: {}, name: 'User', type: 'User' }], fieldName: 'nodes', kind: 'Query', metadata: { isPlural: true, isAbstract: true, identifyingArgName: 'ids' }, name: 'TransformRelayQueryPayload', type: 'Node' };})());










    var payload = { 
      nodes: [
      { 
        id: '123', 
        profilePicture: { 
          uri: '123.jpg' } }, 


      { 
        id: '456', 
        profilePicture: { 
          uri: '456.jpg' } }] };




    expect(require('transformRelayQueryPayload')(query, payload)).toEqual({ 
      nodes: [_defineProperty({ 

        __typename: undefined, 
        id: '123' }, 
      require('generateRQLFieldAlias')('profilePicture.size(32)'), { 
        uri: '123.jpg' }), _defineProperty({ 



        __typename: undefined, 
        id: '456' }, 
      require('generateRQLFieldAlias')('profilePicture.size(32)'), { 
        uri: '456.jpg' })] });});






  it('uses the query interface to construct keys', function () {
    var queryInterface = { 
      getKeyForClientData: jest.genMockFunction().mockImplementation(
      function (field) {return Array.from(field.getApplicationName()).reverse().join('');}), 

      traverseChildren: jest.genMockFunction().mockImplementation(
      function (node, callback, context) {return node.getChildren().reverse().forEach(
        function () {for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}return callback.apply(context, args);});}) };



    var query = getNode((function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { children: [{ fieldName: 'uri', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }], fieldName: 'me', kind: 'Query', metadata: {}, name: 'TransformRelayQueryPayload', type: 'User' };})());










    var payload = { 
      me: { 
        erutciPeliforp: { 
          iru: 'abc.jpg' }, 

        eman: 'ABC', 
        di: '123' } };


    expect(
    require('transformRelayQueryPayload')(query, payload, queryInterface)).
    toEqual({ 
      me: { 
        id: '123', 
        name: 'ABC', 
        profilePicture: { 
          uri: 'abc.jpg' } } });




    // `getKeyForClientData` should be called on every field.
    expect(
    queryInterface.getKeyForClientData.mock.calls.map(
    function (_ref5) {var _ref52 = _slicedToArray(_ref5, 1);var field = _ref52[0];return field.getApplicationName();})).

    toEqual(['profilePicture', 'uri', 'name', 'id']);

    // `traverseChildren` should be called on every field with children.
    expect(
    queryInterface.traverseChildren.mock.calls.map(
    function (_ref6) {var _ref62 = _slicedToArray(_ref6, 1);var node = _ref62[0];return node instanceof require('RelayQuery').Root ? 
      node.getFieldName() : 
      node.getApplicationName();})).

    toEqual(['me', 'profilePicture']);});});
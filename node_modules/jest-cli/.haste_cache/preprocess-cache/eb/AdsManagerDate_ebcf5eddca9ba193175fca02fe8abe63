'use strict';















var MS_IN_MINUTE=60*1000;
var MS_IN_DAY=86400*1000;

var TIME_FORMAT='g:ia';

var DateFormatStrings={

SHORTHAND:'n/j/y',


SHORTHAND_MONTH_DAY:'n/j',


FRIENDLY_SHORT_MONTH:'M j, Y',


FRIENDLY_FULL_MONTH:'F j, Y'};


var UTCDateMapping=require('keyMirror')({
UNIQUE:null,
NONEXISTENT:null,
AMBIGUOUS:null});







function binaryRangeSearch(haystack,needle,valueOf){
return require('binarySearch')(haystack,function(entry,index){
var value=valueOf(entry);
var nextIndex=index+1;
if(nextIndex===haystack.length){

return value<=needle?0:1;}


var nextValue=valueOf(haystack[nextIndex]);
if(value<=needle&&nextValue>needle){

return 0;}



return value<needle?-1:1;});}








function getTimezoneTransitionIndex(date,timezoneInfo){
var utcTime=date.getTime()/1000;
var transitionIndex=binaryRangeSearch(
timezoneInfo.transitions,
utcTime,
function(transition){return transition.time;});

if(transitionIndex===-1){
throw new Error('can\'t determine timezone offset! date '+
date.getTime()+', timezone '+timezoneInfo.timezone);}


return transitionIndex;}






function getNearestTransitionInfo(date,timezoneInfo){


var utcTime=date.getTime()/1000;
var index=getTimezoneTransitionIndex(date,timezoneInfo);
var transitions=timezoneInfo.transitions;
var currTransition=transitions[index].time;
var currOffset=transitions[index].offset;
var transitionCount=transitions.length;



var nearestTransition=null;
var preTransitionOffset=null;
var postTransitionOffset=null;
if(transitionCount===1){

nearestTransition=currTransition;}else 
if(index===transitionCount-1){

nearestTransition=currTransition;
preTransitionOffset=transitions[index-1].offset;
postTransitionOffset=currOffset;}else 
if(index===0){
if(utcTime-currTransition<transitions[1].time-utcTime){

nearestTransition=currTransition;}else 
{

nearestTransition=transitions[1].time;
preTransitionOffset=currOffset;
postTransitionOffset=transitions[1].offset;}}else 

if(
utcTime-currTransition<transitions[index+1].time-utcTime)
{

nearestTransition=currTransition;
preTransitionOffset=transitions[index-1].offset;
postTransitionOffset=currOffset;}else 
{

nearestTransition=transitions[index+1].time;
preTransitionOffset=currOffset;
postTransitionOffset=transitions[index+1].offset;}


return {
nearestTransition:nearestTransition,
currOffset:currOffset,
preTransitionOffset:preTransitionOffset,
postTransitionOffset:postTransitionOffset};}








function isValidOffset(
localTime,
offset,
transitionInfo)
{
var utcTime=localTime-offset*60;
var actualOffset=utcTime>=transitionInfo.nearestTransition?
transitionInfo.postTransitionOffset:
transitionInfo.preTransitionOffset;
return offset===actualOffset;}





function formatDateRangeStrings(
dateFromString,
dateToString)
{
var dateRange=null;
if(dateFromString===dateToString){
dateRange=dateFromString;}else 
{

dateRange=require('fbt')._('__FBT__{"type":"text","texts":["{from} - {to}"],"desc":"A date range shown in the results section of an ad, ad set or campaign view that indicates when the results shown below were achieved, e.g. \'Jun 20, 2014 - Aug 15, 2014\'","project":""}__FBT__',[require('fbt').param(





'from',
dateFromString),require('fbt').param(


'to',
dateToString)]);}





return dateRange;}


var AdsManagerDate={

DateFormat:require('keyMirror')(DateFormatStrings),

UTCDateMapping:UTCDateMapping,





isValidDate:function(date,timezoneInfo){
return date&&date.getTime()>=timezoneInfo.transitions[0].time;},






isValidDateSpec:function(dateString,timezoneInfo){
return dateString&&AdsManagerDate.isValidDate(
AdsManagerDate.getDateFromSpec(dateString),
timezoneInfo);},








getTimezoneOffsetMinutes:function(date,timezoneInfo){
var index=getTimezoneTransitionIndex(date,timezoneInfo);
return timezoneInfo.transitions[index].offset;},





















sanitizeDate:function(
date,
offset,
timezoneInfo)
{
var utcTime=date.getTime()/1000;
var localTime=utcTime+offset*60;



var transitionInfo=getNearestTransitionInfo(date,timezoneInfo);
var currOffset=transitionInfo.currOffset;
var preOffset=transitionInfo.preTransitionOffset;
var postOffset=transitionInfo.postTransitionOffset;
if(preOffset===null||postOffset===null){

return {
mapping:UTCDateMapping.UNIQUE,
validDate:new Date((utcTime-(currOffset-offset)*60)*1000),
offset:currOffset};}





var preOffsetValid=isValidOffset(localTime,preOffset,transitionInfo);
var postOffsetValid=isValidOffset(localTime,postOffset,transitionInfo);

var mapping=null;
var validTime=null;
var validOffset=null;
if(preOffsetValid&&!postOffsetValid||
!preOffsetValid&&postOffsetValid||
preOffsetValid&&postOffsetValid&&preOffset===postOffset){





mapping=UTCDateMapping.UNIQUE;
validTime=utcTime-(currOffset-offset)*60;
validOffset=currOffset;}else 
if(preOffsetValid&&postOffsetValid){




mapping=UTCDateMapping.AMBIGUOUS;
validTime=transitionInfo.nearestTransition+
(preOffset-postOffset)*60;
validOffset=postOffset;}else 
{



mapping=UTCDateMapping.NONEXISTENT;
validTime=transitionInfo.nearestTransition;
validOffset=postOffset;}


return {
mapping:mapping,
validDate:new Date(validTime*1000),
offset:validOffset};},



isMidnight:function(date,timezoneInfo){
var offset=AdsManagerDate.getTimezoneOffsetMinutes(date,timezoneInfo);
var localTime=date.getTime()+offset*MS_IN_MINUTE;
return localTime%MS_IN_DAY===0;},


isToday:function(date,timezoneInfo){
return this.isSameDay(new Date(),date,timezoneInfo);},


isYesterday:function(date,timezoneInfo){
return AdsManagerDate.isSameDay(
date,
AdsManagerDate.toSameTimeYesterday(new Date(),timezoneInfo),
timezoneInfo);},



isSameDay:function(date1,date2,timezoneInfo){



var offset1=AdsManagerDate.getTimezoneOffsetMinutes(date1,timezoneInfo);
var offset2=AdsManagerDate.getTimezoneOffsetMinutes(date2,timezoneInfo);
date1=Math.floor((date1.getTime()+offset1*MS_IN_MINUTE)/MS_IN_DAY);
date2=Math.floor((date2.getTime()+offset2*MS_IN_MINUTE)/MS_IN_DAY);
return date1===date2;},


toSameTimeYesterday:function(date,timezoneInfo){
return AdsManagerDate.shiftLocalTimeByAmount(
date,
-MS_IN_DAY,
timezoneInfo);},



toSameTimeTomorrow:function(date,timezoneInfo){
return AdsManagerDate.shiftLocalTimeByAmount(date,MS_IN_DAY,timezoneInfo);},













shiftLocalTimeByAmount:function(
date,
deltaMS,
timezoneInfo)
{




var dateOffset=AdsManagerDate.getTimezoneOffsetMinutes(
date,
timezoneInfo);

var shiftedDate=new Date(date.getTime()+deltaMS);
var shiftedOffset=AdsManagerDate.getTimezoneOffsetMinutes(
shiftedDate,
timezoneInfo);

var offsetDiff=dateOffset-shiftedOffset;
if(offsetDiff===0){
return shiftedDate;}

return new Date(shiftedDate.getTime()+offsetDiff*MS_IN_MINUTE);},


formatDateForSpec:function(date){
return require('iso8601').fromDate(date);},


getDateFromSpec:function(date_string){
return require('iso8601').toDate(date_string);},


formatDate:function(
date,
timezoneInfo,
format)
{
var formatString=DateFormatStrings[format];
!
formatString?require('invariant')(0,
'Invalid format: %s. Valid formats are: %s',
format,
Object.keys(DateFormatStrings)):undefined;

var offset=AdsManagerDate.getTimezoneOffsetMinutes(date,timezoneInfo);
date=new Date(date.getTime()+offset*MS_IN_MINUTE);
return require('formatDate')(date,formatString,{utc:true});},





















formatDateRoundedToNearestDay:function(
date,
timezoneInfo,
format)
{
var formatString=DateFormatStrings[format];
!
formatString?require('invariant')(0,
'Invalid format: %s. Valid formats are: %s',
format,
Object.keys(DateFormatStrings)):undefined;


var offset=AdsManagerDate.getTimezoneOffsetMinutes(date,timezoneInfo);
var offsetDate=new Date(date.getTime()+offset*MS_IN_MINUTE);
var hours=offsetDate.getUTCHours();
if(hours>=18){
offsetDate.setUTCHours(24);}else 
if(hours>=6){
!false?require('invariant')(0,'date '+date.getTime()+' in timezone '+
timezoneInfo.timezone+' is more than 6 hours from midnight'):undefined;}

return require('formatDate')(offsetDate,formatString,{utc:true});},


formatTime:function(date,timezoneInfo){
var offset=AdsManagerDate.getTimezoneOffsetMinutes(date,timezoneInfo);
date=new Date(date.getTime()+offset*MS_IN_MINUTE);
return require('formatDate')(date,TIME_FORMAT,{utc:true});},


formatDateInDeviceTimezone:function(date,format){
var formatString=DateFormatStrings[format];
!
formatString?require('invariant')(0,
'Invalid format: %s. Valid formats are: %s',
format,
Object.keys(DateFormatStrings)):undefined;

return require('formatDate')(date,formatString);},


formatTimeInDeviceTimezone:function(date){
return require('formatDate')(date,TIME_FORMAT);},







shouldUse24HourTime:function(){
var localizedTimeFormat=require('DateFormatConfig').formats[TIME_FORMAT]||'';
return localizedTimeFormat.indexOf('G')!==-1||
localizedTimeFormat.indexOf('H')!==-1;},









isValidTimeRange:function(timeRange,timezoneInfo){
if(!timeRange||!timeRange.start||!timeRange.end){
return false;}

var dateFrom=require('iso8601').toDate(timeRange.start);
var dateTo=require('iso8601').toDate(timeRange.end);
return AdsManagerDate.isValidDate(dateFrom,timezoneInfo)&&
AdsManagerDate.isValidDate(dateTo,timezoneInfo)&&
dateFrom.getTime()<=dateTo.getTime();},
















formatTimeRangeToNearestDays:function(
timeRange,
timezoneInfo,
dateFormat)
{
!(
timeRange&&timeRange.start&&timeRange.end)?require('invariant')(0,
'invalid timeRange object specified'):undefined;





var dateFrom=require('iso8601').toDate(timeRange.start);
var dateTo=AdsManagerDate.toSameTimeYesterday(
require('iso8601').toDate(timeRange.end),
timezoneInfo);








var dateFromString=AdsManagerDate.formatDateRoundedToNearestDay(
dateFrom,
timezoneInfo,
dateFormat);

var dateToString;
if(dateFrom.getTime()<=dateTo.getTime()){
dateToString=AdsManagerDate.formatDateRoundedToNearestDay(
dateTo,
timezoneInfo,
dateFormat);}else 

{




dateToString=dateFromString;}


return formatDateRangeStrings(dateFromString,dateToString);},
















formatTimeRange:function(
timeRange,
timezoneInfo,
dateFormat)
{
!(
timeRange&&timeRange.start&&timeRange.end)?require('invariant')(0,
'invalid timeRange object specified'):undefined;


var dateFrom=require('iso8601').toDate(timeRange.start);
var dateTo=require('iso8601').toDate(timeRange.end);

!(dateFrom.getTime()<=dateTo.getTime())?require('invariant')(0,'from > to date'):undefined;

var dateFromString=AdsManagerDate.formatDate(
dateFrom,
timezoneInfo,
dateFormat);

var dateToString=AdsManagerDate.formatDate(
dateTo,
timezoneInfo,
dateFormat);


return formatDateRangeStrings(dateFromString,dateToString);},


getTodayString:function(){
return require('fbt')._('__FBT__{"type":"text","texts":["Today"],"desc":"A label to indicate today. This can show up in various places in the app, e.g. on the account daily summary time display, section header, etc. Space is limited.","project":""}__FBT__');},









getYesterdayString:function(){
return require('fbt')._('__FBT__{"type":"text","texts":["Yesterday"],"desc":"A label to indicate yesterday. This can show up in various places in the app, e.g. on the account daily summary time display, section header, etc. Space is limited.","project":""}__FBT__');}};











module.exports=AdsManagerDate;
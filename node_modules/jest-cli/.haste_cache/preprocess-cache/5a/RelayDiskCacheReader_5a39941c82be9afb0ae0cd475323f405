'use strict';



















































var RelayDiskCacheReader={
readFragment:function(
dataID,
fragment,
path,
store,
cachedRecords,
cachedRootCallMap,
garbageCollector,
cacheManager,
changeTracker,
callbacks)
{
var reader=new RelayCacheReader(
store,
cachedRecords,
cachedRootCallMap,
garbageCollector,
cacheManager,
changeTracker,
callbacks);

reader.readFragment(dataID,fragment,path);

return {
abort:function(){
reader.abort();}};},




readQueries:function(
queries,
store,
cachedRecords,
cachedRootCallMap,
garbageCollector,
cacheManager,
changeTracker,
callbacks)
{
var reader=new RelayCacheReader(
store,
cachedRecords,
cachedRootCallMap,
garbageCollector,
cacheManager,
changeTracker,
callbacks);

reader.read(queries);

return {
abort:function(){
reader.abort();}};}};var 





RelayCacheReader=function(){











function RelayCacheReader(
store,
cachedRecords,
cachedRootCallMap,
garbageCollector,
cacheManager,
changeTracker,
callbacks)
{babelHelpers.classCallCheck(this,RelayCacheReader);
this.$RelayCacheReader_store=store;
this.$RelayCacheReader_cachedRecords=cachedRecords;
this.$RelayCacheReader_cachedRootCallMap=cachedRootCallMap;
this.$RelayCacheReader_cacheManager=cacheManager;
this.$RelayCacheReader_callbacks=callbacks;
this.$RelayCacheReader_changeTracker=changeTracker;
this.$RelayCacheReader_garbageCollector=garbageCollector;

this.$RelayCacheReader_pendingNodes={};
this.$RelayCacheReader_pendingRoots={};
this.$RelayCacheReader_state='PENDING';}babelHelpers.createClass(RelayCacheReader,[{key:'abort',value:function abort()


{
!(
this.$RelayCacheReader_state==='LOADING')?require('invariant')(0,
'RelayCacheReader: Can only abort an in-progress read operation.'):undefined;

this.$RelayCacheReader_state='COMPLETED';}},{key:'read',value:function read(


queries){var _this=this;
!(
this.$RelayCacheReader_state==='PENDING')?require('invariant')(0,
'RelayCacheReader: A `read` is in progress.'):undefined;

this.$RelayCacheReader_state='LOADING';
require('forEachObject')(queries,function(query){
if(_this.$RelayCacheReader_state==='COMPLETED'){
return;}

if(query){(function(){
var storageKey=query.getStorageKey();
require('forEachRootCallArg')(query,function(_ref){var identifyingArgKey=_ref.identifyingArgKey;
if(_this.$RelayCacheReader_state==='COMPLETED'){
return;}

identifyingArgKey=identifyingArgKey||'';
_this.visitRoot(storageKey,identifyingArgKey,query);});})();}});




if(this.$RelayCacheReader_isDone()){
this.$RelayCacheReader_handleSuccess();}}},{key:'readFragment',value:function readFragment(




dataID,
fragment,
path)
{
!(
this.$RelayCacheReader_state==='PENDING')?require('invariant')(0,
'RelayCacheReader: A `read` is in progress.'):undefined;

this.$RelayCacheReader_state='LOADING';
this.visitNode(
dataID,
{
node:fragment,
path:path,
rangeCalls:undefined});



if(this.$RelayCacheReader_isDone()){
this.$RelayCacheReader_handleSuccess();}}},{key:'visitRoot',value:function visitRoot(




storageKey,
identifyingArgKey,
query)
{
var dataID=this.$RelayCacheReader_store.getDataID(storageKey,identifyingArgKey);
if(dataID==null){
if(this.$RelayCacheReader_cachedRootCallMap.hasOwnProperty(storageKey)&&
this.$RelayCacheReader_cachedRootCallMap[storageKey].hasOwnProperty(
identifyingArgKey))

{

this.$RelayCacheReader_handleFailed();}else 
{
this.queueRoot(storageKey,identifyingArgKey,query);}}else 

{
this.visitNode(
dataID,
{
node:query,
path:require('RelayQueryPath').create(query),
rangeCalls:undefined});}}},{key:'queueRoot',value:function queueRoot(






storageKey,
identifyingArgKey,
query)
{var _this2=this;
var rootKey=storageKey+'*'+identifyingArgKey;
if(this.$RelayCacheReader_pendingRoots.hasOwnProperty(rootKey)){
this.$RelayCacheReader_pendingRoots[rootKey].push(query);}else 
{
this.$RelayCacheReader_pendingRoots[rootKey]=[query];
this.$RelayCacheReader_cacheManager.readRootCall(
storageKey,
identifyingArgKey,
function(error,value){
if(_this2.$RelayCacheReader_state==='COMPLETED'){
return;}

if(error){
_this2.$RelayCacheReader_handleFailed();
return;}

var roots=_this2.$RelayCacheReader_pendingRoots[rootKey];
delete _this2.$RelayCacheReader_pendingRoots[rootKey];

_this2.$RelayCacheReader_cachedRootCallMap[storageKey]=
_this2.$RelayCacheReader_cachedRootCallMap[storageKey]||{};
_this2.$RelayCacheReader_cachedRootCallMap[storageKey][identifyingArgKey]=value;
if(_this2.$RelayCacheReader_cachedRootCallMap[storageKey][identifyingArgKey]==
null){

_this2.$RelayCacheReader_handleFailed();}else 
{(function(){
var dataID=value;
roots.forEach(function(root){
if(_this2.$RelayCacheReader_state==='COMPLETED'){
return;}

_this2.visitNode(
dataID,
{
node:root,
path:require('RelayQueryPath').create(root),
rangeCalls:undefined});});})();}




if(_this2.$RelayCacheReader_isDone()){
_this2.$RelayCacheReader_handleSuccess();}});}}},{key:'visitNode',value:function visitNode(






dataID,pendingItem){var _this3=this;var _findRelayQueryLeaves=
require('findRelayQueryLeaves')(
this.$RelayCacheReader_store,
this.$RelayCacheReader_cachedRecords,
pendingItem.node,
dataID,
pendingItem.path,
pendingItem.rangeCalls);var missingData=_findRelayQueryLeaves.missingData;var pendingNodes=_findRelayQueryLeaves.pendingNodes;


if(missingData){
this.$RelayCacheReader_handleFailed();
return;}

require('forEachObject')(pendingNodes,function(pendingItems,pendingDataID){
_this3.queueNode(pendingDataID,pendingItems);});}},{key:'queueNode',value:function queueNode(



dataID,pendingItems){var _this4=this;
if(this.$RelayCacheReader_pendingNodes.hasOwnProperty(dataID)){var _$RelayCacheReader_pe;
(_$RelayCacheReader_pe=this.$RelayCacheReader_pendingNodes[dataID]).push.apply(_$RelayCacheReader_pe,babelHelpers.toConsumableArray(pendingItems));}else 
{
this.$RelayCacheReader_pendingNodes[dataID]=pendingItems;
this.$RelayCacheReader_cacheManager.readNode(
dataID,
function(error,value){
if(_this4.$RelayCacheReader_state==='COMPLETED'){
return;}

if(error){
_this4.$RelayCacheReader_handleFailed();
return;}

if(value&&require('RelayRecord').isClientID(dataID)){
value.__path__=pendingItems[0].path;}





var recordState=_this4.$RelayCacheReader_store.getRecordState(dataID);
if(recordState==='UNKNOWN'&&value!==undefined){


if(_this4.$RelayCacheReader_garbageCollector){
_this4.$RelayCacheReader_garbageCollector.register(dataID);}



_this4.$RelayCacheReader_changeTracker.createID(dataID);}else 
if(recordState==='EXISTENT'&&value!=null){


_this4.$RelayCacheReader_changeTracker.updateID(dataID);}

_this4.$RelayCacheReader_cachedRecords[dataID]=value;
var items=_this4.$RelayCacheReader_pendingNodes[dataID];
delete _this4.$RelayCacheReader_pendingNodes[dataID];
if(_this4.$RelayCacheReader_cachedRecords[dataID]===undefined){

_this4.$RelayCacheReader_handleFailed();}else 
{
items.forEach(function(item){
if(_this4.$RelayCacheReader_state==='COMPLETED'){
return;}

_this4.visitNode(dataID,item);});}


if(_this4.$RelayCacheReader_isDone()){
_this4.$RelayCacheReader_handleSuccess();}});}}},{key:'$RelayCacheReader_isDone',value:function $RelayCacheReader_isDone()






{
return (
require('isEmpty')(this.$RelayCacheReader_pendingRoots)&&
require('isEmpty')(this.$RelayCacheReader_pendingNodes)&&
this.$RelayCacheReader_state==='LOADING');}},{key:'$RelayCacheReader_handleFailed',value:function $RelayCacheReader_handleFailed()



{
!(
this.$RelayCacheReader_state!=='COMPLETED')?require('invariant')(0,
'RelayStoreReader: Query set already failed/completed.'):undefined;


this.$RelayCacheReader_state='COMPLETED';
this.$RelayCacheReader_callbacks.onFailure&&this.$RelayCacheReader_callbacks.onFailure();}},{key:'$RelayCacheReader_handleSuccess',value:function $RelayCacheReader_handleSuccess()


{
!(
this.$RelayCacheReader_state!=='COMPLETED')?require('invariant')(0,
'RelayStoreReader: Query set already failed/completed.'):undefined;


this.$RelayCacheReader_state='COMPLETED';
this.$RelayCacheReader_callbacks.onSuccess&&this.$RelayCacheReader_callbacks.onSuccess();}}]);return RelayCacheReader;}();




require('RelayProfiler').instrumentMethods(RelayCacheReader.prototype,{
read:'RelayCacheReader.read',
readFragment:'RelayCacheReader.readFragment',
visitRoot:'RelayCacheReader.visitRoot',
queueRoot:'RelayCacheReader.queueRoot',
visitNode:'RelayCacheReader.visitNode',
queueNode:'RelayCacheReader.queueNode'});


module.exports=RelayDiskCacheReader;
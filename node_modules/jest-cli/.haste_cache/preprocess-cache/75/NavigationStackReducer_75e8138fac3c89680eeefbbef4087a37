'use strict';






























































var defaultGetReducerForState=function(initialState){return function(state){return state||initialState;};};

function NavigationStackReducer(_ref){var initialState=_ref.initialState;var getReducerForState=_ref.getReducerForState;var getPushedReducerForAction=_ref.getPushedReducerForAction;
var getReducerForStateWithDefault=getReducerForState||defaultGetReducerForState;
return function(lastState,action){
if(!lastState){
return initialState;}

var lastParentState=require('NavigationStateUtils').getParent(lastState);
if(!lastParentState){
return lastState;}

switch(action.type){
case 'BackAction':
if(lastParentState.index===0||lastParentState.children.length===1){
return lastParentState;}

return require('NavigationStateUtils').pop(lastParentState);}


var activeSubState=lastParentState.children[lastParentState.index];
var activeSubReducer=getReducerForStateWithDefault(activeSubState);
var nextActiveState=activeSubReducer(activeSubState,action);
if(nextActiveState!==activeSubState){
var nextChildren=[].concat(babelHelpers.toConsumableArray(lastParentState.children));
nextChildren[lastParentState.index]=nextActiveState;
return babelHelpers.extends({},
lastParentState,{
children:nextChildren});}



var subReducerToPush=getPushedReducerForAction(action);
if(subReducerToPush){
return require('NavigationStateUtils').push(
lastParentState,
subReducerToPush(null,action));}


return lastParentState;};}



module.exports=NavigationStackReducer;
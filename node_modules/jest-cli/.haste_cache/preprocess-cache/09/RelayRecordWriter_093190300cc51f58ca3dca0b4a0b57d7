'use strict';var _RelayConnectionInter=require('RelayConnectionInterface');var 







































CURSOR=_RelayConnectionInter.CURSOR;var NODE=_RelayConnectionInter.NODE;
var EMPTY='';
var FILTER_CALLS='__filterCalls__';
var FORCE_INDEX='__forceIndex__';
var RANGE='__range__';
var RESOLVED_FRAGMENT_MAP='__resolvedFragmentMap__';
var RESOLVED_FRAGMENT_MAP_GENERATION='__resolvedFragmentMapGeneration__';
var PATH='__path__';var _GraphQLMutatorConsta=require('GraphQLMutatorConstants');var 
APPEND=_GraphQLMutatorConsta.APPEND;var PREPEND=_GraphQLMutatorConsta.PREPEND;var REMOVE=_GraphQLMutatorConsta.REMOVE;var 




















RelayRecordWriter=function(){







function RelayRecordWriter(
records,
rootCallMap,
isOptimistic,
nodeConnectionMap,
cacheWriter,
clientMutationID)
{babelHelpers.classCallCheck(this,RelayRecordWriter);
this.$RelayRecordWriter_cacheWriter=cacheWriter;
this.$RelayRecordWriter_clientMutationID=clientMutationID;
this.$RelayRecordWriter_isOptimisticWrite=isOptimistic;
this.$RelayRecordWriter_nodeConnectionMap=nodeConnectionMap||{};
this.$RelayRecordWriter_records=records;
this.$RelayRecordWriter_rootCallMap=rootCallMap;}babelHelpers.createClass(RelayRecordWriter,[{key:'getDataID',value:function getDataID(







storageKey,
identifyingArgValue)
{
if(require('RelayNodeInterface').isNodeRootCall(storageKey)){
!(
identifyingArgValue!=null)?require('invariant')(0,
'RelayRecordWriter.getDataID(): Argument to `%s()` '+
'cannot be null or undefined.',
storageKey):undefined;

return identifyingArgValue;}

if(identifyingArgValue==null){
identifyingArgValue=EMPTY;}

if(this.$RelayRecordWriter_rootCallMap.hasOwnProperty(storageKey)&&
this.$RelayRecordWriter_rootCallMap[storageKey].hasOwnProperty(identifyingArgValue)){
return this.$RelayRecordWriter_rootCallMap[storageKey][identifyingArgValue];}}},{key:'putDataID',value:function putDataID(








storageKey,
identifyingArgValue,
dataID)
{
if(require('RelayNodeInterface').isNodeRootCall(storageKey)){
!(
identifyingArgValue!=null)?require('invariant')(0,
'RelayRecordWriter.putDataID(): Argument to `%s()` '+
'cannot be null or undefined.',
storageKey):undefined;

return;}

if(identifyingArgValue==null){
identifyingArgValue=EMPTY;}

this.$RelayRecordWriter_rootCallMap[storageKey]=this.$RelayRecordWriter_rootCallMap[storageKey]||{};
this.$RelayRecordWriter_rootCallMap[storageKey][identifyingArgValue]=dataID;
if(this.$RelayRecordWriter_cacheWriter){
this.$RelayRecordWriter_cacheWriter.writeRootCall(storageKey,identifyingArgValue,dataID);}}},{key:'getRecordState',value:function getRecordState(






dataID){
var record=this.$RelayRecordWriter_records[dataID];
if(record===null){
return 'NONEXISTENT';}else 
if(record===undefined){
return 'UNKNOWN';}

return 'EXISTENT';}},{key:'putRecord',value:function putRecord(






dataID,
typeName,
path)
{
var prevRecord=this.$RelayRecordWriter_getRecordForWrite(dataID);
if(prevRecord){
return;}

var nextRecord=require('RelayRecord').createWithFields(dataID,{
__typename:typeName});

if(this.$RelayRecordWriter_isOptimisticWrite){
this.$RelayRecordWriter_setClientMutationID(nextRecord);}

if(require('RelayRecord').isClientID(dataID)){
!
path?require('invariant')(0,
'RelayRecordWriter.putRecord(): Expected a path for non-refetchable '+
'record `%s`.',
dataID):undefined;

nextRecord[PATH]=path;}

this.$RelayRecordWriter_records[dataID]=nextRecord;
var cacheWriter=this.$RelayRecordWriter_cacheWriter;
if(!this.$RelayRecordWriter_isOptimisticWrite&&cacheWriter){
cacheWriter.writeField(dataID,'__dataID__',dataID,typeName);}}},{key:'getPathToRecord',value:function getPathToRecord(







dataID)
{
return this.$RelayRecordWriter_getField(dataID,PATH);}},{key:'hasDeferredFragmentData',value:function hasDeferredFragmentData(





dataID,fragmentID){
var resolvedFragmentMap=this.$RelayRecordWriter_getField(dataID,RESOLVED_FRAGMENT_MAP);
!(
typeof resolvedFragmentMap==='object'||resolvedFragmentMap==null)?require('invariant')(0,
'RelayRecordWriter.hasDeferredFragmentData(): Expected the map of '+
'resolved deferred fragments associated with record `%s` to be null or '+
'an object. Found a(n) `%s`.',
dataID,
typeof resolvedFragmentMap):undefined;

return !!(resolvedFragmentMap&&resolvedFragmentMap[fragmentID]);}},{key:'setHasDeferredFragmentData',value:function setHasDeferredFragmentData(






dataID,
fragmentID)
{
var record=this.$RelayRecordWriter_getRecordForWrite(dataID);
!
record?require('invariant')(0,
'RelayRecordWriter.setHasDeferredFragmentData(): Expected record `%s` '+
'to exist before marking it as having received data for the deferred '+
'fragment with id `%s`.',
dataID,
fragmentID):undefined;

var resolvedFragmentMap=record[RESOLVED_FRAGMENT_MAP];
if(typeof resolvedFragmentMap!=='object'||!resolvedFragmentMap){
resolvedFragmentMap={};}

resolvedFragmentMap[fragmentID]=true;
record[RESOLVED_FRAGMENT_MAP]=resolvedFragmentMap;
if(typeof record[RESOLVED_FRAGMENT_MAP_GENERATION]==='number'){
record[RESOLVED_FRAGMENT_MAP_GENERATION]++;}else 
{
record[RESOLVED_FRAGMENT_MAP_GENERATION]=0;}}},{key:'deleteRecord',value:function deleteRecord(







dataID)
{
this.$RelayRecordWriter_records[dataID]=null;


if(!this.$RelayRecordWriter_isOptimisticWrite){
delete this.$RelayRecordWriter_nodeConnectionMap[dataID];
if(this.$RelayRecordWriter_cacheWriter){
this.$RelayRecordWriter_cacheWriter.writeNode(dataID,null);}}}},{key:'getType',value:function getType(




dataID){

return this.$RelayRecordWriter_getField(dataID,'__typename');}},{key:'getField',value:function getField(






dataID,
storageKey)
{
return this.$RelayRecordWriter_getField(dataID,storageKey);}},{key:'putField',value:function putField(






dataID,
storageKey,
value)
{
var record=this.$RelayRecordWriter_getRecordForWrite(dataID);
!
record?require('invariant')(0,
'RelayRecordWriter.putField(): Expected record `%s` to exist before '+
'writing field `%s`.',
dataID,
storageKey):undefined;

record[storageKey]=value;
if(!this.$RelayRecordWriter_isOptimisticWrite&&this.$RelayRecordWriter_cacheWriter){
var typeName=record.__typename;
this.$RelayRecordWriter_cacheWriter.writeField(dataID,storageKey,value,typeName);}}},{key:'deleteField',value:function deleteField(







dataID,
storageKey)
{
var record=this.$RelayRecordWriter_getRecordForWrite(dataID);
!
record?require('invariant')(0,
'RelayRecordWriter.deleteField(): Expected record `%s` to exist before '+
'deleting field `%s`.',
dataID,
storageKey):undefined;

record[storageKey]=null;
if(!this.$RelayRecordWriter_isOptimisticWrite&&this.$RelayRecordWriter_cacheWriter){
this.$RelayRecordWriter_cacheWriter.writeField(dataID,storageKey,null);}}},{key:'getLinkedRecordID',value:function getLinkedRecordID(








dataID,
storageKey)
{
var field=this.$RelayRecordWriter_getField(dataID,storageKey);
if(field==null){
return field;}

!(
typeof field==='object'&&
field!==null&&
!Array.isArray(field)&&(
field.__dataID__==null||typeof field.__dataID__==='string'))?require('invariant')(0,
'RelayRecordWriter.getLinkedRecordID(): Expected field `%s` for record '+
'`%s` to have a linked record.',
storageKey,
dataID):undefined;

return field.__dataID__;}},{key:'putLinkedRecordID',value:function putLinkedRecordID(






parentID,
storageKey,
recordID)
{
var parent=this.$RelayRecordWriter_getRecordForWrite(parentID);
!
parent?require('invariant')(0,
'RelayRecordWriter.putLinkedRecordID(): Expected record `%s` to exist '+
'before linking to record `%s`.',
parentID,
recordID):undefined;

var record=this.$RelayRecordWriter_records[recordID];
!
record?require('invariant')(0,
'RelayRecordWriter.putLinkedRecordID(): Expected record `%s` to exist '+
'before linking from record `%s`.',
recordID,
parentID):undefined;

var fieldValue=require('RelayRecord').create(recordID);
parent[storageKey]=fieldValue;
if(!this.$RelayRecordWriter_isOptimisticWrite&&this.$RelayRecordWriter_cacheWriter){
this.$RelayRecordWriter_cacheWriter.writeField(parentID,storageKey,fieldValue);}}},{key:'getLinkedRecordIDs',value:function getLinkedRecordIDs(








dataID,
storageKey)
{
var field=this.$RelayRecordWriter_getField(dataID,storageKey);
if(field==null){
return field;}

!
Array.isArray(field)?require('invariant')(0,
'RelayRecordWriter.getLinkedRecordIDs(): Expected field `%s` for '+
'record `%s` to have an array of linked records.',
storageKey,
dataID):undefined;

return field.map(function(item,ii){
!(
typeof item==='object'&&item.__dataID__)?require('invariant')(0,
'RelayRecordWriter.getLinkedRecordIDs(): Expected element at index '+
'%s in field `%s` for record `%s` to be a linked record.',
ii,
storageKey,
dataID):undefined;

return item.__dataID__;});}},{key:'putLinkedRecordIDs',value:function putLinkedRecordIDs(







parentID,
storageKey,
recordIDs)
{var _this=this;
var parent=this.$RelayRecordWriter_getRecordForWrite(parentID);
!
parent?require('invariant')(0,
'RelayRecordWriter.putLinkedRecordIDs(): Expected record `%s` to exist '+
'before linking records.',
parentID):undefined;

var records=recordIDs.map(function(recordID){
var record=_this.$RelayRecordWriter_records[recordID];
!
record?require('invariant')(0,
'RelayRecordWriter.putLinkedRecordIDs(): Expected record `%s` to '+
'exist before linking from `%s`.',
recordID,
parentID):undefined;

return require('RelayRecord').create(recordID);});

parent[storageKey]=records;
if(!this.$RelayRecordWriter_isOptimisticWrite&&this.$RelayRecordWriter_cacheWriter){
this.$RelayRecordWriter_cacheWriter.writeField(parentID,storageKey,records);}}},{key:'getRangeForceIndex',value:function getRangeForceIndex(







connectionID)
{
var forceIndex=
this.$RelayRecordWriter_getField(connectionID,FORCE_INDEX);
if(forceIndex===null){
return -1;}


return forceIndex||0;}},{key:'getRangeFilterCalls',value:function getRangeFilterCalls(








connectionID)
{
return this.$RelayRecordWriter_getField(connectionID,FILTER_CALLS);}},{key:'putRange',value:function putRange(






connectionID,
calls,
forceIndex)
{
!
!this.$RelayRecordWriter_isOptimisticWrite?require('invariant')(0,
'RelayRecordWriter.putRange(): Cannot create a queued range.'):undefined;

var record=this.$RelayRecordWriter_getRecordForWrite(connectionID);
!
record?require('invariant')(0,
'RelayRecordWriter.putRange(): Expected record `%s` to exist before '+
'adding a range.',
connectionID):undefined;

var range=new (require('GraphQLRange'))();
var filterCalls=getFilterCalls(calls);
forceIndex=forceIndex||0;
record.__filterCalls__=filterCalls;
record.__forceIndex__=forceIndex;
record.__range__=range;

var cacheWriter=this.$RelayRecordWriter_cacheWriter;
if(!this.$RelayRecordWriter_isOptimisticWrite&&cacheWriter){
cacheWriter.writeField(connectionID,FILTER_CALLS,filterCalls);
cacheWriter.writeField(connectionID,FORCE_INDEX,forceIndex);
cacheWriter.writeField(connectionID,RANGE,range);}}},{key:'hasRange',value:function hasRange(






connectionID){
return !!this.$RelayRecordWriter_getField(connectionID,RANGE);}},{key:'putRangeEdges',value:function putRangeEdges(






connectionID,
calls,
pageInfo,
edges)
{var _this2=this;
var range=this.$RelayRecordWriter_getField(connectionID,RANGE);
!
range?require('invariant')(0,
'RelayRecordWriter.putRangeEdges(): Expected record `%s` to exist and '+
'have a range.',
connectionID):undefined;

var edgesData=[];
edges.forEach(function(edgeID){
var edgeData=_this2.$RelayRecordWriter_getRangeEdgeData(edgeID);
edgesData.push(edgeData);
_this2.$RelayRecordWriter_addConnectionForNode(connectionID,edgeData.node.__dataID__);});

range.addItems(
calls,
edgesData,
pageInfo);

if(!this.$RelayRecordWriter_isOptimisticWrite&&this.$RelayRecordWriter_cacheWriter){
this.$RelayRecordWriter_cacheWriter.writeField(connectionID,RANGE,range);}}},{key:'applyRangeUpdate',value:function applyRangeUpdate(







connectionID,
edgeID,
operation)
{
if(this.$RelayRecordWriter_isOptimisticWrite){
this.$RelayRecordWriter_applyOptimisticRangeUpdate(connectionID,edgeID,operation);}else 
{
this.$RelayRecordWriter_applyServerRangeUpdate(connectionID,edgeID,operation);}}},{key:'$RelayRecordWriter_getRangeEdgeData',value:function $RelayRecordWriter_getRangeEdgeData(







edgeID){
var nodeID=this.getLinkedRecordID(edgeID,NODE);
!
nodeID?require('invariant')(0,
'RelayRecordWriter: Expected edge `%s` to have a `node` record.',
edgeID):undefined;

return require('RelayRecord').createWithFields(edgeID,{
cursor:this.getField(edgeID,CURSOR),
node:require('RelayRecord').create(nodeID)});}},{key:'$RelayRecordWriter_applyOptimisticRangeUpdate',value:function $RelayRecordWriter_applyOptimisticRangeUpdate(




connectionID,
edgeID,
operation)
{
var record=this.$RelayRecordWriter_getRecordForWrite(connectionID);
if(!record){
record=require('RelayRecord').create(connectionID);
this.$RelayRecordWriter_records[connectionID]=record;}

this.$RelayRecordWriter_setClientMutationID(record);
var key=require('rangeOperationToMetadataKey')[operation];
var queue=record[key];
if(!queue){
queue=[];
record[key]=queue;}

if(operation===PREPEND){
queue.unshift(edgeID);}else 
{
queue.push(edgeID);}}},{key:'$RelayRecordWriter_applyServerRangeUpdate',value:function $RelayRecordWriter_applyServerRangeUpdate(




connectionID,
edgeID,
operation)
{
var range=this.$RelayRecordWriter_getField(connectionID,RANGE);
!
range?require('invariant')(0,
'RelayRecordWriter: Cannot apply `%s` update to non-existent record '+
'`%s`.',
operation,
connectionID):undefined;

if(operation===REMOVE){
range.removeEdgeWithID(edgeID);
var nodeID=this.getLinkedRecordID(edgeID,'node');
if(nodeID){
this.$RelayRecordWriter_removeConnectionForNode(connectionID,nodeID);}}else 

{
var edgeData=this.$RelayRecordWriter_getRangeEdgeData(edgeID);
this.$RelayRecordWriter_addConnectionForNode(connectionID,edgeData.node.__dataID__);
if(operation===APPEND){
range.appendEdge(this.$RelayRecordWriter_getRangeEdgeData(edgeID));}else 
{

range.prependEdge(this.$RelayRecordWriter_getRangeEdgeData(edgeID));}}


if(this.$RelayRecordWriter_cacheWriter){
this.$RelayRecordWriter_cacheWriter.writeField(connectionID,RANGE,range);}}},{key:'$RelayRecordWriter_addConnectionForNode',value:function $RelayRecordWriter_addConnectionForNode(







connectionID,
nodeID)
{
var connectionMap=this.$RelayRecordWriter_nodeConnectionMap[nodeID];
if(!connectionMap){
connectionMap={};
this.$RelayRecordWriter_nodeConnectionMap[nodeID]=connectionMap;}

connectionMap[connectionID]=true;}},{key:'$RelayRecordWriter_removeConnectionForNode',value:function $RelayRecordWriter_removeConnectionForNode(






connectionID,
nodeID)
{
var connectionMap=this.$RelayRecordWriter_nodeConnectionMap[nodeID];
if(connectionMap){
delete connectionMap[connectionID];
if(Object.keys(connectionMap).length===0){
delete this.$RelayRecordWriter_nodeConnectionMap[nodeID];}}}},{key:'$RelayRecordWriter_getRecordForWrite',value:function $RelayRecordWriter_getRecordForWrite(








dataID){
var record=this.$RelayRecordWriter_records[dataID];
if(!record){
return record;}

if(this.$RelayRecordWriter_isOptimisticWrite){
this.$RelayRecordWriter_setClientMutationID(record);}

return record;}},{key:'$RelayRecordWriter_getField',value:function $RelayRecordWriter_getField(







dataID,storageKey){
var record=this.$RelayRecordWriter_records[dataID];
if(record===null){
return null;}else 
if(record&&record.hasOwnProperty(storageKey)){
return record[storageKey];}else 
{
return undefined;}}},{key:'$RelayRecordWriter_setClientMutationID',value:function $RelayRecordWriter_setClientMutationID(







record){
var clientMutationID=this.$RelayRecordWriter_clientMutationID;
!
clientMutationID?require('invariant')(0,
'RelayRecordWriter: _clientMutationID cannot be null/undefined.'):undefined;

var mutationIDs=record.__mutationIDs__||[];
if(mutationIDs.indexOf(clientMutationID)===-1){
mutationIDs.push(clientMutationID);
record.__mutationIDs__=mutationIDs;}

record.__status__=require('RelayRecordStatusMap').setOptimisticStatus(
0,
true);}}]);return RelayRecordWriter;}();








function getFilterCalls(calls){
return calls.filter(function(call){return !require('RelayConnectionInterface').isConnectionCall(call);});}


module.exports=RelayRecordWriter;
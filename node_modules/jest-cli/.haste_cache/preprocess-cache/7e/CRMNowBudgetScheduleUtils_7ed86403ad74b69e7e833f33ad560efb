'use strict';































var MS_IN_DAY=86400*1000;

var TEN_MINUTES_IN_SEC=600;

var DEFAULT_DURATION=7;
var DEFAULT_CAMPAIGN_SCHEDULE_MONTHS=1;

function padToTwoDigits(value){
return (value<10?'0':'')+value;}





function getGMTOffsetString(offsetMinutes){
var sign=offsetMinutes<0?'-':'+';
var offsetHours=Math.abs(Math.floor(offsetMinutes/60));
var offsetRemainderMinutes=Math.abs(offsetMinutes)-60*offsetHours;
return 'GMT'+
sign+
padToTwoDigits(offsetHours)+
':'+
padToTwoDigits(offsetRemainderMinutes);}


var CRMNowBudgetScheduleUtils={
DEFAULT_DURATION:DEFAULT_DURATION,

getEffectiveDailyBudget:function(
budgetType,
budget,
startDate,
endDate,
scheduleType,
duration)
{
var effectiveStartDate=this.getEffectiveStartDate(
startDate,
scheduleType);

var effectiveEndDate=this.getEffectiveEndDate(
effectiveStartDate,
endDate,
scheduleType,
duration);


return this._getEffectiveDailyBudget(
budgetType,
budget,
effectiveStartDate,
effectiveEndDate);},



_getEffectiveDailyBudget:function(
budgetType,
budget,
startDate,
endDate)
{

if(budgetType===require('CRMBudgetTypes').DAILY){
return budget;}





var days=(endDate-startDate)/MS_IN_DAY;
return budget/days;},


getTotalBudget:function(
budgetType,
budget,
startDate,
endDate,
scheduleType,
duration)
{
var effectiveStartDate=this.getEffectiveStartDate(
startDate,
scheduleType);

var effectiveEndDate=this.getEffectiveEndDate(
effectiveStartDate,
endDate,
scheduleType,
duration);


return this._getTotalBudget(
budgetType,
budget,
effectiveStartDate,
effectiveEndDate);},



_getTotalBudget:function(
budgetType,
budget,
startDate,
endDate)
{
if(budgetType===require('CRMBudgetTypes').LIFETIME){
return budget;}






var daysLeft=require('AdsBaseCampaignUtils').getCampaignDayLeftCount(
startDate,
endDate);


return Math.max(budget*daysLeft,0);},


getDefaultStartTime:function(){


var startTime=new Date();
startTime.setSeconds(TEN_MINUTES_IN_SEC,0);
return startTime;},


getDefaultEndTime:function(startTime){
var endTime=new Date(startTime);
endTime.setMonth(startTime.getMonth()+DEFAULT_CAMPAIGN_SCHEDULE_MONTHS);
return endTime;},


getScheduleError:function(
budgetType,
startDate,
endDate,
scheduleType,
duration)
{
var effectiveStartDate=this.getEffectiveStartDate(
startDate,
scheduleType);

var effectiveEndDate=this.getEffectiveEndDate(
effectiveStartDate,
endDate,
scheduleType,
duration);


return this._getScheduleError(
budgetType,
effectiveStartDate,
effectiveEndDate);},



_getScheduleError:function(
budgetType,
startDate,
endDate)
{
return this._getEndBeforeStartError(startDate,endDate)||
this._getStartTimePastError(startDate)||
this._getEndTimePastError(endDate)||
this._getMinimumDurationError(budgetType,startDate,endDate);},


getBudgetError:function(
budgetType,
budget,
minDailyBudget,
maxDailyBudget,
currency,
startDate,
endDate,
scheduleType,
duration)
{
var effectiveStartDate=this.getEffectiveStartDate(
startDate,
scheduleType);

var effectiveEndDate=this.getEffectiveEndDate(
effectiveStartDate,
endDate,
scheduleType,
duration);


return this._getBudgetError(
budgetType,
budget,
minDailyBudget,
maxDailyBudget,
currency,
effectiveStartDate,
effectiveEndDate);},



_getBudgetError:function(
budgetType,
budget,
minDailyBudget,
maxDailyBudget,
currency,
startDate,
endDate)
{
var endBeforeStartError=this._getEndBeforeStartError(
startDate,
endDate);


if(endBeforeStartError!==null){
return endBeforeStartError;}


var effectiveDailyBudget=this._getEffectiveDailyBudget(
budgetType,
budget,
startDate,
endDate);


return this._getBelowMinDailyBudgetError(effectiveDailyBudget,minDailyBudget,currency)||
this._getAboveMaxDailyBudgetError(effectiveDailyBudget,maxDailyBudget,currency);},


getErrors:function(
budgetType,
budget,
minDailyBudget,
maxDailyBudget,
currency,
startDate,
endDate,
scheduleType,
duration)
{
var effectiveStartDate=this.getEffectiveStartDate(
startDate,
scheduleType);

var effectiveEndDate=this.getEffectiveEndDate(
effectiveStartDate,
endDate,
scheduleType,
duration);


return this._getErrors(
budgetType,
budget,
minDailyBudget,
maxDailyBudget,
currency,
effectiveStartDate,
effectiveEndDate);},



_getErrors:function(
budgetType,
budget,
minDailyBudget,
maxDailyBudget,
currency,
startDate,
endDate)
{




var endBeforeStartError=this._getEndBeforeStartError(
startDate,
endDate);


if(endBeforeStartError!==null){
return [endBeforeStartError];}


var effectiveDailyBudget=this._getEffectiveDailyBudget(
budgetType,
budget,
startDate,
endDate);


var errors=[
this._getBelowMinDailyBudgetError(
effectiveDailyBudget,
minDailyBudget,
currency),

this._getAboveMaxDailyBudgetError(
effectiveDailyBudget,
maxDailyBudget,
currency),

this._getStartTimePastError(startDate),
this._getEndTimePastError(endDate),
this._getMinimumDurationError(budgetType,startDate,endDate)];


return errors.filter(function(error){return error!==null;});},


getEffectiveStartDate:function(
startDate,
scheduleType)
{
if(scheduleType===require('CRMScheduleTypes').START_NOW){
var startTime=new Date();
startTime.setSeconds(TEN_MINUTES_IN_SEC,0);
return startTime;}

return startDate;},


getEffectiveEndDate:function(
startDate,
endDate,
scheduleType,
duration)
{
if(scheduleType===require('CRMScheduleTypes').START_NOW){
var effectiveEndDate=new Date(startDate);
effectiveEndDate.setDate(effectiveEndDate.getDate()+duration);
return effectiveEndDate;}


return endDate;},


_getBelowMinDailyBudgetError:function(
effectiveDailyBudget,
minDailyBudget,
currency)
{
if(effectiveDailyBudget>0&&effectiveDailyBudget>=minDailyBudget){
return null;}


return require('fbt')._('__FBT__{"type":"text","texts":["You must spend at least {minimum daily budget, e.g. $1.00} per day. Your current budget per day is {current daily budget, e.g. $0.50}. Please update your budget or schedule."],"desc":"Error message shown at the top of the the Budget and Schedule screen when the advertiser chooses a budget or schedule that is less than the minimum required budget per day, e.g. \'You must spend at least $1.00 per day. Your current budget per day is $0.50.\' Budgeting and scheduling for Facebook ads is done at the ad set level. Space is not limited.","project":""}__FBT__',[require('fbt').param(








'minimum daily budget, e.g. $1.00',
require('AdsCurrencyFormatter').formatCurrencyWithNumberDelimiters(
currency,
minDailyBudget)),require('fbt').param(



'current daily budget, e.g. $0.50',
require('AdsCurrencyFormatter').formatCurrencyWithNumberDelimiters(
currency,
effectiveDailyBudget))]);},







_getAboveMaxDailyBudgetError:function(
effectiveDailyBudget,
maxDailyBudget,
currency)
{
if(effectiveDailyBudget<=maxDailyBudget){
return null;}


return require('fbt')._('__FBT__{"type":"text","texts":["Your maximum allowable budget per day is {maximum daily budget, e.g. $10,000.00} per day. Your current budget per day is {current daily budget, e.g. $123,456,789.00}. Please update your budget or schedule."],"desc":"Error message shown at the top of the Budget and Schedule screen when the advertiser chooses a budget or schedule that is greater than the maximum allowed budget per day, e.g. \'Your maximum allowable budget per day is $10,000.00. Your current budget per day is $123,456,789.00.\' Budgeting and scheduling for Facebook ads is done at the ad set level. Space is not limited.","project":""}__FBT__',[require('fbt').param(









'maximum daily budget, e.g. $10,000.00',
require('AdsCurrencyFormatter').formatCurrencyWithNumberDelimiters(
currency,
maxDailyBudget)),require('fbt').param(



'current daily budget, e.g. $123,456,789.00',
require('AdsCurrencyFormatter').formatCurrencyWithNumberDelimiters(
currency,
effectiveDailyBudget))]);},







_getStartTimePastError:function(
startDate)
{



return null;},


_getEndTimePastError:function(
endDate)
{




if(endDate===null||endDate.getTime()>=Date.now()){
return null;}


return require('fbt')._('__FBT__{"type":"text","texts":["The end date can\'t be in the past. Please adjust the end date to be sometime in the future."],"desc":"Error message shown at the top of the Budget and Schedule screen when an advertiser is trying to choose a schedule for an ad with an end time that is in the past. Space is not limited.","project":""}__FBT__');},










_getEndBeforeStartError:function(
startDate,
endDate)
{
if(endDate===null||endDate.getTime()>startDate.getTime()){
return null;}


return require('fbt')._('__FBT__{"type":"text","texts":["The end date must be after the start date."],"desc":"Error message shown at the top of the Budget and Schedule screen when an advertiser is trying to choose a schedule for an ad with an end time that is before the start time. Space is not limited.","project":""}__FBT__');},









_getMinimumDurationError:function(
budgetType,
startDate,
endDate)
{
if(budgetType===require('CRMBudgetTypes').LIFETIME||
!endDate||
endDate.getTime()-startDate.getTime()>=MS_IN_DAY){
return null;}



return require('fbt')._('__FBT__{"type":"text","texts":["The minimum duration is one day when using a daily budget. Please adjust the end date or use a lifetime budget."],"desc":"Error message shown at the top of the Budget and Schedule screen when an advertiser is trying to choose a schedule for an ad with a duration that is too short.","project":""}__FBT__');},















getTimezoneDescriptions:function(
date,
timezoneInfos)
{

var timezones=Object.keys(timezoneInfos);
var timezoneDescriptions=timezones.map(function(timezone){
var timezoneInfo=timezoneInfos[timezone];
var offsetMinutes=require('CRMNowDate').getTimezoneOffsetMinutes(
date,
timezoneInfos[timezone]);

return {
timezone:timezoneInfo.timezone,
offsetMinutes:offsetMinutes,
description:timezoneInfo.display_name,
descriptionWithOffset:require('fbt')._('__FBT__{"type":"text","texts":["{timezone name, e.g. Pacific Time} ({timezone GMT offset, e.g. (GMT-08:00)})"],"desc":"Text used throughout the app that describes the selected timezone for the ad account including the GMT offset, e.g. \'Pacific Time (GMT-08:00)\'. Space is limited.","project":""}__FBT__',[require('fbt').param(




'timezone name, e.g. Pacific Time',
timezoneInfo.display_name),require('fbt').param(


'timezone GMT offset, e.g. (GMT-08:00)',
getGMTOffsetString(offsetMinutes))])};});







timezoneDescriptions=timezoneDescriptions.filter(function(entry){return entry;});


timezoneDescriptions.sort(function(a,b){return (
a.offsetMinutes-b.offsetMinutes||(
a.description<b.description?-1:1));});


return timezoneDescriptions.map(function(entry){return {
timezone:entry.timezone,
description:entry.description,
descriptionWithOffset:entry.descriptionWithOffset};});},



getCurrencyDescriptions:function(){

var currencyInfo=require('AdsCurrency').currencyMapKeys.map(function(currency){return {
currency:currency,
description:require('fbt')._('__FBT__{"type":"text","texts":["{currency name, e.g. US Dollar} ({currency code, e.g. USD})"],"desc":"Text used throughout the app that describes the selected currency for the account including the currency code, e.g. \'US Dollar (USD)\'. Space is limited.","project":""}__FBT__',[require('fbt').param(




'currency name, e.g. US Dollar',
require('AdsCurrency').getName(currency)),require('fbt').param(


'currency code, e.g. USD',
currency)])};});







currencyInfo.sort(function(a,b){return a.currency<b.currency?-1:1;});

return currencyInfo.map(function(entry){return {
currency:entry.currency,
description:entry.description};});},



humanReadableBudget:function(
budgetType,
budget,
currency)
{
var formatedBudget=
require('AdsCurrencyFormatter').formatCurrencyWithNumberDelimiters(
currency,
budget);


switch(budgetType){
case require('CRMBudgetTypes').DAILY:
return require('fbt')._('__FBT__{"type":"text","texts":["{daily budget, e.g. $5.00} per day"],"desc":"Text that describes the budget of an ad set with a daily budget, e.g. \'$5.00 per day\'. This text appears in the Budget section of the Ad Set / review screen. Space is not limited.","project":""}__FBT__',[require('fbt').param(





'daily budget, e.g. $5.00',
formatedBudget)]);




case require('CRMBudgetTypes').LIFETIME:
return formatedBudget;
default:
!false?require('invariant')(0,'Invalid budget type: '+budgetType):undefined;}},



humanReadableSchedule:function(
startDate,
endDate,
timezoneInfo,
scheduleType,
duration)
{

var effectiveStartDate=this.getEffectiveStartDate(
startDate,
scheduleType);

var effectiveEndDate=this.getEffectiveEndDate(
effectiveStartDate,
endDate,
scheduleType,
duration);



if(!effectiveEndDate){
return require('fbt')._('__FBT__{"type":"text","texts":["Starting on {start date, e.g. 12/06/14}"],"desc":"Text in the creation/create-similar review screen that describes the continuously running schedule (start date) for an ad, e.g., Starting on 12/06/2014. Space is not limited.","project":""}__FBT__',[require('fbt').param(





'start date, e.g. 12/06/14',
require('CRMNowDate').formatDate(
effectiveStartDate,
timezoneInfo,
require('CRMNowDate').DateFormat.SHORTHAND))]);}





return require('fbt')._('__FBT__{"type":"text","texts":["{start date, e.g. 12/06/14} - {end date, e.g. 12/07/14}"],"desc":"Text in the creation review screen that describes the schedule (start and end date) for an ad, e.g. 12/06/2014 - 12/07/2014. Space is limited.","project":""}__FBT__',[require('fbt').param(




'start date, e.g. 12/06/14',
require('CRMNowDate').formatDate(
effectiveStartDate,
timezoneInfo,
require('CRMNowDate').DateFormat.SHORTHAND)),require('fbt').param(



'end date, e.g. 12/07/14',
require('CRMNowDate').formatDate(
effectiveEndDate,
timezoneInfo,
require('CRMNowDate').DateFormat.SHORTHAND))]);},






humanReadableBudgetAndSchedule:function(
endTime,
budgetType,
budget,
timezoneInfo,
currency)
{
var formatedBudget=
require('AdsCurrencyFormatter').formatCurrencyWithNumberDelimiters(
currency,
budget);


var formatedDate=null;
if(endTime){
formatedDate=require('CRMNowDate').formatDate(
endTime,
timezoneInfo,
require('CRMNowDate').DateFormat.SHORTHAND);}



switch(budgetType){
case require('CRMBudgetTypes').DAILY:
if(!endTime){

return require('fbt')._('__FBT__{"type":"text","texts":["{daily budget, e.g. $5.00} per day"],"desc":"Text that describes the budget of an ad set with a daily budget and no end date, e.g. \'$5.00 per day\'. This text appears in the Budget section of the Ad Set screen. Space is limited.","project":""}__FBT__',[require('fbt').param(





'daily budget, e.g. $5.00',
formatedBudget)]);}







return require('fbt')._('__FBT__{"type":"text","texts":["{daily budget, e.g. $5.00} per day until {end date, e.g. 3/4/14}"],"desc":"Text that describes the budget and schedule of an ad set with a daily budget and an end date, e.g. \'$5.00 per day until 3/4/14\'. This text appears in the Budget section of the Ad Set screen. Space is limited.","project":""}__FBT__',[require('fbt').param(





'daily budget, e.g. $5.00',
formatedBudget),require('fbt').param(


'end date, e.g. 3/4/14',
formatedDate)]);




case require('CRMBudgetTypes').LIFETIME:

return require('fbt')._('__FBT__{"type":"text","texts":["{lifetime budget, e.g. $100.00} until {end date, e.g. 3/4/14}"],"desc":"Text that describes the budget and schedule of an ad set with a lifetime budget and an end date, e.g. \'$100.00 until 3/4/14\'. This text appears in the Budget section of the Ad Set screen. Space is limited.","project":""}__FBT__',[require('fbt').param(





'lifetime budget, e.g. $100.00',
formatedBudget),require('fbt').param(


'end date, e.g. 3/4/14',
formatedDate)]);




default:
!false?require('invariant')(0,'Invalid budget type: '+budgetType):undefined;}},



humanReadableFriendlySchedule:function(
startTime,
endTime,
timezoneInfo)
{

if(!endTime){
return require('fbt')._('__FBT__{"type":"text","texts":["Run continuously starting on {start date, e.g. Dec 6, 2014}"],"desc":"Text in the create-similar review screen that describes scheduled for an ad which is runing continuously starting from a certain day, e.g., Run continuously starting on Dec 6, 2014. Space is not limited.","project":""}__FBT__',[require('fbt').param(






'start date, e.g. Dec 6, 2014',
require('CRMNowDate').formatDate(
startTime,
timezoneInfo,
require('CRMNowDate').DateFormat.FRIENDLY_SHORT_MONTH))]);}






return require('fbt')._('__FBT__{"type":"text","texts":["{start date, e.g. Dec 1, 2015} until {end date, e.g. Jan 6, 2016}"],"desc":"Text in the creation review screen that describes the schedule (start and end date) for an ad in a more friendly way, e.g. Dec 1, 2015 until Jan 06, 2016. Space is not limited.","project":""}__FBT__',[require('fbt').param(




'start date, e.g. Dec 1, 2015',
require('CRMNowDate').formatDate(
startTime,
timezoneInfo,
require('CRMNowDate').DateFormat.FRIENDLY_SHORT_MONTH)),require('fbt').param(



'end date, e.g. Jan 6, 2016',
require('CRMNowDate').formatDate(
endTime,
timezoneInfo,
require('CRMNowDate').DateFormat.FRIENDLY_SHORT_MONTH))]);},






getTotalBudgetLabel:function(){
return require('fbt')._('__FBT__{"type":"text","texts":["Total Budget"],"desc":"Title for a row in the creation/create-similar review screen that shows the total budget for the ad that is being created. Space is limited.","project":""}__FBT__');},







getBudgetLabel:function(){
return require('fbt')._('__FBT__{"type":"text","texts":["Budget"],"desc":"Title for a row in the creation/create-similar review screen that shows the budget info for the ad that is being created. Space islimited.","project":""}__FBT__');}};








module.exports=CRMNowBudgetScheduleUtils;
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails oncall+relay
 */

'use strict';function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError('Cannot call a class as a function');}}function _inherits(subClass, superClass) {if (typeof superClass !== 'function' && superClass !== null) {throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

require('configureForRelayOSS');






describe('RelayQueryTransform', function () {var 
  getNode = require('RelayTestUtils').getNode;
  var query;

  beforeEach(function () {
    var variables = { 
      first: 10, 
      after: 'offset' };


    var fragment = (function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallVariable', callVariableName: 'first' } }, { kind: 'Call', metadata: {}, name: 'after', value: { kind: 'CallVariable', callVariableName: 'after' } }], children: [{ children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { children: [{ fieldName: 'city', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'address', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'StreetAddress' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'User' }, { fieldName: 'cursor', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'FriendsEdge' }, { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true, isGenerated: true, isRequisite: true }, type: 'PageInfo' }], fieldName: 'friends', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'FriendsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'BpCfABv1txI3:0', kind: 'Fragment', metadata: {}, name: 'RelayQueryTransformRelayQL', type: 'User' };})();














    query = getNode((function (RQL_0) {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '4' } }], children: [].concat.apply([], [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallVariable', callVariableName: 'first' } }, { kind: 'Call', metadata: {}, name: 'after', value: { kind: 'CallVariable', callVariableName: 'after' } }], children: [{ children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: 'lastName', kind: 'Field', metadata: {}, type: 'String' }, { children: [{ fieldName: 'city', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'address', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'StreetAddress' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'User' }, { fieldName: 'cursor', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'FriendsEdge' }, { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true, isGenerated: true, isRequisite: true }, type: 'PageInfo' }], fieldName: 'friends', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'FriendsConnection' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'RelayQueryTransform', type: 'Node' };})(



    fragment), 













    null, variables);});


  it('returns original input', function () {var 
    NoOp = (function (_RelayQueryTransform) {_inherits(NoOp, _RelayQueryTransform);function NoOp() {_classCallCheck(this, NoOp);_RelayQueryTransform.apply(this, arguments);}return NoOp;})(require('RelayQueryTransform'));

    var transform = new NoOp();
    var output = transform.visit(query, null);
    expect(output).toBe(query);});


  it('returns null if field visitors all return null for scalars', function () {var 
    Nullify = (function (_RelayQueryTransform2) {_inherits(Nullify, _RelayQueryTransform2);function Nullify() {_classCallCheck(this, Nullify);_RelayQueryTransform2.apply(this, arguments);}Nullify.prototype.
      visitField = function visitField(field, state) {
        if (!field.canHaveSubselections()) {
          return null;}

        return this.traverse(field, state);};return Nullify;})(require('RelayQueryTransform'));



    var transform = new Nullify();
    var output = transform.visit(query, null);
    expect(output).toBe(null);});


  it('returns cloned versions of fields', function () {var 
    RemoveIDs = (function (_RelayQueryTransform3) {_inherits(RemoveIDs, _RelayQueryTransform3);function RemoveIDs() {_classCallCheck(this, RemoveIDs);_RelayQueryTransform3.apply(this, arguments);}RemoveIDs.prototype.
      visitField = function visitField(field, state) {
        // print `id` but filter from output
        state.push(field.getSchemaName());
        if (field.getSchemaName() === 'id') {
          return null;}

        return this.traverse(field, state);};return RemoveIDs;})(require('RelayQueryTransform'));



    var transform = new RemoveIDs();
    var fields = [];
    var output = transform.visit(query, fields);

    var expectedFields = [];
    function traverse(node) {
      if (node instanceof require('RelayQuery').Field) {
        expectedFields.push(node.getSchemaName());}

      node.getChildren().forEach(function (c) {return traverse(c);});}

    traverse(output);

    // output should be missing the id fields
    expect(expectedFields.length).not.toBe(fields.length);
    fields = fields.filter(function (name) {return name !== 'id';});
    expect(fields.length).toBe(expectedFields.length);
    expect(fields.every(function (f, ii) {return f === expectedFields[ii];})).toBe(true);});});
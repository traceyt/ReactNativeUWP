'use strict';var _RelayConnectionInter=require('RelayConnectionInterface');var 

























END_CURSOR=_RelayConnectionInter.END_CURSOR;var 
HAS_NEXT_PAGE=_RelayConnectionInter.HAS_NEXT_PAGE;var 
HAS_PREV_PAGE=_RelayConnectionInter.HAS_PREV_PAGE;var 
START_CURSOR=_RelayConnectionInter.START_CURSOR;






function callsArrayToObject(queryCalls){
var calls={};
for(var ii=0;ii<queryCalls.length;ii++){
if(require('RelayConnectionInterface').isConnectionCall(queryCalls[ii])){
var queryCall=queryCalls[ii];var 
value=queryCall.value;

if(Array.isArray(value)&&value.length){
value=value[0];}


if(value===null){
continue;}

calls[queryCall.name]=value;}}



if(calls.first){
!
!isNaN(calls.first)?require('invariant')(0,
'GraphQLRange: Expected `first` argument to be a number, got '+
'`%s`.',
calls.first):undefined;

calls.first=+calls.first;}else 
if(calls.last){
!
!isNaN(calls.last)?require('invariant')(0,
'GraphQLRange: Expected `last` argument to be a number, got '+
'`%s`.',
calls.last):undefined;

calls.last=+calls.last;}

return calls;}










function isStaticCall(calls){
return calls.hasOwnProperty('surrounds')||calls.hasOwnProperty('find');}









function isValidRangeCall(calls){
var hasFirst=calls.hasOwnProperty('first');
var hasLast=calls.hasOwnProperty('last');





return (hasFirst||hasLast)&&!(hasFirst&&hasLast);}








function isValidRangeCallValues(calls){
return calls.hasOwnProperty('first')&&calls.first>0||
calls.hasOwnProperty('last')&&calls.last>0;}







function validateEdge(edge){
!(
require('RelayRecord').getDataID(edge)!==undefined)?require('invariant')(0,
'GraphQLStore: `edge` must have a data id'):undefined;

!(
edge.node!==undefined)?require('invariant')(0,
'GraphQLStore: `edge` must have `node` field'):undefined;}






function validateEdges(edges){
edges.forEach(validateEdge);}var 
































GraphQLRange=function(){
function GraphQLRange(){babelHelpers.classCallCheck(this,GraphQLRange);
this.reset();}babelHelpers.createClass(GraphQLRange,[{key:'reset',value:function reset()


{





this.$GraphQLRange_orderedSegments=[
new (require('GraphQLSegment'))(),
new (require('GraphQLSegment'))()];






this.$GraphQLRange_staticQueriesMap={};

this.$GraphQLRange_hasFirst=false;
this.$GraphQLRange_hasLast=false;}},{key:'$GraphQLRange_resetSegment',value:function $GraphQLRange_resetSegment(





index){
!(
index>=0&&index<this.$GraphQLRange_orderedSegments.length)?require('invariant')(0,
'cannot reset non-existent segment'):undefined;

this.$GraphQLRange_orderedSegments[index]=new (require('GraphQLSegment'))();}},{key:'$GraphQLRange_getSegmentIndexByCursor',value:function $GraphQLRange_getSegmentIndexByCursor(






cursor){

for(var ii=0;ii<this.$GraphQLRange_orderedSegments.length;ii++){
if(this.$GraphQLRange_orderedSegments[ii].containsEdgeWithCursor(cursor)){
return ii;}}


return null;}},{key:'$GraphQLRange_getSegmentIndexByID',value:function $GraphQLRange_getSegmentIndexByID(






id){

for(var ii=0;ii<this.$GraphQLRange_orderedSegments.length;ii++){
if(this.$GraphQLRange_orderedSegments[ii].containsEdgeWithID(id)){
return ii;}}


return null;}},{key:'$GraphQLRange_addStaticEdges',value:function $GraphQLRange_addStaticEdges(








queryCalls,edges){
var calls=_callsToString(queryCalls);
var edgeIDsToStore=[];
var cursorsToStore=[];

for(var ii=0;ii<edges.length;ii++){
var edge=edges[ii];
edgeIDsToStore.push(require('RelayRecord').getDataID(edge));
cursorsToStore.push(edge.cursor);}


this.$GraphQLRange_staticQueriesMap[calls]={
edgeIDs:edgeIDsToStore,
cursors:cursorsToStore};}},{key:'addItems',value:function addItems(










queryCalls,edges,pageInfo){
validateEdges(edges);
var calls=callsArrayToObject(queryCalls);
var segmentCount=undefined,segmentIndex=undefined;

if(isStaticCall(calls)){
this.$GraphQLRange_addStaticEdges(queryCalls,edges);
return;}


if(!isValidRangeCall(calls)){
console.error(
'GraphQLRange currently only handles first(<count>), '+
'after(<cursor>).first(<count>), last(<count>), '+
'before(<cursor>).last(<count>), before(<cursor>).first(<count>), '+
'and after(<cursor>).last(<count>)');

return;}



if(calls.before===null||calls.after===null){
console.error(
'GraphQLRange received null as a cursor.');

return;}


if(calls.first){

if(calls.before&&!calls.after){

if(pageInfo[HAS_NEXT_PAGE]===true){
if(this.$GraphQLRange_getSegmentIndexByCursor(calls.before)===0){
this.$GraphQLRange_orderedSegments.unshift(
new (require('GraphQLSegment'))());}




this.$GraphQLRange_addAfterFirstItems(
edges,pageInfo[HAS_NEXT_PAGE],undefined,calls.before);}else 

{


this.$GraphQLRange_addBeforeLastItems(
edges,
pageInfo[HAS_PREV_PAGE],
calls.before);}}else 


{

if(!calls.after){
segmentIndex=0;
segmentCount=this.getFirstSegment().getCount();
if(
segmentCount&&(
calls.first>segmentCount||edges.length>segmentCount)&&
!this.getFirstSegment().getFirstCursor())
{





this.$GraphQLRange_resetSegment(segmentIndex);}}


this.$GraphQLRange_addAfterFirstItems(
edges,pageInfo[HAS_NEXT_PAGE],calls.after,calls.before);}}else 


if(calls.last){

if(calls.after&&!calls.before){

if(pageInfo[HAS_PREV_PAGE]===true){
if(this.$GraphQLRange_getSegmentIndexByCursor(calls.after)===
this.$GraphQLRange_orderedSegments.length-1){
this.$GraphQLRange_orderedSegments.push(new (require('GraphQLSegment'))());}



this.$GraphQLRange_addBeforeLastItems(
edges,pageInfo[HAS_PREV_PAGE],undefined,calls.after);}else 

{


this.$GraphQLRange_addAfterFirstItems(
edges,
pageInfo[HAS_NEXT_PAGE],
calls.after);}}else 


{

if(!calls.before){
segmentIndex=this.$GraphQLRange_orderedSegments.length-1;
segmentCount=this.getLastSegment().getCount();
if(
segmentCount&&(
calls.last>segmentCount||edges.length>segmentCount)&&
!this.getLastSegment().getLastCursor())
{





this.$GraphQLRange_resetSegment(segmentIndex);}}


this.$GraphQLRange_addBeforeLastItems(
edges,pageInfo[HAS_PREV_PAGE],calls.before,calls.after);}}}},{key:'getFirstSegment',value:function getFirstSegment()








{
return this.$GraphQLRange_orderedSegments[0];}},{key:'getLastSegment',value:function getLastSegment()





{
return this.$GraphQLRange_orderedSegments[this.$GraphQLRange_orderedSegments.length-1];}},{key:'$GraphQLRange_concatSegments',value:function $GraphQLRange_concatSegments(











segmentIndex){
!(
segmentIndex+1<this.$GraphQLRange_orderedSegments.length&&
segmentIndex>=0)?require('invariant')(0,
'GraphQLRange cannot concat segments outside the range '+
'of orderedSegments'):undefined;

var firstSegment=this.$GraphQLRange_orderedSegments[segmentIndex];
var secondSegment=this.$GraphQLRange_orderedSegments[segmentIndex+1];
if(firstSegment.concatSegment(secondSegment)){
this.$GraphQLRange_orderedSegments.splice(segmentIndex+1,1);}else 
{
console.warn(
'GraphQLRange was unable to concat segment %d and segment %d',
segmentIndex,
segmentIndex+1);}}},{key:'prependEdge',value:function prependEdge(









edge){
validateEdge(edge);
this.$GraphQLRange_hasFirst=true;
this.$GraphQLRange_removeEdgeIfApplicable(edge);
var segment=this.getFirstSegment();
segment.prependEdge(edge);}},{key:'appendEdge',value:function appendEdge(







edge){
validateEdge(edge);
this.$GraphQLRange_hasLast=true;
this.$GraphQLRange_removeEdgeIfApplicable(edge);
var segment=this.getLastSegment();
segment.appendEdge(edge);}},{key:'$GraphQLRange_removeEdgeIfApplicable',value:function $GraphQLRange_removeEdgeIfApplicable(






edge){
var id=require('RelayRecord').getDataID(edge);
var index=this.$GraphQLRange_getSegmentIndexByID(id);
if(index!=null){
this.$GraphQLRange_orderedSegments[index].removeEdge(id);}}},{key:'$GraphQLRange_removeEdgesIfApplicable',value:function $GraphQLRange_removeEdgesIfApplicable(










edges){
for(var ii=0;ii<edges.length;ii++){
this.$GraphQLRange_removeEdgeIfApplicable(edges[ii]);}}},{key:'$GraphQLRange_addAfterFirstItems',value:function $GraphQLRange_addAfterFirstItems(













edges,
hasNextPage,
afterCursor,
beforeCursor)
{
var segment=undefined;
var segmentIndex=undefined;
var lastCursor=undefined;
if(afterCursor!==undefined){
segmentIndex=this.$GraphQLRange_getSegmentIndexByCursor(afterCursor);
if(segmentIndex==null){
require('warning')(
false,
'GraphQLRange cannot find a segment that has the cursor: %s',
afterCursor);

return;}

segment=this.$GraphQLRange_orderedSegments[segmentIndex];
lastCursor=segment.getLastCursor();
if(lastCursor!==afterCursor){
edges=this.$GraphQLRange_reconcileAfterFirstEdges(segment,edges,afterCursor);
afterCursor=lastCursor;
if(!edges){
return;}}}else 


{
segmentIndex=0;
segment=this.$GraphQLRange_orderedSegments[segmentIndex];
lastCursor=segment.getLastCursor();
if(lastCursor!==undefined){
edges=this.$GraphQLRange_reconcileAfterFirstEdges(segment,edges);
afterCursor=lastCursor;
if(!edges){
return;}}}



if(beforeCursor!==undefined){
if(segmentIndex===this.$GraphQLRange_orderedSegments.length-1){
console.warn(
'GraphQLRange cannot add because there is no next segment');

return;}else 
if(this.$GraphQLRange_orderedSegments[segmentIndex+1].getFirstCursor()!==
beforeCursor){
require('warning')(
false,
'GraphQLRange cannot add because beforeCursor does not match first '+
'cursor of the next segment');

return;}}



if(afterCursor===undefined){
this.$GraphQLRange_hasFirst=true;}


this.$GraphQLRange_removeEdgesIfApplicable(edges);
segment.addEdgesAfterCursor(edges,afterCursor);
if(!hasNextPage){
if(beforeCursor!==undefined){



this.$GraphQLRange_concatSegments(segmentIndex);}else 
{
this.$GraphQLRange_hasLast=true;


this.$GraphQLRange_orderedSegments.splice(
segmentIndex+1,
this.$GraphQLRange_orderedSegments.length-1-segmentIndex);}}}},{key:'$GraphQLRange_reconcileAfterFirstEdges',value:function $GraphQLRange_reconcileAfterFirstEdges(
















segment,edges,cursor){
var metadata=segment.getMetadataAfterCursor(edges.length+1,cursor);
var edgeIDs=metadata.edgeIDs;
if(edgeIDs.length>edges.length){

return undefined;}


for(var ii=0;ii<edgeIDs.length;ii++){
if(edgeIDs[ii]!==require('RelayRecord').getDataID(edges[ii])){
require('warning')(
false,
'Relay was unable to reconcile edges on a connection. This most '+
'likely occurred while trying to handle a server response that '+
'includes connection edges with nodes that lack an `id` field.');

return undefined;}}


return edges.slice(edgeIDs.length);}},{key:'$GraphQLRange_addBeforeLastItems',value:function $GraphQLRange_addBeforeLastItems(











edges,
hasPrevPage,
beforeCursor,
afterCursor)
{
var segment=undefined;
var segmentIndex=undefined;
var firstCursor=undefined;
if(beforeCursor!==undefined){
segmentIndex=this.$GraphQLRange_getSegmentIndexByCursor(beforeCursor);
if(segmentIndex==null){
require('warning')(
false,
'GraphQLRange cannot find a segment that has the cursor: %s',
beforeCursor);

return;}

segment=this.$GraphQLRange_orderedSegments[segmentIndex];
firstCursor=segment.getFirstCursor();
if(firstCursor!==beforeCursor){
edges=this.$GraphQLRange_reconcileBeforeLastEdges(segment,edges,beforeCursor);
beforeCursor=firstCursor;
if(!edges){
return;}}}else 


{
segmentIndex=this.$GraphQLRange_orderedSegments.length-1;
segment=this.$GraphQLRange_orderedSegments[segmentIndex];
firstCursor=segment.getFirstCursor();
if(firstCursor!==undefined){
edges=this.$GraphQLRange_reconcileBeforeLastEdges(segment,edges,beforeCursor);
beforeCursor=firstCursor;
if(!edges){
return;}}}




if(afterCursor!==undefined){
if(segmentIndex===0){
console.warn(
'GraphQLRange cannot add because there is no previous segment');

return;}else 
if(this.$GraphQLRange_orderedSegments[segmentIndex-1].getLastCursor()!==
afterCursor){
require('warning')(
false,
'GraphQLRange cannot add because afterCursor does not match last '+
'cursor of the previous segment');

return;}}



if(beforeCursor===undefined){
this.$GraphQLRange_hasLast=true;}


this.$GraphQLRange_removeEdgesIfApplicable(edges);
segment.addEdgesBeforeCursor(edges,beforeCursor);
if(!hasPrevPage){
if(afterCursor!==undefined){



this.$GraphQLRange_concatSegments(segmentIndex-1);}else 
{
this.$GraphQLRange_hasFirst=true;


this.$GraphQLRange_orderedSegments.splice(0,segmentIndex);}}}},{key:'$GraphQLRange_reconcileBeforeLastEdges',value:function $GraphQLRange_reconcileBeforeLastEdges(















segment,edges,cursor){
var metadata=segment.getMetadataBeforeCursor(edges.length+1,cursor);
var edgeIDs=metadata.edgeIDs;
if(edgeIDs.length>edges.length){

return undefined;}


for(var ii=1;ii<=edgeIDs.length;ii++){
if(edgeIDs[edgeIDs.length-ii]!==
require('RelayRecord').getDataID(edges[edges.length-ii])){
require('warning')(
false,
'Relay was unable to reconcile edges on a connection. This most '+
'likely occurred while trying to handle a server response that '+
'includes connection edges with nodes that lack an `id` field.');

return undefined;}}


return edges.slice(0,edges.length-edgeIDs.length);}},{key:'removeEdgeWithID',value:function removeEdgeWithID(








id){
for(var ii=0;ii<this.$GraphQLRange_orderedSegments.length;ii++){
this.$GraphQLRange_orderedSegments[ii].removeAllEdges(id);}}},{key:'retrieveRangeInfoForQuery',value:function retrieveRangeInfoForQuery(








queryCalls,queuedRecord){
var calls=callsArrayToObject(queryCalls);

if(isStaticCall(calls)){
return this.$GraphQLRange_retrieveRangeInfoForStaticCalls(
queryCalls);}





if(!isValidRangeCall(calls)){
console.error(
'GraphQLRange currently only handles first(<count>), '+
'after(<cursor>).first(<count>), last(<count>), '+
'before(<cursor>).last(<count>), before(<cursor>).first(<count>), '+
'and after(<cursor>).last(<count>)');

return {
requestedEdgeIDs:[],
diffCalls:[],
pageInfo:require('RelayConnectionInterface').getDefaultPageInfo()};}


if(calls.first&&calls.before||calls.last&&calls.after){

return {
requestedEdgeIDs:[],
diffCalls:[],
pageInfo:require('RelayConnectionInterface').getDefaultPageInfo()};}


if(!isValidRangeCallValues(calls)){
console.error(
'GraphQLRange only supports first(<count>) or last(<count>) '+
'where count is greater than 0');

return {
requestedEdgeIDs:[],
diffCalls:[],
pageInfo:require('RelayConnectionInterface').getDefaultPageInfo()};}


if(calls.first){
return this.$GraphQLRange_retrieveRangeInfoForFirstQuery(
queryCalls,
queuedRecord);}else 

if(calls.last){
return this.$GraphQLRange_retrieveRangeInfoForLastQuery(
queryCalls,
queuedRecord);}}},{key:'$GraphQLRange_retrieveRangeInfoForStaticCalls',value:function $GraphQLRange_retrieveRangeInfoForStaticCalls(








queryCalls){
var calls=_callsToString(queryCalls);
var storedInfo=this.$GraphQLRange_staticQueriesMap[calls];

if(storedInfo){var _pageInfo;
return {
requestedEdgeIDs:storedInfo.edgeIDs,
diffCalls:[],
pageInfo:(_pageInfo={},babelHelpers.defineProperty(_pageInfo,
START_CURSOR,storedInfo.cursors[0]),babelHelpers.defineProperty(_pageInfo,
END_CURSOR,storedInfo.cursors[storedInfo.cursors.length-1]),babelHelpers.defineProperty(_pageInfo,
HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_pageInfo,
HAS_PREV_PAGE,true),_pageInfo)};}






return {
requestedEdgeIDs:[],
diffCalls:queryCalls,
pageInfo:require('RelayConnectionInterface').getDefaultPageInfo()};}},{key:'$GraphQLRange_getAppendedIDsForQueuedRecord',value:function $GraphQLRange_getAppendedIDsForQueuedRecord(







queuedRecord){
return queuedRecord[
require('rangeOperationToMetadataKey')[require('GraphQLMutatorConstants').APPEND]];}},{key:'$GraphQLRange_getRemovedIDsForQueuedRecord',value:function $GraphQLRange_getRemovedIDsForQueuedRecord(







queuedRecord){
return queuedRecord[
require('rangeOperationToMetadataKey')[require('GraphQLMutatorConstants').REMOVE]];}},{key:'$GraphQLRange_getPrependedIDsForQueuedRecord',value:function $GraphQLRange_getPrependedIDsForQueuedRecord(







queuedRecord){
return queuedRecord[
require('rangeOperationToMetadataKey')[require('GraphQLMutatorConstants').PREPEND]];}},{key:'$GraphQLRange_retrieveRangeInfoForFirstQuery',value:function $GraphQLRange_retrieveRangeInfoForFirstQuery(









queryCalls,
queuedRecord)
{
var appendEdgeIDs=undefined;
var prependEdgeIDs=undefined;
var removeIDs=undefined;
if(queuedRecord){
appendEdgeIDs=this.$GraphQLRange_getAppendedIDsForQueuedRecord(queuedRecord);
prependEdgeIDs=this.$GraphQLRange_getPrependedIDsForQueuedRecord(queuedRecord);
removeIDs=this.$GraphQLRange_getRemovedIDsForQueuedRecord(queuedRecord);}

var calls=callsArrayToObject(queryCalls);
var countNeeded=calls.first+(removeIDs?removeIDs.length:0);
var segment=undefined;
var segmentIndex=undefined;
var pageInfo=babelHelpers.extends({},
require('RelayConnectionInterface').getDefaultPageInfo());


var afterCursor=calls.after;
if(afterCursor!==undefined){
segmentIndex=this.$GraphQLRange_getSegmentIndexByCursor(afterCursor);
if(segmentIndex==null){
console.warn(
'GraphQLRange cannot find a segment that has the cursor: '+
afterCursor);

return {
requestedEdgeIDs:[],
diffCalls:[],
pageInfo:pageInfo};}


segment=this.$GraphQLRange_orderedSegments[segmentIndex];}else 
{
var prependEdgesCount=prependEdgeIDs?prependEdgeIDs.length:0;
countNeeded-=prependEdgesCount;

segmentIndex=0;
segment=this.$GraphQLRange_orderedSegments[segmentIndex];}


var requestedMetadata=
segment.getMetadataAfterCursor(countNeeded,afterCursor);
var requestedEdgeIDs=requestedMetadata.edgeIDs;
var requestedCursors=requestedMetadata.cursors;
var diffCalls=[];
if(requestedCursors.length){
pageInfo[START_CURSOR]=requestedCursors[0];
pageInfo[END_CURSOR]=requestedCursors[requestedCursors.length-1];}

var lastID=requestedEdgeIDs[requestedEdgeIDs.length-1];


if(!this.$GraphQLRange_hasLast||
segmentIndex!==this.$GraphQLRange_orderedSegments.length-1||
lastID&&lastID!==segment.getLastID()){
pageInfo[HAS_NEXT_PAGE]=true;
if(requestedEdgeIDs.length<countNeeded){
countNeeded-=requestedEdgeIDs.length;
var lastCursor=segment.getLastCursor();

if(lastCursor===null){
diffCalls.push({name:'first',value:calls.first});}else 
{
if(lastCursor!==undefined){
diffCalls.push({name:'after',value:lastCursor});}



if(segmentIndex!==this.$GraphQLRange_orderedSegments.length-1){
var nextSegment=this.$GraphQLRange_orderedSegments[segmentIndex+1];
var firstCursor=nextSegment.getFirstCursor();
if(firstCursor!==undefined){
diffCalls.push({name:'before',value:firstCursor});}}


diffCalls.push({name:'first',value:countNeeded});}}}




if(queuedRecord){
if(prependEdgeIDs&&prependEdgeIDs.length&&!calls.after){
requestedEdgeIDs=prependEdgeIDs.concat(requestedEdgeIDs);}

if(appendEdgeIDs&&appendEdgeIDs.length&&!pageInfo[HAS_NEXT_PAGE]){
requestedEdgeIDs=requestedEdgeIDs.concat(appendEdgeIDs);}

if(removeIDs&&removeIDs.length){
requestedEdgeIDs=requestedEdgeIDs.filter(function(edgeID){
return removeIDs.indexOf(edgeID)===-1;});}


if(requestedEdgeIDs.length>calls.first){
requestedEdgeIDs=requestedEdgeIDs.slice(0,calls.first);}}



return {
requestedEdgeIDs:requestedEdgeIDs,
diffCalls:diffCalls,
pageInfo:pageInfo};}},{key:'$GraphQLRange_retrieveRangeInfoForLastQuery',value:function $GraphQLRange_retrieveRangeInfoForLastQuery(









queryCalls,
queuedRecord)
{
var appendEdgeIDs=undefined;
var prependEdgeIDs=undefined;
var removeIDs=undefined;
if(queuedRecord){
appendEdgeIDs=this.$GraphQLRange_getAppendedIDsForQueuedRecord(queuedRecord);
prependEdgeIDs=this.$GraphQLRange_getPrependedIDsForQueuedRecord(queuedRecord);
removeIDs=this.$GraphQLRange_getRemovedIDsForQueuedRecord(queuedRecord);}

var calls=callsArrayToObject(queryCalls);
var countNeeded=calls.last+(removeIDs?removeIDs.length:0);
var segment=undefined;
var segmentIndex=undefined;
var pageInfo=babelHelpers.extends({},
require('RelayConnectionInterface').getDefaultPageInfo());


var beforeCursor=calls.before;
if(beforeCursor!==undefined){
segmentIndex=this.$GraphQLRange_getSegmentIndexByCursor(beforeCursor);
if(segmentIndex==null){
console.warn(
'GraphQLRange cannot find a segment that has the cursor: '+
beforeCursor);

return {
requestedEdgeIDs:[],
diffCalls:[],
pageInfo:pageInfo};}


segment=this.$GraphQLRange_orderedSegments[segmentIndex];}else 
{
var appendEdgesCount=appendEdgeIDs?appendEdgeIDs.length:0;
countNeeded-=appendEdgesCount;

segmentIndex=this.$GraphQLRange_orderedSegments.length-1;
segment=this.$GraphQLRange_orderedSegments[segmentIndex];}


var requestedMetadata=
segment.getMetadataBeforeCursor(countNeeded,beforeCursor);
var requestedEdgeIDs=requestedMetadata.edgeIDs;
var requestedCursors=requestedMetadata.cursors;
var diffCalls=[];
if(requestedCursors.length){
pageInfo[START_CURSOR]=requestedCursors[0];
pageInfo[END_CURSOR]=requestedCursors[requestedCursors.length-1];}

var firstID=requestedEdgeIDs[0];


if(!this.$GraphQLRange_hasFirst||
segmentIndex!==0||
firstID&&firstID!==segment.getFirstID()){
pageInfo[HAS_PREV_PAGE]=true;
if(requestedEdgeIDs.length<countNeeded){
countNeeded-=requestedEdgeIDs.length;
var firstCursor=segment.getFirstCursor();

if(firstCursor===null){
diffCalls.push({name:'last',value:calls.last});}else 
{
if(firstCursor!==undefined){
diffCalls.push({name:'before',value:firstCursor});}



if(segmentIndex!==0){
var prevSegment=this.$GraphQLRange_orderedSegments[segmentIndex-1];
var lastCursor=prevSegment.getLastCursor();
if(lastCursor!==undefined){
diffCalls.push({name:'after',value:lastCursor});}}


diffCalls.push({name:'last',value:countNeeded});}}}




if(queuedRecord){
if(appendEdgeIDs&&appendEdgeIDs.length&&!calls.before){
requestedEdgeIDs=requestedEdgeIDs.concat(appendEdgeIDs);}

if(prependEdgeIDs&&prependEdgeIDs.length&&!pageInfo[HAS_PREV_PAGE]){
requestedEdgeIDs=prependEdgeIDs.concat(requestedEdgeIDs);}

if(removeIDs&&removeIDs.length){
requestedEdgeIDs=requestedEdgeIDs.filter(function(edgeID){
return removeIDs.indexOf(edgeID)===-1;});}


if(requestedEdgeIDs.length>calls.last){
var length=requestedEdgeIDs.length;
requestedEdgeIDs=requestedEdgeIDs.slice(length-calls.last,length);}}



return {
requestedEdgeIDs:requestedEdgeIDs,
diffCalls:diffCalls,
pageInfo:pageInfo};}},{key:'toJSON',value:function toJSON()




















{
return [
this.$GraphQLRange_hasFirst,
this.$GraphQLRange_hasLast,
this.$GraphQLRange_staticQueriesMap,
this.$GraphQLRange_orderedSegments];}},{key:'__debug',value:function __debug()



{
return {
orderedSegments:this.$GraphQLRange_orderedSegments};}},{key:'getEdgeIDs',value:function getEdgeIDs()



{
var edgeIDs=[];
this.$GraphQLRange_orderedSegments.forEach(function(segment){
edgeIDs.push.apply(edgeIDs,babelHelpers.toConsumableArray(segment.getEdgeIDs()));});

require('forEachObject')(this.$GraphQLRange_staticQueriesMap,function(query){
edgeIDs.push.apply(edgeIDs,babelHelpers.toConsumableArray(query.edgeIDs));});

return edgeIDs;}}],[{key:'fromJSON',value:function fromJSON(descriptor){var _descriptor=babelHelpers.slicedToArray(descriptor,4);var hasFirst=_descriptor[0];var hasLast=_descriptor[1];var staticQueriesMap=_descriptor[2];var orderedSegments=_descriptor[3];var range=new GraphQLRange();range.$GraphQLRange_hasFirst=hasFirst;range.$GraphQLRange_hasLast=hasLast;range.$GraphQLRange_staticQueriesMap=staticQueriesMap;range.$GraphQLRange_orderedSegments=orderedSegments.map(function(segmentDescriptor){return require('GraphQLSegment').fromJSON(segmentDescriptor);});return range;}}]);return GraphQLRange;}();







function _callsToString(calls){
return calls.map(
function(call){return require('serializeRelayQueryCall')(call).substring(1);}).
join(',');}


module.exports=GraphQLRange;
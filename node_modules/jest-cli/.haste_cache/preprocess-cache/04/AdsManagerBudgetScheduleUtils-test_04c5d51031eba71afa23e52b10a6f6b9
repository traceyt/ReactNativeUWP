'use strict';






jest.dontMock('AdsManagerBudgetScheduleUtils');






var MS_IN_DAY=86400*1000;

var nowDate=new Date();
var halfDayAfterDate=new Date(nowDate.getTime()+MS_IN_DAY/2);
var oneDayAfterDate=new Date(nowDate.getTime()+MS_IN_DAY);
var twoDayAfterDate=new Date(nowDate.getTime()+2*MS_IN_DAY);
var oneDayBeforeDate=new Date(nowDate.getTime()-MS_IN_DAY);

var minDailyBudget=100;
var maxDailyBudget=10000;
var validDailyBudget=200;
var underMinDailyBudget=minDailyBudget/2;
var overMaxDailyBudget=maxDailyBudget*2;
var currency='USD';

describe('AdsManagerBudgetScheduleUtils tests',function(){
beforeEach(function(){
require('AdsBaseCampaignUtils').getCampaignDayLeftCount.mockImplementation(
function(startTime,endTime){return (endTime-startTime)/MS_IN_DAY;});});




it('should get default start time correctly',function(){
var now=new Date();
expect(require('AdsManagerBudgetScheduleUtils').getDefaultStartTime()).toBeGreaterThan(now);});



it('should get default end time correctly',function(){
var defaultEndTime=require('AdsManagerBudgetScheduleUtils').getDefaultEndTime(nowDate);
var endTime=new Date(nowDate);
endTime.setMonth(nowDate.getMonth()+1);
expect(defaultEndTime.getTime()).toBe(endTime.getTime());});



xit('should get total budget correctly',function(){
var totalBudgetTestCases=[
{
budgetType:require('AdsBudgetTypes').DAILY,
budget:0,
startDate:nowDate,
endDate:null,
scheduleType:require('AdsScheduleTypes').START_NOW,
duration:0,
totalBudget:0},

{
budgetType:require('AdsBudgetTypes').DAILY,
budget:5,
startDate:nowDate,
endDate:null,
scheduleType:require('AdsScheduleTypes').START_NOW,
duration:5,
totalBudget:25},

{
budgetType:require('AdsBudgetTypes').DAILY,
budget:5,
startDate:nowDate,
endDate:halfDayAfterDate,
scheduleType:require('AdsScheduleTypes').START_LATER,
duration:null,
totalBudget:2.5},

{
budgetType:require('AdsBudgetTypes').DAILY,
budget:5,
startDate:nowDate,
endDate:twoDayAfterDate,
scheduleType:require('AdsScheduleTypes').START_LATER,
duration:0,
totalBudget:10},

{
budgetType:require('AdsBudgetTypes').LIFETIME,
budget:10,
startDate:nowDate,
endDate:null,
scheduleType:require('AdsScheduleTypes').START_NOW,
duration:10,
totalBudget:10},

{
budgetType:require('AdsBudgetTypes').LIFETIME,
budget:10,
startDate:nowDate,
endDate:halfDayAfterDate,
scheduleType:require('AdsScheduleTypes').START_LATER,
duration:null,
totalBudget:10},

{
budgetType:require('AdsBudgetTypes').LIFETIME,
budget:10,
startDate:nowDate,
endDate:twoDayAfterDate,
scheduleType:require('AdsScheduleTypes').START_LATER,
duration:null,
totalBudget:10}];



totalBudgetTestCases.forEach(function(data){
expect(require('AdsManagerBudgetScheduleUtils').getTotalBudget(
data.budgetType,
data.budget,
data.startDate,
data.endDate,
data.scheduleType,
data.duration)).
toBe(data.totalBudget);});});




it('should get effective daily budget correctly',function(){
var dailyBudgetTestCases=[
{
budgetType:require('AdsBudgetTypes').DAILY,
budget:0,
startDate:null,
endDate:null,
scheduleType:null,
duration:0,
effectiveBudget:0},

{
budgetType:require('AdsBudgetTypes').DAILY,
budget:5,
startDate:null,
endDate:null,
scheduleType:null,
duration:0,
effectiveBudget:5},

{
budgetType:require('AdsBudgetTypes').LIFETIME,
budget:10,
startDate:nowDate,
endDate:null,
scheduleType:require('AdsScheduleTypes').START_NOW,
duration:1,
effectiveBudget:10},

{
budgetType:require('AdsBudgetTypes').LIFETIME,
budget:10,
startDate:nowDate,
endDate:null,
scheduleType:require('AdsScheduleTypes').START_NOW,
duration:2,
effectiveBudget:5},

{
budgetType:require('AdsBudgetTypes').LIFETIME,
budget:10,
startDate:nowDate,
endDate:halfDayAfterDate,
scheduleType:require('AdsScheduleTypes').START_LATER,
duration:1,
effectiveBudget:20},

{
budgetType:require('AdsBudgetTypes').LIFETIME,
budget:10,
startDate:nowDate,
endDate:oneDayAfterDate,
scheduleType:require('AdsScheduleTypes').START_LATER,
duration:1,
effectiveBudget:10},

{
budgetType:require('AdsBudgetTypes').LIFETIME,
budget:10,
startDate:oneDayAfterDate,
endDate:twoDayAfterDate,
scheduleType:require('AdsScheduleTypes').START_LATER,
duration:1,
effectiveBudget:10},

{
budgetType:require('AdsBudgetTypes').LIFETIME,
budget:10,
startDate:oneDayBeforeDate,
endDate:oneDayAfterDate,
scheduleType:require('AdsScheduleTypes').START_LATER,
duration:1,
effectiveBudget:5}];



dailyBudgetTestCases.forEach(function(data){
expect(require('AdsManagerBudgetScheduleUtils').getEffectiveDailyBudget(
data.budgetType,
data.budget,
data.startDate,
data.endDate,
data.scheduleType,
data.duration)).
toBe(data.effectiveBudget);});});




it('should get schedule errors with START_LATER correctly',function(){
expect(require('AdsManagerBudgetScheduleUtils').getScheduleError(
require('AdsBudgetTypes').DAILY,
nowDate,
twoDayAfterDate,
require('AdsScheduleTypes').START_LATER,
null)).
toBe(null);
expect(require('AdsManagerBudgetScheduleUtils').getScheduleError(
require('AdsBudgetTypes').DAILY,
nowDate,
oneDayAfterDate,
require('AdsScheduleTypes').START_LATER,
null)).
toBe(null);
expect(require('AdsManagerBudgetScheduleUtils').getScheduleError(
require('AdsBudgetTypes').DAILY,
halfDayAfterDate,
twoDayAfterDate,
require('AdsScheduleTypes').START_LATER,
null)).
toBe(null);

expect(require('AdsManagerBudgetScheduleUtils').getScheduleError(
require('AdsBudgetTypes').DAILY,
oneDayBeforeDate,
oneDayAfterDate,
require('AdsScheduleTypes').START_LATER,
null)).
toBe(null);
expect(require('AdsManagerBudgetScheduleUtils').getScheduleError(
require('AdsBudgetTypes').DAILY,
nowDate,
nowDate,
require('AdsScheduleTypes').START_LATER,
null)).
not.toBe(null);
expect(require('AdsManagerBudgetScheduleUtils').getScheduleError(
require('AdsBudgetTypes').DAILY,
nowDate,
halfDayAfterDate,
require('AdsScheduleTypes').START_LATER,
null)).
not.toBe(null);
expect(require('AdsManagerBudgetScheduleUtils').getScheduleError(
require('AdsBudgetTypes').DAILY,
halfDayAfterDate,
halfDayAfterDate,
require('AdsScheduleTypes').START_LATER,
null)).
not.toBe(null);
expect(require('AdsManagerBudgetScheduleUtils').getScheduleError(
require('AdsBudgetTypes').DAILY,
nowDate,
oneDayBeforeDate,
require('AdsScheduleTypes').START_LATER,
null)).
not.toBe(null);
expect(require('AdsManagerBudgetScheduleUtils').getScheduleError(
require('AdsBudgetTypes').LIFETIME,
nowDate,
halfDayAfterDate,
require('AdsScheduleTypes').START_LATER,
null)).
toBe(null);
expect(require('AdsManagerBudgetScheduleUtils').getScheduleError(
require('AdsBudgetTypes').DAILY,
nowDate,
oneDayAfterDate,
require('AdsScheduleTypes').START_LATER,
null)).
toBe(null);
expect(require('AdsManagerBudgetScheduleUtils').getScheduleError(
require('AdsBudgetTypes').DAILY,
nowDate,
nowDate,
require('AdsScheduleTypes').START_LATER,
null)).
not.toBe(null);
expect(require('AdsManagerBudgetScheduleUtils').getScheduleError(
require('AdsBudgetTypes').DAILY,
nowDate,
oneDayBeforeDate,
require('AdsScheduleTypes').START_LATER,
null)).
not.toBe(null);});


it('should get schedule errors with START_NOW correctly',function(){
expect(require('AdsManagerBudgetScheduleUtils').getScheduleError(
require('AdsBudgetTypes').DAILY,
null,
null,
require('AdsScheduleTypes').START_NOW,
-1)).
not.toBe(null);
expect(require('AdsManagerBudgetScheduleUtils').getScheduleError(
require('AdsBudgetTypes').DAILY,
null,
null,
require('AdsScheduleTypes').START_NOW,
0)).
not.toBe(null);
expect(require('AdsManagerBudgetScheduleUtils').getScheduleError(
require('AdsBudgetTypes').DAILY,
null,
null,
require('AdsScheduleTypes').START_NOW,
1)).
toBe(null);
expect(require('AdsManagerBudgetScheduleUtils').getScheduleError(
require('AdsBudgetTypes').DAILY,
null,
null,
require('AdsScheduleTypes').START_NOW,
999)).
toBe(null);
expect(require('AdsManagerBudgetScheduleUtils').getScheduleError(
require('AdsBudgetTypes').LIFETIME,
null,
null,
require('AdsScheduleTypes').START_NOW,
-1)).
not.toBe(null);
expect(require('AdsManagerBudgetScheduleUtils').getScheduleError(
require('AdsBudgetTypes').LIFETIME,
null,
null,
require('AdsScheduleTypes').START_NOW,
0)).
not.toBe(null);
expect(require('AdsManagerBudgetScheduleUtils').getScheduleError(
require('AdsBudgetTypes').LIFETIME,
null,
null,
require('AdsScheduleTypes').START_NOW,
1)).
toBe(null);
expect(require('AdsManagerBudgetScheduleUtils').getScheduleError(
require('AdsBudgetTypes').LIFETIME,
null,
null,
require('AdsScheduleTypes').START_NOW,
999)).
toBe(null);});



it('should get budget errors correctly',function(){
expect(require('AdsManagerBudgetScheduleUtils').getBudgetError(
require('AdsBudgetTypes').DAILY,
validDailyBudget,
minDailyBudget,
maxDailyBudget,
currency,
nowDate,
oneDayAfterDate,
require('AdsScheduleTypes').START_LATER,
null)).
toBe(null);
expect(require('AdsManagerBudgetScheduleUtils').getBudgetError(
require('AdsBudgetTypes').DAILY,
underMinDailyBudget,
minDailyBudget,
maxDailyBudget,
currency,
nowDate,
oneDayAfterDate,
require('AdsScheduleTypes').START_LATER,
null)).
not.toBe(null);
expect(require('AdsManagerBudgetScheduleUtils').getBudgetError(
require('AdsBudgetTypes').DAILY,
overMaxDailyBudget,
minDailyBudget,
maxDailyBudget,
currency,
nowDate,
oneDayAfterDate,
require('AdsScheduleTypes').START_LATER,
null)).
not.toBe(null);
expect(require('AdsManagerBudgetScheduleUtils').getBudgetError(
require('AdsBudgetTypes').LIFETIME,
validDailyBudget*2,
minDailyBudget,
maxDailyBudget,
currency,
nowDate,
twoDayAfterDate,
require('AdsScheduleTypes').START_LATER,
null)).
toBe(null);
expect(require('AdsManagerBudgetScheduleUtils').getBudgetError(
require('AdsBudgetTypes').LIFETIME,
underMinDailyBudget*2,
minDailyBudget,
maxDailyBudget,
currency,
nowDate,
twoDayAfterDate,
require('AdsScheduleTypes').START_LATER,
null)).
not.toBe(null);
expect(require('AdsManagerBudgetScheduleUtils').getBudgetError(
require('AdsBudgetTypes').LIFETIME,
overMaxDailyBudget*2,
minDailyBudget,
maxDailyBudget,
currency,
nowDate,
twoDayAfterDate,
require('AdsScheduleTypes').START_LATER,
null)).
not.toBe(null);});


it('should get budget errors correctly with START_NOW',function(){
expect(require('AdsManagerBudgetScheduleUtils').getBudgetError(
require('AdsBudgetTypes').DAILY,
validDailyBudget,
minDailyBudget,
maxDailyBudget,
currency,
null,
null,
require('AdsScheduleTypes').START_NOW,
1)).
toBe(null);
expect(require('AdsManagerBudgetScheduleUtils').getBudgetError(
require('AdsBudgetTypes').DAILY,
underMinDailyBudget,
minDailyBudget,
maxDailyBudget,
currency,
null,
null,
require('AdsScheduleTypes').START_NOW,
1)).
not.toBe(null);
expect(require('AdsManagerBudgetScheduleUtils').getBudgetError(
require('AdsBudgetTypes').DAILY,
overMaxDailyBudget,
minDailyBudget,
maxDailyBudget,
currency,
null,
null,
require('AdsScheduleTypes').START_NOW,
1)).
not.toBe(null);

expect(require('AdsManagerBudgetScheduleUtils').getBudgetError(
require('AdsBudgetTypes').LIFETIME,
validDailyBudget*2,
minDailyBudget,
maxDailyBudget,
currency,
null,
null,
require('AdsScheduleTypes').START_NOW,
2)).
toBe(null);
expect(require('AdsManagerBudgetScheduleUtils').getBudgetError(
require('AdsBudgetTypes').LIFETIME,
underMinDailyBudget*2,
minDailyBudget,
maxDailyBudget,
currency,
null,
null,
require('AdsScheduleTypes').START_NOW,
2)).
not.toBe(null);
expect(require('AdsManagerBudgetScheduleUtils').getBudgetError(
require('AdsBudgetTypes').LIFETIME,
overMaxDailyBudget*2,
minDailyBudget,
maxDailyBudget,
currency,
null,
null,
require('AdsScheduleTypes').START_NOW,
2)).
not.toBe(null);});



it('should get errors correctly with START_NOW',function(){
expect(require('AdsManagerBudgetScheduleUtils').getErrors(
require('AdsBudgetTypes').DAILY,
validDailyBudget,
minDailyBudget,
maxDailyBudget,
currency,
null,
null,
require('AdsScheduleTypes').START_NOW,
2).
length).toBe(0);
expect(require('AdsManagerBudgetScheduleUtils').getErrors(
require('AdsBudgetTypes').DAILY,
underMinDailyBudget,
minDailyBudget,
maxDailyBudget,
currency,
null,
null,
require('AdsScheduleTypes').START_NOW,
2).
length).toBe(1);
expect(require('AdsManagerBudgetScheduleUtils').getErrors(
require('AdsBudgetTypes').DAILY,
overMaxDailyBudget,
minDailyBudget,
maxDailyBudget,
currency,
null,
null,
require('AdsScheduleTypes').START_NOW,
2).
length).toBe(1);
expect(require('AdsManagerBudgetScheduleUtils').getErrors(
require('AdsBudgetTypes').DAILY,
validDailyBudget,
minDailyBudget,
maxDailyBudget,
currency,
null,
null,
require('AdsScheduleTypes').START_NOW,
0).
length).toBe(1);});


it('should get errors correctly with START_LATER',function(){
expect(require('AdsManagerBudgetScheduleUtils').getErrors(
require('AdsBudgetTypes').DAILY,
validDailyBudget,
minDailyBudget,
maxDailyBudget,
currency,
nowDate,
twoDayAfterDate,
require('AdsScheduleTypes').START_LATER,
null).
length).toBe(0);
expect(require('AdsManagerBudgetScheduleUtils').getErrors(
require('AdsBudgetTypes').DAILY,
underMinDailyBudget,
minDailyBudget,
maxDailyBudget,
currency,
nowDate,
twoDayAfterDate,
require('AdsScheduleTypes').START_LATER,
null).
length).toBe(1);
expect(require('AdsManagerBudgetScheduleUtils').getErrors(
require('AdsBudgetTypes').DAILY,
overMaxDailyBudget,
minDailyBudget,
maxDailyBudget,
currency,
nowDate,
twoDayAfterDate,
require('AdsScheduleTypes').START_LATER,
null).
length).toBe(1);
expect(require('AdsManagerBudgetScheduleUtils').getErrors(
require('AdsBudgetTypes').DAILY,
validDailyBudget,
minDailyBudget,
maxDailyBudget,
currency,
nowDate,
nowDate,
require('AdsScheduleTypes').START_LATER,
null).
length).toBe(1);
expect(require('AdsManagerBudgetScheduleUtils').getErrors(
require('AdsBudgetTypes').DAILY,
underMinDailyBudget,
minDailyBudget,
maxDailyBudget,
currency,
nowDate,
halfDayAfterDate,
require('AdsScheduleTypes').START_LATER,
null).
length).toBe(2);});


it('should get total budget label correctly',function(){
expect(require('AdsManagerBudgetScheduleUtils').getTotalBudgetLabel()).not.toBeNull();});


it('should get budget label correctly',function(){
expect(require('AdsManagerBudgetScheduleUtils').getBudgetLabel()).not.toBeNull();});});
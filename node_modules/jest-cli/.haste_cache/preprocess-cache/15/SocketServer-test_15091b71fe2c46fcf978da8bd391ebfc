'use strict';









jest.setMock('uglify-js').
mock('net').
mock('fs').
dontMock('node-haste/node_modules/throat').
dontMock('../SocketServer');






describe('SocketServer',function(){
var netServer=undefined;
var bunser=undefined;
var processOn=undefined;

beforeEach(function(){var _require$requireActua=
require.requireActual('events');var EventEmitter=_require$requireActua.EventEmitter;
netServer=new EventEmitter();
netServer.listen=jest.genMockFn();
require('net').createServer.mockImpl(function(){return netServer;});

bunser=new EventEmitter();
require('bser').BunserBuf.mockImpl(function(){return bunser;});
require('bser').dumpToBuffer.mockImpl(function(a){return a;});


processOn=process.on;
process.on=jest.genMockFn();});


afterEach(function(){
process.on=processOn;});


pit('create a server',function(){
var server=new (require('../SocketServer'))('/sock',{projectRoots:['/root']});
netServer.emit('listening');
return server.onReady().then(function(s){
expect(s).toBe(server);
expect(netServer.listen).toBeCalledWith('/sock');});});



pit('handles getDependencies message',function(){
var server=new (require('../SocketServer'))('/sock',{projectRoots:['/root']});
netServer.emit('listening');
return server.onReady().then(function(){
var sock={on:jest.genMockFn(),write:jest.genMockFn()};
netServer.emit('connection',sock);
require('../../Server').prototype.getDependencies.mockImpl(
function(){return Promise.resolve({dependencies:['a','b','c']});});

bunser.emit('value',{type:'getDependencies',id:1,data:'/main'});
expect(require('../../Server').prototype.getDependencies).toBeCalledWith('/main');


return Promise.resolve().then(function(){
expect(sock.write).toBeCalledWith(
{id:1,type:'result',data:['a','b','c']});});});});





pit('handles buildBundle message',function(){
var server=new (require('../SocketServer'))('/sock',{projectRoots:['/root']});
netServer.emit('listening');
return server.onReady().then(function(){
var sock={on:jest.genMockFn(),write:jest.genMockFn()};
netServer.emit('connection',sock);
require('../../Server').prototype.buildBundle.mockImpl(
function(){return Promise.resolve({bundle:'foo'});});

bunser.emit(
'value',
{type:'buildBundle',id:1,data:{options:'bar'}});

expect(require('../../Server').prototype.buildBundle).toBeCalledWith(
{options:'bar'});



return Promise.resolve().then(function(){
expect(sock.write).toBeCalledWith(
{id:1,type:'result',data:{bundle:'foo'}});});});});});
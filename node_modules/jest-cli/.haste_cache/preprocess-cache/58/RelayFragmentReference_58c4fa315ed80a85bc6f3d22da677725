'use strict';var 


























































































RelayFragmentReference=function(){babelHelpers.createClass(RelayFragmentReference,null,[{key:'createForContainer',value:function createForContainer(










fragmentGetter,
initialVariables,
variableMapping,
prepareVariables)
{
var reference=new RelayFragmentReference(
fragmentGetter,
initialVariables,
variableMapping,
prepareVariables);

reference.$RelayFragmentReference_isContainerFragment=true;
return reference;}}]);


function RelayFragmentReference(
fragmentGetter,
initialVariables,
variableMapping,
prepareVariables)
{babelHelpers.classCallCheck(this,RelayFragmentReference);
this.$RelayFragmentReference_initialVariables=initialVariables||{};
this.$RelayFragmentReference_fragment=undefined;
this.$RelayFragmentReference_fragmentGetter=fragmentGetter;
this.$RelayFragmentReference_isContainerFragment=false;
this.$RelayFragmentReference_isDeferred=false;
this.$RelayFragmentReference_variableMapping=variableMapping;
this.$RelayFragmentReference_prepareVariables=prepareVariables;}babelHelpers.createClass(RelayFragmentReference,[{key:'defer',value:function defer()





{
this.$RelayFragmentReference_isDeferred=true;
return this;}},{key:'if',value:function _if(





value){
var callVariable=require('QueryBuilder').getCallVariable(value);
!
callVariable?require('invariant')(0,
'RelayFragmentReference: Invalid value `%s` supplied to `if()`. '+
'Expected a variable.',
callVariable):undefined;

this.$RelayFragmentReference_addCondition(
function(variables){return !!variables[callVariable.callVariableName];});

return this;}},{key:'unless',value:function unless(





value){
var callVariable=require('QueryBuilder').getCallVariable(value);
!
callVariable?require('invariant')(0,
'RelayFragmentReference: Invalid value `%s` supplied to `unless()`. '+
'Expected a variable.',
callVariable):undefined;

this.$RelayFragmentReference_addCondition(
function(variables){return !variables[callVariable.callVariableName];});

return this;}},{key:'$RelayFragmentReference_getFragment',value:function $RelayFragmentReference_getFragment()





{
var fragment=this.$RelayFragmentReference_fragment;
if(fragment==null){
fragment=this.$RelayFragmentReference_fragmentGetter();
this.$RelayFragmentReference_fragment=fragment;}

return fragment;}},{key:'getFragment',value:function getFragment(





variables){

var conditions=this.$RelayFragmentReference_conditions;
if(conditions&&!conditions.every(function(cb){return cb(variables);})){
return null;}

return this.$RelayFragmentReference_getFragment();}},{key:'getVariables',value:function getVariables(






route,variables){var _this=this;
var innerVariables=babelHelpers.extends({},this.$RelayFragmentReference_initialVariables);


var variableMapping=this.$RelayFragmentReference_variableMapping;
if(variableMapping){
require('forEachObject')(variableMapping,function(value,name){
var callVariable=require('QueryBuilder').getCallVariable(value);
if(callVariable){
value=variables[callVariable.callVariableName];}

if(value===undefined){
require('warning')(
false,
'RelayFragmentReference: Variable `%s` is undefined in fragment '+
'`%s`.',
name,
_this.$RelayFragmentReference_getFragment().name);}else 

{
innerVariables[name]=value;}});}




var prepareVariables=this.$RelayFragmentReference_prepareVariables;
if(prepareVariables){
innerVariables=prepareVariables(innerVariables,route);}


return innerVariables;}},{key:'isContainerFragment',value:function isContainerFragment()


{
return this.$RelayFragmentReference_isContainerFragment;}},{key:'isDeferred',value:function isDeferred()


{
return this.$RelayFragmentReference_isDeferred;}},{key:'$RelayFragmentReference_addCondition',value:function $RelayFragmentReference_addCondition(


condition){
var conditions=this.$RelayFragmentReference_conditions;
if(!conditions){
conditions=[];
this.$RelayFragmentReference_conditions=conditions;}

conditions.push(condition);}}]);return RelayFragmentReference;}();



module.exports=RelayFragmentReference;
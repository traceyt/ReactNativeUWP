'use strict';



















var HMRClient={
enable:function(platform,bundleEntry,host,port){
!platform?require('fbjs/lib/invariant')(0,'Missing required parameter `platform`'):undefined;
!bundleEntry?require('fbjs/lib/invariant')(0,'Missing required paramenter `bundleEntry`'):undefined;
!host?require('fbjs/lib/invariant')(0,'Missing required paramenter `host`'):undefined;




var WebSocket=require('WebSocket');

var wsHostPort=port!==null&&port!==''?
host+':'+port:
host;


var wsUrl='ws://'+wsHostPort+'/hot?'+('platform='+
platform+'&')+('bundleEntry='+
bundleEntry.replace('.bundle','.js'));

var activeWS=new WebSocket(wsUrl);
activeWS.onerror=function(e){
throw new Error('Hot loading isn\'t working because it cannot connect to the development server.\n\nEnsure the following:\n- Node server is running and available on the same network\n- run \'npm start\' from react-native root\n- Node server URL is correctly set in AppDelegate\n\nURL: '+







host+':'+port+'\n\nError: '+

e.message);};


activeWS.onmessage=function(_ref){var data=_ref.data;

var HMRLoadingView=require('HMRLoadingView');

data=JSON.parse(data);

switch(data.type){
case 'update-start':{
HMRLoadingView.showMessage('Hot Loading...');
break;}

case 'update':{var _ret=function(){var _data$body=





data.body;var modules=_data$body.modules;var sourceMappingURLs=_data$body.sourceMappingURLs;var sourceURLs=_data$body.sourceURLs;var inverseDependencies=_data$body.inverseDependencies;

if(require('Platform').OS==='ios'){
var RCTRedBox=require('NativeModules').RedBox;
RCTRedBox&&RCTRedBox.dismiss&&RCTRedBox.dismiss();}else 
{
var RCTExceptionsManager=require('NativeModules').ExceptionsManager;
RCTExceptionsManager&&RCTExceptionsManager.dismissRedbox&&RCTExceptionsManager.dismissRedbox();}


modules.forEach(function(_ref2,i){var name=_ref2.name;var code=_ref2.code;
code=code+'\n\n'+sourceMappingURLs[i];

require('SourceMapsCache').fetch({
text:code,
url:sourceURLs[i],
sourceMappingURL:sourceMappingURLs[i]});





var injectFunction=typeof global.nativeInjectHMRUpdate==='function'?
global.nativeInjectHMRUpdate:
eval;


code='\n              __accept(\n                '+

name+',\n                function(global, require, module, exports) {\n                  '+

code+'\n                },\n                '+

JSON.stringify(inverseDependencies)+'\n              );';


injectFunction(code,sourceURLs[i]);});


HMRLoadingView.hide();
return 'break';}();if(_ret==='break')break;}

case 'update-done':{
HMRLoadingView.hide();
break;}

case 'error':{
HMRLoadingView.hide();
throw new Error(data.body.type+' '+data.body.description);}

default:{
throw new Error('Unexpected message: '+data);}}};}};






module.exports=HMRClient;
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails oncall+relay
 */

'use strict';

require('configureForRelayOSS');








describe('RelayQueryField', function () {var 
  getNode = require('RelayTestUtils').getNode;

  var aliasedIdField = undefined;
  var cursorField = undefined;
  var edgesField = undefined;
  var friendsScalarField = undefined;
  var friendsConnectionField = undefined;
  var friendsVariableField = undefined;
  var generatedIdField = undefined;
  var generatedIdFieldRQL = undefined;
  var nodeField = undefined;
  var nodeIdField = undefined;
  var pageInfoField = undefined;
  var userAddressField = undefined;

  beforeEach(function () {
    jest.resetModuleRegistry();

    jasmine.addMatchers(require('RelayTestUtils').matchers);

    var scalarRQL = (function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'no0eMnT0T7Br:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'RelayQueryFieldRelayQL', type: 'Node' };})();




    nodeIdField = getNode(scalarRQL).getChildren()[0];
    expect(nodeIdField.getSchemaName()).toBe('id');

    var query = getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '4' } }], children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallValue', callValue: '1' } }], children: [{ children: [{ children: [{ alias: 'special_id', fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'User' }, { fieldName: 'cursor', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'FriendsEdge' }, { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true, isGenerated: true, isRequisite: true }, type: 'PageInfo' }], fieldName: 'friends', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'FriendsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'RelayQueryField', type: 'Node' };})());












    friendsConnectionField = query.getChildren()[0];
    edgesField = friendsConnectionField.getChildren()[0];
    nodeField = edgesField.getChildren()[0];
    aliasedIdField = nodeField.getChildren()[0];
    expect(aliasedIdField.getSchemaName()).toBe('id');

    var groupRQL = (function () {return { children: [{ children: [{ fieldName: 'city', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'address', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'StreetAddress' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'm+tyQCl28Et0:0', kind: 'Fragment', metadata: {}, name: 'RelayQueryFieldRelayQL', type: 'User' };})();






    userAddressField = getNode(groupRQL).getChildren()[0];
    expect(userAddressField.getSchemaName()).toBe('address');

    var friendsScalarFieldRQL = (function () {return { children: [{ alias: 'friend_scalar', calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallValue', callValue: '10' } }, { kind: 'Call', metadata: {}, name: 'after', value: { kind: 'CallValue', callValue: 'offset' } }, { kind: 'Call', metadata: {}, name: 'orderby', value: { kind: 'CallValue', callValue: 'name' } }], children: [{ children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'User' }, { fieldName: 'cursor', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'FriendsEdge' }, { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true, isGenerated: true, isRequisite: true }, type: 'PageInfo' }], fieldName: 'friends', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'FriendsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'CtyfCUvjjJ2b:0', kind: 'Fragment', metadata: {}, name: 'RelayQueryFieldRelayQL', type: 'User' };})();











    friendsScalarField = getNode(friendsScalarFieldRQL).getChildren()[0];
    expect(friendsScalarField.getSchemaName()).toBe('friends');
    pageInfoField = getNode(friendsScalarFieldRQL).
    getChildren()[0].
    getChildren()[1];
    expect(pageInfoField.getSchemaName()).
    toBe(require('RelayConnectionInterface').PAGE_INFO);
    // feed.edges.cursor
    cursorField = getNode(friendsScalarFieldRQL).
    getChildren()[0].getChildren()[0].getChildren()[1];
    expect(cursorField.getSchemaName()).toBe('cursor');

    var friendsVariableFieldRQL = (function () {return { children: [{ alias: 'friends_variable', calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallVariable', callVariableName: 'first' } }, { kind: 'Call', metadata: {}, name: 'after', value: { kind: 'CallVariable', callVariableName: 'after' } }], children: [{ children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'User' }, { fieldName: 'cursor', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'FriendsEdge' }, { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true, isGenerated: true, isRequisite: true }, type: 'PageInfo' }], fieldName: 'friends', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'FriendsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: '0yySKyg9Zjh+:0', kind: 'Fragment', metadata: {}, name: 'RelayQueryFieldRelayQL', type: 'User' };})();










    var variables = { 
      after: 'offset', 
      first: 10 };

    friendsVariableField = 
    getNode(friendsVariableFieldRQL, variables).getChildren()[0];
    expect(friendsVariableField.getSchemaName()).toBe('friends');

    generatedIdFieldRQL = (function () {return { children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'Ih7Hqe1aaKjf:0', kind: 'Fragment', metadata: {}, name: 'RelayQueryFieldRelayQL', type: 'User' };})();




    generatedIdField = getNode(generatedIdFieldRQL).getChildren()[1];
    expect(generatedIdField.getSchemaName()).toBe('id');});


  it('returns the type', function () {
    var actor = getNode((function () {return { children: [{ children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'actor', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true }, type: 'Actor' }], id: 'SJ2Pp4+WBaP1:0', kind: 'Fragment', metadata: {}, name: 'RelayQueryFieldRelayQL', type: 'Viewer' };})()).





    getChildren()[0];
    expect(actor.getType()).toBe('Actor');});


  it('gets children by storage key', function () {
    var edges = friendsScalarField.getFieldByStorageKey('edges');
    expect(edges).toBe(friendsScalarField.getChildren()[0]);});


  it('gets children by field', function () {
    var edges = friendsScalarField.getFieldByStorageKey('edges');
    expect(edges).toBe(friendsScalarField.getChildren()[0]);
    var varFeedEdges = friendsVariableField.getField(edges);
    expect(varFeedEdges).toBe(friendsVariableField.getChildren()[0]);});


  it('equals the same fields', function () {
    expect(nodeIdField.equals(nodeIdField)).toBe(true);
    expect(userAddressField.equals(userAddressField)).toBe(true);
    expect(friendsScalarField.equals(friendsScalarField)).toBe(true);
    expect(friendsVariableField.equals(friendsVariableField)).toBe(true);
    expect(generatedIdField.equals(generatedIdField)).toBe(true);
    expect(pageInfoField.equals(pageInfoField)).toBe(true);
    expect(cursorField.equals(cursorField)).toBe(true);});


  it('equals equivalent fields', function () {
    var pictureScalarRQL = (function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'size', value: { kind: 'CallValue', callValue: '32' } }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'Xrh1JnuHADUH:0', kind: 'Fragment', metadata: {}, name: 'RelayQueryFieldRelayQL', type: 'User' };})();




    var pictureScalar = getNode(pictureScalarRQL).getChildren()[0];
    var pictureVariableRQL = (function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'size', value: { kind: 'CallVariable', callVariableName: 'size' } }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'Onbqdgr7za0A:0', kind: 'Fragment', metadata: {}, name: 'RelayQueryFieldRelayQL', type: 'User' };})();




    var variables = { size: '32' };
    var pictureVariable = 
    getNode(pictureVariableRQL, variables).getChildren()[0];
    expect(pictureScalar.equals(pictureVariable)).toBe(true);

    var diffId = getNode(generatedIdFieldRQL).getChildren()[1];
    expect(generatedIdField.equals(diffId)).toBe(true);});


  it('does not equal fields with different values', function () {
    var pictureScalarRQL = (function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'size', value: { kind: 'CallValue', callValue: '32' } }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'er9F6pBybW9w:0', kind: 'Fragment', metadata: {}, name: 'RelayQueryFieldRelayQL', type: 'User' };})();




    var pictureScalar = getNode(pictureScalarRQL).getChildren()[0];
    var pictureVariableRQL = (function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'size', value: { kind: 'CallVariable', callVariableName: 'size' } }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'ZMpR6GXD8nB0:0', kind: 'Fragment', metadata: {}, name: 'RelayQueryFieldRelayQL', type: 'User' };})();




    var pictureVariable = 
    getNode(pictureVariableRQL, { size: '33' }).getChildren()[0];
    expect(pictureScalar.equals(pictureVariable)).toBe(false);});


  it('scalar fields have no children', function () {
    expect(nodeIdField.canHaveSubselections()).toBe(false);
    expect(nodeIdField.getChildren().length).toBe(0);});


  it('returns the same object when cloning a scalar field', function () {
    expect(nodeIdField.clone([])).toBe(nodeIdField);});


  it('clones with updated children', function () {
    var query = getNode((function () {return { children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: 'canViewerComment', kind: 'Field', metadata: {}, type: 'Boolean' }], fieldName: 'feedback', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Feedback' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 't6YNu0jVmLNg:0', kind: 'Fragment', metadata: {}, name: 'RelayQueryFieldRelayQL', type: 'Story' };})()).






    getChildren()[0];
    var clone = query.clone([query.getChildren()[0]]);
    expect(clone.getChildren().length).toBe(1);
    expect(clone.getChildren()[0].getSchemaName()).toBe('id');
    expect(clone.getFieldByStorageKey('canViewerComment')).toBe(undefined);});


  it('throws if cloning a subselection-ineligible field with children', function () {
    var expectedError = 
    'RelayQueryNode: Cannot add children to field `id` because it does not ' + 
    'support sub-selections (sub-fields).';

    expect(function () {
      nodeIdField.clone([null]);}).
    toFailInvariant(expectedError);
    expect(function () {
      nodeIdField.cloneFieldWithCalls([null], []);}).
    toFailInvariant(expectedError);});


  it('returns children', function () {
    var children = userAddressField.getChildren();
    expect(children.length).toBe(1);
    expect(children[0].getSchemaName()).toBe('city');});


  it('return the same object when cloning with the same children', function () {
    var children = userAddressField.getChildren();
    var child = children[0];
    expect(userAddressField.clone(children)).toBe(userAddressField);
    expect(userAddressField.clone([child])).toBe(userAddressField);
    expect(userAddressField.clone([child, null])).toBe(userAddressField);
    expect(userAddressField.clone([null, child, null])).toBe(userAddressField);});


  it('returns a new object when cloning with different children', function () {
    expect(userAddressField.clone([nodeIdField])).not.toBe(userAddressField);});


  it('returns null when cloning without children', function () {
    expect(userAddressField.clone([])).toBe(null);
    expect(userAddressField.clone([null])).toBe(null);
    expect(userAddressField.cloneFieldWithCalls([], [])).toBe(null);
    expect(userAddressField.cloneFieldWithCalls([null], [])).toBe(null);});


  it('returns the schema/application names', function () {
    expect(friendsScalarField.getSchemaName()).toBe('friends');
    expect(friendsScalarField.getApplicationName()).toBe('friend_scalar');

    expect(friendsVariableField.getSchemaName()).toBe('friends');
    expect(friendsVariableField.getApplicationName()).toBe('friends_variable');});


  it('returns call types', function () {
    var field = getNode((function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'size', value: { kind: 'CallValue', callValue: '32' } }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'pM02Ia6RYxuO:0', kind: 'Fragment', metadata: {}, name: 'RelayQueryFieldRelayQL', type: 'User' };})()).

    getChildren()[0];
    field.getConcreteQueryNode().calls[0].metadata = { type: 'scalar' };

    expect(field.getCallType('size')).toBe('scalar');
    expect(field.getCallType('nonExistentCall')).toBe(undefined);});


  it('throws if a variable is missing', function () {
    var pictureFragment = (function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'size', value: [{ kind: 'CallVariable', callVariableName: 'width' }, { kind: 'CallVariable', callVariableName: 'height' }] }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: '1rTjkUMbsze4:0', kind: 'Fragment', metadata: {}, name: 'RelayQueryFieldRelayQL', type: 'User' };})();




    var variables = {};
    var pictureField = getNode(pictureFragment, variables).getChildren()[0];
    expect(function () {return pictureField.getCallsWithValues();}).toFailInvariant(
    'callsFromGraphQL(): Expected a declared value for variable, `$width`.');});



  it('permits null or undefined variable values', function () {
    var pictureFragment = (function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'size', value: [{ kind: 'CallVariable', callVariableName: 'width' }, { kind: 'CallVariable', callVariableName: 'height' }] }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: '+wHXX0IAIUua:0', kind: 'Fragment', metadata: {}, name: 'RelayQueryFieldRelayQL', type: 'User' };})();




    var variables = { 
      width: null, 
      height: undefined };

    var pictureField = getNode(pictureFragment, variables).getChildren()[0];
    expect(pictureField.getCallsWithValues()).toEqual([
    { 
      name: 'size', 
      value: [
      null, 
      undefined] }]);});





  describe('canHaveSubselections()', function () {
    it('returns true for fields that support sub-selections', function () {
      expect(edgesField.canHaveSubselections()).toBe(true);
      expect(friendsConnectionField.canHaveSubselections()).toBe(true);
      expect(friendsScalarField.canHaveSubselections()).toBe(true);
      expect(friendsVariableField.canHaveSubselections()).toBe(true);
      expect(nodeField.canHaveSubselections()).toBe(true);
      expect(pageInfoField.canHaveSubselections()).toBe(true);
      expect(userAddressField.canHaveSubselections()).toBe(true);});


    it('returns false for fields that do not support sub-selections', function () {
      expect(aliasedIdField.canHaveSubselections()).toBe(false);
      expect(cursorField.canHaveSubselections()).toBe(false);
      expect(generatedIdField.canHaveSubselections()).toBe(false);
      expect(nodeIdField.canHaveSubselections()).toBe(false);});});



  describe('getRangeBehaviorKey()', function () {
    it('strips range calls on connections', function () {
      var connectionField = getNode((function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallValue', callValue: '10' } }, { kind: 'Call', metadata: {}, name: 'isViewerFriend', value: { kind: 'CallValue', callValue: true } }], fieldName: 'friends', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'FriendsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'Mm941FIDSf05:0', kind: 'Fragment', metadata: {}, name: 'RelayQueryFieldRelayQL', type: 'User' };})()).

      getChildren()[0];
      expect(connectionField.getRangeBehaviorKey()).
      toBe('isViewerFriend(true)');});


    it('throws for non-connection fields', function () {
      var nonConnectionField = getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '4' } }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'RelayQueryField', type: 'Node' };})()).

      getChildren()[0];
      expect(nonConnectionField.getRangeBehaviorKey).toThrow();});


    it('strips passing `if` calls', function () {
      var ifTrue = getNode((function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'if', value: { kind: 'CallValue', callValue: true } }], fieldName: 'friends', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'FriendsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'JWPsR+66ve5z:0', kind: 'Fragment', metadata: {}, name: 'RelayQueryFieldRelayQL', type: 'User' };})()).

      getChildren()[0];
      expect(ifTrue.getRangeBehaviorKey()).toBe('');

      var ifFalse = getNode((function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'if', value: { kind: 'CallValue', callValue: false } }], fieldName: 'friends', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'FriendsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: '2Y/eoEjYR/0T:0', kind: 'Fragment', metadata: {}, name: 'RelayQueryFieldRelayQL', type: 'User' };})()).

      getChildren()[0];
      expect(ifFalse.getRangeBehaviorKey()).toBe('if(false)');});


    it('strips failing `unless` calls', function () {
      var unlessTrue = getNode((function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'unless', value: { kind: 'CallValue', callValue: true } }], fieldName: 'friends', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'FriendsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'AIE+ZZGJvW96:0', kind: 'Fragment', metadata: {}, name: 'RelayQueryFieldRelayQL', type: 'User' };})()).

      getChildren()[0];
      expect(unlessTrue.getRangeBehaviorKey()).toBe('unless(true)');

      var unlessFalse = getNode((function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'unless', value: { kind: 'CallValue', callValue: false } }], fieldName: 'friends', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'FriendsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'T8PwIIY3DoIF:0', kind: 'Fragment', metadata: {}, name: 'RelayQueryFieldRelayQL', type: 'User' };})()).



      getChildren()[0];
      expect(unlessFalse.getRangeBehaviorKey()).toBe('');});


    it('substitutes variable values', function () {
      var key = 'isViewerFriend(false)';
      var friendsScalarRQL = (function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'isViewerFriend', value: { kind: 'CallValue', callValue: false } }], fieldName: 'friends', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'FriendsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'EEMV5uazJaFT:0', kind: 'Fragment', metadata: {}, name: 'RelayQueryFieldRelayQL', type: 'User' };})();


      var friendsScalar = getNode(friendsScalarRQL).getChildren()[0];
      expect(friendsScalar.getRangeBehaviorKey()).toBe(key);

      var friendsVariableRQL = (function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'isViewerFriend', value: { kind: 'CallVariable', callVariableName: 'isViewerFriend' } }], fieldName: 'friends', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'FriendsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: '4QMJAzqXVGDM:0', kind: 'Fragment', metadata: {}, name: 'RelayQueryFieldRelayQL', type: 'User' };})();


      var variables = { isViewerFriend: false };
      var friendsVariable = 
      getNode(friendsVariableRQL, variables).getChildren()[0];
      expect(friendsVariable.getRangeBehaviorKey()).toBe(key);});


    it('produces stable keys regardless of argument order', function () {
      var friendFieldA = getNode((function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'orderby', value: { kind: 'CallValue', callValue: 'name' } }, { kind: 'Call', metadata: {}, name: 'isViewerFriend', value: { kind: 'CallValue', callValue: true } }], fieldName: 'friends', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'FriendsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: '1VM4wYFMGFTR:0', kind: 'Fragment', metadata: {}, name: 'RelayQueryFieldRelayQL', type: 'User' };})()).

      getChildren()[0];
      var friendFieldB = getNode((function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'isViewerFriend', value: { kind: 'CallValue', callValue: true } }, { kind: 'Call', metadata: {}, name: 'orderby', value: { kind: 'CallValue', callValue: 'name' } }], fieldName: 'friends', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'FriendsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: '+7UoWycmATY5:0', kind: 'Fragment', metadata: {}, name: 'RelayQueryFieldRelayQL', type: 'User' };})()).

      getChildren()[0];
      var expectedKey = 'isViewerFriend(true).orderby(name)';
      expect(friendFieldA.getRangeBehaviorKey()).toBe(expectedKey);
      expect(friendFieldB.getRangeBehaviorKey()).toBe(expectedKey);});});



  describe('getSerializationKey()', function () {
    it('serializes all calls', function () {
      expect(friendsScalarField.getSerializationKey()).toBe(
      require('generateRQLFieldAlias')('friends.after(offset).first(10).orderby(name)'));});



    it('substitutes variable values', function () {
      var key = require('generateRQLFieldAlias')('profilePicture.size(32,64)');
      var pictureScalarRQL = (function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'size', value: [{ kind: 'CallValue', callValue: '32' }, { kind: 'CallValue', callValue: '64' }] }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'eV4eoSmOu1QB:0', kind: 'Fragment', metadata: {}, name: 'RelayQueryFieldRelayQL', type: 'User' };})();




      var pictureScalar = getNode(pictureScalarRQL).getChildren()[0];
      expect(pictureScalar.getSerializationKey()).toBe(key);

      var pictureVariableRQL = (function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'size', value: [{ kind: 'CallVariable', callVariableName: 'width' }, { kind: 'CallVariable', callVariableName: 'height' }] }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'V+P15bh4gyE0:0', kind: 'Fragment', metadata: {}, name: 'RelayQueryFieldRelayQL', type: 'User' };})();




      var variables = { 
        height: 64, 
        width: 32 };

      var pictureVariable = 
      getNode(pictureVariableRQL, variables).getChildren()[0];
      expect(pictureVariable.getSerializationKey()).toBe(key);});});



  describe('getShallowHash()', function () {
    it('serializes all calls', function () {
      expect(friendsScalarField.getShallowHash()).toBe(
      'friends{after:"offset",first:"10",orderby:"name"}');});



    it('serializes argument literal values', function () {
      var node = getNode((function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'size', value: [{ kind: 'CallValue', callValue: '32' }, { kind: 'CallValue', callValue: '64' }] }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'z5C0IBYhFK+h:0', kind: 'Fragment', metadata: {}, name: 'RelayQueryFieldRelayQL', type: 'User' };})());




      expect(node.getChildren()[0].getShallowHash()).toBe(
      'profilePicture{size:[0:"32",1:"64"]}');});



    it('serializes argument variable values', function () {
      var node = getNode((function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'size', value: [{ kind: 'CallVariable', callVariableName: 'width' }, { kind: 'CallVariable', callVariableName: 'height' }] }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: '+oRQ3hNFX7Et:0', kind: 'Fragment', metadata: {}, name: 'RelayQueryFieldRelayQL', type: 'User' };})(), 



      { 
        width: 32, 
        height: 64 });

      expect(node.getChildren()[0].getShallowHash()).toBe(
      'profilePicture{size:[0:32,1:64]}');});});




  describe('getStorageKey()', function () {
    it('strips range calls on connections', function () {
      var connectionField = getNode((function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallValue', callValue: '10' } }, { kind: 'Call', metadata: {}, name: 'isViewerFriend', value: { kind: 'CallValue', callValue: true } }], children: [{ children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'User' }, { fieldName: 'cursor', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'FriendsEdge' }, { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true, isGenerated: true, isRequisite: true }, type: 'PageInfo' }], fieldName: 'friends', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'FriendsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'j/P62Os5hf7F:0', kind: 'Fragment', metadata: {}, name: 'RelayQueryFieldRelayQL', type: 'User' };})()).





      getChildren()[0];
      expect(connectionField.getStorageKey()).
      toBe('friends{isViewerFriend:true}');});


    it('preserves range-like calls on non-connections', function () {
      // NOTE: `segments.edges.node` is scalar.
      var nonConnectionField = getNode((function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallValue', callValue: '3' } }], children: [{ children: [{ fieldName: 'node', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'SegmentsEdge' }], fieldName: 'segments', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Segments' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'T0UXWvsen5yt:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'RelayQueryFieldRelayQL', type: 'Node' };})()).





      getChildren()[0];
      expect(nonConnectionField.getStorageKey()).toBe('segments{first:"3"}');});


    it('strips passing `if` calls', function () {
      var ifTrue = getNode((function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'if', value: { kind: 'CallValue', callValue: true } }], fieldName: 'firstName', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'NW9WDYyDPAmZ:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'RelayQueryFieldRelayQL', type: 'Node' };})()).



      getChildren()[0];
      expect(ifTrue.getStorageKey()).toBe('firstName');

      var ifFalse = getNode((function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'if', value: { kind: 'CallValue', callValue: false } }], fieldName: 'firstName', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'bdhps63ximUL:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'RelayQueryFieldRelayQL', type: 'Node' };})()).



      getChildren()[0];
      expect(ifFalse.getStorageKey()).toBe('firstName{if:false}');});


    it('strips failing `unless` calls', function () {
      var unlessTrue = getNode((function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'unless', value: { kind: 'CallValue', callValue: true } }], fieldName: 'firstName', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'eLtlkZqeQgAX:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'RelayQueryFieldRelayQL', type: 'Node' };})()).



      getChildren()[0];
      expect(unlessTrue.getStorageKey()).toBe('firstName{unless:true}');

      var unlessFalse = getNode((function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'unless', value: { kind: 'CallValue', callValue: false } }], fieldName: 'firstName', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'nL76zPa3rAsx:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'RelayQueryFieldRelayQL', type: 'Node' };})()).



      getChildren()[0];
      expect(unlessFalse.getStorageKey()).toBe('firstName');});


    it('substitutes variable values', function () {
      var key = 'profilePicture{size:[0:"32",1:"64"]}';
      var pictureScalarRQL = (function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'size', value: [{ kind: 'CallValue', callValue: '32' }, { kind: 'CallValue', callValue: '64' }] }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'KgFKCUJLDp1q:0', kind: 'Fragment', metadata: {}, name: 'RelayQueryFieldRelayQL', type: 'User' };})();




      var pictureScalar = getNode(pictureScalarRQL).getChildren()[0];
      expect(pictureScalar.getStorageKey()).toBe(key);

      var pictureVariableRQL = (function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'size', value: [{ kind: 'CallVariable', callVariableName: 'width' }, { kind: 'CallVariable', callVariableName: 'height' }] }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'NlgFLt+jm8kT:0', kind: 'Fragment', metadata: {}, name: 'RelayQueryFieldRelayQL', type: 'User' };})();




      var variables = { 
        height: '64', 
        width: '32' };

      var pictureVariable = 
      getNode(pictureVariableRQL, variables).getChildren()[0];
      expect(pictureVariable.getStorageKey()).toBe(key);});


    it('produces stable keys regardless of argument order', function () {
      var pictureFieldA = getNode((function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'size', value: { kind: 'CallValue', callValue: '32' } }, { kind: 'Call', metadata: { type: 'PhotoSize' }, name: 'preset', value: { kind: 'CallValue', callValue: 'SMALL' } }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: '/wQY9vmjvrtS:0', kind: 'Fragment', metadata: {}, name: 'RelayQueryFieldRelayQL', type: 'User' };})()).

      getChildren()[0];
      var pictureFieldB = getNode((function () {return { children: [{ calls: [{ kind: 'Call', metadata: { type: 'PhotoSize' }, name: 'preset', value: { kind: 'CallValue', callValue: 'SMALL' } }, { kind: 'Call', metadata: {}, name: 'size', value: { kind: 'CallValue', callValue: '32' } }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'nz+H65aoJR0F:0', kind: 'Fragment', metadata: {}, name: 'RelayQueryFieldRelayQL', type: 'User' };})()).

      getChildren()[0];
      var expectedKey = 'profilePicture{preset:"SMALL",size:"32"}';
      expect(pictureFieldA.getStorageKey()).toBe(expectedKey);
      expect(pictureFieldB.getStorageKey()).toBe(expectedKey);});});



  it('returns arguments with values', function () {
    // scalar values are converted to strings
    expect(friendsScalarField.getCallsWithValues()).toEqual([
    { name: 'first', value: '10' }, 
    { name: 'after', value: 'offset' }, 
    { name: 'orderby', value: 'name' }]);

    // variables return their values
    expect(friendsVariableField.getCallsWithValues()).toEqual([
    { name: 'first', value: 10 }, 
    { name: 'after', value: 'offset' }]);


    var pictureScalarRQL = (function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'size', value: [{ kind: 'CallValue', callValue: '32' }, { kind: 'CallValue', callValue: '64' }] }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'q/ekS9cKZ7hV:0', kind: 'Fragment', metadata: {}, name: 'RelayQueryFieldRelayQL', type: 'User' };})();




    var pictureScalar = getNode(pictureScalarRQL).getChildren()[0];
    expect(pictureScalar.getCallsWithValues()).toEqual([
    { name: 'size', value: ['32', '64'] }]);


    var pictureVariableRQL = (function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'size', value: [{ kind: 'CallVariable', callVariableName: 'width' }, { kind: 'CallVariable', callVariableName: 'height' }] }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'ZC1Q5zQp3qfE:0', kind: 'Fragment', metadata: {}, name: 'RelayQueryFieldRelayQL', type: 'User' };})();




    var variables = { 
      height: '64', 
      width: 32 };

    var pictureVariable = 
    getNode(pictureVariableRQL, variables).getChildren()[0];
    expect(pictureVariable.getCallsWithValues()).toEqual([
    { name: 'size', value: [32, '64'] }]);});



  it('returns arguments with array values', function () {
    var variables = { vanities: ['a', 'b', 'c'] };
    var usernamesQuery = getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'names', value: { kind: 'CallVariable', callVariableName: 'vanities' } }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'usernames', kind: 'Query', metadata: { isPlural: true, isAbstract: true, identifyingArgName: 'names' }, name: 'RelayQueryField', type: 'Actor' };})(), 





    variables);
    expect(usernamesQuery.getIdentifyingArg()).toEqual(
    { name: 'names', value: ['a', 'b', 'c'] });});



  it('clones with different call values', function () {
    var clonedFeed = friendsVariableField.cloneFieldWithCalls(
    friendsVariableField.getChildren(), 
    [{ name: 'first', value: 25 }]);

    expect(clonedFeed.getSchemaName()).toBe('friends');
    expect(clonedFeed.getCallsWithValues()).toEqual([
    { name: 'first', value: 25 }]);

    expect(clonedFeed.getSerializationKey()).toEqual(
    require('generateRQLFieldAlias')('friends.first(25)'));

    expect(clonedFeed.getStorageKey()).toEqual('friends');

    clonedFeed = friendsVariableField.cloneFieldWithCalls(
    friendsVariableField.getChildren(), 
    [
    { name: 'first', value: 10 }, 
    { name: 'after', value: 'offset' }]);


    expect(clonedFeed).toBe(friendsVariableField);});


  it('returns isAbstract', function () {
    expect(getNode((function () {return { children: [{ children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'actor', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true }, type: 'Actor' }], id: 'FVBSQYs4JAQQ:0', kind: 'Fragment', metadata: {}, name: 'RelayQueryFieldRelayQL', type: 'Viewer' };})()).





    getFieldByStorageKey('actor').isAbstract()).toBe(true);
    expect(getNode((function () {return { children: [{ children: [{ fieldName: 'city', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'address', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'StreetAddress' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'sNd0oP5NW8VK:0', kind: 'Fragment', metadata: {}, name: 'RelayQueryFieldRelayQL', type: 'User' };})()).





    getFieldByStorageKey('address').isAbstract()).toBe(false);});


  it('returns isGenerated', function () {
    expect(aliasedIdField.isGenerated()).toBe(false);
    expect(cursorField.isGenerated()).toBe(true);
    expect(userAddressField.isGenerated()).toBe(false);
    expect(generatedIdField.isGenerated()).toBe(true);
    expect(nodeIdField.isGenerated()).toBe(false);
    expect(pageInfoField.isGenerated()).toBe(true);});


  it('returns isRefQueryDependency', function () {
    // Not ref query dependencies:
    expect(aliasedIdField.isRefQueryDependency()).toBe(false);
    expect(cursorField.isRefQueryDependency()).toBe(false);
    expect(userAddressField.isRefQueryDependency()).toBe(false);
    expect(generatedIdField.isRefQueryDependency()).toBe(false);
    expect(nodeIdField.isRefQueryDependency()).toBe(false);
    expect(pageInfoField.isRefQueryDependency()).toBe(false);

    // Pretend some of them are ref query dependencies:
    expect(aliasedIdField.cloneAsRefQueryDependency().isRefQueryDependency()).
    toBe(true);
    expect(cursorField.cloneAsRefQueryDependency().isRefQueryDependency()).
    toBe(true);
    expect(generatedIdField.cloneAsRefQueryDependency().isRefQueryDependency()).
    toBe(true);
    expect(nodeIdField.cloneAsRefQueryDependency().isRefQueryDependency()).
    toBe(true);
    expect(pageInfoField.cloneAsRefQueryDependency().isRefQueryDependency()).
    toBe(true);});


  it('returns isRequisite', function () {
    expect(aliasedIdField.isRequisite()).toBe(true);
    expect(cursorField.isRequisite()).toBe(true);
    expect(userAddressField.isRequisite()).toBe(false);
    expect(generatedIdField.isRequisite()).toBe(true);
    expect(nodeIdField.isRequisite()).toBe(true);
    expect(pageInfoField.isRequisite()).toBe(true);});


  it('returns isFindable', function () {
    expect(nodeIdField.isFindable()).toBe(false);
    expect(friendsScalarField.isFindable()).toBe(true);
    expect(userAddressField.isFindable()).toBe(false);});


  it('returns the inferred primary key', function () {
    var field = getNode((function () {return { children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'feedback', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Feedback' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'cTz98eKW/Vvt:0', kind: 'Fragment', metadata: {}, name: 'RelayQueryFieldRelayQL', type: 'Story' };})()).getChildren()[0];
    expect(field.getInferredPrimaryKey()).toBe('id');

    expect(friendsScalarField.getInferredPrimaryKey()).toBe(undefined);});


  it('returns the inferred root call name', function () {
    var field = getNode((function () {return { children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'feedback', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Feedback' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'hc9OvR+KEpXi:0', kind: 'Fragment', metadata: {}, name: 'RelayQueryFieldRelayQL', type: 'Story' };})()).getChildren()[0];
    expect(field.getInferredRootCallName()).toBe('node');

    expect(friendsScalarField.getInferredRootCallName()).toBe(undefined);});


  it('creates nodes', function () {
    var fragmentRQL = (function () {return { children: [{ fieldName: 'actorCount', kind: 'Field', metadata: {}, type: 'Int' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: '9d6BOXC1cTlZ:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'RelayQueryFieldRelayQL', type: 'FeedUnit' };})();




    var node = nodeIdField.createNode(fragmentRQL);
    expect(node instanceof require('RelayQuery').Fragment).toBe(true);
    expect(node.getType()).toBe('FeedUnit');
    expect(node.getRoute()).toBe(nodeIdField.getRoute());
    expect(node.getVariables()).toBe(nodeIdField.getVariables());
    expect(node.getFieldByStorageKey('actorCount').getType()).toBe('Int');});


  it('returns directives', function () {
    var field = getNode((function () {return { children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], directives: [{ kind: 'Directive', name: 'include', args: [{ name: 'if', value: { kind: 'CallVariable', callVariableName: 'cond' } }] }], fieldName: 'feedback', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Feedback' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: '91BCZNGj13/P:0', kind: 'Fragment', metadata: {}, name: 'RelayQueryFieldRelayQL', type: 'Story' };})(), 



    { cond: true }).getChildren()[0];
    expect(field.getDirectives()).toEqual([
    { 
      args: [
      { name: 'if', value: true }], 

      name: 'include' }]);});});
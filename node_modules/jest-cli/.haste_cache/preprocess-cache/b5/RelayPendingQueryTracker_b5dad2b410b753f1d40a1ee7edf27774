'use strict';var 














































RelayPendingQueryTracker=function(){





function RelayPendingQueryTracker(storeData){babelHelpers.classCallCheck(this,RelayPendingQueryTracker);
this.$RelayPendingQueryTracker_pendingFetchMap={};
this.$RelayPendingQueryTracker_preloadQueryMap=new (require('PromiseMap'))();
this.$RelayPendingQueryTracker_storeData=storeData;}babelHelpers.createClass(RelayPendingQueryTracker,[{key:'add',value:function add(





params){
return new PendingFetch(params,{
pendingFetchMap:this.$RelayPendingQueryTracker_pendingFetchMap,
preloadQueryMap:this.$RelayPendingQueryTracker_preloadQueryMap,
storeData:this.$RelayPendingQueryTracker_storeData});}},{key:'hasPendingQueries',value:function hasPendingQueries()



{
return hasItems(this.$RelayPendingQueryTracker_pendingFetchMap);}},{key:'resetPending',value:function resetPending()





{
this.$RelayPendingQueryTracker_pendingFetchMap={};}},{key:'resolvePreloadQuery',value:function resolvePreloadQuery(


queryID,result){
this.$RelayPendingQueryTracker_preloadQueryMap.resolveKey(queryID,result);}},{key:'rejectPreloadQuery',value:function rejectPreloadQuery(


queryID,error){
this.$RelayPendingQueryTracker_preloadQueryMap.rejectKey(queryID,error);}}]);return RelayPendingQueryTracker;}();var 






PendingFetch=function(){
























function PendingFetch(_ref,_ref2)






{var fetchMode=_ref.fetchMode;var forceIndex=_ref.forceIndex;var query=_ref.query;var pendingFetchMap=_ref2.pendingFetchMap;var preloadQueryMap=_ref2.preloadQueryMap;var storeData=_ref2.storeData;babelHelpers.classCallCheck(this,PendingFetch);
var queryID=query.getID();
this.$PendingFetch_dependents=[];
this.$PendingFetch_forceIndex=forceIndex;
this.$PendingFetch_pendingDependencyMap={};
this.$PendingFetch_pendingFetchMap=pendingFetchMap;
this.$PendingFetch_preloadQueryMap=preloadQueryMap;
this.$PendingFetch_query=query;
this.$PendingFetch_resolvedDeferred=new (require('Deferred'))();
this.$PendingFetch_resolvedSubtractedQuery=false;
this.$PendingFetch_storeData=storeData;

var subtractedQuery=undefined;
if(fetchMode===require('RelayFetchMode').PRELOAD){
subtractedQuery=query;
this.$PendingFetch_fetchSubtractedQueryPromise=this.$PendingFetch_preloadQueryMap.get(queryID);}else 
{
subtractedQuery=this.$PendingFetch_subtractPending(query);
this.$PendingFetch_fetchSubtractedQueryPromise=subtractedQuery?
storeData.getNetworkLayer().fetchRelayQuery(subtractedQuery):
Promise.resolve();}


this.$PendingFetch_fetchedSubtractedQuery=!subtractedQuery;
this.$PendingFetch_errors=[];

if(subtractedQuery){
this.$PendingFetch_pendingFetchMap[queryID]={
fetch:this,
query:subtractedQuery};

this.$PendingFetch_fetchSubtractedQueryPromise.done(
this.$PendingFetch_handleSubtractedQuerySuccess.bind(this,subtractedQuery),
this.$PendingFetch_handleSubtractedQueryFailure.bind(this,subtractedQuery));}else 

{
this.$PendingFetch_markSubtractedQueryAsResolved();}}babelHelpers.createClass(PendingFetch,[{key:'isResolvable',value:function isResolvable()








{
if(this.$PendingFetch_fetchedSubtractedQuery){
return require('everyObject')(
this.$PendingFetch_pendingDependencyMap,
function(pendingDependency){return pendingDependency.$PendingFetch_fetchedSubtractedQuery;});}




return false;}},{key:'getQuery',value:function getQuery()


{
return this.$PendingFetch_query;}},{key:'getResolvedPromise',value:function getResolvedPromise()


{
return this.$PendingFetch_resolvedDeferred.getPromise();}},{key:'$PendingFetch_subtractPending',value:function $PendingFetch_subtractPending(















query){var _this=this;
require('everyObject')(this.$PendingFetch_pendingFetchMap,function(pending){

if(!query){
return false;}

if(require('containsRelayQueryRootCall')(pending.query,query)){
var subtractedQuery=require('subtractRelayQuery')(query,pending.query);
if(subtractedQuery!==query){
query=subtractedQuery;
_this.$PendingFetch_addPendingDependency(pending.fetch);}}


return true;});

return query;}},{key:'$PendingFetch_addPendingDependency',value:function $PendingFetch_addPendingDependency(


pendingFetch){
var queryID=pendingFetch.getQuery().getID();
this.$PendingFetch_pendingDependencyMap[queryID]=pendingFetch;
pendingFetch.$PendingFetch_addDependent(this);}},{key:'$PendingFetch_addDependent',value:function $PendingFetch_addDependent(


pendingFetch){
this.$PendingFetch_dependents.push(pendingFetch);}},{key:'$PendingFetch_handleSubtractedQuerySuccess',value:function $PendingFetch_handleSubtractedQuerySuccess(



subtractedQuery,
result)
{var _this2=this;
this.$PendingFetch_fetchedSubtractedQuery=true;

this.$PendingFetch_storeData.getTaskQueue().enqueue(function(){
var response=result.response;
!(
response&&typeof response==='object')?require('invariant')(0,
'RelayPendingQueryTracker: Expected response to be an object, got '+
'`%s`.',
response?typeof response:response):undefined;

_this2.$PendingFetch_storeData.handleQueryPayload(
subtractedQuery,
response,
_this2.$PendingFetch_forceIndex);}).

done(
this.$PendingFetch_markSubtractedQueryAsResolved.bind(this),
this.$PendingFetch_markAsRejected.bind(this));}},{key:'$PendingFetch_handleSubtractedQueryFailure',value:function $PendingFetch_handleSubtractedQueryFailure(




subtractedQuery,
error)
{
this.$PendingFetch_markAsRejected(error);}},{key:'$PendingFetch_markSubtractedQueryAsResolved',value:function $PendingFetch_markSubtractedQueryAsResolved()


{
var queryID=this.getQuery().getID();
delete this.$PendingFetch_pendingFetchMap[queryID];

this.$PendingFetch_resolvedSubtractedQuery=true;
this.$PendingFetch_updateResolvedDeferred();

this.$PendingFetch_dependents.forEach(function(dependent){return (
dependent.$PendingFetch_markDependencyAsResolved(queryID));});}},{key:'$PendingFetch_markAsRejected',value:function $PendingFetch_markAsRejected(



error){
var queryID=this.getQuery().getID();
delete this.$PendingFetch_pendingFetchMap[queryID];

console.warn(error.message);

this.$PendingFetch_errors.push(error);
this.$PendingFetch_updateResolvedDeferred();

this.$PendingFetch_dependents.forEach(function(dependent){return (
dependent.$PendingFetch_markDependencyAsRejected(queryID,error));});}},{key:'$PendingFetch_markDependencyAsResolved',value:function $PendingFetch_markDependencyAsResolved(



dependencyQueryID){
delete this.$PendingFetch_pendingDependencyMap[dependencyQueryID];

this.$PendingFetch_updateResolvedDeferred();}},{key:'$PendingFetch_markDependencyAsRejected',value:function $PendingFetch_markDependencyAsRejected(


dependencyQueryID,error){
delete this.$PendingFetch_pendingDependencyMap[dependencyQueryID];

this.$PendingFetch_errors.push(error);
this.$PendingFetch_updateResolvedDeferred();}},{key:'$PendingFetch_updateResolvedDeferred',value:function $PendingFetch_updateResolvedDeferred()





{
if(this.$PendingFetch_isSettled()&&!this.$PendingFetch_resolvedDeferred.isSettled()){
if(this.$PendingFetch_errors.length){
this.$PendingFetch_resolvedDeferred.reject(this.$PendingFetch_errors[0]);}else 
{
this.$PendingFetch_resolvedDeferred.resolve(undefined);}}}},{key:'$PendingFetch_isSettled',value:function $PendingFetch_isSettled()




{
return this.$PendingFetch_errors.length>0||
this.$PendingFetch_resolvedSubtractedQuery&&!hasItems(this.$PendingFetch_pendingDependencyMap);}}]);return PendingFetch;}();



function hasItems(map){
return !!Object.keys(map).length;}



module.exports=RelayPendingQueryTracker;
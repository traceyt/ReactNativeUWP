/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

'use strict';function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError('Cannot call a class as a function');}}function _inherits(subClass, superClass) {if (typeof superClass !== 'function' && superClass !== null) {throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

var RelayContext = require.requireActual('RelayContext');





/**
 * Mock object to simulate the behavior of a request. Example usage:
 *
 *   RelayStore.primeCache(...);
 *   RelayStore.primeCache.mock.requests[0].block();
 *   RelayStore.primeCache.mock.requests[0].fail(new Error());
 *
 * A normal request should follow one of the following behaviors:
 *
 *   block? -> resolve* -> succeed
 *   block? -> resolve* -> fail
 *
 */
function genMockRequest(args) {
  var ready = false;
  return { 
    abort: function () {
      args[1]({ aborted: true, done: false, error: null, ready: ready, stale: false });}, 

    block: function () {
      args[1]({ aborted: false, done: false, error: null, ready: ready, stale: false });}, 

    resolve: function (config) {
      var stale = config ? !!config.stale : false;
      ready = true;
      args[1]({ aborted: false, done: false, error: null, ready: ready, stale: stale });}, 

    succeed: function () {
      ready = true;
      args[1]({ aborted: false, done: true, error: null, ready: ready, stale: false });}, 

    fail: function (error) {
      args[1]({ aborted: false, done: false, error: error, ready: ready, stale: false });} };}var 




MockRelayContext = (function (_RelayContext) {_inherits(MockRelayContext, _RelayContext);
  function MockRelayContext() {var _this = this;_classCallCheck(this, MockRelayContext);
    _RelayContext.call(this);var _arr = 

    ['getFragmentResolver', 'read'];for (var _i = 0; _i < _arr.length; _i++) {var method = _arr[_i];
      this[method] = jest.genMockFn().mockImplementation(
      RelayContext.prototype[method]);}



    this.primeCache = jest.genMockFunction();
    this.primeCache.mock.abort = [];
    this.primeCache.mock.requests = [];
    this.primeCache.mockImplementation(function () {for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}
      var request = genMockRequest(args);
      var returnValue = { 
        abort: jest.genMockFunction().mockImplementation(function () {
          require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/resolveImmediate')(request.abort);}) };


      _this.primeCache.mock.abort.push(returnValue.abort);
      _this.primeCache.mock.requests.push(request);
      return returnValue;});


    this.forceFetch = jest.genMockFunction();
    this.forceFetch.mock.abort = [];
    this.forceFetch.mock.requests = [];
    this.forceFetch.mockImplementation(function () {for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {args[_key2] = arguments[_key2];}
      var request = genMockRequest(args);
      var returnValue = { 
        abort: jest.genMockFunction().mockImplementation(function () {
          require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/resolveImmediate')(request.abort);}) };


      _this.forceFetch.mock.abort.push(returnValue.abort);
      _this.forceFetch.mock.requests.push(request);
      return returnValue;});


    this.mock = { 
      setMockRecords: function (records) {
        _this.mock.recordStore = new (require('RelayRecordStore'))({ records: records });}, 

      recordStore: null };}return MockRelayContext;})(RelayContext);




module.exports = MockRelayContext;
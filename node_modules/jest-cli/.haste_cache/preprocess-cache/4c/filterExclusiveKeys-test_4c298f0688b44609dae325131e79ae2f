/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails oncall+relay
 */

'use strict';



describe('filterExclusiveKeys', function () {
  beforeEach(function () {
    jest.resetModuleRegistry();});


  it('computes exclusive keys between two objects with overlap', function () {
    var a = { v: true, w: true, x: true };
    var b = { x: true, y: true, z: true };
    expect(require('filterExclusiveKeys')(a, b)).toEqual([
    ['v', 'w'], 
    ['y', 'z']]);});



  it('computes exclusive keys with no first argument', function () {
    var a = null;
    var b = { x: true, y: true, z: true };
    expect(require('filterExclusiveKeys')(a, b)).toEqual([
    [], 
    ['x', 'y', 'z']]);});



  it('computes exclusive keys with an empty first argument', function () {
    var a = {};
    var b = { x: true, y: true, z: true };
    expect(require('filterExclusiveKeys')(a, b)).toEqual([
    [], 
    ['x', 'y', 'z']]);});



  it('computes exclusive keys with no second argument', function () {
    var a = { x: true, y: true, z: true };
    var b = null;
    expect(require('filterExclusiveKeys')(a, b)).toEqual([
    ['x', 'y', 'z'], 
    []]);});



  it('computes exclusive keys with an empty second argument', function () {
    var a = { x: true, y: true, z: true };
    var b = {};
    expect(require('filterExclusiveKeys')(a, b)).toEqual([
    ['x', 'y', 'z'], 
    []]);});});
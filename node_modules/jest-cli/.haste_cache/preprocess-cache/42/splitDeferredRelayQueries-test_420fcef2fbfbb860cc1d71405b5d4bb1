/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails oncall+relay
 */

'use strict';

require('configureForRelayOSS');









describe('splitDeferredRelayQueries()', function () {
  // helper functions
  var defer = require('RelayTestUtils').defer;var getNode = require('RelayTestUtils').getNode;var getRefNode = require('RelayTestUtils').getRefNode;

  // remove the root `id` field
  function filterGeneratedRootFields(node) {
    var children = node.getChildren().filter(function (node) {return !(
      node instanceof require('RelayQuery').Field && 
      node.isGenerated());});

    return node.clone(children);}


  beforeEach(function () {
    // Reset query numbers back to q0.
    jest.resetModuleRegistry();

    jasmine.addMatchers(require('RelayTestUtils').matchers);});


  it('returns the original query when there are no fragments', function () {
    var node = (function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '4' } }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'SplitDeferredRelayQueries', type: 'Node' };})();
    var queryNode = getNode(node);var _splitDeferredRelayQueries = 
    require('splitDeferredRelayQueries')(queryNode);var required = _splitDeferredRelayQueries.required;var deferred = _splitDeferredRelayQueries.deferred;

    expect(required).toBe(queryNode);
    expect(deferred).toEqual([]);});


  it('returns the original query when there are no deferred fragments', function () {
    var fragment = (function () {return { children: [{ children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'hometown', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Page' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'uvZQcgJH0PB1:0', kind: 'Fragment', metadata: {}, name: 'SplitDeferredRelayQueriesRelayQL', type: 'User' };})();
    var node = (function (RQL_0) {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '4' } }], children: [].concat.apply([], [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'SplitDeferredRelayQueries', type: 'Node' };})(




    fragment);



    var queryNode = getNode(node);var _splitDeferredRelayQueries2 = 
    require('splitDeferredRelayQueries')(queryNode);var required = _splitDeferredRelayQueries2.required;var deferred = _splitDeferredRelayQueries2.deferred;

    expect(required).toBe(queryNode);
    expect(deferred).toEqual([]);});


  it('splits a deferred fragment on the viewer root', function () {
    var fragment = (function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallValue', callValue: '10' } }], children: [{ children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: 'actorCount', kind: 'Field', metadata: {}, type: 'Int' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, isAbstract: true, isRequisite: true }, type: 'FeedUnit' }, { fieldName: 'cursor', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'NewsFeedEdge' }, { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true, isGenerated: true, isRequisite: true }, type: 'PageInfo' }], fieldName: 'newsFeed', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'NewsFeedConnection' }], id: 'YB1cIUq8I7ar:0', kind: 'Fragment', metadata: {}, name: 'SplitDeferredRelayQueriesRelayQL', type: 'Viewer' };})();











    var node = (function (RQL_0) {return { children: [].concat.apply([], [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'actor', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true }, type: 'Actor' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'viewer', kind: 'Query', metadata: {}, name: 'SplitDeferredRelayQueries', type: 'Viewer' };})(





    defer(fragment));



    var queryNode = getNode(node);var _splitDeferredRelayQueries3 = 
    require('splitDeferredRelayQueries')(queryNode);var required = _splitDeferredRelayQueries3.required;var deferred = _splitDeferredRelayQueries3.deferred;

    // required part
    expect(required.getName()).toBe(queryNode.getName());
    expect(required).toEqualQueryRoot(getNode((function () {return { children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'actor', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true }, type: 'Actor' }], fieldName: 'viewer', kind: 'Query', metadata: {}, name: 'SplitDeferredRelayQueries', type: 'Viewer' };})()));
    expect(required.getID()).toBe('q3');

    // deferred part
    expect(deferred.length).toBe(1);
    expect(deferred[0].required.getName()).toBe(queryNode.getName());
    expect(deferred[0].required).toEqualQueryRoot(getNode((function (RQL_0) {return { children: [].concat.apply([], [require('Relay').QL.__frag(RQL_0)]), fieldName: 'viewer', kind: 'Query', metadata: {}, name: 'SplitDeferredRelayQueries', type: 'Viewer' };})(


    fragment)));



    expect(deferred[0].required.getID()).toBe('q2');
    expect(deferred[0].required.isDeferred()).toBe(true);

    // no nested deferreds
    expect(deferred[0].deferred).toEqual([]);});


  it('splits a nested feed on the viewer root', function () {
    var nestedFragment = (function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallValue', callValue: '10' } }], children: [{ children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: 'actorCount', kind: 'Field', metadata: {}, type: 'Int' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, isAbstract: true, isRequisite: true }, type: 'FeedUnit' }, { fieldName: 'cursor', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'NewsFeedEdge' }, { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true, isGenerated: true, isRequisite: true }, type: 'PageInfo' }], fieldName: 'newsFeed', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'NewsFeedConnection' }], id: 'Y3QXoi3IQdmr:0', kind: 'Fragment', metadata: {}, name: 'SplitDeferredRelayQueriesRelayQL', type: 'Viewer' };})();











    var fragment = (function (RQL_0) {return { children: [].concat.apply([], [{ children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'actor', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true }, type: 'Actor' }, require('Relay').QL.__frag(RQL_0)]), id: 'GeJuFQ3O+6EY:0', kind: 'Fragment', metadata: {}, name: 'SplitDeferredRelayQueriesRelayQL', type: 'Viewer' };})(




    defer(nestedFragment));


    var node = (function (RQL_0) {return { children: [].concat.apply([], [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'actor', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true }, type: 'Actor' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'viewer', kind: 'Query', metadata: {}, name: 'SplitDeferredRelayQueries', type: 'Viewer' };})(





    fragment);



    var queryNode = getNode(node);var _splitDeferredRelayQueries4 = 
    require('splitDeferredRelayQueries')(queryNode);var required = _splitDeferredRelayQueries4.required;var deferred = _splitDeferredRelayQueries4.deferred;

    // required part
    expect(required.getName()).toBe(queryNode.getName());
    expect(required).toEqualQueryRoot(getNode((function (RQL_0) {return { children: [].concat.apply([], [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'actor', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true }, type: 'Actor' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'viewer', kind: 'Query', metadata: {}, name: 'SplitDeferredRelayQueries', type: 'Viewer' };})((function () {return { children: [{ children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'actor', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true }, type: 'Actor' }], id: 'ZezNaL4eyum+:0', kind: 'Fragment', metadata: {}, name: 'SplitDeferredRelayQueriesRelayQL', type: 'Viewer' };})())));
















    // deferred part
    expect(deferred.length).toBe(1);
    expect(deferred[0].required.getName()).toBe(queryNode.getName());
    expect(deferred[0].required).toEqualQueryRoot(getNode((function (RQL_0) {return { children: [].concat.apply([], [require('Relay').QL.__frag(RQL_0)]), fieldName: 'viewer', kind: 'Query', metadata: {}, name: 'SplitDeferredRelayQueries', type: 'Viewer' };})(


    nestedFragment)));



    expect(deferred[0].required.isDeferred()).toBe(true);

    // no nested deferreds
    expect(deferred[0].deferred).toEqual([]);});


  it('splits nested deferred fragments', function () {
    var nestedFragment = (function () {return { children: [{ children: [{ fieldName: 'text', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'message', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Text' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'SEdP3Kbs7fWV:0', kind: 'Fragment', metadata: {}, name: 'SplitDeferredRelayQueriesRelayQL', type: 'NonNodeStory' };})();
    var fragment = (function (RQL_0) {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallValue', callValue: '10' } }], children: [{ children: [{ children: [].concat.apply([], [{ fieldName: 'tracking', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, isAbstract: true, isRequisite: true }, type: 'FeedUnit' }, { fieldName: 'cursor', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'NewsFeedEdge' }, { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true, isGenerated: true, isRequisite: true }, type: 'PageInfo' }], fieldName: 'newsFeed', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'NewsFeedConnection' }], id: 'oS1P43YbaAXu:0', kind: 'Fragment', metadata: {}, name: 'SplitDeferredRelayQueriesRelayQL', type: 'Viewer' };})(





    defer(nestedFragment));





    var node = (function (RQL_0) {return { children: [].concat.apply([], [{ children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'actor', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true }, type: 'Actor' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'viewer', kind: 'Query', metadata: {}, name: 'SplitDeferredRelayQueries', type: 'Viewer' };})(





    defer(fragment));



    var queryNode = getNode(node);var _splitDeferredRelayQueries5 = 
    require('splitDeferredRelayQueries')(queryNode);var required = _splitDeferredRelayQueries5.required;var deferred = _splitDeferredRelayQueries5.deferred;

    // required part
    expect(required.getName()).toBe(queryNode.getName());
    expect(required).toEqualQueryRoot(getNode((function () {return { children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'actor', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true }, type: 'Actor' }], fieldName: 'viewer', kind: 'Query', metadata: {}, name: 'SplitDeferredRelayQueries', type: 'Viewer' };})()));




    expect(required.getID()).toBe('q5');

    // deferred part
    expect(deferred.length).toBe(1);
    expect(deferred[0].required.getName()).toBe(queryNode.getName());
    expect(deferred[0].required).toEqualQueryRoot(getNode((function (RQL_0) {return { children: [].concat.apply([], [require('Relay').QL.__frag(RQL_0)]), fieldName: 'viewer', kind: 'Query', metadata: {}, name: 'SplitDeferredRelayQueries', type: 'Viewer' };})((function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallValue', callValue: '10' } }], children: [{ children: [{ fieldName: 'cursor', kind: 'Field', metadata: { isRequisite: true }, type: 'String' }, { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: 'tracking', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, isAbstract: true, isRequisite: true }, type: 'FeedUnit' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'NewsFeedEdge' }, { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true, isRequisite: true }, type: 'PageInfo' }], fieldName: 'newsFeed', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'NewsFeedConnection' }], id: '5iNO6/VQR2lR:0', kind: 'Fragment', metadata: {}, name: 'SplitDeferredRelayQueriesRelayQL', type: 'Viewer' };})())));






















    expect(deferred[0].required.getID()).toBe('q4');
    expect(deferred[0].required.isDeferred()).toBe(true);

    // nested deferred part
    expect(deferred[0].deferred.length).toBe(1);
    expect(deferred[0].deferred[0].required.getName()).toBe(
    queryNode.getName());


    // TODO (#7891872): test unflattened queries. The expected output's `edges`
    // field has two `node` children:
    // - the requisite `node{id}`
    // - the nested deferred fragment
    expect(require('flattenRelayQuery')(deferred[0].deferred[0].required)).
    toEqualQueryRoot(require('flattenRelayQuery')(getNode((function (RQL_0) {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallValue', callValue: '10' } }], children: [{ children: [{ fieldName: 'cursor', kind: 'Field', metadata: { isRequisite: true }, type: 'String' }, { children: [].concat.apply([], [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, isAbstract: true, isRequisite: true }, type: 'FeedUnit' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'NewsFeedEdge' }, { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true, isRequisite: true }, type: 'PageInfo' }], fieldName: 'newsFeed', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'NewsFeedConnection' }], fieldName: 'viewer', kind: 'Query', metadata: {}, name: 'SplitDeferredRelayQueries', type: 'Viewer' };})(






    nestedFragment))));











    expect(deferred[0].deferred[0].required.getID()).toBe('q2');
    expect(deferred[0].deferred[0].required.isDeferred()).toBe(true);

    // no nested nested deferreds
    expect(deferred[0].deferred[0].deferred).toEqual([]);});


  it('splits deferred fragments using ref queries', function () {
    var fragment = (function () {return { children: [{ children: [{ fieldName: 'uri', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: '9hdh8zQDweNx:0', kind: 'Fragment', metadata: {}, name: 'SplitDeferredRelayQueriesRelayQL', type: 'Page' };})();
    var node = (function (RQL_0) {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '4' } }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { children: [].concat.apply([], [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'hometown', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Page' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'SplitDeferredRelayQueries', type: 'Node' };})(





    defer(fragment));




    var queryNode = getNode(node);var _splitDeferredRelayQueries6 = 
    require('splitDeferredRelayQueries')(queryNode);var required = _splitDeferredRelayQueries6.required;var deferred = _splitDeferredRelayQueries6.deferred;

    // required part
    expect(required.getName()).toBe(queryNode.getName());
    expect(required).toEqualQueryRoot(
    getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '4' } }], children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }], fieldName: 'hometown', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Page' }, { fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'SplitDeferredRelayQueries', type: 'Node' };})()));

    expect(required.getID()).toBe('q1');
    expect(
    required.
    getFieldByStorageKey('hometown').
    getFieldByStorageKey('id').
    isRefQueryDependency()).
    toBe(true);

    // deferred part
    expect(deferred.length).toBe(1);
    expect(deferred[0].required.getName()).toBe(queryNode.getName());
    expect(deferred[0].required).toEqualQueryRoot(
    filterGeneratedRootFields(getRefNode((function (RQL_0) {return { calls: [{ kind: 'Call', metadata: {}, name: 'ids', value: { kind: 'CallVariable', callVariableName: 'ref_q1' } }], children: [].concat.apply([], [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'nodes', kind: 'Query', metadata: { isPlural: true, isAbstract: true, identifyingArgName: 'ids' }, name: 'SplitDeferredRelayQueries', type: 'Node' };})(



    fragment), 



    { path: '$.*.hometown.id' })));


    expect(deferred[0].required.getID()).toBe('q2');
    expect(deferred[0].required.isDeferred()).toBe(true);

    // no nested deferreds
    expect(deferred[0].deferred).toEqual([]);});


  it('splits a nested deferred fragments as a ref queries', function () {
    var nestedFragment = (function () {return { children: [{ children: [{ fieldName: 'uri', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'y6mdmqsgINmb:0', kind: 'Fragment', metadata: {}, name: 'SplitDeferredRelayQueriesRelayQL', type: 'Page' };})();
    var fragment = (function (RQL_0) {return { children: [{ children: [].concat.apply([], [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'hometown', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Page' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: '3Xi9UzBjG1Rs:0', kind: 'Fragment', metadata: {}, name: 'SplitDeferredRelayQueriesRelayQL', type: 'User' };})(



    defer(nestedFragment));



    var node = (function (RQL_0) {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '4' } }], children: [].concat.apply([], [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'SplitDeferredRelayQueries', type: 'Node' };})(




    defer(fragment));



    var queryNode = getNode(node);var _splitDeferredRelayQueries7 = 
    require('splitDeferredRelayQueries')(queryNode);var required = _splitDeferredRelayQueries7.required;var deferred = _splitDeferredRelayQueries7.deferred;

    // required part
    expect(required.getName()).toBe(queryNode.getName());
    expect(required).toEqualQueryRoot(getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '4' } }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'SplitDeferredRelayQueries', type: 'Node' };})()));
    expect(required.getID()).toBe('q3');

    // deferred part
    expect(deferred.length).toBe(1);
    expect(deferred[0].required.getName()).toBe(queryNode.getName());
    expect(deferred[0].required).toEqualQueryRoot(getNode((function (RQL_0) {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '4' } }], children: [].concat.apply([], [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'SplitDeferredRelayQueries', type: 'Node' };})((function () {return { children: [{ children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'hometown', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Page' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'uBoxPpgKKCsN:0', kind: 'Fragment', metadata: {}, name: 'SplitDeferredRelayQueriesRelayQL', type: 'User' };})())));







    expect(deferred[0].required.getID()).toBe('q2');
    expect(deferred[0].required.isDeferred()).toBe(true);
    expect(
    deferred[0].
    required.
    getChildren()[0] // node(4){hometown} (fragment)
    .getChildren()[0] // node(4){hometown} (field)
    .getChildren()[0] // node(4){hometown{id}} (field)
    .isRefQueryDependency()).
    toBe(true);

    // nested deferred part
    expect(deferred[0].deferred.length).toBe(1);
    expect(deferred[0].deferred[0].required.getName()).toBe(
    queryNode.getName());

    expect(deferred[0].deferred[0].required).toEqualQueryRoot(
    filterGeneratedRootFields(getRefNode((function (RQL_0) {return { calls: [{ kind: 'Call', metadata: {}, name: 'ids', value: { kind: 'CallVariable', callVariableName: 'ref_q2' } }], children: [].concat.apply([], [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'nodes', kind: 'Query', metadata: { isPlural: true, isAbstract: true, identifyingArgName: 'ids' }, name: 'SplitDeferredRelayQueries', type: 'Node' };})(



    nestedFragment), 



    { path: '$.*.hometown.id' })));


    expect(deferred[0].deferred[0].required.getID()).toBe('q4');
    expect(deferred[0].deferred[0].required.isDeferred()).toBe(true);

    // no nested nested deferreds
    expect(deferred[0].deferred[0].deferred).toEqual([]);});


  it('splits a deferred fragment nested inside a ref query', function () {
    // this time, going to defer something inside the ref
    var nestedFragment = (function () {return { children: [{ children: [{ fieldName: 'city', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'address', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'StreetAddress' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'iSjlFLcHnC+a:0', kind: 'Fragment', metadata: {}, name: 'SplitDeferredRelayQueriesRelayQL', type: 'Page' };})();
    var fragment = (function (RQL_0) {return { children: [].concat.apply([], [{ children: [{ fieldName: 'uri', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, require('Relay').QL.__frag(RQL_0)]), id: 'XqbnznZBUhL4:0', kind: 'Fragment', metadata: {}, name: 'SplitDeferredRelayQueriesRelayQL', type: 'Page' };})(




    defer(nestedFragment));


    var node = (function (RQL_0) {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '4' } }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { children: [].concat.apply([], [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'hometown', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Page' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'SplitDeferredRelayQueries', type: 'Node' };})(





    defer(fragment));




    var queryNode = getNode(node);var _splitDeferredRelayQueries8 = 
    require('splitDeferredRelayQueries')(queryNode);var required = _splitDeferredRelayQueries8.required;var deferred = _splitDeferredRelayQueries8.deferred;

    // required part
    expect(required.getName()).toBe(queryNode.getName());
    expect(required).toEqualQueryRoot(
    getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '4' } }], children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }], fieldName: 'hometown', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Page' }, { fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'SplitDeferredRelayQueries', type: 'Node' };})()));

    expect(
    required.
    getFieldByStorageKey('hometown').
    getFieldByStorageKey('id').
    isRefQueryDependency()).
    toBe(true);
    expect(required.getID()).toBe('q1');

    // deferred part
    expect(deferred.length).toBe(1);
    expect(deferred[0].required.getName()).toBe(queryNode.getName());
    expect(deferred[0].required).toEqualQueryRoot(
    filterGeneratedRootFields(getRefNode((function (RQL_0) {return { calls: [{ kind: 'Call', metadata: {}, name: 'ids', value: { kind: 'CallVariable', callVariableName: 'ref_q1' } }], children: [].concat.apply([], [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'nodes', kind: 'Query', metadata: { isPlural: true, isAbstract: true, identifyingArgName: 'ids' }, name: 'SplitDeferredRelayQueries', type: 'Node' };})((function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { children: [{ fieldName: 'uri', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }], id: 'a5FXHu0RVash:0', kind: 'Fragment', metadata: {}, name: 'SplitDeferredRelayQueriesRelayQL', type: 'Page' };})()), 







    { path: '$.*.hometown.id' })));


    expect(deferred[0].required.getID()).toBe('q2');
    expect(deferred[0].required.isDeferred()).toBe(true);

    // nested deferred part
    expect(deferred[0].deferred.length).toBe(1);
    expect(deferred[0].deferred[0].required.getName()).toBe(
    queryNode.getName());

    expect(deferred[0].deferred[0].required).toEqualQueryRoot(
    filterGeneratedRootFields(getRefNode((function (RQL_0) {return { calls: [{ kind: 'Call', metadata: {}, name: 'ids', value: { kind: 'CallVariable', callVariableName: 'ref_q2' } }], children: [].concat.apply([], [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'nodes', kind: 'Query', metadata: { isPlural: true, isAbstract: true, identifyingArgName: 'ids' }, name: 'SplitDeferredRelayQueries', type: 'Node' };})(



    nestedFragment), 



    { path: '$.*.hometown.id' })));


    expect(deferred[0].deferred[0].required.getID()).toBe('q3');
    expect(deferred[0].deferred[0].required.isDeferred()).toBe(true);

    // no nested nested deferreds
    expect(deferred[0].deferred[0].deferred).toEqual([]);});


  it('drops the required portion if it is empty', function () {
    var fragment = (function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallValue', callValue: '10' } }], children: [{ children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: 'actorCount', kind: 'Field', metadata: {}, type: 'Int' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, isAbstract: true, isRequisite: true }, type: 'FeedUnit' }, { fieldName: 'cursor', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'NewsFeedEdge' }, { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true, isGenerated: true, isRequisite: true }, type: 'PageInfo' }], fieldName: 'newsFeed', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'NewsFeedConnection' }], id: 'Nb/F2u91mpUV:0', kind: 'Fragment', metadata: {}, name: 'SplitDeferredRelayQueriesRelayQL', type: 'Viewer' };})();











    var node = (function (RQL_0) {return { children: [].concat.apply([], [require('Relay').QL.__frag(RQL_0)]), fieldName: 'viewer', kind: 'Query', metadata: {}, name: 'SplitDeferredRelayQueries', type: 'Viewer' };})(


    defer(fragment));



    var queryNode = getNode(node);var _splitDeferredRelayQueries9 = 
    require('splitDeferredRelayQueries')(queryNode);var required = _splitDeferredRelayQueries9.required;var deferred = _splitDeferredRelayQueries9.deferred;

    // required part
    expect(required).toBe(null);

    // deferred part
    expect(deferred.length).toBe(1);
    expect(deferred[0].required.getName()).toBe(queryNode.getName());
    expect(deferred[0].required).toEqualQueryRoot(getNode((function (RQL_0) {return { children: [].concat.apply([], [require('Relay').QL.__frag(RQL_0)]), fieldName: 'viewer', kind: 'Query', metadata: {}, name: 'SplitDeferredRelayQueries', type: 'Viewer' };})(


    fragment)));



    expect(deferred[0].required.isDeferred()).toBe(true);

    // no nested deferred part
    expect(deferred[0].deferred).toEqual([]);});


  it('handles a nested defer with no required part', function () {
    var nestedFragment = (function () {return { children: [{ fieldName: 'primaryEmail', kind: 'Field', metadata: {}, type: 'String' }], id: 'eIX8LVgcUGCE:0', kind: 'Fragment', metadata: {}, name: 'SplitDeferredRelayQueriesRelayQL', type: 'Viewer' };})();
    var fragment = (function (RQL_0) {return { children: [].concat.apply([], [require('Relay').QL.__frag(RQL_0)]), id: 'OoMRNXNLsoLk:0', kind: 'Fragment', metadata: {}, name: 'SplitDeferredRelayQueriesRelayQL', type: 'Viewer' };})(

    defer(nestedFragment));


    var node = (function (RQL_0) {return { children: [].concat.apply([], [{ fieldName: 'isFbEmployee', kind: 'Field', metadata: {}, type: 'Boolean' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'viewer', kind: 'Query', metadata: {}, name: 'SplitDeferredRelayQueries', type: 'Viewer' };})(



    defer(fragment));



    var queryNode = getNode(node);var _splitDeferredRelayQueries10 = 
    require('splitDeferredRelayQueries')(queryNode);var required = _splitDeferredRelayQueries10.required;var deferred = _splitDeferredRelayQueries10.deferred;

    // required part
    expect(required.getName()).toBe(queryNode.getName());
    expect(required).toEqualQueryRoot(getNode((function () {return { children: [{ fieldName: 'isFbEmployee', kind: 'Field', metadata: {}, type: 'Boolean' }], fieldName: 'viewer', kind: 'Query', metadata: {}, name: 'SplitDeferredRelayQueries', type: 'Viewer' };})()));





    // deferred part
    expect(deferred.length).toBe(1);
    expect(deferred[0].required).toBe(null);

    // nested deferred part
    expect(deferred[0].deferred.length).toBe(1);
    expect(deferred[0].deferred[0].required.getName()).toBe(
    queryNode.getName());

    expect(deferred[0].deferred[0].required).toEqualQueryRoot(getNode((function (RQL_0) {return { children: [].concat.apply([], [require('Relay').QL.__frag(RQL_0)]), fieldName: 'viewer', kind: 'Query', metadata: {}, name: 'SplitDeferredRelayQueries', type: 'Viewer' };})(


    nestedFragment)));



    expect(deferred[0].deferred[0].required.isDeferred()).toBe(true);

    // no nested nested deferreds
    expect(deferred[0].deferred[0].deferred).toEqual([]);});


  it('handles a nested ref query defer with no required part', function () {
    var nestedFragment = (function () {return { children: [{ children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'hometown', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Page' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: '+gQUq8NmeHgv:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'SplitDeferredRelayQueriesRelayQL', type: 'Actor' };})();
    var fragment = (function (RQL_0) {return { children: [].concat.apply([], [require('Relay').QL.__frag(RQL_0)]), id: '0gKsLMHVYC2U:0', kind: 'Fragment', metadata: {}, name: 'SplitDeferredRelayQueriesRelayQL', type: 'Viewer' };})(

    defer(nestedFragment));


    var node = (function (RQL_0) {return { children: [{ children: [].concat.apply([], [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'actor', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true }, type: 'Actor' }], fieldName: 'viewer', kind: 'Query', metadata: {}, name: 'SplitDeferredRelayQueries', type: 'Viewer' };})(




    defer(fragment));




    var queryNode = getNode(node);var _splitDeferredRelayQueries11 = 
    require('splitDeferredRelayQueries')(queryNode);var required = _splitDeferredRelayQueries11.required;var deferred = _splitDeferredRelayQueries11.deferred;

    // required part
    expect(required.getName()).toBe(queryNode.getName());
    expect(required).toEqualQueryRoot(getNode((function () {return { children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'actor', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true }, type: 'Actor' }], fieldName: 'viewer', kind: 'Query', metadata: {}, name: 'SplitDeferredRelayQueries', type: 'Viewer' };})()));




    expect(required.getID()).toBe('q1');
    expect(
    required.
    getFieldByStorageKey('actor').
    getFieldByStorageKey('id').
    isRefQueryDependency()).
    toBe(true);

    // deferred part
    expect(deferred.length).toBe(1);
    expect(deferred[0].required).toBe(null);

    // nested deferred part
    expect(deferred[0].deferred.length).toBe(1);
    expect(deferred[0].deferred[0].required.getName()).toBe(
    queryNode.getName());

    expect(deferred[0].deferred[0].required).toEqualQueryRoot(
    filterGeneratedRootFields(getRefNode((function (RQL_0) {return { calls: [{ kind: 'Call', metadata: {}, name: 'ids', value: { kind: 'CallVariable', callVariableName: 'ref_q1' } }], children: [].concat.apply([], [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'nodes', kind: 'Query', metadata: { isPlural: true, isAbstract: true, identifyingArgName: 'ids' }, name: 'SplitDeferredRelayQueries', type: 'Node' };})(



    nestedFragment), 



    { path: '$.*.actor.id' })));


    expect(deferred[0].deferred[0].required.getID()).toBe('q2');
    expect(deferred[0].deferred[0].required.isDeferred()).toBe(true);

    // no nested nested deferreds
    expect(deferred[0].deferred[0].deferred).toEqual([]);});


  it('handles paths with plural fields', function () {
    var fragment = (function () {return { children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'Xk2PNKZG0fyA:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'SplitDeferredRelayQueriesRelayQL', type: 'Actor' };})();
    var node = (function (RQL_0) {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '123' } }], children: [{ children: [].concat.apply([], [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'actors', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true, isPlural: true }, type: 'Actor' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'SplitDeferredRelayQueries', type: 'Node' };})(




    defer(fragment));




    var queryNode = getNode(node);var _splitDeferredRelayQueries12 = 
    require('splitDeferredRelayQueries')(queryNode);var required = _splitDeferredRelayQueries12.required;var deferred = _splitDeferredRelayQueries12.deferred;

    // required part
    expect(required.getName()).toBe(queryNode.getName());
    expect(required).toEqualQueryRoot(getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '123' } }], children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'actors', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true, isPlural: true }, type: 'Actor' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'SplitDeferredRelayQueries', type: 'Node' };})()));








    expect(required.getID()).toBe('q1');

    // deferred part
    expect(deferred.length).toBe(1);
    expect(deferred[0].required.getName()).toBe(queryNode.getName());
    expect(deferred[0].required).toEqualQueryRoot(filterGeneratedRootFields(
    getRefNode((function (RQL_0) {return { calls: [{ kind: 'Call', metadata: {}, name: 'ids', value: { kind: 'CallVariable', callVariableName: 'ref_q1' } }], children: [].concat.apply([], [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'nodes', kind: 'Query', metadata: { isPlural: true, isAbstract: true, identifyingArgName: 'ids' }, name: 'SplitDeferredRelayQueries', type: 'Node' };})(



    fragment), 



    { path: '$.*.actors.*.id' })));


    expect(deferred[0].required.getID()).toBe('q2');
    expect(deferred[0].required.isDeferred()).toBe(true);

    // no nested deferreds
    expect(deferred[0].deferred).toEqual([]);});


  it('works with nested node ancestors', function () {
    var fragment = (function () {return { children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'tuFAKNEEz7Bq:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'SplitDeferredRelayQueriesRelayQL', type: 'Node' };})();
    var node = (function (RQL_0) {return { children: [{ children: [{ children: [].concat.apply([], [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'hometown', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Page' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'actor', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true }, type: 'Actor' }], fieldName: 'viewer', kind: 'Query', metadata: {}, name: 'SplitDeferredRelayQueries', type: 'Viewer' };})(




    defer(fragment));






    var queryNode = getNode(node);var _splitDeferredRelayQueries13 = 
    require('splitDeferredRelayQueries')(queryNode);var required = _splitDeferredRelayQueries13.required;var deferred = _splitDeferredRelayQueries13.deferred;

    // required part
    expect(required.getName()).toBe(queryNode.getName());
    expect(required).toEqualQueryRoot(getNode((function () {return { children: [{ children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }], fieldName: 'hometown', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Page' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'actor', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true }, type: 'Actor' }], fieldName: 'viewer', kind: 'Query', metadata: {}, name: 'SplitDeferredRelayQueries', type: 'Viewer' };})()));










    expect(required.getID()).toBe('q1');

    // deferred part
    expect(deferred.length).toBe(1);
    expect(deferred[0].required.getName()).toBe(queryNode.getName());
    expect(deferred[0].required).toEqualQueryRoot(
    filterGeneratedRootFields(getRefNode((function (RQL_0) {return { calls: [{ kind: 'Call', metadata: {}, name: 'ids', value: { kind: 'CallVariable', callVariableName: 'ref_q1' } }], children: [].concat.apply([], [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'nodes', kind: 'Query', metadata: { isPlural: true, isAbstract: true, identifyingArgName: 'ids' }, name: 'SplitDeferredRelayQueries', type: 'Node' };})(



    fragment), 



    { path: '$.*.actor.hometown.id' })));


    expect(deferred[0].required.getID()).toBe('q2');
    expect(deferred[0].required.isDeferred()).toBe(true);

    // no nested deferreds
    expect(deferred[0].deferred).toEqual([]);});


  it('uses the auto-generated alias in ref query paths', function () {
    var fragment = (function () {return { children: [{ fieldName: 'firstName', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'cXjRVnuSak0p:0', kind: 'Fragment', metadata: {}, name: 'SplitDeferredRelayQueriesRelayQL', type: 'User' };})();
    var node = (function (RQL_0) {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '4' } }], children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallValue', callValue: '5' } }], children: [{ children: [{ children: [].concat.apply([], [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'User' }, { fieldName: 'cursor', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'FriendsEdge' }, { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true, isGenerated: true, isRequisite: true }, type: 'PageInfo' }], fieldName: 'friends', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'FriendsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'SplitDeferredRelayQueries', type: 'Node' };})(






    defer(fragment));







    var queryNode = getNode(node);var _splitDeferredRelayQueries14 = 
    require('splitDeferredRelayQueries')(queryNode);var required = _splitDeferredRelayQueries14.required;var deferred = _splitDeferredRelayQueries14.deferred;

    // required part
    expect(required.getName()).toBe(queryNode.getName());
    expect(required).toEqualQueryRoot(getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '4' } }], children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallValue', callValue: '5' } }], children: [{ children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'User' }, { fieldName: 'cursor', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'FriendsEdge' }, { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true, isGenerated: true, isRequisite: true }, type: 'PageInfo' }], fieldName: 'friends', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'FriendsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'SplitDeferredRelayQueries', type: 'Node' };})()));













    expect(required.getID()).toBe('q1');

    // deferred part
    var alias = require('generateRQLFieldAlias')('friends.first(5)');
    expect(deferred.length).toBe(1);
    expect(deferred[0].required.getName()).toBe(
    queryNode.getName());

    expect(deferred[0].required).toEqualQueryRoot(filterGeneratedRootFields(
    getRefNode((function (RQL_0) {return { calls: [{ kind: 'Call', metadata: {}, name: 'ids', value: { kind: 'CallVariable', callVariableName: 'ref_q1' } }], children: [].concat.apply([], [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'nodes', kind: 'Query', metadata: { isPlural: true, isAbstract: true, identifyingArgName: 'ids' }, name: 'SplitDeferredRelayQueries', type: 'Node' };})(



    fragment), 



    { path: '$.*.' + alias + '.edges.*.node.id' })));


    expect(deferred[0].required.getID()).toBe('q2');
    expect(deferred[0].required.isDeferred()).toBe(true);

    // no nested deferreds
    expect(deferred[0].deferred).toEqual([]);});


  it('correctly produces multi-level JSONPaths in ref queries', function () {
    var fragment = (function () {return { children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'yqLG/iQgmXUk:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'SplitDeferredRelayQueriesRelayQL', type: 'Actor' };})();
    var node = (function (RQL_0) {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '4' } }], children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallValue', callValue: '5' } }], children: [{ children: [{ children: [].concat.apply([], [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'User' }, { fieldName: 'cursor', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'FriendsEdge' }, { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true, isGenerated: true, isRequisite: true }, type: 'PageInfo' }], fieldName: 'friends', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'FriendsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'SplitDeferredRelayQueries', type: 'Node' };})(





    defer(fragment));







    var queryNode = getNode(node);var _splitDeferredRelayQueries15 = 
    require('splitDeferredRelayQueries')(queryNode);var required = _splitDeferredRelayQueries15.required;var deferred = _splitDeferredRelayQueries15.deferred;

    // required part
    expect(required.getName()).toBe(queryNode.getName());
    expect(required).toEqualQueryRoot(getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '4' } }], children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallValue', callValue: '5' } }], children: [{ children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'User' }, { fieldName: 'cursor', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'FriendsEdge' }, { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true, isGenerated: true, isRequisite: true }, type: 'PageInfo' }], fieldName: 'friends', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'FriendsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'SplitDeferredRelayQueries', type: 'Node' };})()));












    expect(required.getID()).toBe('q1');

    // deferred part
    var alias = require('generateRQLFieldAlias')('friends.first(5)');
    expect(deferred.length).toBe(1);
    expect(deferred[0].required.getName()).toBe(
    queryNode.getName());

    expect(deferred[0].required).toEqualQueryRoot(filterGeneratedRootFields(
    getRefNode((function (RQL_0) {return { calls: [{ kind: 'Call', metadata: {}, name: 'ids', value: { kind: 'CallVariable', callVariableName: 'ref_q1' } }], children: [].concat.apply([], [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'nodes', kind: 'Query', metadata: { isPlural: true, isAbstract: true, identifyingArgName: 'ids' }, name: 'SplitDeferredRelayQueries', type: 'Node' };})(



    fragment), 



    { path: '$.*.' + alias + '.edges.*.node.id' })));


    expect(deferred[0].required.getID()).toBe('q2');
    expect(deferred[0].required.isDeferred()).toBe(true);

    // no nested deferreds
    expect(deferred[0].deferred).toEqual([]);});


  it('handles fragments that are not nodes', function () {
    var fragment = (function () {return { children: [{ fieldName: 'uri', kind: 'Field', metadata: {}, type: 'String' }], id: 'e6V2dH92PBeN:0', kind: 'Fragment', metadata: {}, name: 'SplitDeferredRelayQueriesRelayQL', type: 'Image' };})();
    var node = (function (RQL_0) {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '4' } }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { calls: [{ kind: 'Call', metadata: {}, name: 'size', value: { kind: 'CallValue', callValue: '100' } }], children: [].concat.apply([], [require('Relay').QL.__frag(RQL_0)]), fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'SplitDeferredRelayQueries', type: 'Node' };})(




    defer(fragment));




    var queryNode = getNode(node);var _splitDeferredRelayQueries16 = 
    require('splitDeferredRelayQueries')(queryNode);var required = _splitDeferredRelayQueries16.required;var deferred = _splitDeferredRelayQueries16.deferred;

    // required part
    expect(required.getName()).toBe(queryNode.getName());
    expect(required).toEqualQueryRoot(getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '4' } }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'SplitDeferredRelayQueries', type: 'Node' };})()));

    // deferred part
    expect(deferred.length).toBe(1);
    expect(deferred[0].required.getName()).toBe(queryNode.getName());
    expect(deferred[0].required).toEqualQueryRoot(getNode((function (RQL_0) {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '4' } }], children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'size', value: { kind: 'CallValue', callValue: '100' } }], children: [].concat.apply([], [require('Relay').QL.__frag(RQL_0)]), fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'SplitDeferredRelayQueries', type: 'Node' };})(



    fragment)));




    expect(deferred[0].required.isDeferred()).toBe(true);

    // no nested deferreds
    expect(deferred[0].deferred).toEqual([]);});


  it('omits required queries with only generated `id` fields', function () {
    var fragment = (function () {return { children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'LBgS1Ghx9V6A:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'SplitDeferredRelayQueriesRelayQL', type: 'Node' };})();
    var node = (function (RQL_0) {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '4' } }], children: [].concat.apply([], [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'SplitDeferredRelayQueries', type: 'Node' };})(


    defer(fragment));



    var queryNode = getNode(node);var _splitDeferredRelayQueries17 = 
    require('splitDeferredRelayQueries')(queryNode);var required = _splitDeferredRelayQueries17.required;var deferred = _splitDeferredRelayQueries17.deferred;

    // required part
    expect(required).toBe(null);

    // deferred part
    expect(deferred.length).toBe(1);
    expect(deferred[0].required.getName()).toBe(queryNode.getName());
    expect(deferred[0].required).toEqualQueryRoot(getNode((function (RQL_0) {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '4' } }], children: [].concat.apply([], [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'SplitDeferredRelayQueries', type: 'Node' };})(


    fragment)));



    expect(deferred[0].required.isDeferred()).toBe(true);

    // no nested deferreds
    expect(deferred[0].deferred).toEqual([]);});


  it('does not omit "empty" required ref query dependencies', function () {
    // It isn't possible to produce an "empty" ref query dependency with
    // `Relay.QL`, but in order to be future-proof against this possible edge
    // case, we create such a query by hand.
    var fragment = (function () {return { children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'lsOCLplAQm2w:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'SplitDeferredRelayQueriesRelayQL', type: 'Node' };})();
    var id = require('RelayQuery').Field.build({ 
      fieldName: 'id', 
      metadata: { isRequisite: true }, 
      type: 'String' });

    var typename = require('RelayQuery').Field.build({ 
      fieldName: '__typename', 
      metadata: { isRequisite: true }, 
      type: 'String' });

    var queryNode = require('RelayQuery').Root.build(
    'splitDeferredRelayQueries', 
    'node', 
    '4', 
    [
    id, 
    typename, 
    require('RelayQuery').Field.build({ 
      fieldName: 'hometown', 
      children: [id, getNode(defer(fragment))], 
      metadata: { 
        canHaveSubselections: true, 
        isGenerated: true, 
        inferredPrimaryKey: 'id', 
        inferredRootCallName: 'node' }, 

      type: 'Page' })], 


    { 
      identifyingArgName: 'id' });


    queryNode = queryNode.clone(
    queryNode.getChildren().map(function (outerChild, ii) {
      if (ii === 1) {
        return outerChild.clone(
        outerChild.getChildren().map(function (innerChild, jj) {
          if (jj === 0) {
            return innerChild.cloneAsRefQueryDependency();} else 
          {
            return innerChild;}}));} else 



      {
        return outerChild;}}));var _splitDeferredRelayQueries18 = 




    require('splitDeferredRelayQueries')(queryNode);var required = _splitDeferredRelayQueries18.required;var deferred = _splitDeferredRelayQueries18.deferred;

    // required part
    expect(deferred[0].required.getName()).toBe(queryNode.getName());
    expect(required).toEqualQueryRoot(getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '4' } }], children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }], fieldName: 'hometown', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Page' }, { fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'SplitDeferredRelayQueries', type: 'Node' };})()));




    expect(required.getID()).toBe('q1');

    // deferred part
    expect(deferred.length).toBe(1);
    expect(deferred[0].required.getName()).toBe(queryNode.getName());
    expect(deferred[0].required).toEqualQueryRoot(
    filterGeneratedRootFields(getRefNode((function (RQL_0) {return { calls: [{ kind: 'Call', metadata: {}, name: 'ids', value: { kind: 'CallVariable', callVariableName: 'ref_q1' } }], children: [].concat.apply([], [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'nodes', kind: 'Query', metadata: { isPlural: true, isAbstract: true, identifyingArgName: 'ids' }, name: 'SplitDeferredRelayQueries', type: 'Node' };})(



    fragment), 



    { path: '$.*.hometown.id' })));


    expect(deferred[0].required.getID()).toBe('q2');
    expect(deferred[0].required.isDeferred()).toBe(true);

    // no nested deferreds
    expect(deferred[0].deferred).toEqual([]);});


  it('preserves required queries with only a non-generated `id` field', function () {
    var fragment = (function () {return { children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'Nu+6iERDFLZD:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'SplitDeferredRelayQueriesRelayQL', type: 'Node' };})();
    var node = (function (RQL_0) {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '4' } }], children: [].concat.apply([], [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'SplitDeferredRelayQueries', type: 'Node' };})(



    defer(fragment));



    var queryNode = getNode(node);var _splitDeferredRelayQueries19 = 
    require('splitDeferredRelayQueries')(queryNode);var required = _splitDeferredRelayQueries19.required;var deferred = _splitDeferredRelayQueries19.deferred;

    // required part
    expect(deferred[0].required.getName()).toBe(queryNode.getName());
    expect(required).toEqualQueryRoot(getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '4' } }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'SplitDeferredRelayQueries', type: 'Node' };})()));

    // deferred part
    expect(deferred.length).toBe(1);
    expect(deferred[0].required.getName()).toBe(queryNode.getName());
    expect(deferred[0].required).toEqualQueryRoot(getNode((function (RQL_0) {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '4' } }], children: [].concat.apply([], [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'SplitDeferredRelayQueries', type: 'Node' };})(


    fragment)));



    expect(deferred[0].required.isDeferred()).toBe(true);

    // no nested deferreds
    expect(deferred[0].deferred).toEqual([]);});


  it('does not split empty fragments', function () {
    // null fragment could be caused by an `if`/`unless` call + a GK
    var nullFragment = (function (RQL_0) {return { children: [].concat.apply([], [require('Relay').QL.__frag(RQL_0)]), id: '5sdRjGh9rqDb:0', kind: 'Fragment', metadata: {}, name: 'SplitDeferredRelayQueriesRelayQL', type: 'Viewer' };})(null);
    var fragment = (function (RQL_0) {return { children: [].concat.apply([], [require('Relay').QL.__frag(RQL_0)]), id: 'r64lGqBFIVgv:0', kind: 'Fragment', metadata: {}, name: 'SplitDeferredRelayQueriesRelayQL', type: 'Viewer' };})(nullFragment);
    var node = (function (RQL_0) {return { children: [].concat.apply([], [{ fieldName: 'primaryEmail', kind: 'Field', metadata: {}, type: 'String' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'viewer', kind: 'Query', metadata: {}, name: 'SplitDeferredRelayQueries', type: 'Viewer' };})(



    defer(fragment));




    var queryNode = getNode(node);var _splitDeferredRelayQueries20 = 
    require('splitDeferredRelayQueries')(queryNode);var required = _splitDeferredRelayQueries20.required;var deferred = _splitDeferredRelayQueries20.deferred;

    expect(required.getName()).toBe(queryNode.getName());
    expect(required).toEqualQueryRoot(getNode((function () {return { children: [{ fieldName: 'primaryEmail', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'viewer', kind: 'Query', metadata: {}, name: 'SplitDeferredRelayQueries', type: 'Viewer' };})()));




    expect(deferred.length).toBe(0);});


  it('does not flatten fragments when splitting root queries', function () {
    var fragment = (function () {return { children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'b5WmU84kdy0V:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'SplitDeferredRelayQueriesRelayQL', type: 'Node' };})();
    var query = getNode((function (RQL_0) {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '4' } }], children: [].concat.apply([], [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'SplitDeferredRelayQueries', type: 'Node' };})(


    defer(fragment)));var _splitDeferredRelayQueries21 = 



    require('splitDeferredRelayQueries')(query);var deferred = _splitDeferredRelayQueries21.deferred;

    expect(deferred.length).toBe(1);
    expect(deferred[0].required).toContainQueryNode(getNode(fragment));});


  it('does not flatten fragments when splitting ref queries', function () {
    var fragment = (function () {return { children: [{ children: [{ fieldName: 'count', kind: 'Field', metadata: {}, type: 'Int' }], fieldName: 'likers', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'LikersOfContentConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'ij9N69b+g1gq:0', kind: 'Fragment', metadata: {}, name: 'SplitDeferredRelayQueriesRelayQL', type: 'Feedback' };})();
    var query = getNode((function (RQL_0) {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: 'STORY_ID' } }], children: [{ children: [].concat.apply([], [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'feedback', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Feedback' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'SplitDeferredRelayQueries', type: 'Node' };})(



    defer(fragment)));var _splitDeferredRelayQueries22 = 




    require('splitDeferredRelayQueries')(query);var deferred = _splitDeferredRelayQueries22.deferred;

    expect(deferred.length).toBe(1);
    expect(deferred[0].required).toContainQueryNode(getNode(fragment));});});
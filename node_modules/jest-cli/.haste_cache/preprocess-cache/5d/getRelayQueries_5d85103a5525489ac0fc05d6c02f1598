'use strict';




























var queryCache=new (require('Map'))();






function getRelayQueries(
Component,
route)
{
if(!queryCache.has(Component)){
queryCache.set(Component,{});}

var cacheKey=route.name+':'+require('stableStringify')(route.params);



var cache=queryCache.get(Component);
if(cache.hasOwnProperty(cacheKey)){
return cache[cacheKey];}

var querySet={};
Component.getFragmentNames().forEach(function(fragmentName){
querySet[fragmentName]=null;});

Object.keys(route.queries).forEach(function(queryName){
if(!Component.hasFragment(queryName)){
require('warning')(
false,
'Relay.QL: query `%s.queries.%s` is invalid, expected fragment '+
'`%s.fragments.%s` to be defined.',
route.name,
queryName,
Component.displayName,
queryName);

return;}

var queryBuilder=route.queries[queryName];
if(queryBuilder){
var concreteQuery=require('buildRQL').Query(
queryBuilder,
Component,
queryName,
route.params);

!(
concreteQuery!==undefined)?require('invariant')(0,
'Relay.QL: query `%s.queries.%s` is invalid, a typical query is '+
'defined using: () => Relay.QL`query { ... }`.',
route.name,
queryName):undefined;

if(concreteQuery){
var rootQuery=require('RelayQuery').Root.create(
concreteQuery,
require('RelayMetaRoute').get(route.name),
route.params);

var identifyingArg=rootQuery.getIdentifyingArg();
if(!identifyingArg||identifyingArg.value!==undefined){
querySet[queryName]=rootQuery;
return;}}}



querySet[queryName]=null;});

cache[cacheKey]=querySet;
return querySet;}


module.exports=require('RelayProfiler').instrument('Relay.getQueries',getRelayQueries);
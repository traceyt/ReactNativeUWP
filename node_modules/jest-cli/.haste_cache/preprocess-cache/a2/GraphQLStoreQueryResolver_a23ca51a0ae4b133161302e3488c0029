'use strict';var 




































GraphQLStoreQueryResolver=function(){








function GraphQLStoreQueryResolver(
storeData,
fragment,
callback)
{babelHelpers.classCallCheck(this,GraphQLStoreQueryResolver);
this.dispose();
this.$GraphQLStoreQueryResolver_callback=callback;
this.$GraphQLStoreQueryResolver_fragment=fragment;
this.$GraphQLStoreQueryResolver_resolver=null;
this.$GraphQLStoreQueryResolver_storeData=storeData;}babelHelpers.createClass(GraphQLStoreQueryResolver,[{key:'dispose',value:function dispose()






{
if(this.$GraphQLStoreQueryResolver_resolver){
this.$GraphQLStoreQueryResolver_resolver.dispose();}}},{key:'resolve',value:function resolve(




fragment,
dataIDs)
{

if(this.$GraphQLStoreQueryResolver_fragment.getConcreteFragmentID()!==
fragment.getConcreteFragmentID())
{
require('warning')(
false,
'GraphQLStoreQueryResolver: Expected `resolve` to be called with the '+
'same concrete fragment as the constructor. The resolver was created '+
'with fragment `%s` but resolved with fragment `%s`.',
this.$GraphQLStoreQueryResolver_fragment.getDebugName(),
fragment.getDebugName());}







if(Array.isArray(dataIDs)){

require('warning')(
fragment.isPlural(),
'GraphQLStoreQueryResolver: Expected id/fragment plurality to be '+
'consistent: got plural ids for singular fragment `%s`.',
fragment.getDebugName());

var resolver=this.$GraphQLStoreQueryResolver_resolver;
if(resolver instanceof GraphQLStoreSingleQueryResolver){
resolver.dispose();
resolver=null;}

if(!resolver){
resolver=new GraphQLStorePluralQueryResolver(
this.$GraphQLStoreQueryResolver_storeData,
this.$GraphQLStoreQueryResolver_callback);}


this.$GraphQLStoreQueryResolver_resolver=resolver;
return resolver.resolve(fragment,dataIDs);}else 
{

require('warning')(
!fragment.isPlural(),
'GraphQLStoreQueryResolver: Expected id/fragment plurality to be '+
'consistent: got a singular id for plural fragment `%s`.',
fragment.getDebugName());

var resolver=this.$GraphQLStoreQueryResolver_resolver;
if(resolver instanceof GraphQLStorePluralQueryResolver){
resolver.dispose();
resolver=null;}

if(!resolver){
resolver=new GraphQLStoreSingleQueryResolver(
this.$GraphQLStoreQueryResolver_storeData,
this.$GraphQLStoreQueryResolver_callback);}


this.$GraphQLStoreQueryResolver_resolver=resolver;
return resolver.resolve(fragment,dataIDs);}}}]);return GraphQLStoreQueryResolver;}();var 







GraphQLStorePluralQueryResolver=function(){





function GraphQLStorePluralQueryResolver(storeData,callback){babelHelpers.classCallCheck(this,GraphQLStorePluralQueryResolver);
this.dispose();
this.$GraphQLStorePluralQueryResolver_callback=callback;
this.$GraphQLStorePluralQueryResolver_storeData=storeData;}babelHelpers.createClass(GraphQLStorePluralQueryResolver,[{key:'dispose',value:function dispose()


{
if(this.$GraphQLStorePluralQueryResolver_resolvers){
this.$GraphQLStorePluralQueryResolver_resolvers.forEach(function(resolver){return resolver.dispose();});}

this.$GraphQLStorePluralQueryResolver_resolvers=[];
this.$GraphQLStorePluralQueryResolver_results=[];}},{key:'resolve',value:function resolve(










fragment,
nextIDs)
{
var prevResults=this.$GraphQLStorePluralQueryResolver_results;
var nextResults=undefined;

var prevLength=prevResults.length;
var nextLength=nextIDs.length;
var resolvers=this.$GraphQLStorePluralQueryResolver_resolvers;


while(resolvers.length<nextLength){
resolvers.push(
new GraphQLStoreSingleQueryResolver(this.$GraphQLStorePluralQueryResolver_storeData,this.$GraphQLStorePluralQueryResolver_callback));}


while(resolvers.length>nextLength){
resolvers.pop().dispose();}



if(prevLength!==nextLength){
nextResults=[];}

for(var ii=0;ii<nextLength;ii++){
var nextResult=resolvers[ii].resolve(fragment,nextIDs[ii]);
if(nextResults||ii>=prevLength||nextResult!==prevResults[ii]){
nextResults=nextResults||prevResults.slice(0,ii);
nextResults.push(nextResult);}}



if(nextResults){
this.$GraphQLStorePluralQueryResolver_results=nextResults;}

return this.$GraphQLStorePluralQueryResolver_results;}}]);return GraphQLStorePluralQueryResolver;}();var 






GraphQLStoreSingleQueryResolver=function(){










function GraphQLStoreSingleQueryResolver(storeData,callback){babelHelpers.classCallCheck(this,GraphQLStoreSingleQueryResolver);
this.dispose();
this.$GraphQLStoreSingleQueryResolver_callback=callback;
this.$GraphQLStoreSingleQueryResolver_garbageCollector=storeData.getGarbageCollector();
this.$GraphQLStoreSingleQueryResolver_storeData=storeData;
this.$GraphQLStoreSingleQueryResolver_subscribedIDs={};}babelHelpers.createClass(GraphQLStoreSingleQueryResolver,[{key:'dispose',value:function dispose()


{
if(this.$GraphQLStoreSingleQueryResolver_subscription){
this.$GraphQLStoreSingleQueryResolver_subscription.remove();}

this.$GraphQLStoreSingleQueryResolver_hasDataChanged=false;
this.$GraphQLStoreSingleQueryResolver_fragment=null;
this.$GraphQLStoreSingleQueryResolver_result=null;
this.$GraphQLStoreSingleQueryResolver_resultID=null;
this.$GraphQLStoreSingleQueryResolver_subscription=null;
this.$GraphQLStoreSingleQueryResolver_updateGarbageCollectorSubscriptionCount({});
this.$GraphQLStoreSingleQueryResolver_subscribedIDs={};}},{key:'resolve',value:function resolve(






nextFragment,
nextID)
{
var prevFragment=this.$GraphQLStoreSingleQueryResolver_fragment;
var prevID=this.$GraphQLStoreSingleQueryResolver_resultID;
var nextResult=undefined;
var prevResult=this.$GraphQLStoreSingleQueryResolver_result;
var subscribedIDs=undefined;

if(
prevFragment!=null&&
prevID!=null&&
this.$GraphQLStoreSingleQueryResolver_getCanonicalID(prevID)===this.$GraphQLStoreSingleQueryResolver_getCanonicalID(nextID))
{
if(
prevID!==nextID||
this.$GraphQLStoreSingleQueryResolver_hasDataChanged||
!nextFragment.isEquivalent(prevFragment))
{var _$GraphQLStoreSingleQ=


this.$GraphQLStoreSingleQueryResolver_resolveFragment(
nextFragment,
nextID);var _$GraphQLStoreSingleQ2=babelHelpers.slicedToArray(_$GraphQLStoreSingleQ,2);nextResult=_$GraphQLStoreSingleQ2[0];subscribedIDs=_$GraphQLStoreSingleQ2[1];

nextResult=require('recycleNodesInto')(prevResult,nextResult);}else 
{

nextResult=prevResult;}}else 

{var _$GraphQLStoreSingleQ3=

this.$GraphQLStoreSingleQueryResolver_resolveFragment(
nextFragment,
nextID);var _$GraphQLStoreSingleQ4=babelHelpers.slicedToArray(_$GraphQLStoreSingleQ3,2);nextResult=_$GraphQLStoreSingleQ4[0];subscribedIDs=_$GraphQLStoreSingleQ4[1];}




if(prevResult!==nextResult){
if(this.$GraphQLStoreSingleQueryResolver_subscription){
this.$GraphQLStoreSingleQueryResolver_subscription.remove();
this.$GraphQLStoreSingleQueryResolver_subscription=null;}

if(subscribedIDs){

subscribedIDs[nextID]=true;
var changeEmitter=this.$GraphQLStoreSingleQueryResolver_storeData.getChangeEmitter();
this.$GraphQLStoreSingleQueryResolver_subscription=changeEmitter.addListenerForIDs(
Object.keys(subscribedIDs),
this.$GraphQLStoreSingleQueryResolver_handleChange.bind(this));

this.$GraphQLStoreSingleQueryResolver_updateGarbageCollectorSubscriptionCount(subscribedIDs);
this.$GraphQLStoreSingleQueryResolver_subscribedIDs=subscribedIDs;}

this.$GraphQLStoreSingleQueryResolver_resultID=nextID;
this.$GraphQLStoreSingleQueryResolver_result=nextResult;}


this.$GraphQLStoreSingleQueryResolver_hasDataChanged=false;
this.$GraphQLStoreSingleQueryResolver_fragment=nextFragment;

return this.$GraphQLStoreSingleQueryResolver_result;}},{key:'$GraphQLStoreSingleQueryResolver_getCanonicalID',value:function $GraphQLStoreSingleQueryResolver_getCanonicalID(







id){
return this.$GraphQLStoreSingleQueryResolver_storeData.getRangeData().getCanonicalClientID(id);}},{key:'$GraphQLStoreSingleQueryResolver_handleChange',value:function $GraphQLStoreSingleQueryResolver_handleChange()


{
if(!this.$GraphQLStoreSingleQueryResolver_hasDataChanged){
this.$GraphQLStoreSingleQueryResolver_hasDataChanged=true;
this.$GraphQLStoreSingleQueryResolver_callback();}}},{key:'$GraphQLStoreSingleQueryResolver_resolveFragment',value:function $GraphQLStoreSingleQueryResolver_resolveFragment(




fragment,
dataID)
{var _readRelayQueryData=
require('readRelayQueryData')(this.$GraphQLStoreSingleQueryResolver_storeData,fragment,dataID);var data=_readRelayQueryData.data;var dataIDs=_readRelayQueryData.dataIDs;
return [data,dataIDs];}},{key:'$GraphQLStoreSingleQueryResolver_updateGarbageCollectorSubscriptionCount',value:function $GraphQLStoreSingleQueryResolver_updateGarbageCollectorSubscriptionCount(






nextDataIDs)
{var _this=this;
if(this.$GraphQLStoreSingleQueryResolver_garbageCollector){(function(){
var garbageCollector=_this.$GraphQLStoreSingleQueryResolver_garbageCollector;
var rangeData=_this.$GraphQLStoreSingleQueryResolver_storeData.getRangeData();
var prevDataIDs=_this.$GraphQLStoreSingleQueryResolver_subscribedIDs;






Object.keys(nextDataIDs).forEach(function(id){
id=rangeData.getCanonicalClientID(id);
garbageCollector.incrementReferenceCount(id);});

Object.keys(prevDataIDs).forEach(function(id){
id=rangeData.getCanonicalClientID(id);
garbageCollector.decrementReferenceCount(id);});})();}}}]);return GraphQLStoreSingleQueryResolver;}();





require('RelayProfiler').instrumentMethods(GraphQLStoreQueryResolver.prototype,{
resolve:'GraphQLStoreQueryResolver.resolve'});


module.exports=GraphQLStoreQueryResolver;
'use strict';jest.unmock('../src/toy_box/toy_box.js');var _toy_box = require('../src/toy_box/toy_box.js');var _toy_box2 = _interopRequireDefault(_toy_box);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}



describe('register a function', function () {
  it('should register a function to the container', function () {
    var Foo = function Foo() {};

    var toyBox = (0, _toy_box2.default)();

    toyBox.register('foo', Foo);
    expect(toyBox.container.length).toEqual(1);});


  it('should register and return a function', function () {
    var Foo = function Foo() {return 'hello world';};

    var toyBox = (0, _toy_box2.default)();

    toyBox.register('foo', Foo);

    expect(toyBox.fetch('foo')).toEqual('hello world');});


  it('should register a function with an argument', function () {
    var Foo = function Foo(message) {return message;};

    var toyBox = (0, _toy_box2.default)();

    toyBox.register('foo', Foo).addArgument('hello world');

    expect(toyBox.fetch('foo')).toEqual('hello world');});


  it('should register a function with and with out arguments', function () {
    var Foo = function Foo(message) {return message;};
    var Bar = function Bar() {return 'no arguments';};

    var toyBox = (0, _toy_box2.default)();

    toyBox.register('foo', Foo).addArgument('hello world');
    toyBox.register('bar', Bar);

    expect(toyBox.fetch('foo')).toEqual('hello world');
    expect(toyBox.fetch('bar')).toEqual('no arguments');});


  it('should return the string name when we cannot find the container', function () {
    var toyBox = (0, _toy_box2.default)();

    expect(toyBox.fetch('foo')).toEqual('foo');});


  it('should add a reference function to the function being registered', function () {
    var Foo = function Foo(message) {return message;};
    var Bar = function Bar() {return 'hello world.';};

    var toyBox = (0, _toy_box2.default)();

    toyBox.register('foo', Foo).addReference(Bar);

    expect(toyBox.fetch('foo')).toEqual('hello world.');});


  it('should set up a setter', function () {
    var Foo = function Foo(message) {
      var _message = '';

      return { 
        set message(msg) {
          _message = msg;}, 


        get message() {
          return _message;} };};




    var Bar = function Bar() {return 'hello world.';};

    var toyBox = (0, _toy_box2.default)();

    toyBox.register('foo', Foo).setUpSetter('message', Bar);

    expect(toyBox.fetch('foo').message).toEqual('hello world.');});


  it('should should set up a setter with a container object', function () {
    var Foo = function Foo(message) {
      var _message = '';

      return { 
        set message(msg) {
          _message = msg;}, 


        get message() {
          return _message;} };};




    var Bar = function Bar(message) {return message;};

    var toyBox = (0, _toy_box2.default)();

    toyBox.register('foo', Foo).setUpSetter('message', 'bar');
    toyBox.register('bar', Bar).addArgument('hello world');

    expect(toyBox.fetch('foo').message).toEqual('hello world');});


  it('should should setup a setter with a container object that does not exist, and return null', function () {
    var Foo = function Foo(message) {
      var _message = '';

      return { 
        set message(msg) {
          _message = msg;}, 


        get message() {
          return _message;} };};




    var Bar = function Bar(message) {return message;};

    var toyBox = (0, _toy_box2.default)();

    toyBox.register('foo', Foo).setUpSetter('message', 'bar');

    expect(toyBox.fetch('foo').message).toEqual('bar');});


  it('should setup the global setters', function () {
    var toyBox = (0, _toy_box2.default)();

    toyBox.setupGlobalSetters('message', 'hi');

    expect(toyBox.globalSetters.length).toEqual(1);});


  it('should setup multiple global setters', function () {
    var toyBox = (0, _toy_box2.default)();

    toyBox.setupGlobalSetters([['message', 'hi'], ['newMessage', 'world']]);

    expect(toyBox.globalSetters.length).toEqual(2);});


  it('should use the global setter to set the value', function () {
    var Foo = function Foo(message) {
      var _message = '';

      return { 
        set message(msg) {
          _message = msg;}, 


        get message() {
          return _message;} };};




    var Bar = function Bar(message) {return message;};

    var toyBox = (0, _toy_box2.default)();
    toyBox.setupGlobalSetters('message', 'bar');

    toyBox.register('foo', Foo);
    toyBox.register('bar', Bar).addArgument('hello world');

    expect(toyBox.fetch('foo').message).toEqual('hello world');});


  it('should use multiple global setters to find and set the value', function () {
    var Foo = function Foo(message) {
      var _message = '';

      return { 
        set message(msg) {
          _message = msg;}, 


        get message() {
          return _message;} };};




    var Bar = function Bar(message) {return message;};

    var toyBox = (0, _toy_box2.default)();
    toyBox.setupGlobalSetters([['message', 'bar'], ['foo', 'bar']]);

    toyBox.register('foo', Foo);
    toyBox.register('bar', Bar).addArgument('hello world');

    expect(toyBox.fetch('foo').message).toEqual('hello world');});});
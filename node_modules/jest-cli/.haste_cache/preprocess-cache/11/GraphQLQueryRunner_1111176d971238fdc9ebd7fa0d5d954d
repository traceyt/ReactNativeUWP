'use strict';










var GraphQLQueryRunner=jest.genMockFromModule('GraphQLQueryRunner');
















function genMockRequest(args){
var ready=false;
return {
abort:function(){
args[1]({aborted:true,done:false,error:null,ready:ready,stale:false});},

block:function(){
args[1]({aborted:false,done:false,error:null,ready:ready,stale:false});},

resolve:function(){
ready=true;
args[1]({aborted:false,done:false,error:null,ready:ready,stale:false});},

succeed:function(){
ready=true;
args[1]({aborted:false,done:true,error:null,ready:ready,stale:false});},

fail:function(error){
args[1]({aborted:false,done:false,error:error,ready:ready,stale:false});}};}




GraphQLQueryRunner.mockImplementation(function(){var _this=this;
this.run.mock.abort=[];
this.run.mock.requests=[];
this.run.mockImplementation(function(){for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}
var request=genMockRequest(args);
var returnValue={
abort:jest.genMockFunction().mockImplementation(function(){
require('resolveImmediate')(request.abort);})};


_this.run.mock.abort.push(returnValue.abort);
_this.run.mock.requests.push(request);
return returnValue;});


this.forceFetch.mock.abort=[];
this.forceFetch.mock.requests=[];
this.forceFetch.mockImplementation(function(){for(var _len2=arguments.length,args=Array(_len2),_key2=0;_key2<_len2;_key2++){args[_key2]=arguments[_key2];}
var request=genMockRequest(args);
var returnValue={
abort:jest.genMockFunction().mockImplementation(function(){
require('resolveImmediate')(request.abort);})};


_this.forceFetch.mock.abort.push(returnValue.abort);
_this.forceFetch.mock.requests.push(request);
return returnValue;});


return this;});


module.exports=GraphQLQueryRunner;
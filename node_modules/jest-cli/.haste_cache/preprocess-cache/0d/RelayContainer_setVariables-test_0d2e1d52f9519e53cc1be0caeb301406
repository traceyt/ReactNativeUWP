'use strict';












require('configureForRelayOSS');











describe('RelayContainer.setVariables',function(){var _this=this;
var MockComponent=undefined;
var MockContainer=undefined;

var defaultState=undefined;
var domContainer=undefined;
var entityQuery=undefined;
var mockInstance=undefined;
var environment=undefined;
var render=undefined;var _RelayTestUtils=require('RelayTestUtils');var 

getNode=_RelayTestUtils.getNode;var getPointer=_RelayTestUtils.getPointer;

beforeEach(function(){
jest.resetModuleRegistry();

var fragment=function(){return {children:[{calls:[{kind:'Call',metadata:{},name:'site',value:{kind:'CallVariable',callVariableName:'site'}}],fieldName:'url',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'RelayContainer_setVariablesRelayQL',type:'Node'};}();
entityQuery=jest.genMockFunction().mockImplementation(
function(){return fragment;});

render=jest.genMockFunction().mockImplementation(function(){return require('React').createElement('div',null);});


MockComponent=require('React').createClass({displayName:'MockComponent',render:render});
var createContainer=require('Relay').createContainer;
MockContainer=createContainer(MockComponent,{
fragments:{
entity:entityQuery},

initialVariables:{site:'mobile'}});


environment=new (require('RelayEnvironment'))();

require('GraphQLStoreQueryResolver').mockDefaultResolveImplementation(function(_,dataID){
expect(dataID).toBe('42');
return {
__dataID__:'42',
__fragments__:babelHelpers.defineProperty({},
getNode(fragment).getConcreteFragmentID(),'42'),

id:'42',
url:'//url',
profilePicture:{
uri:'//url'}};});



defaultState={
aborted:false,
done:false,
error:null,
mounted:true,
ready:false,
stale:false};

domContainer=document.createElement('div');
mockInstance=require('RelayTestUtils').createRenderer(domContainer).render(
function(genMockPointer){return require('React').createElement(MockContainer,{entity:genMockPointer('42')});},
environment);


jasmine.addMatchers(require('RelayTestUtils').matchers);});


describe('plural fragments',function(){
beforeEach(function(){
require('GraphQLStoreQueryResolver').mockDefaultResolveImplementation(function(pointer){
return [{
__dataID__:'42',
id:'42',
url:'//url',
profilePicture:{
uri:'//url'}}];});



var pluralEntityQuery=jest.genMockFunction().mockImplementation(
function(){return function(){return {children:[{calls:[{kind:'Call',metadata:{},name:'site',value:{kind:'CallVariable',callVariableName:'site'}}],fieldName:'url',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{plural:true,isAbstract:true},name:'RelayContainer_setVariablesRelayQL',type:'Node'};}();});





MockContainer=require('Relay').createContainer(MockComponent,{
fragments:{
entity:pluralEntityQuery},

initialVariables:{site:'mobile'}});



require('GraphQLStoreQueryResolver').mockDefaultResolveImplementation(function(_,ids){
expect(ids).toEqual(['21','42']);
return [
{
__dataID__:'21',
id:'21',
url:'//url',
profilePicture:{
uri:'//url'}},


{
__dataID__:'42',
id:'42',
url:'//url',
profilePicture:{
uri:'//url'}}];});





var fragment=getNode(MockContainer.getFragment('entity').getFragment());
var mockPointers=[
getPointer('21',fragment),
getPointer('42',fragment)];

mockInstance=require('RelayTestUtils').createRenderer(domContainer).render(
function(genMockPointer){return (
require('React').createElement(MockContainer,{entity:mockPointers}));},

environment);});



it('creates multiple queries for plural fragments',function(){
jest.runAllTimers();

mockInstance.forceFetch();

expect(environment.forceFetch).toBeCalled();
var querySet=environment.forceFetch.mock.calls[0][0];
expect(Object.keys(querySet)).toEqual(['entity0','entity1']);});


it('creates queries only for records with dataIDs',function(){
var updatedQueryData=[
{__dataID__:'21',id:'21',url:'//www'},
{id:'1336',name:'Fake data',url:'//www'}];

require('GraphQLStoreQueryResolver').mockDefaultResolveImplementation(function(pointer){
return updatedQueryData;});




mockInstance.forceFetch();
environment.forceFetch.mock.requests[0].succeed();
mockInstance.forceFetch();
var querySet=environment.forceFetch.mock.calls[1][0];
expect(Object.keys(querySet)).toEqual(['entity0']);});


it('resolves data using updated `variables`',function(){
mockInstance.setVariables({site:'www'});
jest.runAllTimers();

var updatedQueryData=[
{__dataID__:'21',id:'21',url:'//www'},
{__dataID__:'42',id:'42',url:'//www'}];

require('GraphQLStoreQueryResolver').mockDefaultResolveImplementation(function(fragment){
expect(fragment.getVariables()).toEqual({site:'www'});
return updatedQueryData;});

environment.primeCache.mock.requests[0].succeed();

expect(mockInstance.state.queryData.entity).toBe(updatedQueryData);});


it('throws when the queryData is not an array',function(){
var updatedQueryData={__dataID__:'21',id:'21',url:'//www'};
require('GraphQLStoreQueryResolver').mockDefaultResolveImplementation(function(pointer){
return updatedQueryData;});




mockInstance.forceFetch();
environment.forceFetch.mock.requests[0].succeed();
expect(function(){return mockInstance.forceFetch();}).toFailInvariant(
'RelayContainer: Invalid queryData for `entity`, expected an array '+
'of records because the corresponding fragment is plural.');});});




describe('query builders',function(){
it('are called with variables for variables',function(){
expect(entityQuery.mock.calls.length).toBe(1);
expect(entityQuery.mock.calls[0][0].site).toEqual(
require('QueryBuilder').createCallVariable('site'));});



it('are only called once',function(){
expect(entityQuery.mock.calls.length).toBe(1);

mockInstance.setVariables({site:'www'});
jest.runAllTimers();
expect(entityQuery.mock.calls.length).toBe(1);});});



describe('mount',function(){
it('renders with default variables',function(){
expect(mockInstance.state.variables.site).toBe('mobile');});


it('lets props override default variables',function(){
var anotherInstance=require('RelayTestUtils').createRenderer().render(
function(genMockPointer){return (
require('React').createElement(MockContainer,{entity:genMockPointer('42'),site:'www'}));},

environment);

expect(anotherInstance.state.variables.site).toBe('www');});});



describe('update',function(){
it('does not update `variables` until data is ready',function(){
mockInstance.setVariables({site:'www'});
jest.runAllTimers();

mockInstance.forceUpdate();

expect(mockInstance.state.variables.site).toBe('mobile');});


it('updates `variables` after callback when data is ready',function(){
var mockCallback=jest.genMockFunction();
mockInstance.setVariables({site:'www'},mockCallback);
jest.runAllTimers();

mockCallback.mockImplementation(function(){
expect(mockInstance.state.variables.site).toBe('mobile');});

environment.primeCache.mock.requests[0].succeed();
expect(mockCallback.mock.calls.length).toBe(1);

expect(mockInstance.state.variables.site).toBe('www');});


it('resolves data using updated `variables`',function(){
mockInstance.setVariables({site:'www'});
jest.runAllTimers();

var updatedQueryData={__dataID__:'42',id:'42',url:'//www'};
require('GraphQLStoreQueryResolver').mockDefaultResolveImplementation(function(fragment){
expect(fragment.getVariables()).toEqual({site:'www'});
return updatedQueryData;});

environment.primeCache.mock.requests[0].succeed();

expect(mockInstance.state.queryData.entity).toBe(updatedQueryData);});


it('aborts pending requests before creating a new request',function(){
mockInstance.setVariables({site:'www'});
jest.runAllTimers();
expect(environment.primeCache.mock.abort[0]).not.toBeCalled();

mockInstance.setVariables({site:'mobile'});
jest.runAllTimers();
expect(environment.primeCache.mock.abort[0]).toBeCalled();});


it('invokes callback for a request that aborts a pending request',function(){
mockInstance.setVariables({site:'www'});
jest.runAllTimers();

environment.primeCache.mock.requests[0].block();

var mockCallback=jest.genMockFunction();
mockInstance.setVariables({site:'mobile'},mockCallback);
jest.runAllTimers();

environment.primeCache.mock.requests[1].block();
expect(mockCallback).toBeCalled();});


it('does not re-request the last variables',function(){
mockInstance.setVariables({site:'mobile'});
jest.runAllTimers();var 

mock=environment.primeCache.mock;
expect(mock.calls.length).toBe(1);
expect(Object.keys(mock.calls[0][0]).length).toBe(0);});


it('re-requests currently pending variables',function(){
mockInstance.setVariables({site:'www'});
jest.runAllTimers();

expect(environment.primeCache.mock.abort[0]).not.toBeCalled();
mockInstance.setVariables({site:'www'});
jest.runAllTimers();
expect(environment.primeCache.mock.abort[0]).toBeCalled();
expect(environment.primeCache.mock.calls.length).toBe(2);});


it('re-requests the last variables for `forceFetch`',function(){
mockInstance.forceFetch({site:'mobile'});
jest.runAllTimers();var 

mock=environment.forceFetch.mock;
expect(mock.calls.length).toBe(1);
expect(Object.keys(mock.calls[0][0]).length).toBe(1);});


it('does not re-request the last variables with a pending request',function(){
mockInstance.setVariables({site:'www'});
jest.runAllTimers();

expect(environment.primeCache.mock.abort[0]).not.toBeCalled();
mockInstance.setVariables({site:'mobile'});
jest.runAllTimers();
expect(environment.primeCache.mock.abort[0]).toBeCalled();

expect(environment.primeCache.mock.calls.length).toBe(2);
expect(environment.primeCache.mock.calls[1][0]).toEqual({});});


it('invokes the callback as many times as ready state changes',function(){
var mockFunction=jest.genMockFunction().mockImplementation(function(){
expect(this.constructor).toBe(MockComponent);});

mockInstance.setVariables({site:'www'},mockFunction);
jest.runAllTimers();

var request=environment.primeCache.mock.requests[0];
request.block();
request.succeed();

expect(mockFunction.mock.calls).toEqual([
[babelHelpers.extends({},defaultState,{done:false,ready:false})],
[babelHelpers.extends({},defaultState,{done:true,ready:true})]]);});



it('invokes the callback with the component as `this`',function(){
var mockFunction=jest.genMockFunction().mockImplementation(function(){
expect(this.constructor).toBe(MockComponent);});

mockInstance.setVariables({site:'www'},mockFunction);
jest.runAllTimers();

environment.primeCache.mock.requests[0].block();

expect(mockFunction).toBeCalled();});


it('reconciles only once even if callback calls `setState`',function(){
var before=render.mock.calls.length;

mockInstance.setVariables({site:'www'},function(){
this.setState({isLoaded:true});});

jest.runAllTimers();

environment.primeCache.mock.requests[0].succeed();

expect(render.mock.calls.length-before).toBe(1);});


it('does not mutate previous `variables`',function(){
var prevVariables=mockInstance.state.variables;
mockInstance.setVariables({site:'www'});
jest.runAllTimers();

environment.primeCache.mock.requests[0].succeed();

expect(prevVariables).toEqual({site:'mobile'});
expect(mockInstance.state.variables).not.toBe(prevVariables);});});



describe('prepareVariables()',function(){
var prepareVariables=undefined;

beforeEach(function(){
entityQuery=jest.genMockFunction().mockImplementation(
function(){return function(){return {children:[{calls:[{kind:'Call',metadata:{},name:'site',value:{kind:'CallVariable',callVariableName:'site'}}],fieldName:'url',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'RelayContainer_setVariablesRelayQL',type:'Node'};}();});

render=jest.genMockFunction().mockImplementation(function(){return require('React').createElement('div',null);});
prepareVariables=jest.genMockFunction().mockImplementation(
function(variables,route){return variables;});



MockComponent=require('React').createClass({displayName:'MockComponent',render:render});
var createContainer=require('Relay').createContainer;
MockContainer=createContainer(MockComponent,{
fragments:{
entity:entityQuery},

initialVariables:{site:'mobile'},
prepareVariables:prepareVariables});

mockInstance=require('RelayTestUtils').createRenderer(domContainer).render(
function(genMockPointer){return require('React').createElement(MockContainer,{entity:genMockPointer('42')});},
environment);});



it('calls `prepareVariables` when `setVariables` is called',function(){
var nextVariables={site:'mobile'};
prepareVariables.mockImplementation(function(variables,route){return nextVariables;});
mockInstance.setVariables({site:'www'});

var calls=prepareVariables.mock.calls[1];
expect(calls[0]).toEqual({site:'www'});
expect(calls[1]).toBe(
require('RelayMetaRoute').get(mockInstance.context.route.name));



var queries=environment.primeCache.mock.calls[0][0];
var query=queries[Object.keys(queries)[0]];
var fragment=query.getChildren().find(
function(child){return child instanceof require('RelayQuery').Fragment;});

expect(fragment.getVariables()).toEqual(nextVariables);

jest.runAllTimers();
environment.primeCache.mock.requests[0].succeed();

expect(mockInstance.state.variables).toEqual({site:'www'});});});



describe('unmount',function(){
it('aborts pending requests when unmounted',function(){
mockInstance.setVariables({site:'www'});
jest.runAllTimers();

expect(environment.primeCache.mock.abort[0]).not.toBeCalled();
require('ReactDOM').unmountComponentAtNode(domContainer);
expect(environment.primeCache.mock.abort[0]).toBeCalled();});


it('ignores `setState` from callback when request aborts',function(){
var mockCallback=jest.genMockFunction().
mockImplementation(function(readyState){
if(readyState.mounted){
_this.setState({isAborted:true});}});


mockInstance.setVariables({site:'www'},mockCallback);
jest.runAllTimers();

expect(mockCallback).not.toBeCalled();
expect(function(){
require('ReactDOM').unmountComponentAtNode(domContainer);
jest.runAllTimers();}).
not.toThrow();

expect(mockCallback.mock.calls).toEqual([
[babelHelpers.extends({},defaultState,{aborted:true,mounted:false})]]);});});




describe('prop variable updates',function(){
it('updates variables if props are updated',function(){var 
MockInnerComponent=function(_React$Component){babelHelpers.inherits(MockInnerComponent,_React$Component);function MockInnerComponent(){babelHelpers.classCallCheck(this,MockInnerComponent);return babelHelpers.possibleConstructorReturn(this,Object.getPrototypeOf(MockInnerComponent).apply(this,arguments));}babelHelpers.createClass(MockInnerComponent,[{key:'render',value:function render()
{
return require('React').createElement('div',null);}}]);return MockInnerComponent;}(require('React').Component);



var MockInnerContainer=require('Relay').createContainer(MockInnerComponent,{
fragments:{
entity:function(){return function(){return {children:[{calls:[{kind:'Call',metadata:{},name:'site',value:{kind:'CallVariable',callVariableName:'site'}}],fieldName:'url',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'RelayContainer_setVariables_EntityRelayQL',type:'Node'};}();}},

initialVariables:{site:undefined}});var 


MockWrapperComponent=function(_React$Component2){babelHelpers.inherits(MockWrapperComponent,_React$Component2);function MockWrapperComponent(){babelHelpers.classCallCheck(this,MockWrapperComponent);return babelHelpers.possibleConstructorReturn(this,Object.getPrototypeOf(MockWrapperComponent).apply(this,arguments));}babelHelpers.createClass(MockWrapperComponent,[{key:'render',value:function render()
{
return (
require('React').createElement(MockInnerContainer,{
ref:'inner',
site:this.props.relay.variables.site,
entity:this.props.entity}));}}]);return MockWrapperComponent;}(require('React').Component);





MockContainer=require('Relay').createContainer(MockWrapperComponent,{
fragments:{
entity:function(variables){return function(RQL_0){return {children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'},require('Relay').QL.__frag(RQL_0)]),id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'RelayContainer_setVariables_EntityRelayQL',type:'Node'};}(
MockInnerContainer.getFragment('entity',{site:variables.site}));}},


initialVariables:{site:'mobile'}});


mockInstance=require('RelayTestUtils').createRenderer(domContainer).render(
function(genMockPointer){return require('React').createElement(MockContainer,{entity:genMockPointer('42')});},
environment);

var innerComponent=mockInstance.refs.component.refs.inner;
expect(innerComponent.state.variables.site).toBe('mobile');
mockInstance.setVariables({site:'www'});
jest.runAllTimers();

environment.primeCache.mock.requests[0].succeed();
expect(mockInstance.state.variables.site).toBe('www');

expect(innerComponent.state.variables.site).toBe('www');});


it('resets variables if outside variable props are updated',function(){var 
MockInnerComponent=function(_React$Component3){babelHelpers.inherits(MockInnerComponent,_React$Component3);function MockInnerComponent(){babelHelpers.classCallCheck(this,MockInnerComponent);return babelHelpers.possibleConstructorReturn(this,Object.getPrototypeOf(MockInnerComponent).apply(this,arguments));}babelHelpers.createClass(MockInnerComponent,[{key:'render',value:function render()
{
return require('React').createElement('div',null);}}]);return MockInnerComponent;}(require('React').Component);



var MockInnerContainer=require('Relay').createContainer(MockInnerComponent,{
fragments:{
entity:function(){return function(){return {children:[{calls:[{kind:'Call',metadata:{},name:'site',value:{kind:'CallVariable',callVariableName:'site'}}],fieldName:'url',kind:'Field',metadata:{},type:'String'},{calls:[{kind:'Call',metadata:{},name:'size',value:{kind:'CallVariable',callVariableName:'size'}}],children:[{fieldName:'uri',kind:'Field',metadata:{},type:'String'}],fieldName:'profilePicture',kind:'Field',metadata:{canHaveSubselections:true},type:'Image'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'RelayContainer_setVariables_EntityRelayQL',type:'Actor'};}();}},






initialVariables:{
site:undefined,
size:48}});var 



MockWrapperComponent=function(_React$Component4){babelHelpers.inherits(MockWrapperComponent,_React$Component4);function MockWrapperComponent(){babelHelpers.classCallCheck(this,MockWrapperComponent);return babelHelpers.possibleConstructorReturn(this,Object.getPrototypeOf(MockWrapperComponent).apply(this,arguments));}babelHelpers.createClass(MockWrapperComponent,[{key:'render',value:function render()
{
return (
require('React').createElement(MockInnerContainer,{
ref:'inner',
site:this.props.relay.variables.site,
entity:this.props.entity}));}}]);return MockWrapperComponent;}(require('React').Component);





MockContainer=require('Relay').createContainer(MockWrapperComponent,{
fragments:{
entity:function(variables){return function(RQL_0){return {children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'},require('Relay').QL.__frag(RQL_0)]),id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'RelayContainer_setVariables_EntityRelayQL',type:'Actor'};}(
MockInnerContainer.getFragment('entity',{site:variables.site}));}},


initialVariables:{site:'mobile'}});


mockInstance=require('RelayTestUtils').createRenderer(domContainer).render(
function(genMockPointer){return require('React').createElement(MockContainer,{entity:genMockPointer('42')});},
environment);

var innerComponent=mockInstance.refs.component.refs.inner;
expect(innerComponent.state.variables.site).toBe('mobile');

innerComponent.setVariables({size:32});
jest.runAllTimers();
environment.primeCache.mock.requests[0].succeed();
expect(innerComponent.state.variables).toEqual({
site:'mobile',
size:32});


mockInstance.setVariables({site:'www'});
jest.runAllTimers();

environment.primeCache.mock.requests[1].succeed();
expect(mockInstance.state.variables).toEqual({
site:'www'});


expect(innerComponent.state.variables).toEqual({
site:'www',
size:48});});});});
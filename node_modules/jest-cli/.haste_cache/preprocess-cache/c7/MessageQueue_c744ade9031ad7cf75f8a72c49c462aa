'use strict';























var MODULE_IDS=0;
var METHOD_IDS=1;
var PARAMS=2;
var CALL_IDS=3;
var MIN_TIME_BETWEEN_FLUSHES_MS=5;

var TRACE_TAG_REACT_APPS=1<<17;

var SPY_MODE=false;

var MethodTypes=require('fbjs/lib/keyMirror')({
remote:null,
remoteAsync:null});


var guard=function(fn){
try{
fn();}
catch(error){
require('ErrorUtils').reportFatalError(error);}};var 



MessageQueue=function(){

function MessageQueue(remoteModules,localModules){var _this=this;babelHelpers.classCallCheck(this,MessageQueue);
this.RemoteModules={};

this.$MessageQueue_callableModules={};
this.$MessageQueue_queue=[[],[],[],0];
this.$MessageQueue_moduleTable={};
this.$MessageQueue_methodTable={};
this.$MessageQueue_callbacks=[];
this.$MessageQueue_callbackID=0;
this.$MessageQueue_callID=0;
this.$MessageQueue_lastFlush=0;
this.$MessageQueue_eventLoopStartTime=new Date().getTime();

[
'invokeCallbackAndReturnFlushedQueue',
'callFunctionReturnFlushedQueue',
'flushedQueue'].
forEach(function(fn){return _this[fn]=_this[fn].bind(_this);});

var modulesConfig=this.$MessageQueue_genModulesConfig(remoteModules);
this.$MessageQueue_genModules(modulesConfig);
localModules&&this.$MessageQueue_genLookupTables(
this.$MessageQueue_genModulesConfig(localModules),this.$MessageQueue_moduleTable,this.$MessageQueue_methodTable);


this.$MessageQueue_debugInfo={};
this.$MessageQueue_remoteModuleTable={};
this.$MessageQueue_remoteMethodTable={};
this.$MessageQueue_genLookupTables(
modulesConfig,this.$MessageQueue_remoteModuleTable,this.$MessageQueue_remoteMethodTable);}babelHelpers.createClass(MessageQueue,[{key:'callFunctionReturnFlushedQueue',value:function callFunctionReturnFlushedQueue(






module,method,args){var _this2=this;
guard(function(){
_this2.__callFunction(module,method,args);
_this2.__callImmediates();});


return this.flushedQueue();}},{key:'invokeCallbackAndReturnFlushedQueue',value:function invokeCallbackAndReturnFlushedQueue(


cbID,args){var _this3=this;
guard(function(){
_this3.__invokeCallback(cbID,args);
_this3.__callImmediates();});


return this.flushedQueue();}},{key:'flushedQueue',value:function flushedQueue()


{
this.__callImmediates();

var queue=this.$MessageQueue_queue;
this.$MessageQueue_queue=[[],[],[],this.$MessageQueue_callID];
return queue[0].length?queue:null;}},{key:'processModuleConfig',value:function processModuleConfig(


config,moduleID){
var module=this.$MessageQueue_genModule(config,moduleID);
this.$MessageQueue_genLookup(config,moduleID,this.$MessageQueue_remoteModuleTable,this.$MessageQueue_remoteMethodTable);
return module;}},{key:'getEventLoopRunningTime',value:function getEventLoopRunningTime()


{
return new Date().getTime()-this.$MessageQueue_eventLoopStartTime;}},{key:'__callImmediates',value:function __callImmediates()






{
require('Systrace').beginEvent('JSTimersExecution.callImmediates()');
guard(function(){return require('JSTimersExecution').callImmediates();});
require('Systrace').endEvent();}},{key:'__nativeCall',value:function __nativeCall(


module,method,params,onFail,onSucc){
if(onFail||onSucc){

this.$MessageQueue_callbackID>1<<5&&(
this.$MessageQueue_debugInfo[this.$MessageQueue_callbackID>>5]=null);

this.$MessageQueue_debugInfo[this.$MessageQueue_callbackID>>1]=[module,method];
onFail&&params.push(this.$MessageQueue_callbackID);
this.$MessageQueue_callbacks[this.$MessageQueue_callbackID++]=onFail;
onSucc&&params.push(this.$MessageQueue_callbackID);
this.$MessageQueue_callbacks[this.$MessageQueue_callbackID++]=onSucc;}


global.nativeTraceBeginAsyncFlow&&
global.nativeTraceBeginAsyncFlow(TRACE_TAG_REACT_APPS,'native',this.$MessageQueue_callID);
this.$MessageQueue_callID++;

this.$MessageQueue_queue[MODULE_IDS].push(module);
this.$MessageQueue_queue[METHOD_IDS].push(method);
this.$MessageQueue_queue[PARAMS].push(params);

var now=new Date().getTime();
if(global.nativeFlushQueueImmediate&&
now-this.$MessageQueue_lastFlush>=MIN_TIME_BETWEEN_FLUSHES_MS){
global.nativeFlushQueueImmediate(this.$MessageQueue_queue);
this.$MessageQueue_queue=[[],[],[],this.$MessageQueue_callID];
this.$MessageQueue_lastFlush=now;}

require('Systrace').counterEvent('pending_js_to_native_queue',this.$MessageQueue_queue[0].length);
if(__DEV__&&SPY_MODE&&isFinite(module)){
console.log('JS->N : '+this.$MessageQueue_remoteModuleTable[module]+'.'+
this.$MessageQueue_remoteMethodTable[module][method]+'('+JSON.stringify(params)+')');}}},{key:'__callFunction',value:function __callFunction(



module,method,args){
this.$MessageQueue_lastFlush=new Date().getTime();
this.$MessageQueue_eventLoopStartTime=this.$MessageQueue_lastFlush;
if(isFinite(module)){
method=this.$MessageQueue_methodTable[module][method];
module=this.$MessageQueue_moduleTable[module];}

require('Systrace').beginEvent(module+'.'+method+'()');
if(__DEV__&&SPY_MODE){
console.log('N->JS : '+module+'.'+method+'('+JSON.stringify(args)+')');}

var moduleMethods=this.$MessageQueue_callableModules[module];
!
!!moduleMethods?require('fbjs/lib/invariant')(0,
'Module %s is not a registered callable module.',
module):undefined;

moduleMethods[method].apply(moduleMethods,args);
require('Systrace').endEvent();}},{key:'__invokeCallback',value:function __invokeCallback(


cbID,args){
this.$MessageQueue_lastFlush=new Date().getTime();
this.$MessageQueue_eventLoopStartTime=this.$MessageQueue_lastFlush;
var callback=this.$MessageQueue_callbacks[cbID];
var debug=this.$MessageQueue_debugInfo[cbID>>1];
var module=debug&&this.$MessageQueue_remoteModuleTable[debug[0]];
var method=debug&&this.$MessageQueue_remoteMethodTable[debug[0]][debug[1]];
!
callback?require('fbjs/lib/invariant')(0,'Callback with id '+
cbID+': '+module+'.'+method+'() not found'):undefined;

var profileName=debug?'<callback for '+module+'.'+method+'>':cbID;
if(callback&&SPY_MODE&&__DEV__){
console.log('N->JS : '+profileName+'('+JSON.stringify(args)+')');}

require('Systrace').beginEvent('MessageQueue.invokeCallback('+
profileName+', '+require('stringifySafe')(args)+')');
this.$MessageQueue_callbacks[cbID&~1]=null;
this.$MessageQueue_callbacks[cbID|1]=null;
callback.apply(null,args);
require('Systrace').endEvent();}},{key:'$MessageQueue_genModulesConfig',value:function $MessageQueue_genModulesConfig(











modules){
if(Array.isArray(modules)){
return modules;}else 
{
var moduleArray=[];
var moduleNames=Object.keys(modules);
for(var i=0,l=moduleNames.length;i<l;i++){
var moduleName=moduleNames[i];
var moduleConfig=modules[moduleName];
var _module=[moduleName];
if(moduleConfig.constants){
_module.push(moduleConfig.constants);}

var methodsConfig=moduleConfig.methods;
if(methodsConfig){
var methods=[];
var asyncMethods=[];
var methodNames=Object.keys(methodsConfig);
for(var j=0,ll=methodNames.length;j<ll;j++){
var methodName=methodNames[j];
var methodConfig=methodsConfig[methodName];
methods[methodConfig.methodID]=methodName;
if(methodConfig.type===MethodTypes.remoteAsync){
asyncMethods.push(methodConfig.methodID);}}


if(methods.length){
_module.push(methods);
if(asyncMethods.length){
_module.push(asyncMethods);}}}



moduleArray[moduleConfig.moduleID]=_module;}

return moduleArray;}}},{key:'$MessageQueue_genLookupTables',value:function $MessageQueue_genLookupTables(



modulesConfig,moduleTable,methodTable){var _this4=this;
modulesConfig.forEach(function(config,moduleID){
_this4.$MessageQueue_genLookup(config,moduleID,moduleTable,methodTable);});}},{key:'$MessageQueue_genLookup',value:function $MessageQueue_genLookup(



config,moduleID,moduleTable,methodTable){
if(!config){
return;}


var moduleName=undefined,methods=undefined;
if(moduleHasConstants(config)){var _config=babelHelpers.slicedToArray(
config,3);moduleName=_config[0];methods=_config[2];}else 
{var _config2=babelHelpers.slicedToArray(
config,2);moduleName=_config2[0];methods=_config2[1];}


moduleTable[moduleID]=moduleName;
methodTable[moduleID]=babelHelpers.extends({},methods);}},{key:'$MessageQueue_genModules',value:function $MessageQueue_genModules(


remoteModules){var _this5=this;
remoteModules.forEach(function(config,moduleID){
_this5.$MessageQueue_genModule(config,moduleID);});}},{key:'$MessageQueue_genModule',value:function $MessageQueue_genModule(



config,moduleID){var _this6=this;
if(!config){
return;}


var moduleName=undefined,constants=undefined,methods=undefined,asyncMethods=undefined;
if(moduleHasConstants(config)){var _config3=babelHelpers.slicedToArray(
config,4);moduleName=_config3[0];constants=_config3[1];methods=_config3[2];asyncMethods=_config3[3];}else 
{var _config4=babelHelpers.slicedToArray(
config,3);moduleName=_config4[0];methods=_config4[1];asyncMethods=_config4[2];}


var module={};
methods&&methods.forEach(function(methodName,methodID){
var methodType=
asyncMethods&&arrayContains(asyncMethods,methodID)?
MethodTypes.remoteAsync:MethodTypes.remote;
module[methodName]=_this6.$MessageQueue_genMethod(moduleID,methodID,methodType);});

babelHelpers.extends(module,constants);

if(!constants&&!methods&&!asyncMethods){
module.moduleID=moduleID;}


this.RemoteModules[moduleName]=module;
return module;}},{key:'$MessageQueue_genMethod',value:function $MessageQueue_genMethod(


module,method,type){
var fn=null;
var self=this;
if(type===MethodTypes.remoteAsync){
fn=function(){for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}
return new Promise(function(resolve,reject){
self.__nativeCall(
module,
method,
args,
function(data){
resolve(data);},

function(errorData){
var error=createErrorFromErrorData(errorData);
reject(error);});});};}else 



{
fn=function(){for(var _len2=arguments.length,args=Array(_len2),_key2=0;_key2<_len2;_key2++){args[_key2]=arguments[_key2];}
var lastArg=args.length>0?args[args.length-1]:null;
var secondLastArg=args.length>1?args[args.length-2]:null;
var hasSuccCB=typeof lastArg==='function';
var hasErrorCB=typeof secondLastArg==='function';
hasErrorCB&&require('fbjs/lib/invariant')(
hasSuccCB,
'Cannot have a non-function arg after a function arg.');

var numCBs=hasSuccCB+hasErrorCB;
var onSucc=hasSuccCB?lastArg:null;
var onFail=hasErrorCB?secondLastArg:null;
args=args.slice(0,args.length-numCBs);
return self.__nativeCall(module,method,args,onFail,onSucc);};}


fn.type=type;
return fn;}},{key:'registerCallableModule',value:function registerCallableModule(


name,methods){
this.$MessageQueue_callableModules[name]=methods;}}]);return MessageQueue;}();




function moduleHasConstants(moduleArray){
return !Array.isArray(moduleArray[1]);}


function arrayContains(array,value){
return array.indexOf(value)!==-1;}


function createErrorFromErrorData(errorData){var 

message=

errorData.message;var extraErrorInfo=babelHelpers.objectWithoutProperties(errorData,['message']);
var error=new Error(message);
error.framesToPop=1;
return babelHelpers.extends(error,extraErrorInfo);}


module.exports=MessageQueue;
'use strict';var _RelayConnectionInter=require('RelayConnectionInterface');var 






















































EDGES=_RelayConnectionInter.EDGES;var PAGE_INFO=_RelayConnectionInter.PAGE_INFO;
var METADATA_KEYS=[
'__status__',
'__resolvedFragmentMapGeneration__'];







function readRelayQueryData(
storeData,
queryNode,
dataID,
options)
{
var reader=new RelayStoreReader(storeData,options);
var data=reader.retrieveData(queryNode,dataID);



require('validateRelayReadQuery')(queryNode,options);

return data;}var 


RelayStoreReader=function(_RelayQueryVisitor){babelHelpers.inherits(RelayStoreReader,_RelayQueryVisitor);






function RelayStoreReader(
storeData,
options)
{babelHelpers.classCallCheck(this,RelayStoreReader);var _this=babelHelpers.possibleConstructorReturn(this,Object.getPrototypeOf(RelayStoreReader).call(this));

_this.$RelayStoreReader_rangeData=storeData.getRangeData();
_this.$RelayStoreReader_recordStore=storeData.getQueuedStore();
_this.$RelayStoreReader_traverseFragmentReferences=
options&&options.traverseFragmentReferences||false;
_this.$RelayStoreReader_traverseGeneratedFields=
options&&options.traverseGeneratedFields||false;return _this;}babelHelpers.createClass(RelayStoreReader,[{key:'retrieveData',value:function retrieveData(






queryNode,
dataID)
{
var result={
data:undefined,
dataIDs:{}};

var rangeData=this.$RelayStoreReader_rangeData.parseRangeClientID(dataID);
var status=this.$RelayStoreReader_recordStore.getRecordState(
rangeData?rangeData.dataID:dataID);

if(status===require('RelayRecordState').EXISTENT){
var state=this.$RelayStoreReader_createState({
componentDataID:null,
data:undefined,
isPartial:false,
parent:null,
rangeInfo:null,
seenDataIDs:result.dataIDs,
storeDataID:dataID});

this.visit(queryNode,state);
result.data=state.data;}else 
if(status===require('RelayRecordState').NONEXISTENT){
result.data=null;}

return result;}},{key:'visit',value:function visit(


node,state){
var result=babelHelpers.get(Object.getPrototypeOf(RelayStoreReader.prototype),'visit',this).call(this,node,state);
this.$RelayStoreReader_updateMetadataFields(state);
return result;}},{key:'visitField',value:function visitField(


node,state){


this.$RelayStoreReader_handleRangeInfo(node,state);

if(node.canHaveSubselections()||node.isGenerated()){

getDataObject(state);}


if(node.isGenerated()&&!this.$RelayStoreReader_traverseGeneratedFields){
return;}

var rangeInfo=state.rangeInfo;
if(
rangeInfo&&
node.getSchemaName()===EDGES)
{
this.$RelayStoreReader_readEdges(node,rangeInfo,state);}else 
if(
rangeInfo&&
node.getSchemaName()===PAGE_INFO)
{
this.$RelayStoreReader_readPageInfo(node,rangeInfo,state);}else 
if(!node.canHaveSubselections()){
this.$RelayStoreReader_readScalar(node,state);}else 
if(node.isPlural()){
this.$RelayStoreReader_readPlural(node,state);}else 
if(node.isConnection()){
this.$RelayStoreReader_readConnection(node,state);}else 
{
this.$RelayStoreReader_readLinkedField(node,state);}

state.seenDataIDs[state.storeDataID]=true;}},{key:'visitFragment',value:function visitFragment(


node,state){
var dataID=getComponentDataID(state);
if(node.isContainerFragment()&&!this.$RelayStoreReader_traverseFragmentReferences){
state.seenDataIDs[dataID]=true;
var _data=getDataObject(state);
require('RelayFragmentPointer').addFragment(_data,node,dataID);}else 
if(require('isCompatibleRelayFragmentType')(
node,
this.$RelayStoreReader_recordStore.getType(dataID)))
{
this.traverse(node,state);}}},{key:'$RelayStoreReader_createState',value:function $RelayStoreReader_createState(



state){


var status=this.$RelayStoreReader_recordStore.getRecordState(state.storeDataID);
if(status===require('RelayRecordState').EXISTENT){
getDataObject(state);}

return state;}},{key:'$RelayStoreReader_readScalar',value:function $RelayStoreReader_readScalar(


node,state){
var storageKey=node.getStorageKey();
var field=this.$RelayStoreReader_recordStore.getField(state.storeDataID,storageKey);
if(field===undefined){
state.isPartial=true;}else 
if(field===null&&!state.data){
state.data=null;}else 
{
this.$RelayStoreReader_setDataValue(
state,
node.getApplicationName(),
Array.isArray(field)?field.slice():field);}}},{key:'$RelayStoreReader_readPlural',value:function $RelayStoreReader_readPlural(




node,state){var _this2=this;
var storageKey=node.getStorageKey();
var dataIDs=
this.$RelayStoreReader_recordStore.getLinkedRecordIDs(state.storeDataID,storageKey);
if(dataIDs){(function(){
var applicationName=node.getApplicationName();
var previousData=getDataValue(state,applicationName);
var nextData=dataIDs.map(function(dataID,ii){
var data=undefined;
if(previousData instanceof Object){
data=previousData[ii];}

var nextState=_this2.$RelayStoreReader_createState({
componentDataID:null,
data:data,
isPartial:false,
parent:node,
rangeInfo:null,
seenDataIDs:state.seenDataIDs,
storeDataID:dataID});

node.getChildren().forEach(function(child){return _this2.visit(child,nextState);});
if(nextState.isPartial){
state.isPartial=true;}

return nextState.data;});

_this2.$RelayStoreReader_setDataValue(state,applicationName,nextData);})();}}},{key:'$RelayStoreReader_readConnection',value:function $RelayStoreReader_readConnection(



node,state){
var applicationName=node.getApplicationName();
var storageKey=node.getStorageKey();
var calls=node.getCallsWithValues();
var dataID=this.$RelayStoreReader_recordStore.getLinkedRecordID(
state.storeDataID,
storageKey);

if(!dataID){
state.isPartial=true;
return;}

enforceRangeCalls(node);
var metadata=this.$RelayStoreReader_recordStore.getRangeMetadata(dataID,calls);
var nextState=this.$RelayStoreReader_createState({
componentDataID:this.$RelayStoreReader_getConnectionClientID(node,dataID),
data:getDataValue(state,applicationName),
isPartial:false,
parent:node,
rangeInfo:metadata&&calls.length?metadata:null,
seenDataIDs:state.seenDataIDs,
storeDataID:dataID});

this.traverse(node,nextState);
if(nextState.isPartial){
state.isPartial=true;}

this.$RelayStoreReader_setDataValue(state,applicationName,nextState.data);}},{key:'$RelayStoreReader_readEdges',value:function $RelayStoreReader_readEdges(


node,rangeInfo,state){var _this3=this;
if(rangeInfo.diffCalls.length){
state.isPartial=true;}

var previousData=getDataValue(state,EDGES);
var edges=rangeInfo.filteredEdges.map(function(edgeData,ii){
var data=undefined;
if(previousData instanceof Object){
data=previousData[ii];}

var nextState=_this3.$RelayStoreReader_createState({
componentDataID:null,
data:data,
isPartial:false,
parent:node,
rangeInfo:null,
seenDataIDs:state.seenDataIDs,
storeDataID:edgeData.edgeID});

_this3.traverse(node,nextState);
if(nextState.isPartial){
state.isPartial=true;}

return nextState.data;});

this.$RelayStoreReader_setDataValue(state,EDGES,edges);}},{key:'$RelayStoreReader_readPageInfo',value:function $RelayStoreReader_readPageInfo(



node,
rangeInfo,
state)
{var _this4=this;var 
pageInfo=rangeInfo.pageInfo;
!
pageInfo?require('invariant')(0,
'readRelayQueryData(): Missing field, `%s`.',
PAGE_INFO):undefined;

if(rangeInfo.diffCalls.length){
state.isPartial=true;}

var info=pageInfo;
var nextData=undefined;




var read=function(child){
if(child instanceof require('RelayQuery').Fragment){
if(child.isContainerFragment()&&!_this4.$RelayStoreReader_traverseFragmentReferences){
var dataID=getComponentDataID(state);
nextData=nextData||{};
require('RelayFragmentPointer').addFragment(
nextData,
child,
dataID);}else 

{
child.getChildren().forEach(read);}}else 

{
var field=child;
if(!field.isGenerated()||_this4.$RelayStoreReader_traverseGeneratedFields){
nextData=nextData||{};
nextData[field.getApplicationName()]=info[field.getStorageKey()];}}};



node.getChildren().forEach(read);

this.$RelayStoreReader_setDataValue(
state,
PAGE_INFO,
nextData);}},{key:'$RelayStoreReader_readLinkedField',value:function $RelayStoreReader_readLinkedField(



node,state){
var storageKey=node.getStorageKey();
var applicationName=node.getApplicationName();
var dataID=this.$RelayStoreReader_recordStore.getLinkedRecordID(
state.storeDataID,storageKey);

if(dataID==null){
if(dataID===undefined){
state.isPartial=true;}

this.$RelayStoreReader_setDataValue(state,applicationName,dataID);
return;}

var nextState=this.$RelayStoreReader_createState({
componentDataID:null,
data:getDataValue(state,applicationName),
isPartial:false,
parent:node,
rangeInfo:null,
seenDataIDs:state.seenDataIDs,
storeDataID:dataID});

this.traverse(node,nextState);
if(nextState.isPartial){
state.isPartial=true;}

this.$RelayStoreReader_setDataValue(state,applicationName,nextState.data);}},{key:'$RelayStoreReader_setDataValue',value:function $RelayStoreReader_setDataValue(








state,key,value){
var data=getDataObject(state);
if(value===undefined){
return;}

data[key]=value;}},{key:'$RelayStoreReader_updateMetadataFields',value:function $RelayStoreReader_updateMetadataFields(


state){var _this5=this;
var data=state.data;
if(!(data instanceof Object)){
return;}


METADATA_KEYS.forEach(function(metadataKey){
var metadataValue=_this5.$RelayStoreReader_recordStore.getField(
state.storeDataID,
metadataKey);

if(metadataValue!=null){
data[metadataKey]=metadataValue;}});



if(state.isPartial){
data.__status__=
require('RelayRecordStatusMap').setPartialStatus(data.__status__,true);}}},{key:'$RelayStoreReader_getConnectionClientID',value:function $RelayStoreReader_getConnectionClientID(










node,
connectionID)
{
var calls=node.getCallsWithValues();
if(!require('RelayConnectionInterface').hasRangeCalls(calls)){
return connectionID;}

return this.$RelayStoreReader_rangeData.getClientIDForRangeWithID(
require('callsToGraphQL')(calls),
{},
connectionID);}},{key:'$RelayStoreReader_handleRangeInfo',value:function $RelayStoreReader_handleRangeInfo(







node,state){
var rangeData=this.$RelayStoreReader_rangeData.parseRangeClientID(
state.storeDataID);

if(rangeData!=null){
state.componentDataID=state.storeDataID;
state.storeDataID=rangeData.dataID;
state.rangeInfo=this.$RelayStoreReader_recordStore.getRangeMetadata(
state.storeDataID,
require('callsFromGraphQL')(rangeData.calls,rangeData.callValues));}}}]);return RelayStoreReader;}(require('RelayQueryVisitor'));










function enforceRangeCalls(parent){
if(!parent.__hasValidatedConnectionCalls__){
var calls=parent.getCallsWithValues();
if(!require('RelayConnectionInterface').hasRangeCalls(calls)){
rangeCallEnforcer.traverse(parent,parent);}

parent.__hasValidatedConnectionCalls__=true;}}var 


RelayRangeCallEnforcer=function(_RelayQueryVisitor2){babelHelpers.inherits(RelayRangeCallEnforcer,_RelayQueryVisitor2);function RelayRangeCallEnforcer(){babelHelpers.classCallCheck(this,RelayRangeCallEnforcer);return babelHelpers.possibleConstructorReturn(this,Object.getPrototypeOf(RelayRangeCallEnforcer).apply(this,arguments));}babelHelpers.createClass(RelayRangeCallEnforcer,[{key:'visitField',value:function visitField(

node,
parent)
{
var schemaName=node.getSchemaName();
!(
schemaName!==EDGES&&
schemaName!==PAGE_INFO)?require('invariant')(0,
'readRelayQueryData(): The field `%s` is a connection. Fields `%s` and '+
'`%s` cannot be fetched without a `first`, `last` or `find` argument.',
parent.getApplicationName(),
EDGES,
PAGE_INFO):undefined;}}]);return RelayRangeCallEnforcer;}(require('RelayQueryVisitor'));



var rangeCallEnforcer=new RelayRangeCallEnforcer();











function getComponentDataID(state){
if(state.componentDataID!=null){
return state.componentDataID;}else 
{
return state.storeDataID;}}






function getDataObject(state){
var data=state.data;
if(!data){
data=state.data=require('RelayRecord').create(getComponentDataID(state));}

!(
data instanceof Object)?require('invariant')(0,
'readRelayQueryData(): Unable to read field on non-object.'):undefined;

return data;}







function getDataValue(state,key){
var data=getDataObject(state);
return data[key];}


module.exports=require('RelayProfiler').instrument(
'readRelayQueryData',
readRelayQueryData);
{
  "_args": [
    [
      "mailgun-js@https://registry.npmjs.org/mailgun-js/-/mailgun-js-0.7.8.tgz",
      "C:\\gitRepo\\f8app"
    ]
  ],
  "_from": "mailgun-js@>=0.7.7 <0.8.0",
  "_id": "mailgun-js@0.7.8",
  "_inCache": true,
  "_location": "/mailgun-js",
  "_phantomChildren": {},
  "_requested": {
    "name": "mailgun-js",
    "raw": "mailgun-js@https://registry.npmjs.org/mailgun-js/-/mailgun-js-0.7.8.tgz",
    "rawSpec": "https://registry.npmjs.org/mailgun-js/-/mailgun-js-0.7.8.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/mailgun-js/-/mailgun-js-0.7.8.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/parse-server",
    "/parse-server-simple-mailgun-adapter"
  ],
  "_resolved": "https://registry.npmjs.org/mailgun-js/-/mailgun-js-0.7.8.tgz",
  "_shasum": "fe61554e6e86909faeef06281aba48e1e44542c5",
  "_shrinkwrap": null,
  "_spec": "mailgun-js@https://registry.npmjs.org/mailgun-js/-/mailgun-js-0.7.8.tgz",
  "_where": "C:\\gitRepo\\f8app",
  "author": {
    "email": "bojan@onelobby.com",
    "name": "Bojan Djurkovic"
  },
  "bugs": {
    "url": "http://github.com/bojand/mailgun-js/issues"
  },
  "dependencies": {
    "async": "~1.5.0",
    "debug": "~2.2.0",
    "form-data": "~1.0.0-rc3",
    "inflection": "~1.7.2",
    "path-proxy": "~1.0.0",
    "proxy-agent": "~2.0.0",
    "q": "~1.4.0",
    "scmp": "~1.0.0"
  },
  "description": "Simple Node.js helper module for Mailgun API",
  "devDependencies": {
    "clone": "~1.0.0",
    "mailcomposer": "~2.1.0",
    "mocha": "~2.3.4",
    "request": "^2.67.0"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "homepage": "https://github.com/bojand/mailgun-js",
  "keywords": [
    "email",
    "mailgun"
  ],
  "license": "MIT",
  "main": "./lib/mailgun.js",
  "name": "mailgun-js",
  "optionalDependencies": {},
  "readme": "# mailgun.js\n\nSimple Node.js module for [Mailgun](http://www.mailgun.com).\n\n[![NPM](https://nodei.co/npm/mailgun-js.png?downloads=true&stars=true)](https://nodei.co/npm/mailgun-js/)\n\n[![NPM](https://nodei.co/npm-dl/mailgun-js.png)](https://nodei.co/npm/mailgun-js/)\n\n## Installation\n\n`npm install mailgun-js`\n\n## Usage overview\n\nPlease see [Mailgun Documentation](https://documentation.mailgun.com) for full Mailgun API reference.\n\nThis module works by providing proxy objects for interacting with different resources through the Mailgun API.\nMost methods take a `data` parameter, which is a Javascript object that would contain the arguments for the Mailgun API.\nAll methods take a final parameter callback with two parameters: `error`, and `body`.\nWe try to parse the `body` into a javascript object, and return it to the callback as such for easier use and inspection by the client.\nIf there was an error a new `Error` object will be passed to the callback in the `error` parameter.\nIf the error originated from the (Mailgun) server, the response code will be available in the `statusCode` property\nof the `error` object passed in the callback.\nSee the `/docs` folder for detailed documentation. For full usage examples see the `/test` folder.\n\n```js\nvar api_key = 'key-XXXXXXXXXXXXXXXXXXXXXXX';\nvar domain = 'mydomain.mailgun.org';\nvar mailgun = require('mailgun-js')({apiKey: api_key, domain: domain});\n\nvar data = {\n  from: 'Excited User <me@samples.mailgun.org>',\n  to: 'serobnic@mail.ru',\n  subject: 'Hello',\n  text: 'Testing some Mailgun awesomness!'\n};\n\nmailgun.messages().send(data, function (error, body) {\n  console.log(body);\n});\n```\n\nMessages stored using the Mailgun `store()` action can be retrieved using `messages(<message_key>).info()` function.\nOptionally the MIME representation of the message can be retrieved if `MIME` argument is passed in and set to `true`.\n\nSomething more elaborate. Get mailing list info, create a member and get mailing list members and update member.\nNotice that the proxy objects can be reused.\n\n```js\nvar list = mailgun.lists('mylist@mycompany.com');\n\nlist.info(function (err, data) {\n  // `data` is mailing list info\n  console.log(data);\n});\n\nvar bob = {\n  subscribed: true,\n  address: 'bob@gmail.com',\n  name: 'Bob Bar',\n  vars: {age: 26}\n};\n\nlist.members().create(bob, function (err, data) {\n  // `data` is the member details\n  console.log(data);\n});\n\nlist.members().list(function (err, members) {\n  // `members` is the list of members\n  console.log(members);\n});\n\nlist.members('bob@gmail.com').update({ name: 'Foo Bar' }, function (err, body) {\n  console.log(body);\n});\n```\n\n#### Options\n\n`Mailgun` object constructor options:\n\n* `apiKey` - Your Mailgun API KEY\n* `domain` - Your Mailgun Domain\n* `mute` - Set to `true` if you wish to mute the console error logs in `validateWebhook()` function\n* `proxy` - The proxy URI in format `http[s]://[auth@]host:port`. ex: `'http://proxy.example.com:8080'`\n* `timeout` - Request timeout in milliseconds\n* `host` - the mailgun host (default: 'api.mailgun.net')\n* `protocol` - the mailgun protocol (default: 'https:', possible values: 'http:' or 'https:')\n* `port` - the mailgun port (default: '443')\n* `endpoint` - the mailgun host (default: '/v3')\n* `retry` - the number of **total attempts** to do when performing requests. Default is `1`. \nThat is, we will try an operation only once with no retries on error.\n          \n\n#### Attachments\n\nAttachments can be sent using either the `attachment` or `inline` parameters. `inline` parameter can be use to send an\nattachment with `inline` disposition. It can be used to send inline images. Both types are supported with same mechanisms\nas described, we will just use `attachment` parameter in the documentation below but same stands for `inline`.\n\nSending attachments can be done in a few ways. We can use the path to a file in the `attachment` parameter.\nIf the `attachment` parameter is of type `string` it is assumed to be the path to a file.\n\n```js\nvar filepath = path.join(__dirname, 'mailgun_logo.png');\n\nvar data = {\n  from: 'Excited User <me@samples.mailgun.org>',\n  to: 'serobnic@mail.ru',\n  subject: 'Hello',\n  text: 'Testing some Mailgun awesomness!',\n  attachment: filepath\n};\n\nmailgun.messages().send(data, function (error, body) {\n  console.log(body);\n});\n```\n\nWe can pass a buffer (has to be a `Buffer` object) of the data. If a buffer is used the data will be attached using a\ngeneric filename \"file\".\n\n```js\nvar filepath = path.join(__dirname, 'mailgun_logo.png');\nvar file = fs.readFileSync(filepath);\n\nvar data = {\n  from: 'Excited User <me@samples.mailgun.org>',\n  to: 'serobnic@mail.ru',\n  subject: 'Hello',\n  text: 'Testing some Mailgun awesomness!',\n  attachment: file\n};\n\nmailgun.messages().send(data, function (error, body) {\n  console.log(body);\n});\n```\n\nWe can also pass in a stream of the data. This is useful if you're attaching a file from the internet.\n\n```js\nvar request = require('request');\nvar file = request(\"https://www.google.ca/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png\");\n\nvar data = {\n  from: 'Excited User <me@samples.mailgun.org>',\n  to: 'serobnic@mail.ru',\n  subject: 'Hello',\n  text: 'Testing some Mailgun awesomness!',\n  attachment: file\n};\n\nmailgun.messages().send(data, function (error, body) {\n  console.log(body);\n});\n```\n\nFinally we provide a `Mailgun.Attachment` class to add attachments with a bit more customization. The Attachment\nconstructor takes an `options` object. The `options` parameters can have the following fields:\n* `data` - can be one of\n    * a string representing file path to the attachment\n    * a buffer of file data\n    * an instance of `Readable` which means it is a readable stream.\n* `filename` - the file name to be used for the attachment. Default is 'file'\n* `contentType` - the content type. Required for case of `Readable` data. Ex. `image/jpg`.\n* `knownLength` - the content length in bytes. Required for case of `Readable` data.\n\nIf an attachment object does not satisfy those valid conditions it is ignored. Multiple attachments can be sent by\npassing an array in the `attachment` parameter. The array elements can be of any one of the valid types and each one\nwill be handled appropriately.\n\n```js\nvar mailgun = require('mailgun-js')({apiKey: api_key, domain: domain});\nvar filename = 'mailgun_logo.png';\nvar filepath = path.join(__dirname, filename);\nvar file = fs.readFileSync(filepath);\n\nvar attch = new mailgun.Attachment({data: file, filename: filename});\n\nvar data = {\n  from: 'Excited User <me@samples.mailgun.org>',\n  to: 'serobnic@mail.ru',\n  subject: 'Hello',\n  text: 'Testing some Mailgun awesomness!',\n  attachment: attch\n};\n\nmailgun.messages().send(data, function (error, body) {\n  console.log(body);\n});\n```\n\n```js\nvar mailgun = require('mailgun-js')({apiKey: api_key, domain: domain});\nvar filename = 'mailgun_logo.png';\nvar filepath = path.join(__dirname, filename);\nvar fileStream = fs.createReadStream(filepath);\nvar fileStat = fs.statSync(filepath);\n\nmsg.attachment = new mailgun.Attachment({\n  data: fileStream,\n  filename: 'my_custom_name.png',\n  knownLength: fileStat.size,\n  contentType: 'image/png'});\n\nmailgun.messages().send(data, function (error, body) {\n  console.log(body);\n});\n```\n\n#### Sending MIME messages\n\nSending messages in MIME format can be accomplished using the `sendMime()` function of the `messages()` proxy object.\nThe `data` parameter for the function has to have `to` and `message` properties. The `message` property can be a full\nfile path to the MIME file, a stream of the file (that is a `Readable` object), or a string representation of the MIME\nmessage. To build a MIME string you can use the [Mail Composer] (https://www.npmjs.org/package/mailcomposer) library.\nSome examples:\n\n```js\nvar domain = 'mydomain.mailgun.org';\nvar mailgun = require('mailgun-js')({ apiKey: \"YOUR API KEY\", domain: domain });\nvar mailcomposer = require('mailcomposer');\n\nvar mail = mailcomposer({\n  from: 'you@samples.mailgun.org',\n  to: 'mm@samples.mailgun.org',\n  subject: 'Test email subject',\n  body: 'Test email text',\n  html: '<b> Test email text </b>'\n});\n\nmail.build(function(mailBuildError, message) {\n\n    var dataToSend = {\n        to: 'mm@samples.mailgun.org',\n        message: message.toString('ascii')\n    };\n\n    mailgun.messages().sendMime(dataToSend, function (sendError, body) {\n        if (sendError) {\n            console.log(sendError);\n            return;\n        }\n    });\n});\n```\n#### Referencing MIME file\n\n```js\nvar filepath = '/path/to/message.mime';\n\nvar data = {\n  to: fixture.message.to,\n  message: filepath\n};\n\nmailgun.messages().sendMime(data, function (err, body) {\n  console.log(body);\n});\n```\n\n```js\nvar filepath = '/path/to/message.mime';\n\nvar data = {\n  to: fixture.message.to,\n  message: fs.createReadStream(filepath)\n};\n\nmailgun.messages().sendMime(data, function (err, body) {\n  console.log(body);\n});\n```\n\n#### Creating mailing list members\n\n`members().create({data})` will create a mailing list member with `data`. Mailgun also offers a resource for creating\nmembers in bulk. Doing a `POST` to `/lists/<address>/members.json` adds multiple members, up to 1,000 per call,\nto a Mailing List. This can be accomplished using `members().add()`.\n\n```js\nvar members = [\n  {\n    address: 'Alice <alice@example.com>',\n    vars: { age: 26 }\n  },\n  {\n    name: 'Bob',\n    address: 'bob@example.com',\n    vars: { age: 34 }\n  }\n];\n\nmailgun.lists('mylist@mycompany.com').members().add({ members: members, subscribed: true }, function (err, body) {\n  console.log(body);\n});\n```\n\n## Generic requests\n\nMailgun-js also provides helper methods to allow users to interact with parts of the api that are not exposed already.\nThese are not tied to the domain passed in the constructor, and thus require the full path with the domain\npassed in the `resource` argument.\n\n* `mailgun.get(resource, data, callback)` - sends GET request to the specified resource on api.\n* `mailgun.post(resource, data, callback)` - sends POST request to the specified resource on api.\n* `mailgun.delete(resource, data, callback)` - sends DELETE request to the specified resource on api.\n* `mailgun.put(resource, data, callback)` - sends PUT request to the specified resource on api.\n\nExample: Get some stats\n\n```js\nmailgun.get('/samples.mailgun.org/stats', { event: ['sent', 'delivered'] }, function (error, body) {\n  console.log(body);\n});\n```\n\n## Promises\n\nModule works with Node-style callbacks, but also implements promises with the [Q](http://github.com/kriskowal/q) library.\n\n```js\nmailgun.lists('mylist@mydomain.com').info().then(function (data) {\n  console.log(data);\n}, function (err) {\n  console.log(err);\n});\n```\n\nThe function passed as 2nd argument is optional and not needed if you don't care about the fail case.\n\n## Webhook validation\n\nThe Mailgun object also has a helper function for validating Mailgun Webhook requests\n(as per the [mailgun docs for securing webhooks](http://documentation.mailgun.com/user_manual.html#securing-webhooks)).\nThis code came from [this gist](https://gist.github.com/coolaj86/81a3b61353d2f0a2552c).\n\nExample usage:\n\n```js\nvar mailgun = require('mailgun-js')({apiKey: api_key, domain: domain});\n\nfunction router(app) {\n  app.post('/webhooks/mailgun/*', function (req, res, next) {\n    var body = req.body;\n\n    if (!mailgun.validateWebhook(body.timestamp, body.token, body.signature)) {\n      console.error('Request came, but not from Mailgun');\n      res.send({ error: { message: 'Invalid signature. Are you even Mailgun?' } });\n      return;\n    }\n\n    next();\n  });\n\n  app.post('/webhooks/mailgun/catchall', function (req, res) {\n    // actually handle request here\n  });\n}\n```\n\n## Tests\n\nTo run the test suite you must first have a Mailgun account with a domain setup. Then create a file named _./test/auth.json_, which contains your credentials as JSON, for example:\n\n```json\n{ \"api_key\": \"key-XXXXXXXXXXXXXXXXXXXXXXX\", \"domain\": \"mydomain.mailgun.org\" }\n```\n\nYou should edit _./test/fixture.json_ and modify the data to match your context.\n\nThen install the dev dependencies and execute the test suite:\n\n```\n$ npm install\n$ npm test\n```\n\nThe tests will call Mailgun API, and will send a test email, create route(s), mailing list and mailing list member.\n\n## Notes\n\nThis project is not endorsed by or affiliated with [Mailgun](http://www.mailgun.com).\nThe general design and some code was heavily inspired by [node-heroku-client](https://github.com/jclem/node-heroku-client).\n\n## License\n\nCopyright 2012, 2013, 2014 OneLobby\n\nLicensed under the MIT License.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/bojand/mailgun-js.git"
  },
  "scripts": {
    "test": "mocha"
  },
  "version": "0.7.8"
}

'use strict';var _RelayConnectionInter=require('RelayConnectionInterface');var 

















































CLIENT_MUTATION_ID=_RelayConnectionInter.CLIENT_MUTATION_ID;var EDGES=_RelayConnectionInter.EDGES;var _RelayNodeInterface=require('RelayNodeInterface');var 
ANY_TYPE=_RelayNodeInterface.ANY_TYPE;var ID=_RelayNodeInterface.ID;var NODE=_RelayNodeInterface.NODE;var _GraphQLMutatorConsta=require('GraphQLMutatorConstants');var 
APPEND=_GraphQLMutatorConsta.APPEND;var PREPEND=_GraphQLMutatorConsta.PREPEND;var REMOVE=_GraphQLMutatorConsta.REMOVE;

var EDGES_FIELD=require('RelayQuery').Field.build({
fieldName:EDGES,
type:ANY_TYPE,
metadata:{
canHaveSubselections:true,
isPlural:true}});


var IGNORED_KEYS=babelHelpers.defineProperty({
error:true},
CLIENT_MUTATION_ID,true);

var STUB_CURSOR_ID='client:cursor';







function writeRelayUpdatePayload(
writer,
operation,
payload,_ref)

{var configs=_ref.configs;var isOptimisticUpdate=_ref.isOptimisticUpdate;
configs.forEach(function(config){
switch(config.type){
case require('RelayMutationType').NODE_DELETE:
handleNodeDelete(writer,payload,config);
break;
case require('RelayMutationType').RANGE_ADD:
handleRangeAdd(
writer,
payload,
operation,
config,
isOptimisticUpdate);

break;
case require('RelayMutationType').RANGE_DELETE:
handleRangeDelete(writer,payload,config);
break;
case require('RelayMutationType').FIELDS_CHANGE:
case require('RelayMutationType').REQUIRED_CHILDREN:
break;
default:
console.error(
'Expected a valid mutation handler type, got `%s`.',
config.type);}});




handleMerge(writer,payload,operation);}







function handleNodeDelete(
writer,
payload,
config)
{
var recordIDs=payload[config.deletedIDFieldName];
if(!recordIDs){


return;}


if(Array.isArray(recordIDs)){
recordIDs.forEach(function(id){
deleteRecord(writer,id);});}else 

{
deleteRecord(writer,recordIDs);}}







function deleteRecord(
writer,
recordID)
{
var store=writer.getRecordStore();
var recordWriter=writer.getRecordWriter();

var status=store.getRecordState(recordID);
if(status===require('RelayRecordState').NONEXISTENT){
return;}



var connectionIDs=store.getConnectionIDsForRecord(recordID);
if(connectionIDs){
connectionIDs.forEach(function(connectionID){
var edgeID=require('generateClientEdgeID')(connectionID,recordID);
recordWriter.applyRangeUpdate(connectionID,edgeID,REMOVE);
writer.recordUpdate(edgeID);
writer.recordUpdate(connectionID);

deleteRecord(writer,edgeID);});}




recordWriter.deleteRecord(recordID);
writer.recordUpdate(recordID);}







function handleMerge(
writer,
payload,
operation)
{
var store=writer.getRecordStore();






for(var fieldName in payload){
if(!payload.hasOwnProperty(fieldName)){
continue;}

var payloadData=payload[fieldName];
if(typeof payloadData!=='object'||payloadData==null){
continue;}



var rootID=store.getDataID(fieldName);

if(
ID in payloadData||
rootID||
Array.isArray(payloadData))
{
mergeField(
writer,
fieldName,
payloadData,
operation);}}}








function mergeField(
writer,
fieldName,
payload,
operation)
{

if(fieldName in IGNORED_KEYS){
return;}

if(Array.isArray(payload)){
payload.forEach(function(item){
if(typeof item==='object'&&item!=null&&!Array.isArray(item)){
if(getString(item,ID)){
mergeField(writer,fieldName,item,operation);}}});



return;}


var payloadData=payload;

var store=writer.getRecordStore();
var recordID=getString(payloadData,ID);
var path=undefined;

if(recordID!=null){
path=require('RelayQueryPath').createForID(recordID,'writeRelayUpdatePayload');}else 
{
recordID=store.getDataID(fieldName);

path=require('RelayQueryPath').create(require('RelayQuery').Root.build(
'writeRelayUpdatePayload',
fieldName,
null,
null,
{
identifyingArgName:null,
identifyingArgType:null,
isAbstract:true,
isDeferred:false,
isPlural:false},

ANY_TYPE));}


!
recordID?require('invariant')(0,
'writeRelayUpdatePayload(): Expected a record ID in the response payload '+
'supplied to update the store.'):undefined;




var handleNode=function(node){
node.getChildren().forEach(function(child){
if(child instanceof require('RelayQuery').Fragment){
handleNode(child);}else 
if(
child instanceof require('RelayQuery').Field&&
child.getSerializationKey()===fieldName)
{

if(path&&recordID){

writer.createRecordIfMissing(
child,
recordID,
path,
payloadData);

writer.writePayload(
child,
recordID,
payloadData,
path);}}});};





handleNode(operation);}








function handleRangeAdd(
writer,
payload,
operation,
config,
isOptimisticUpdate)
{
var clientMutationID=getString(payload,CLIENT_MUTATION_ID);
!
clientMutationID?require('invariant')(0,
'writeRelayUpdatePayload(): Expected operation `%s` to have a `%s`.',
operation.getName(),
CLIENT_MUTATION_ID):undefined;

var store=writer.getRecordStore();


var edge=getObject(payload,config.edgeName);
var edgeNode=edge&&getObject(edge,NODE);
if(!edge||!edgeNode){
require('warning')(
false,
'writeRelayUpdatePayload(): Expected response payload to include the '+
'newly created edge `%s` and its `node` field. Did you forget to '+
'update the `RANGE_ADD` mutation config?',
config.edgeName);

return;}



var connectionParentID=config.parentID;
if(!connectionParentID){
var edgeSource=getObject(edge,'source');
if(edgeSource){
connectionParentID=getString(edgeSource,ID);}}


!
connectionParentID?require('invariant')(0,
'writeRelayUpdatePayload(): Cannot insert edge without a configured '+
'`parentID` or a `%s.source.id` field.',
config.edgeName):undefined;


var nodeID=getString(edgeNode,ID)||require('generateClientID')();
var cursor=edge.cursor||STUB_CURSOR_ID;
var edgeData=babelHelpers.extends({},
edge,{
cursor:cursor,
node:babelHelpers.extends({},
edgeNode,{
id:nodeID})});




var connectionIDs=
store.getConnectionIDsForField(connectionParentID,config.connectionName);
if(connectionIDs){
connectionIDs.forEach(function(connectionID){return addRangeNode(
writer,
operation,
config,
connectionID,
nodeID,
edgeData);});}



if(isOptimisticUpdate){


require('RelayMutationTracker').putClientIDForMutation(
nodeID,
clientMutationID);}else 

{



var clientNodeID=
require('RelayMutationTracker').getClientIDForMutation(clientMutationID);
if(clientNodeID){
require('RelayMutationTracker').updateClientServerIDMap(
clientNodeID,
nodeID);

require('RelayMutationTracker').deleteClientIDForMutation(clientMutationID);}}}








function addRangeNode(
writer,
operation,
config,
connectionID,
nodeID,
edgeData)
{
var store=writer.getRecordStore();
var recordWriter=writer.getRecordWriter();
var filterCalls=store.getRangeFilterCalls(connectionID);
var rangeBehavior=filterCalls?
getRangeBehavior(config.rangeBehaviors,filterCalls):
null;


if(!rangeBehavior){
return;}


var edgeID=require('generateClientEdgeID')(connectionID,nodeID);
var path=store.getPathToRecord(connectionID);
!
path?require('invariant')(0,
'writeRelayUpdatePayload(): Expected a path for connection record, `%s`.',
connectionID):undefined;

path=require('RelayQueryPath').getPath(path,EDGES_FIELD,edgeID);


writer.createRecordIfMissing(EDGES_FIELD,edgeID,path,edgeData);



var hasEdgeField=false;
var handleNode=function(node){
node.getChildren().forEach(function(child){
if(child instanceof require('RelayQuery').Fragment){
handleNode(child);}else 
if(
child instanceof require('RelayQuery').Field&&
child.getSchemaName()===config.edgeName)
{
hasEdgeField=true;
if(path){
writer.writePayload(
child,
edgeID,
edgeData,
path);}}});};





handleNode(operation);

!
hasEdgeField?require('invariant')(0,
'writeRelayUpdatePayload(): Expected mutation query to include the '+
'relevant edge field, `%s`.',
config.edgeName):undefined;



if(rangeBehavior in require('GraphQLMutatorConstants').RANGE_OPERATIONS){
recordWriter.applyRangeUpdate(connectionID,edgeID,rangeBehavior);
if(writer.hasChangeToRecord(edgeID)){
writer.recordUpdate(connectionID);}}else 

{
console.error(
'writeRelayUpdatePayload(): invalid range operation `%s`, valid '+
'options are `%s` or `%s`.',
rangeBehavior,
APPEND,
PREPEND);}}









function handleRangeDelete(
writer,
payload,
config)
{
var store=writer.getRecordStore();

var recordID=
Array.isArray(config.deletedIDFieldName)?
getIDFromPath(store,config.deletedIDFieldName,payload):
getString(payload,config.deletedIDFieldName);

!(
recordID!=null)?require('invariant')(0,
'writeRelayUpdatePayload(): Missing ID for deleted record at field `%s`.',
config.deletedIDFieldName):undefined;



var connectionName=config.pathToConnection.pop();
var connectionParentID=
getIDFromPath(store,config.pathToConnection,payload);

config.pathToConnection.push(connectionName);
if(!connectionParentID){
return;}


var connectionIDs=store.getConnectionIDsForField(
connectionParentID,
connectionName);

if(connectionIDs){
connectionIDs.forEach(function(connectionID){
deleteRangeEdge(writer,connectionID,recordID);});}}







function deleteRangeEdge(
writer,
connectionID,
nodeID)
{
var recordWriter=writer.getRecordWriter();
var edgeID=require('generateClientEdgeID')(connectionID,nodeID);
recordWriter.applyRangeUpdate(connectionID,edgeID,REMOVE);

deleteRecord(writer,edgeID);
if(writer.hasChangeToRecord(edgeID)){
writer.recordUpdate(connectionID);}}













function getRangeBehavior(
rangeBehaviors,
calls)
{
var call=calls.map(require('serializeRelayQueryCall')).sort().join('').slice(1);
return rangeBehaviors[call]||null;}













function getIDFromPath(
store,
path,
payload)
{



if(path.length===1){
var rootCallID=store.getDataID(path[0]);
if(rootCallID){
return rootCallID;}}


var payloadItem=path.reduce(function(item,step){
return item?getObject(item,step):null;},
payload);
if(payloadItem){
var id=getString(payloadItem,ID);
!(
id!=null)?require('invariant')(0,
'writeRelayUpdatePayload(): Expected `%s.id` to be a string.',
path.join('.')):undefined;

return id;}

return null;}


function getString(
payload,
field)
{
var value=payload[field];

if(typeof value==='number'){
require('warning')(
false,
'writeRelayUpdatePayload(): Expected `%s` to be a string, got the '+
'number `%s`.',
field,
value);

value=''+value;}

!(
value==null||typeof value==='string')?require('invariant')(0,
'writeRelayUpdatePayload(): Expected `%s` to be a string, got `%s`.',
field,
JSON.stringify(value)):undefined;

return value;}


function getObject(
payload,
field)
{
var value=payload[field];
!(
value==null||typeof value==='object'&&!Array.isArray(value))?require('invariant')(0,
'writeRelayUpdatePayload(): Expected `%s` to be an object, got `%s`.',
field,
JSON.stringify(value)):undefined;

return value;}


module.exports=require('RelayProfiler').instrument(
'writeRelayUpdatePayload',
writeRelayUpdatePayload);
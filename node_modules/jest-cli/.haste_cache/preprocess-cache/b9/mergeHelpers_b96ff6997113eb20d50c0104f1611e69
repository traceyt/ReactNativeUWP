"use strict";









































var MAX_MERGE_DEPTH=36;







var isTerminal=function(o){
return typeof o!=='object'||o===null;};


var mergeHelpers={

MAX_MERGE_DEPTH:MAX_MERGE_DEPTH,

isTerminal:isTerminal,







normalizeMergeArg:function(arg){
return arg===undefined||arg===null?{}:arg;},










checkMergeArrayArgs:function(one,two){
!(
Array.isArray(one)&&Array.isArray(two))?require('fbjs/lib/invariant')(0,
'Tried to merge arrays, instead got %s and %s.',
one,
two):undefined;},







checkMergeObjectArgs:function(one,two){
mergeHelpers.checkMergeObjectArg(one);
mergeHelpers.checkMergeObjectArg(two);},





checkMergeObjectArg:function(arg){
!(
!isTerminal(arg)&&!Array.isArray(arg))?require('fbjs/lib/invariant')(0,
'Tried to merge an object, instead got %s.',
arg):undefined;},






checkMergeIntoObjectArg:function(arg){
!(
(!isTerminal(arg)||typeof arg==='function')&&!Array.isArray(arg))?require('fbjs/lib/invariant')(0,
'Tried to merge into an object, instead got %s.',
arg):undefined;},









checkMergeLevel:function(level){
!(
level<MAX_MERGE_DEPTH)?require('fbjs/lib/invariant')(0,
'Maximum deep merge depth exceeded. You may be attempting to merge '+
'circular structures in an unsupported way.'):undefined;},








checkArrayStrategy:function(strategy){
!(
strategy===undefined||strategy in mergeHelpers.ArrayStrategies)?require('fbjs/lib/invariant')(0,
'You must provide an array strategy to deep merge functions to '+
'instruct the deep merge how to resolve merging two arrays.'):undefined;},










ArrayStrategies:require('fbjs/lib/keyMirror')({
Clobber:true,
IndexByIndex:true})};




module.exports=mergeHelpers;
'use strict';var 




























RelayNetworkLayer=function(){



function RelayNetworkLayer(){babelHelpers.classCallCheck(this,RelayNetworkLayer);
this.$RelayNetworkLayer_injectedNetworkLayer=null;
this.$RelayNetworkLayer_queue=null;}babelHelpers.createClass(RelayNetworkLayer,[{key:'injectNetworkLayer',value:function injectNetworkLayer(


networkLayer){
this.$RelayNetworkLayer_injectedNetworkLayer=networkLayer;}},{key:'sendMutation',value:function sendMutation(


mutationRequest){
var networkLayer=this.$RelayNetworkLayer_getCurrentNetworkLayer();
var promise=networkLayer.sendMutation(mutationRequest);
if(promise){
Promise.resolve(promise).done();}}},{key:'sendQueries',value:function sendQueries(



queryRequests){
var networkLayer=this.$RelayNetworkLayer_getCurrentNetworkLayer();
var promise=networkLayer.sendQueries(queryRequests);
if(promise){
Promise.resolve(promise).done();}}},{key:'supports',value:function supports()



{
var networkLayer=this.$RelayNetworkLayer_getCurrentNetworkLayer();
return networkLayer.supports.apply(networkLayer,arguments);}},{key:'$RelayNetworkLayer_getCurrentNetworkLayer',value:function $RelayNetworkLayer_getCurrentNetworkLayer()


{
!
this.$RelayNetworkLayer_injectedNetworkLayer?require('invariant')(0,
'RelayNetworkLayer: Use `injectNetworkLayer` to configure a network '+
'layer.'):undefined;

return this.$RelayNetworkLayer_injectedNetworkLayer;}},{key:'fetchRelayQuery',value:function fetchRelayQuery(









query){var _this=this;
var currentQueue=this.$RelayNetworkLayer_queue||[];
if(!this.$RelayNetworkLayer_queue){
this.$RelayNetworkLayer_queue=currentQueue;
require('resolveImmediate')(function(){
_this.$RelayNetworkLayer_queue=null;
profileQueue(currentQueue);
_this.sendQueries(currentQueue);});}


var request=new (require('RelayQueryRequest'))(query);
currentQueue.push(request);
return request.getPromise();}}]);return RelayNetworkLayer;}();






function profileQueue(currentQueue){

var firstResultProfiler=require('RelayProfiler').profile('fetchRelayQuery');
currentQueue.forEach(function(query){
var profiler=require('RelayProfiler').profile('fetchRelayQuery.query');
var onSettle=function(){
profiler.stop();
if(firstResultProfiler){
firstResultProfiler.stop();
firstResultProfiler=null;}};


query.getPromise().done(onSettle,onSettle);});}



require('RelayProfiler').instrumentMethods(RelayNetworkLayer.prototype,{
sendMutation:'RelayNetworkLayer.sendMutation',
sendQueries:'RelayNetworkLayer.sendQueries'});


module.exports=RelayNetworkLayer;
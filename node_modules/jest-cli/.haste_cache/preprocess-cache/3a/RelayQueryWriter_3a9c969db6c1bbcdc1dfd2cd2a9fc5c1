'use strict';var _RelayNodeInterface=require('RelayNodeInterface');var 














































ANY_TYPE=_RelayNodeInterface.ANY_TYPE;var ID=_RelayNodeInterface.ID;var TYPENAME=_RelayNodeInterface.TYPENAME;var _RelayConnectionInter=require('RelayConnectionInterface');var 
EDGES=_RelayConnectionInter.EDGES;var NODE=_RelayConnectionInter.NODE;var PAGE_INFO=_RelayConnectionInter.PAGE_INFO;var _RelayRecordState=require('RelayRecordState');var 
EXISTENT=_RelayRecordState.EXISTENT;var 







RelayQueryWriter=function(_RelayQueryVisitor){babelHelpers.inherits(RelayQueryWriter,_RelayQueryVisitor);








function RelayQueryWriter(
store,
writer,
queryTracker,
changeTracker,
options)
{babelHelpers.classCallCheck(this,RelayQueryWriter);var _this=babelHelpers.possibleConstructorReturn(this,Object.getPrototypeOf(RelayQueryWriter).call(this));

_this.$RelayQueryWriter_changeTracker=changeTracker;
_this.$RelayQueryWriter_forceIndex=options&&options.forceIndex?options.forceIndex:0;
_this.$RelayQueryWriter_isOptimisticUpdate=!!(options&&options.isOptimisticUpdate);
_this.$RelayQueryWriter_store=store;
_this.$RelayQueryWriter_queryTracker=queryTracker;
_this.$RelayQueryWriter_updateTrackedQueries=!!(options&&options.updateTrackedQueries);
_this.$RelayQueryWriter_writer=writer;return _this;}babelHelpers.createClass(RelayQueryWriter,[{key:'getRecordStore',value:function getRecordStore()


{
return this.$RelayQueryWriter_store;}},{key:'getRecordWriter',value:function getRecordWriter()


{
return this.$RelayQueryWriter_writer;}},{key:'getRecordTypeName',value:function getRecordTypeName(



node,
recordID,
payload)
{
if(this.$RelayQueryWriter_isOptimisticUpdate){

return null;}

var typeName=payload[TYPENAME];
if(typeName==null){
if(!node.isAbstract()){
typeName=node.getType();}else 
{
typeName=this.$RelayQueryWriter_store.getType(recordID);}}


require('warning')(
typeName&&typeName!==ANY_TYPE,
'RelayQueryWriter: Could not find a type name for record `%s`.',
recordID);

return typeName||null;}},{key:'writePayload',value:function writePayload(







node,
recordID,
responseData,
path)
{var _this2=this;
var state={
nodeID:null,
path:path,
recordID:recordID,
responseData:responseData};


if(node instanceof require('RelayQuery').Field&&node.canHaveSubselections()){

node.getChildren().forEach(function(child){
_this2.visit(child,state);});

return;}


this.visit(node,state);}},{key:'recordCreate',value:function recordCreate(







recordID)
{
this.$RelayQueryWriter_changeTracker.createID(recordID);}},{key:'recordUpdate',value:function recordUpdate(







recordID)
{
this.$RelayQueryWriter_changeTracker.updateID(recordID);}},{key:'hasChangeToRecord',value:function hasChangeToRecord(





recordID){
return this.$RelayQueryWriter_changeTracker.hasChange(recordID);}},{key:'isNewRecord',value:function isNewRecord(





recordID){
return this.$RelayQueryWriter_changeTracker.isNewRecord(recordID);}},{key:'createRecordIfMissing',value:function createRecordIfMissing(






node,
recordID,
path,
payload)
{
var recordState=this.$RelayQueryWriter_store.getRecordState(recordID);
var typeName=payload&&this.getRecordTypeName(node,recordID,payload);
this.$RelayQueryWriter_writer.putRecord(recordID,typeName,path);
if(recordState!==EXISTENT){
this.recordCreate(recordID);}

if(this.isNewRecord(recordID)||this.$RelayQueryWriter_updateTrackedQueries){
this.$RelayQueryWriter_queryTracker.trackNodeForID(node,recordID,path);}}},{key:'visitRoot',value:function visitRoot(




root,
state)
{var 
path=state.path;var recordID=state.recordID;var responseData=state.responseData;
var recordState=this.$RelayQueryWriter_store.getRecordState(recordID);


if(responseData==null){
!(
responseData!==undefined)?require('invariant')(0,
'RelayQueryWriter: Unexpectedly encountered `undefined` in payload. '+
'Cannot set root record `%s` to undefined.',
recordID):undefined;

this.$RelayQueryWriter_writer.deleteRecord(recordID);
if(recordState===EXISTENT){
this.recordUpdate(recordID);}

return;}

!(
typeof responseData==='object'&&responseData!==null)?require('invariant')(0,
'RelayQueryWriter: Cannot update record `%s`, expected response to be '+
'an array or object.',
recordID):undefined;

this.createRecordIfMissing(root,recordID,path,responseData);
this.traverse(root,state);}},{key:'visitFragment',value:function visitFragment(



fragment,
state)
{var 
recordID=state.recordID;
if(fragment.isDeferred()){
this.$RelayQueryWriter_writer.setHasDeferredFragmentData(
recordID,
fragment.getCompositeHash());

this.recordUpdate(recordID);}




if(
this.$RelayQueryWriter_isOptimisticUpdate||
require('isCompatibleRelayFragmentType')(fragment,this.$RelayQueryWriter_store.getType(recordID)))
{
var _path=require('RelayQueryPath').getPath(state.path,fragment,recordID);
this.traverse(fragment,babelHelpers.extends({},
state,{
path:_path}));}}},{key:'visitField',value:function visitField(





field,
state)
{var 

recordID=

state.recordID;var responseData=state.responseData;
!(
this.$RelayQueryWriter_writer.getRecordState(recordID)===EXISTENT)?require('invariant')(0,
'RelayQueryWriter: Cannot update a non-existent record, `%s`.',
recordID):undefined;

!(
typeof responseData==='object'&&responseData!==null)?require('invariant')(0,
'RelayQueryWriter: Cannot update record `%s`, expected response to be '+
'an object.',
recordID):undefined;



var fieldData=responseData[field.getSerializationKey()];
if(fieldData===undefined){
return;}

if(fieldData===null){
this.$RelayQueryWriter_writer.deleteField(recordID,field.getStorageKey());
this.recordUpdate(recordID);
return;}


if(!field.canHaveSubselections()){
this.$RelayQueryWriter_writeScalar(field,state,recordID,fieldData);}else 
if(field.isConnection()){
this.$RelayQueryWriter_writeConnection(field,state,recordID,fieldData);}else 
if(field.isPlural()){
this.$RelayQueryWriter_writePluralLink(field,state,recordID,fieldData);}else 
{
this.$RelayQueryWriter_writeLink(field,state,recordID,fieldData);}}},{key:'$RelayQueryWriter_writeScalar',value:function $RelayQueryWriter_writeScalar(








field,
state,
recordID,
nextValue)
{
var storageKey=field.getStorageKey();
var prevValue=this.$RelayQueryWriter_store.getField(recordID,storageKey);




this.$RelayQueryWriter_writer.putField(recordID,storageKey,nextValue);


if(
Array.isArray(prevValue)&&
Array.isArray(nextValue)&&
prevValue.length===nextValue.length&&
prevValue.every(function(prev,ii){return prev===nextValue[ii];}))
{
return;}else 
if(prevValue===nextValue){
return;}

this.recordUpdate(recordID);}},{key:'$RelayQueryWriter_writeConnection',value:function $RelayQueryWriter_writeConnection(







field,
state,
recordID,
connectionData)
{



var storageKey=field.getStorageKey();
var connectionID=
this.$RelayQueryWriter_store.getLinkedRecordID(recordID,storageKey)||
require('generateClientID')();

var connectionRecordState=this.$RelayQueryWriter_store.getRecordState(connectionID);
var hasEdges=!!(
field.getFieldByStorageKey(EDGES)||

connectionData!=null&&
typeof connectionData==='object'&&
connectionData[EDGES]);


var path=require('RelayQueryPath').getPath(state.path,field,connectionID);



this.$RelayQueryWriter_writer.putRecord(connectionID,null,path);
this.$RelayQueryWriter_writer.putLinkedRecordID(recordID,storageKey,connectionID);

if(connectionRecordState!==EXISTENT){
this.recordUpdate(recordID);
this.recordCreate(connectionID);}

if(this.isNewRecord(connectionID)||this.$RelayQueryWriter_updateTrackedQueries){
this.$RelayQueryWriter_queryTracker.trackNodeForID(field,connectionID,path);}




if(hasEdges&&(
!this.$RelayQueryWriter_store.hasRange(connectionID)||
this.$RelayQueryWriter_forceIndex&&
this.$RelayQueryWriter_forceIndex>this.$RelayQueryWriter_store.getRangeForceIndex(connectionID))){
this.$RelayQueryWriter_writer.putRange(
connectionID,
field.getCallsWithValues(),
this.$RelayQueryWriter_forceIndex);

this.recordUpdate(connectionID);}


var connectionState={
nodeID:null,
path:path,
recordID:connectionID,
responseData:connectionData};

this.$RelayQueryWriter_traverseConnection(field,field,connectionState);}},{key:'$RelayQueryWriter_traverseConnection',value:function $RelayQueryWriter_traverseConnection(








connection,
node,
state)
{var _this3=this;
node.getChildren().forEach(function(child){
if(child instanceof require('RelayQuery').Field){
if(child.getSchemaName()===EDGES){
_this3.$RelayQueryWriter_writeEdges(connection,child,state);}else 
if(child.getSchemaName()!==PAGE_INFO){


_this3.visit(child,state);}}else 

{

_this3.$RelayQueryWriter_traverseConnection(connection,child,state);}});}},{key:'$RelayQueryWriter_writeEdges',value:function $RelayQueryWriter_writeEdges(








connection,
edges,
state)
{var _this4=this;var 

connectionID=

state.recordID;var connectionData=state.responseData;
!(
typeof connectionData==='object'&&connectionData!==null)?require('invariant')(0,
'RelayQueryWriter: Cannot write edges for malformed connection `%s` on '+
'record `%s`, expected the response to be an object.',
connection.getDebugName(),
connectionID):undefined;

var edgesData=connectionData[EDGES];


if(edgesData==null){
require('warning')(
false,
'RelayQueryWriter: Cannot write edges for connection `%s` on record '+
'`%s`, expected a response for field `edges`.',
connection.getDebugName(),
connectionID);

return;}

!
Array.isArray(edgesData)?require('invariant')(0,
'RelayQueryWriter: Cannot write edges for connection `%s` on record '+
'`%s`, expected `edges` to be an array.',
connection.getDebugName(),
connectionID):undefined;


var rangeCalls=connection.getCallsWithValues();
!
require('RelayConnectionInterface').hasRangeCalls(rangeCalls)?require('invariant')(0,
'RelayQueryWriter: Cannot write edges for connection `%s` on record '+
'`%s` without `first`, `last`, or `find` argument.',
connection.getDebugName(),
connectionID):undefined;

var rangeInfo=this.$RelayQueryWriter_store.getRangeMetadata(
connectionID,
rangeCalls);

!
rangeInfo?require('invariant')(0,
'RelayQueryWriter: Expected a range to exist for connection field `%s` '+
'on record `%s`.',
connection.getDebugName(),
connectionID):undefined;

var fetchedEdgeIDs=[];
var filteredEdges=rangeInfo.filteredEdges;
var isUpdate=false;
var nextIndex=0;

edgesData.forEach(function(edgeData){

if(edgeData==null){
return;}

!(
typeof edgeData==='object'&&edgeData)?require('invariant')(0,
'RelayQueryWriter: Cannot write edge for connection field `%s` on '+
'record `%s`, expected an object.',
connection.getDebugName(),
connectionID):undefined;


var nodeData=edgeData[NODE];
if(nodeData==null){
return;}


!(
typeof nodeData==='object')?require('invariant')(0,
'RelayQueryWriter: Expected node to be an object for field `%s` on '+
'record `%s`.',
connection.getDebugName(),
connectionID):undefined;





var prevEdge=filteredEdges[nextIndex++];
var nodeID=
nodeData&&nodeData[ID]||
prevEdge&&_this4.$RelayQueryWriter_store.getLinkedRecordID(prevEdge.edgeID,NODE)||
require('generateClientID')();


var edgeID=require('generateClientEdgeID')(connectionID,nodeID);
var path=require('RelayQueryPath').getPath(state.path,edges,edgeID);
_this4.createRecordIfMissing(edges,edgeID,path,null);
fetchedEdgeIDs.push(edgeID);





_this4.traverse(edges,{
nodeID:nodeID,
path:path,
recordID:edgeID,
responseData:edgeData});

isUpdate=isUpdate||_this4.hasChangeToRecord(edgeID);});


var pageInfo=connectionData[PAGE_INFO]||
require('RelayConnectionInterface').getDefaultPageInfo();
this.$RelayQueryWriter_writer.putRangeEdges(
connectionID,
rangeCalls,
pageInfo,
fetchedEdgeIDs);




if(isUpdate){
this.recordUpdate(connectionID);}}},{key:'$RelayQueryWriter_writePluralLink',value:function $RelayQueryWriter_writePluralLink(









field,
state,
recordID,
fieldData)
{var _this5=this;
var storageKey=field.getStorageKey();
!
Array.isArray(fieldData)?require('invariant')(0,
'RelayQueryWriter: Expected array data for field `%s` on record `%s`.',
field.getDebugName(),
recordID):undefined;


var prevLinkedIDs=this.$RelayQueryWriter_store.getLinkedRecordIDs(recordID,storageKey);
var nextLinkedIDs=[];
var isUpdate=!prevLinkedIDs;
var nextIndex=0;
fieldData.forEach(function(nextRecord){

if(nextRecord==null){
return;}

!(
typeof nextRecord==='object'&&nextRecord)?require('invariant')(0,
'RelayQueryWriter: Expected elements for plural field `%s` to be '+
'objects.',
storageKey):undefined;



var prevLinkedID=prevLinkedIDs&&prevLinkedIDs[nextIndex];
var nextLinkedID=
nextRecord[ID]||
prevLinkedID||
require('generateClientID')();

nextLinkedIDs.push(nextLinkedID);

var path=require('RelayQueryPath').getPath(state.path,field,nextLinkedID);
_this5.createRecordIfMissing(field,nextLinkedID,path,nextRecord);
isUpdate=
isUpdate||
nextLinkedID!==prevLinkedID||
_this5.isNewRecord(nextLinkedID);


_this5.traverse(field,{
nodeID:null,
path:path,
recordID:nextLinkedID,
responseData:nextRecord});

isUpdate=isUpdate||_this5.hasChangeToRecord(nextLinkedID);
nextIndex++;});


this.$RelayQueryWriter_writer.putLinkedRecordIDs(recordID,storageKey,nextLinkedIDs);


isUpdate=
isUpdate||
!prevLinkedIDs||
prevLinkedIDs.length!==nextLinkedIDs.length;



if(isUpdate){
this.recordUpdate(recordID);}}},{key:'$RelayQueryWriter_writeLink',value:function $RelayQueryWriter_writeLink(









field,
state,
recordID,
fieldData)
{var 
nodeID=state.nodeID;
var storageKey=field.getStorageKey();
!(
typeof fieldData==='object'&&fieldData!==null)?require('invariant')(0,
'RelayQueryWriter: Expected data for non-scalar field `%s` on record '+
'`%s` to be an object.',
field.getDebugName(),
recordID):undefined;






var prevLinkedID=this.$RelayQueryWriter_store.getLinkedRecordID(recordID,storageKey);
var nextLinkedID=
field.getSchemaName()===NODE&&nodeID||
fieldData[ID]||
prevLinkedID||
require('generateClientID')();


var path=require('RelayQueryPath').getPath(state.path,field,nextLinkedID);
this.createRecordIfMissing(field,nextLinkedID,path,fieldData);



this.$RelayQueryWriter_writer.putLinkedRecordID(recordID,storageKey,nextLinkedID);
if(prevLinkedID!==nextLinkedID||this.isNewRecord(nextLinkedID)){
this.recordUpdate(recordID);}


this.traverse(field,{
nodeID:null,
path:path,
recordID:nextLinkedID,
responseData:fieldData});}}]);return RelayQueryWriter;}(require('RelayQueryVisitor'));




module.exports=RelayQueryWriter;
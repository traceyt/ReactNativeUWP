'use strict';







jest.
dontMock('CRMNowCreativeUtils').
dontMock('URI').
dontMock('URIBase').
dontMock('URISchemes').
dontMock('ads-lib-urllib').
dontMock('isFacebookURI');






function mockCRMNowImageUtils(isValidImageSource){
require('CRMNowImageUtils').isValidImageSource.mockImplementation(
function(){return isValidImageSource;});}



describe('CRMNowCreativeUtils',function(){

beforeEach(function(){
mockCRMNowImageUtils(true);});


it('shows left character count correctly',function(){
var headlineMaxLength=require('CRMNowCreativeUtils').MAX_HEADLINE_LENGTH;
var textMaxLength=require('CRMNowCreativeUtils').MAX_TEXT_LENGTH;
var shortStr='0123';
var longStr='012345678901234567890123456789012345678901234567890123456789'+
'0123456789012345678901234567890123456789012345678901234567890123456789';
expect(require('CRMNowCreativeUtils').getHeadlineCharacterLeft()).
toBe(headlineMaxLength);
expect(require('CRMNowCreativeUtils').getHeadlineCharacterLeft('')).
toBe(headlineMaxLength);
expect(require('CRMNowCreativeUtils').getHeadlineCharacterLeft(shortStr)).
toBe(headlineMaxLength-shortStr.length);
expect(require('CRMNowCreativeUtils').getHeadlineCharacterLeft(longStr)).
toBe(headlineMaxLength-longStr.length);
expect(require('CRMNowCreativeUtils').getTextCharacterLeft()).
toBe(textMaxLength);
expect(require('CRMNowCreativeUtils').getTextCharacterLeft('')).
toBe(textMaxLength);
expect(require('CRMNowCreativeUtils').getTextCharacterLeft(shortStr)).
toBe(textMaxLength-shortStr.length);
expect(require('CRMNowCreativeUtils').getTextCharacterLeft(longStr)).
toBe(textMaxLength-longStr.length);});


it('gets errors correctly',function(){
var shortStr='test';
var longStr='0123456789012345678901234567890123456789012345678901234567890123456789'+
'0123456789012345678901234567890123456789012345678901234567890123456789';
var puncStreakStr='abcde!!';
var validPuncStreakStr='page("test")';
var puncStartStr='!abcde';
var badCharStr='abcde[test';
var badCharStr2='abcde\u0250test';

var url='http://www.testok.com';
var invalidURL='http://test';
var fbURL='http://www.facebook.com';
var invalidProtocolURL='ptth://test.com';

var image={};

var callNowCTA=require('CRMCallToActionTypes').TYPES.CALL_NOW.name;
var getDirectionsCTA=require('CRMCallToActionTypes').TYPES.GET_DIRECTIONS.name;
var validPhoneNumber='+17188516110';
var validAddress='1 hacker way menlo park';

var ctaData={
phoneNumber:validPhoneNumber,
address:validAddress};


var address={
geocode_address_data:{
edges:[
{
node:{
address:'1 Hacker Way',
city:'Menlo Park',
state_name:'California',
country_name:'United States',
postal_code:'94025-1455',
latitude:'37.4835205',
longitude:'-122.1501007'}}]}};






expect(require('CRMNowCreativeUtils').getHeadlineEmptyError()).not.toBe(null);
expect(require('CRMNowCreativeUtils').getHeadlineEmptyError(
require('CRMAPIObjectives').POST_ENGAGEMENT,
'')).
not.toBe(null);
expect(require('CRMNowCreativeUtils').getHeadlineEmptyError(
require('CRMAPIObjectives').PAGE_LIKES,
'')).
toBe(null);
expect(require('CRMNowCreativeUtils').getHeadlineEmptyError(
require('CRMAPIObjectives').POST_ENGAGEMENT,
shortStr)).
toBe(null);
expect(require('CRMNowCreativeUtils').getHeadlineEmptyError(
require('CRMAPIObjectives').PAGE_LIKES,
shortStr)).
toBe(null);
expect(require('CRMNowCreativeUtils').getHeadlineEmptyError(
require('CRMAPIObjectives').POST_ENGAGEMENT,
longStr)).
toBe(null);

expect(require('CRMNowCreativeUtils').getTextEmptyError()).not.toBe(null);
expect(require('CRMNowCreativeUtils').getTextEmptyError('')).not.toBe(null);
expect(require('CRMNowCreativeUtils').getTextEmptyError(shortStr)).toBe(null);
expect(require('CRMNowCreativeUtils').getTextEmptyError(longStr)).toBe(null);

expect(require('CRMNowCreativeUtils').getHeadlineTooLongError()).toBe(null);
expect(require('CRMNowCreativeUtils').getHeadlineTooLongError(
require('CRMAPIObjectives').LOCAL_AWARENESS,
'')).
toBe(null);
expect(require('CRMNowCreativeUtils').getHeadlineTooLongError(
require('CRMAPIObjectives').PAGE_LIKES,
'')).
toBe(null);
expect(require('CRMNowCreativeUtils').getHeadlineTooLongError(
require('CRMAPIObjectives').LOCAL_AWARENESS,
shortStr)).
toBe(null);
expect(require('CRMNowCreativeUtils').getHeadlineTooLongError(
require('CRMAPIObjectives').PAGE_LIKES,
shortStr)).
toBe(null);
expect(require('CRMNowCreativeUtils').getHeadlineTooLongError(
require('CRMAPIObjectives').LOCAL_AWARENESS,
longStr)).
not.toBe(null);

expect(require('CRMNowCreativeUtils').getTextTooLongError()).toBe(null);
expect(require('CRMNowCreativeUtils').getTextTooLongError('')).toBe(null);
expect(require('CRMNowCreativeUtils').getTextTooLongError(shortStr)).toBe(null);
expect(require('CRMNowCreativeUtils').getTextTooLongError(longStr)).not.toBe(null);

expect(require('CRMNowCreativeUtils').getTextPuncStreakError(
require('CRMAPIObjectives').LOCAL_AWARENESS,
shortStr)).
toBe(null);
expect(require('CRMNowCreativeUtils').getTextPuncStreakError(
require('CRMAPIObjectives').LOCAL_AWARENESS,
longStr)).
toBe(null);
expect(require('CRMNowCreativeUtils').getTextPuncStreakError(
require('CRMAPIObjectives').LOCAL_AWARENESS,
puncStreakStr)).
toBe(null);
expect(require('CRMNowCreativeUtils').getTextPuncStreakError(
require('CRMAPIObjectives').LOCAL_AWARENESS,
puncStartStr)).
toBe(null);
expect(require('CRMNowCreativeUtils').getTextPuncStreakError(
require('CRMAPIObjectives').LOCAL_AWARENESS,
validPuncStreakStr)).
toBe(null);

expect(require('CRMNowCreativeUtils').getTextPuncStreakError(
require('CRMAPIObjectives').PAGE_LIKES,
shortStr)).
toBe(null);
expect(require('CRMNowCreativeUtils').getTextPuncStreakError(
require('CRMAPIObjectives').PAGE_LIKES,
longStr)).
toBe(null);
expect(require('CRMNowCreativeUtils').getTextPuncStreakError(
require('CRMAPIObjectives').PAGE_LIKES,
puncStreakStr)).
not.toBe(null);
expect(require('CRMNowCreativeUtils').getTextPuncStreakError(
require('CRMAPIObjectives').PAGE_LIKES,
puncStartStr)).
not.toBe(null);
expect(require('CRMNowCreativeUtils').getTextPuncStreakError(
require('CRMAPIObjectives').PAGE_LIKES,
validPuncStreakStr)).
toBe(null);

expect(require('CRMNowCreativeUtils').getTextBadCharError(
require('CRMAPIObjectives').LOCAL_AWARENESS,
shortStr)).
toBe(null);
expect(require('CRMNowCreativeUtils').getTextBadCharError(
require('CRMAPIObjectives').LOCAL_AWARENESS,
badCharStr)).
toBe(null);
expect(require('CRMNowCreativeUtils').getTextBadCharError(
require('CRMAPIObjectives').LOCAL_AWARENESS,
badCharStr2)).
toBe(null);

expect(require('CRMNowCreativeUtils').getTextBadCharError(
require('CRMAPIObjectives').PAGE_LIKES,
shortStr)).
toBe(null);
expect(require('CRMNowCreativeUtils').getTextBadCharError(
require('CRMAPIObjectives').PAGE_LIKES,
badCharStr)).
not.toBe(null);
expect(require('CRMNowCreativeUtils').getTextBadCharError(
require('CRMAPIObjectives').PAGE_LIKES,
badCharStr2)).
not.toBe(null);

expect(require('CRMNowCreativeUtils').getHeadlineAndTextEmptyError()).not.toBe(null);
expect(require('CRMNowCreativeUtils').getHeadlineAndTextEmptyError(
require('CRMAPIObjectives').POST_ENGAGEMENT,
'',
'')).
not.toBe(null);
expect(require('CRMNowCreativeUtils').getHeadlineAndTextEmptyError(
require('CRMAPIObjectives').PAGE_LIKES,
'',
'')).
not.toBe(null);
expect(require('CRMNowCreativeUtils').getHeadlineAndTextEmptyError(
require('CRMAPIObjectives').POST_ENGAGEMENT,
shortStr,
'')).
not.toBe(null);
expect(require('CRMNowCreativeUtils').getHeadlineAndTextEmptyError(
require('CRMAPIObjectives').POST_ENGAGEMENT,
'',
shortStr)).
not.toBe(null);
expect(require('CRMNowCreativeUtils').getHeadlineAndTextEmptyError(
require('CRMAPIObjectives').PAGE_LIKES,
'',
shortStr)).
toBe(null);
expect(require('CRMNowCreativeUtils').getHeadlineAndTextEmptyError(
require('CRMAPIObjectives').POST_ENGAGEMENT,
shortStr,
shortStr)).
toBe(null);
expect(require('CRMNowCreativeUtils').getHeadlineAndTextEmptyError(
require('CRMAPIObjectives').POST_ENGAGEMENT,
longStr,
longStr)).
toBe(null);
expect(require('CRMNowCreativeUtils').getHeadlineAndTextEmptyError(
require('CRMAPIObjectives').PAGE_LIKES,
longStr,
longStr)).
toBe(null);

expect(require('CRMNowCreativeUtils').getURLEmptyError()).not.toBe(null);
expect(require('CRMNowCreativeUtils').getURLEmptyError('')).not.toBe(null);
expect(require('CRMNowCreativeUtils').getURLEmptyError(url)).toBe(null);
expect(require('CRMNowCreativeUtils').getURLEmptyError(invalidURL)).toBe(null);
expect(require('CRMNowCreativeUtils').getURLEmptyError(fbURL)).toBe(null);
expect(require('CRMNowCreativeUtils').getURLEmptyError(invalidProtocolURL)).toBe(null);

expect(require('CRMNowCreativeUtils').getURLInvalidError(url)).toBe(null);
expect(require('CRMNowCreativeUtils').getURLInvalidError(invalidURL)).not.toBe(null);
expect(require('CRMNowCreativeUtils').getURLInvalidError(fbURL)).not.toBe(null);
expect(require('CRMNowCreativeUtils').getURLInvalidError(invalidProtocolURL)).not.toBe(null);

expect(require('CRMNowCreativeUtils').getURLError()).not.toBe(null);
expect(require('CRMNowCreativeUtils').getURLError('')).not.toBe(null);
expect(require('CRMNowCreativeUtils').getURLError(url)).toBe(null);
expect(require('CRMNowCreativeUtils').getURLError(invalidURL)).not.toBe(null);
expect(require('CRMNowCreativeUtils').getURLError(fbURL)).not.toBe(null);
expect(require('CRMNowCreativeUtils').getURLError(invalidProtocolURL)).not.toBe(null);


mockCRMNowImageUtils(false);
expect(require('CRMNowCreativeUtils').getAdImageError(
image,
require('CRMAPIObjectives').LOCAL_AWARENESS)).
not.toBe(null);


expect(require('CRMNowCreativeUtils').getAdImageError(
image,
require('CRMAPIObjectives').POST_ENGAGEMENT)).
toBe(null);


mockCRMNowImageUtils(true);
expect(require('CRMNowCreativeUtils').getAdImageError(
image,
require('CRMAPIObjectives').LOCAL_AWARENESS)).
toBe(null);

expect(require('CRMNowCreativeUtils').getTextAndLinkErrors(
require('CRMAPIObjectives').POST_ENGAGEMENT,
'',
'',
'').
length).toBe(1);
expect(require('CRMNowCreativeUtils').getTextAndLinkErrors(
require('CRMAPIObjectives').LOCAL_AWARENESS,
'',
'',
'').
length).toBe(1);
expect(require('CRMNowCreativeUtils').getCreativeErrors(
require('CRMAPIObjectives').LOCAL_AWARENESS,
shortStr,
shortStr,
url,
image,
callNowCTA,
ctaData).
length).toBe(0);
expect(require('CRMNowCreativeUtils').getCreativeErrors(
require('CRMAPIObjectives').LOCAL_AWARENESS,
shortStr,
shortStr,
url,
image,
callNowCTA).
length).toBe(1);
expect(require('CRMNowCreativeUtils').getTextAndLinkErrors(
require('CRMAPIObjectives').WEBSITE_CLICKS,
'',
'',
'').
length).toBe(2);

expect(require('CRMNowCreativeUtils').getTextAndLinkErrors(
require('CRMAPIObjectives').WEBSITE_CLICKS,
shortStr,
shortStr,
url).
length).toBe(0);
expect(require('CRMNowCreativeUtils').getTextAndLinkErrors(
require('CRMAPIObjectives').WEBSITE_CLICKS,
longStr,
longStr,
fbURL).
length).toBe(3);


mockCRMNowImageUtils(true);
expect(require('CRMNowCreativeUtils').getCreativeErrors(
require('CRMAPIObjectives').WEBSITE_CLICKS,
shortStr,
shortStr,
url,
image).
length).toBe(0);

mockCRMNowImageUtils(false);
expect(require('CRMNowCreativeUtils').getCreativeErrors(
require('CRMAPIObjectives').WEBSITE_CLICKS,
'',
'',
'',
image).
length).toBe(3);

expect(require('CRMNowCreativeUtils').getPhoneNumberError(validPhoneNumber)).toBe(null);
expect(require('CRMNowCreativeUtils').getPhoneNumberError()).not.toBe(null);

expect(require('CRMNowCreativeUtils').getAddressError(validAddress)).toBe(null);
expect(require('CRMNowCreativeUtils').getAddressError()).not.toBe(null);

expect(require('CRMNowCreativeUtils').getCTAError()).toBe(null);
expect(require('CRMNowCreativeUtils').getCTAError(callNowCTA,ctaData)).toBe(null);
expect(require('CRMNowCreativeUtils').getCTAError(callNowCTA,null)).not.toBe(null);

expect(require('CRMNowCreativeUtils').getCTAError(getDirectionsCTA,ctaData)).toBe(null);
expect(require('CRMNowCreativeUtils').getCTAError(getDirectionsCTA,null)).not.toBe(null);

expect(require('CRMNowCreativeUtils').getLocationURLFromAddress(null)).toBe(null);
expect(require('CRMNowCreativeUtils').getLocationURLFromAddress(address)).not.toBe(null);});


it('should get is image required correctly',function(){
expect(require('CRMNowCreativeUtils').isImageRequiredForObjective(
require('CRMAPIObjectives').POST_ENGAGEMENT)).
toBe(false);
expect(require('CRMNowCreativeUtils').isImageRequiredForObjective(
require('CRMAPIObjectives').LOCAL_AWARENESS)).
toBe(true);
expect(require('CRMNowCreativeUtils').isImageRequiredForObjective(
require('CRMAPIObjectives').WEBSITE_CLICKS)).
toBe(true);
expect(require('CRMNowCreativeUtils').isImageRequiredForObjective(
require('CRMAPIObjectives').PAGE_LIKES)).
toBe(true);});


it('should get image crop sizes',function(){
expect(require('CRMNowCreativeUtils').getImageCropSizeForObjective(
require('CRMAPIObjectives').PAGE_LIKES)).
not.toBe(null);
expect(require('CRMNowCreativeUtils').getImageCropSizeForObjective(
require('CRMAPIObjectives').LOCAL_AWARENESS)).
not.toBe(null);
expect(require('CRMNowCreativeUtils').getMinimumImageCropSizeForObjective(
require('CRMAPIObjectives').PAGE_LIKES)).
not.toBe(null);
expect(require('CRMNowCreativeUtils').getMinimumImageCropSizeForObjective(
require('CRMAPIObjectives').LOCAL_AWARENESS)).
not.toBe(null);});


it('should update image hash correctly',function(){
var mockImageHash='image_hash';
var mockCreativeSpec1={
object_story_spec:{
link_data:{}}};



var spec=require('CRMNowCreativeUtils').updateCreativeSpecWithImageHash(
mockCreativeSpec1,
mockImageHash);


expect(spec).toBe(mockCreativeSpec1);
expect(mockCreativeSpec1.object_story_spec.link_data.image_hash).toEqual(mockImageHash);

var mockCreativeSpec2={};
var spec2=require('CRMNowCreativeUtils').updateCreativeSpecWithImageHash(
mockCreativeSpec2,
mockImageHash);

expect(spec2).toBe(mockCreativeSpec2);
expect(mockCreativeSpec2.image_hash).toEqual(mockImageHash);});});
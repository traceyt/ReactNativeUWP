var 

























TYPES_KEY=require('fbjs/lib/keyOf')({__types:true});






















function mixInEventEmitter(klass,types){
!types?require('fbjs/lib/invariant')(0,'Must supply set of valid event types'):undefined;



var target=klass.prototype||klass;

!!target.__eventEmitter?require('fbjs/lib/invariant')(0,'An active emitter is already mixed in'):undefined;

var ctor=klass.constructor;
if(ctor){
!(
ctor===Object||ctor===Function)?require('fbjs/lib/invariant')(0,
'Mix EventEmitter into a class, not an instance'):undefined;}





if(target.hasOwnProperty(TYPES_KEY)){
require('copyProperties')(target.__types,types);}else 
if(target.__types){
target.__types=require('copyProperties')({},target.__types,types);}else 
{
target.__types=types;}

require('copyProperties')(target,EventEmitterMixin);}


var EventEmitterMixin={
emit:function(eventType,a,b,c,d,e,_){
return this.__getEventEmitter().emit(eventType,a,b,c,d,e,_);},


emitAndHold:function(eventType,a,b,c,d,e,_){
return this.__getEventEmitter().emitAndHold(eventType,a,b,c,d,e,_);},


addListener:function(eventType,listener,context){
return this.__getEventEmitter().addListener(eventType,listener,context);},


once:function(eventType,listener,context){
return this.__getEventEmitter().once(eventType,listener,context);},


addRetroactiveListener:function(eventType,listener,context){
return this.__getEventEmitter().addRetroactiveListener(
eventType,
listener,
context);},



addListenerMap:function(listenerMap,context){
return this.__getEventEmitter().addListenerMap(listenerMap,context);},


addRetroactiveListenerMap:function(listenerMap,context){
return this.__getEventEmitter().addListenerMap(listenerMap,context);},


removeAllListeners:function(){
this.__getEventEmitter().removeAllListeners();},


removeCurrentListener:function(){
this.__getEventEmitter().removeCurrentListener();},


releaseHeldEventType:function(eventType){
this.__getEventEmitter().releaseHeldEventType(eventType);},


__getEventEmitter:function(){
if(!this.__eventEmitter){
var emitter=new (require('EventEmitter'))();
emitter=require('EventValidator').addValidation(emitter,this.__types);

var holder=new (require('EventHolder'))();
this.__eventEmitter=new (require('EventEmitterWithHolding'))(emitter,holder);}

return this.__eventEmitter;}};



module.exports=mixInEventEmitter;
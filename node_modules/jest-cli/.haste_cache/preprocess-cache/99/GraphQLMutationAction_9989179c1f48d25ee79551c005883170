'use strict';var _RelayConnectionInter=require('RelayConnectionInterface');var 



















CLIENT_MUTATION_ID=_RelayConnectionInter.CLIENT_MUTATION_ID;






function _buildQueryParams(params,clientMutationID){
params[CLIENT_MUTATION_ID]=clientMutationID;
if(!('actor_id' in params)){
params.actor_id=require('RelayAPIConfig').actorID;}


return {input:params};}var 











GraphQLMutationAction=function(){




















function GraphQLMutationAction(collisionKey){babelHelpers.classCallCheck(this,GraphQLMutationAction);
this.$GraphQLMutationAction_clientMutationID=require('ClientIDs').getNewClientID();
this.$GraphQLMutationAction_collisionKey=collisionKey;}babelHelpers.createClass(GraphQLMutationAction,[{key:'runOptimisticAction',value:function runOptimisticAction(















payload,query){
var type=require('GraphQLMutationDataHandler').getMutationType(payload);
payload[type][CLIENT_MUTATION_ID]=this.$GraphQLMutationAction_clientMutationID;

if(!query){
query=require('GraphQLMutationQueryCreator').createQueryFromOptimisticPayload(
payload);}



this.$GraphQLMutationAction_optimisticPayload=payload;
this.$GraphQLMutationAction_optimisticPayloadQuery=query;

require('GraphQLStore').handleOptimisticMutation(this);}},{key:'runServerAction',value:function runServerAction(




















mutation,queryParams,callback){
this.$GraphQLMutationAction_mutation=mutation;
this.$GraphQLMutationAction_queryParams=_buildQueryParams(queryParams,this.$GraphQLMutationAction_clientMutationID);
this.$GraphQLMutationAction_callback=callback;
this.$GraphQLMutationAction_runServerAction();}},{key:'runServerActionWithFiles',value:function runServerActionWithFiles(










mutation,queryParams,files,callback){
this.$GraphQLMutationAction_mutation=mutation;
this.$GraphQLMutationAction_queryParams=_buildQueryParams(queryParams,this.$GraphQLMutationAction_clientMutationID);
this.$GraphQLMutationAction_files=files;
this.$GraphQLMutationAction_callback=callback;
this.$GraphQLMutationAction_runServerAction();}},{key:'$GraphQLMutationAction_runServerAction',value:function $GraphQLMutationAction_runServerAction()


{
var shouldSendImmediately=true;
if(this.$GraphQLMutationAction_collisionKey){
var key=this.$GraphQLMutationAction_collisionKey;
if(!require('ActionCollisionMap').hasPendingActionForKey(key)){


require('ActionCollisionMap').appendActionForKey(key,this);}else 
{
var inMap=require('ActionCollisionMap').existsInMap(this.$GraphQLMutationAction_clientMutationID);
if(inMap){



var firstAction=require('ActionCollisionMap').getFirstActionForKey(key);
!(
firstAction.getClientMutationID()===this.$GraphQLMutationAction_clientMutationID)?require('invariant')(0,
'action should be first for its key'):undefined;}else 



{


require('ActionCollisionMap').appendActionForKey(key,this);
shouldSendImmediately=false;}}}



if(shouldSendImmediately){
if(this.$GraphQLMutationAction_files){
require('RQLMutation').sendWithFiles(
this.$GraphQLMutationAction_mutation,
this.$GraphQLMutationAction_queryParams,
this.$GraphQLMutationAction_files,
this.$GraphQLMutationAction_callback);}else 

{
require('RQLMutation').send(this.$GraphQLMutationAction_mutation,this.$GraphQLMutationAction_queryParams,this.$GraphQLMutationAction_callback);}}}},{key:'rerunServerAction',value:function rerunServerAction()














{
!(
this.$GraphQLMutationAction_mutation&&this.$GraphQLMutationAction_queryParams)?require('invariant')(0,
'cannot redo server update without doing it the first time'):undefined;


this.$GraphQLMutationAction_runServerAction();}},{key:'getClientMutationID',value:function getClientMutationID()





{
return this.$GraphQLMutationAction_clientMutationID;}},{key:'getOptimisticPayload',value:function getOptimisticPayload()


{
return this.$GraphQLMutationAction_optimisticPayload;}},{key:'getOptimisticPayloadQuery',value:function getOptimisticPayloadQuery()


{
return this.$GraphQLMutationAction_optimisticPayloadQuery;}}]);return GraphQLMutationAction;}();



module.exports=GraphQLMutationAction;
'use strict';
















var RelayTestUtils={



containsNode:function(query,target){
function find(node){
if(node.equals(target)){
return true;}

var children=node.getChildren();
return children.length>0&&children.some(find);}

return find(query);},


createRenderer:function(container){
var React=require('React');
var ReactDOM=require('ReactDOM');
var RelayEnvironment=require('RelayEnvironment');
var RelayPropTypes=require('RelayPropTypes');
var RelayRoute=require('RelayRoute');
var invariant=require('invariant');var 

ContextSetter=function(_React$Component){babelHelpers.inherits(ContextSetter,_React$Component);function ContextSetter(){babelHelpers.classCallCheck(this,ContextSetter);return babelHelpers.possibleConstructorReturn(this,Object.getPrototypeOf(ContextSetter).apply(this,arguments));}babelHelpers.createClass(ContextSetter,[{key:'getChildContext',value:function getChildContext()
{
return this.props.context;}},{key:'render',value:function render()

{
return this.props.render();}}]);return ContextSetter;}(React.Component);


ContextSetter.childContextTypes={
relay:RelayPropTypes.Environment,
route:RelayPropTypes.QueryConfig.isRequired};var 


MockPointer=
function MockPointer(dataID){babelHelpers.classCallCheck(this,MockPointer);
this.dataID=dataID;};



container=container||document.createElement('div');

return {
render:function(render,relay,route){
!(
relay==null||relay instanceof RelayEnvironment)?invariant(0,
'render(): Expected an instance of `RelayEnvironment`.'):undefined;

relay=relay||new RelayEnvironment();
route=route||RelayRoute.genMockInstance();

var result=undefined;
function ref(component){
result=component;}

ReactDOM.render(
React.createElement(ContextSetter,{
context:{relay:relay,route:route},
render:function(){
var element=render(function(dataID){return new MockPointer(dataID);});
var pointers={};
for(var propName in element.props){
var propValue=element.props[propName];
if(propValue instanceof MockPointer){
var fragmentReference=element.type.getFragment(propName);
if(fragmentReference==null){
throw new Error(
'Query not found, `'+element.type.displayName+'.'+
propName+'`.');}


pointers[propName]=RelayTestUtils.getPointer(
propValue.dataID,
RelayTestUtils.getNode(fragmentReference.getFragment({})));}}



return React.cloneElement(element,babelHelpers.extends({},pointers,{ref:ref}));}}),


container);

return result;}};},




conditionOnType:function(fragment){
var QueryBuilder=require('QueryBuilder');
var RelayFragmentReference=require('RelayFragmentReference');
var invariant=require('invariant');

!
!!QueryBuilder.getFragment(fragment)?invariant(0,
'conditionOnType(): Argument must be a GraphQL.QueryFragment.'):undefined;

var reference=new RelayFragmentReference(
function(){return fragment;},
{});

reference.conditionOnType();
return reference;},


createCall:function(name,value){
var QueryBuilder=require('QueryBuilder');

if(Array.isArray(value)){
value=value.map(QueryBuilder.createCallValue);}else 
if(value!=null){
value=QueryBuilder.createCallValue(value);}

return QueryBuilder.createCall(name,value);},


createContainerFragment:function(fragment){
var RelayFragmentReference=require('RelayFragmentReference');
return RelayFragmentReference.createForContainer(
function(){return fragment;},
{});},



defer:function(fragment){
var QueryBuilder=require('QueryBuilder');
var RelayFragmentReference=require('RelayFragmentReference');
var invariant=require('invariant');

!
!!QueryBuilder.getFragment(fragment)?invariant(0,
'defer(): Argument must be a GraphQL.QueryFragment.'):undefined;

var reference=new RelayFragmentReference(
function(){return fragment;},
{});

reference.defer();
return reference;},


getNode:function(node,variables){
var RelayMetaRoute=require('RelayMetaRoute');
var RelayQuery=require('RelayQuery');

var route=RelayMetaRoute.get('$RelayTestUtils');
return RelayQuery.Node.create(node,route,variables||{});},


getPointer:function(dataID,fragment){
var RelayFragmentPointer=require('RelayFragmentPointer');
var RelayQuery=require('RelayQuery');
var invariant=require('invariant');

!(
fragment instanceof RelayQuery.Fragment)?invariant(0,
'getPointer(): expected a `RelayQueryFragment`, got `%s`.',
fragment.constructor.name):undefined;


return RelayFragmentPointer.create(dataID,fragment);},







getRefNode:function(node,refParam){
var QueryBuilder=require('QueryBuilder');
var RelayQuery=require('RelayQuery');
var RelayMetaRoute=require('RelayMetaRoute');

var invariant=require('invariant');

!(
node.fieldName==='nodes')?invariant(0,
'getRefNode(): Ref queries require `nodes()` roots.'):undefined;

var callValue=Array.isArray(node.calls[0].value)?
node.calls[0].value[0]:
node.calls[0].value;
!
!!QueryBuilder.getCallVariable(callValue)?invariant(0,
'getRefNode(): Expected a batch call variable, got `%s`.',
JSON.stringify(callValue)):undefined;

var name=callValue.callVariableName;
var match=name.match(/^ref_(q\d+)$/);
!
match?invariant(0,
'getRefNode(): Expected call variable of the form `<ref_q\\d+>`.'):undefined;


var id=match[1];

var variables=babelHelpers.defineProperty({},name,'<'+callValue.callVariableName+'>');

return RelayQuery.Root.create(babelHelpers.extends({},

node,{
calls:[QueryBuilder.createCall(
'id',
QueryBuilder.createBatchCallVariable(id,refParam.path))],

isDeferred:true}),

RelayMetaRoute.get('$RelayTestUtils'),
variables);},



getVerbatimNode:function(node,variables){
return RelayTestUtils.filterGeneratedFields(
RelayTestUtils.getNode(node,variables));},



filterGeneratedFields:function(query){
var RelayQuery=require('RelayQuery');
var filterRelayQuery=require('filterRelayQuery');

return filterRelayQuery(
query,
function(node){return !(node instanceof RelayQuery.Field&&node.isGenerated());});},



matchers:{




toBeQueryRoot:function(){
return {
compare:function(actual,expected){
var RelayQuery=require('RelayQuery');
var queryType=checkQueryType(actual,expected,RelayQuery.Root);
if(!queryType.pass){
return queryType;}

return checkQueryEquality(actual,expected,true);}};},


























toBeWarnedNTimes:function(){
return {
compare:function(actual,expectedCount){
var warning=require('warning');
if(!warning.mock){
throw new Error(
'expect(...).toBeWarnedNTimes(): Requires '+
'`jest.mock(\'warning\');`.');}


var expectedArgs=actual;
if(!Array.isArray(expectedArgs)){
throw new Error(
'expect(...).toBeWarnedNTimes(): Requires an array of '+
'warning args.');}var _expectedArgs=babelHelpers.toArray(


expectedArgs);var format=_expectedArgs[0];var values=_expectedArgs.slice(1);
if(!format){
throw new Error(
'expect(...).toBeWarnedNTimes(): Requires a format string.');}



var callsWithExpectedFormatButArgs=[];
var callsWithExpectedArgs=warning.mock.calls.filter(function(args){
if(args[0]||
args[1]!==format){
return false;}

if(values.some(function(value,ii){return value!==args[ii+2];})){
callsWithExpectedFormatButArgs.push(args.slice(1));
return false;}

return true;});


var message=
'Expected to warn '+expectedCount+' time'+(
expectedCount===1?'':'s')+' with arguments: '+
JSON.stringify(expectedArgs)+'.';
var unexpectedCount=callsWithExpectedFormatButArgs.length;
if(unexpectedCount){
message+=' Instead, called '+unexpectedCount+
' time'+(unexpectedCount===1?'':'s')+' with arguments: '+
JSON.stringify(callsWithExpectedFormatButArgs)+'.';}


return {
pass:callsWithExpectedArgs.length===expectedCount,
message:message};}};},








toContainQueryNode:function(){
return {
compare:function(actual,expected){
if(!RelayTestUtils.containsNode(actual,expected)){
return {
pass:false,
message:printQueryComparison(
actual,
expected,
'to contain query node')};}



return {
pass:true};}};},





toEqualPrintedQuery:function(){
return {
compare:function(actual,expected){
var minifiedActual=RelayTestUtils.minifyQueryText(actual);
var minifiedExpected=RelayTestUtils.minifyQueryText(expected);

if(minifiedActual!==minifiedExpected){
return {
pass:false,
message:[
minifiedActual,
'to equal',
minifiedExpected].
join('\n')};}


return {
pass:true};}};},








toEqualQueryNode:function(){
return {
compare:function(actual,expected){
var RelayQuery=require('RelayQuery');
var queryType=checkQueryType(actual,expected,RelayQuery.Node);
if(!queryType.pass){
return queryType;}

return checkQueryEquality(actual,expected,false);}};},







toEqualQueryRoot:function(){
return {
compare:function(actual,expected){
var RelayQuery=require('RelayQuery');
var queryType=checkQueryType(actual,expected,RelayQuery.Root);
if(!queryType.pass){
return queryType;}

return checkQueryEquality(actual,expected,false);}};},




toFailInvariant:function(){
return {
compare:function(actual,expected){
expect(actual).toThrowError(expected);
return {
pass:true};}};},









toMatchPath:function(){
return {
compare:function(actual,expected){
var QueryBuilder=require('QueryBuilder');
var RelayMetaRoute=require('RelayMetaRoute');
var RelayNodeInterface=require('RelayNodeInterface');
var RelayQuery=require('RelayQuery');
var RelayQueryPath=require('RelayQueryPath');

var invariant=require('invariant');
var printRelayQuery=require('printRelayQuery');

var fragment=RelayQuery.Fragment.create(
QueryBuilder.createFragment({
children:[QueryBuilder.createField({
fieldName:'__test__'})],

name:'Test',
type:'Node'}),

RelayMetaRoute.get('$RelayTestUtils'),
{});

var mockStore={
getDataID:function(fieldName,identifyingArgValue){
!(
fieldName===RelayNodeInterface.NODE)?invariant(0,
'RelayTestUtils: Cannot `getDataID` for non-node root call '+
'`%s` with identifying argument `%s`.',
fieldName,
identifyingArgValue):undefined;

return identifyingArgValue;},

getType:function(){
return RelayNodeInterface.ANY_TYPE;}};



var actualQuery=
RelayQueryPath.getQuery(mockStore,actual,fragment);
var expectedQuery=
RelayQueryPath.getQuery(mockStore,expected,fragment);

if(!actualQuery.equals(expectedQuery)){
return {
pass:false,
message:[
'Expected:',
'  '+printRelayQuery(actualQuery).text,
'\ntoMatchPath:',
'  '+printRelayQuery(expectedQuery).text].
filter(function(token){return token;}).join('\n')};}


return {
pass:true};}};}},









minifyQueryText:function(queryText){
return queryText.
replace(/\n+/g,' ').
replace(/\s+/g,' ').
replace(/\s*([\{\}\(\):,])\s*/g,'$1').
trim();},








writePayload:function(store,writer,query,payload,tracker,options){
var transformRelayQueryPayload=require('transformRelayQueryPayload');

return RelayTestUtils.writeVerbatimPayload(
store,
writer,
query,
transformRelayQueryPayload(query,payload),
tracker,
options);},







writeVerbatimPayload:function(store,writer,query,payload,tracker,options){
var RelayChangeTracker=require('RelayChangeTracker');
var RelayQueryTracker=require('RelayQueryTracker');
var RelayQueryWriter=require('RelayQueryWriter');
var writeRelayQueryPayload=require('writeRelayQueryPayload');

tracker=tracker||new RelayQueryTracker();
options=options||{};
var changeTracker=new RelayChangeTracker();
var queryWriter=new RelayQueryWriter(
store,
writer,
tracker,
changeTracker,
options);

writeRelayQueryPayload(
queryWriter,
query,
payload);

return changeTracker.getChangeSet();}};






function checkQueryType(actual,expected,ExpectedClass){
var expectedType=ExpectedClass.name;
if(!(expected&&expected instanceof ExpectedClass)){
throw new Error('expect(...): Requires a `'+expectedType+'`.');}

if(!(actual instanceof ExpectedClass)){
var actualType=actual;
if(actual&&actual.constructor){
actualType=actual.constructor.name;}

return {
pass:false,
message:'Expected a `'+expectedType+'`, got `'+actualType+'`.'};}


return {
pass:true};}






function checkQueryEquality(actual,expected,toBe){
var flatActual=sortRelayQuery(actual);
var flatExpected=sortRelayQuery(expected);

if(toBe?actual!==expected:!flatActual.equals(flatExpected)){
return {
pass:false,
message:printQueryComparison(
actual,
expected,
toBe?'to be query':'to equal query')};}




return {
pass:true};}






function printQueryComparison(actual,expected,message){
var printRelayQuery=require('printRelayQuery');

var formatRefParam=function(node){return node.hasRefParam&&node.hasRefParam()?
'  [ref param: '+JSON.stringify(node.getRefParam())+']':
null;};

return [
'Expected:',
'  '+printRelayQuery(actual).text,
formatRefParam(actual),
message+':',
'  '+printRelayQuery(expected).text,
formatRefParam(expected)].
filter(function(line){return !!line;}).join('\n');}







var concreteFragmentSortKeys=new (require('Map'))();
function createFragmentSortKey(node){
var stableStringify=require('stableStringify');
var concreteNode=node.__concreteNode__;
if(!concreteFragmentSortKeys.has(concreteNode)){
concreteFragmentSortKeys.set(concreteNode,concreteFragmentSortKeys.size);}

return [
concreteFragmentSortKeys.get(concreteNode),
node.getRoute().name,
stableStringify(node.getVariables())].
join('.');}





function sortRelayQuery(node){
var RelayQuery=require('RelayQuery');

function getSortableKey(maybeFragment){
return maybeFragment instanceof RelayQuery.Fragment?
createFragmentSortKey(maybeFragment):
maybeFragment.getShallowHash();}

function compare(a,b){
if(a===b){
return 0;}else 
if(a<b){
return -1;}else 
{
return 1;}}



return node.clone(node.getChildren().sort(function(a,b){
var aKey=getSortableKey(a);
var bKey=getSortableKey(b);
return compare(aKey,bKey);}).
map(sortRelayQuery));}


module.exports=RelayTestUtils;
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails oncall+relay
 */

'use strict';

require('configureForRelayOSS');






describe('intersectRelayQuery', function () {var 
  getNode = require('RelayTestUtils').getNode;

  beforeEach(function () {
    jasmine.addMatchers(require('RelayTestUtils').matchers);});


  describe('fields', function () {
    it('returns null for mutually exclusive nodes', function () {
      var subjectNode = getNode((function () {return { children: [{ fieldName: 'day', kind: 'Field', metadata: {}, type: 'Int' }, { fieldName: 'month', kind: 'Field', metadata: {}, type: 'Int' }], id: 'KMOFr9JYH8DC:0', kind: 'Fragment', metadata: {}, name: 'IntersectRelayQueryRelayQL', type: 'Date' };})());





      var patternNode = getNode((function () {return { children: [{ fieldName: 'year', kind: 'Field', metadata: {}, type: 'Int' }], id: '4qFLIu2yOFfx:0', kind: 'Fragment', metadata: {}, name: 'IntersectRelayQueryRelayQL', type: 'Date' };})());




      expect(require('intersectRelayQuery')(subjectNode, patternNode)).toBe(null);});


    it('intersects shallow fields', function () {
      var subjectNode = getNode((function () {return { children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'firstName', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'o2vEQnT1wqbV:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'IntersectRelayQueryRelayQL', type: 'Actor' };})());





      var patternNode = getNode((function () {return { children: [{ fieldName: 'lastName', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'plSOisZ0ob1b:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'IntersectRelayQueryRelayQL', type: 'Actor' };})());





      var expected = getNode((function () {return { children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'Wxn8A8vbNNAS:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'IntersectRelayQueryRelayQL', type: 'Actor' };})());




      expect(
      require('intersectRelayQuery')(subjectNode, patternNode)).
      toEqualQueryNode(expected);});


    it('intersects nested fields', function () {
      var subjectNode = getNode((function () {return { children: [{ children: [{ fieldName: 'day', kind: 'Field', metadata: {}, type: 'Int' }, { fieldName: 'month', kind: 'Field', metadata: {}, type: 'Int' }, { fieldName: 'year', kind: 'Field', metadata: {}, type: 'Int' }], fieldName: 'birthdate', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Date' }, { children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'url', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'hometown', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Page' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: '80WySYyANpGH:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'IntersectRelayQueryRelayQL', type: 'Actor' };})());












      var patternNode = getNode((function () {return { children: [{ children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'hometown', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Page' }, { children: [{ fieldName: 'service', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'screennames', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'Screenname' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: '47wZ2LIfdrqR:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'IntersectRelayQueryRelayQL', type: 'Actor' };})());









      var expected = getNode((function () {return { children: [{ children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'hometown', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Page' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: '74cURfl2I/AL:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'IntersectRelayQueryRelayQL', type: 'Actor' };})());






      expect(
      require('intersectRelayQuery')(subjectNode, patternNode)).
      toEqualQueryNode(expected);});


    it('includes fields with different arguments', function () {
      var subjectNode = getNode((function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { calls: [{ kind: 'Call', metadata: {}, name: 'site', value: { kind: 'CallValue', callValue: 'www' } }], fieldName: 'url', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'NpwLnoCeTaJI:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'IntersectRelayQueryRelayQL', type: 'Actor' };})());





      var patternNode = getNode((function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: 'url', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'HAEyWukpxYc+:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'IntersectRelayQueryRelayQL', type: 'Actor' };})());





      var expected = getNode((function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { calls: [{ kind: 'Call', metadata: {}, name: 'site', value: { kind: 'CallValue', callValue: 'www' } }], fieldName: 'url', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: '3RW1reE4zcKi:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'IntersectRelayQueryRelayQL', type: 'Actor' };})());





      expect(
      require('intersectRelayQuery')(subjectNode, patternNode)).
      toEqualQueryNode(expected);});


    it('intersects aliased fields by storage key', function () {
      var subjectNode = getNode((function () {return { children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'firstName', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: '2Jg+ggKTiEnT:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'IntersectRelayQueryRelayQL', type: 'Actor' };})());





      var patternNode = getNode((function () {return { children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { alias: 'name', fieldName: 'firstName', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'C5xsDKc+3FeF:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'IntersectRelayQueryRelayQL', type: 'Actor' };})());





      var expected = getNode((function () {return { children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'firstName', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'zNR7dS+3uU48:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'IntersectRelayQueryRelayQL', type: 'Actor' };})());





      expect(
      require('intersectRelayQuery')(subjectNode, patternNode)).
      toEqualQueryNode(expected);});


    it('includes all fields of fields without sub-fields', function () {
      var subjectNode = getNode((function () {return { children: [{ children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'url', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'hometown', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Page' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: '5ig1D81Wz9Vt:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'IntersectRelayQueryRelayQL', type: 'Actor' };})());







      var patternNode = getNode((function () {return { children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'hometown', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Page' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'sxzQ0qpW+OSY:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'IntersectRelayQueryRelayQL', type: 'Actor' };})());




      var expected = getNode((function () {return { children: [{ children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'url', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'hometown', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Page' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'xDOSKBb7jnbX:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'IntersectRelayQueryRelayQL', type: 'Actor' };})());







      expect(
      require('intersectRelayQuery')(subjectNode, patternNode)).
      toEqualQueryNode(expected);});});



  describe('ranges', function () {
    it('includes range fields for connections without sub-fields', function () {
      var subjectNode = getNode((function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallValue', callValue: '10' } }], children: [{ children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'User' }, { fieldName: 'cursor', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'FriendsEdge' }, { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true, isGenerated: true, isRequisite: true }, type: 'PageInfo' }], fieldName: 'friends', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'FriendsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'cbM/7sxLU9/B:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'IntersectRelayQueryRelayQL', type: 'Actor' };})());











      var patternNode = getNode((function () {return { children: [{ fieldName: 'friends', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'FriendsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'gJN9J7Cj73C1:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'IntersectRelayQueryRelayQL', type: 'Actor' };})());




      var expected = getNode((function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallValue', callValue: '10' } }], children: [{ children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'User' }, { fieldName: 'cursor', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'FriendsEdge' }, { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true, isGenerated: true, isRequisite: true }, type: 'PageInfo' }], fieldName: 'friends', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'FriendsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'oyjJyI5NAAvO:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'IntersectRelayQueryRelayQL', type: 'Actor' };})());











      expect(
      require('intersectRelayQuery')(subjectNode, patternNode)).
      toEqualQueryNode(expected);});


    it('includes non-range connection fields', function () {
      var subjectNode = getNode((function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallValue', callValue: '10' } }], children: [{ fieldName: 'count', kind: 'Field', metadata: {}, type: 'Int' }, { children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: 'friends', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'FriendsConnection' }, { fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'User' }, { fieldName: 'cursor', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'FriendsEdge' }, { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true, isGenerated: true, isRequisite: true }, type: 'PageInfo' }], fieldName: 'friends', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'FriendsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: '6RNymMiT/J1k:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'IntersectRelayQueryRelayQL', type: 'Actor' };})());













      var patternNode = getNode((function () {return { children: [{ children: [{ fieldName: 'count', kind: 'Field', metadata: {}, type: 'Int' }], fieldName: 'friends', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'FriendsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'TrAI0RlBFZSJ:0', kind: 'Fragment', metadata: { pattern: true, isAbstract: true }, name: 'IntersectRelayQueryRelayQL', type: 'Actor' };})());






      var expected = getNode((function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallValue', callValue: '10' } }], children: [{ fieldName: 'count', kind: 'Field', metadata: {}, type: 'Int' }], fieldName: 'friends', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'FriendsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'JW/6g9Bxshbp:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'IntersectRelayQueryRelayQL', type: 'Actor' };})());






      expect(
      require('intersectRelayQuery')(subjectNode, patternNode)).
      toEqualQueryNode(expected);});


    it('excludes filtered unterminated ranges', function () {
      var subjectNode = getNode((function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallValue', callValue: '10' } }], children: [{ fieldName: 'count', kind: 'Field', metadata: {}, type: 'Int' }, { children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'User' }, { fieldName: 'cursor', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'FriendsEdge' }, { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true, isGenerated: true, isRequisite: true }, type: 'PageInfo' }], fieldName: 'friends', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'FriendsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'ctnkisC4Jr5p:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'IntersectRelayQueryRelayQL', type: 'Actor' };})());












      var patternNode = getNode((function () {return { children: [{ fieldName: 'friends', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'FriendsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'hcqm98ZLGvky:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'IntersectRelayQueryRelayQL', type: 'Actor' };})());




      var expected = getNode((function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallValue', callValue: '10' } }], children: [{ fieldName: 'count', kind: 'Field', metadata: {}, type: 'Int' }], fieldName: 'friends', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'FriendsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'zo48BBtcnvM+:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'IntersectRelayQueryRelayQL', type: 'Actor' };})());






      var filterUnterminatedRange = function (node) {
        return node.getSchemaName() === 'friends';};

      expect(
      require('intersectRelayQuery')(subjectNode, patternNode, filterUnterminatedRange)).
      toEqualQueryNode(expected);});


    it('excludes filtered unterminated ranges with different arguments', function () {
      var subjectNode = getNode((function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'orderby', value: { kind: 'CallValue', callValue: 'name' } }, { kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallValue', callValue: '10' } }], children: [{ fieldName: 'count', kind: 'Field', metadata: {}, type: 'Int' }, { children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'User' }, { fieldName: 'cursor', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'FriendsEdge' }, { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true, isGenerated: true, isRequisite: true }, type: 'PageInfo' }], fieldName: 'friends', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'FriendsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'eMOSY8ORR5O/:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'IntersectRelayQueryRelayQL', type: 'Actor' };})());












      var patternNode = getNode((function () {return { children: [{ fieldName: 'friends', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'FriendsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'Mu1+CQNmkpLR:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'IntersectRelayQueryRelayQL', type: 'Actor' };})());




      var expected = getNode((function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'orderby', value: { kind: 'CallValue', callValue: 'name' } }, { kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallValue', callValue: '10' } }], children: [{ fieldName: 'count', kind: 'Field', metadata: {}, type: 'Int' }], fieldName: 'friends', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'FriendsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'Xk064s5fBzDN:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'IntersectRelayQueryRelayQL', type: 'Actor' };})());






      var filterUnterminatedRange = function (node) {
        return node.getSchemaName() === 'friends';};

      expect(
      require('intersectRelayQuery')(subjectNode, patternNode, filterUnterminatedRange)).
      toEqualQueryNode(expected);});


    it('does not exclude ranges from connections with sub-fields', function () {
      var subjectNode = getNode((function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallValue', callValue: '10' } }], children: [{ fieldName: 'count', kind: 'Field', metadata: {}, type: 'Int' }, { children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'User' }, { fieldName: 'cursor', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'FriendsEdge' }, { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true, isGenerated: true, isRequisite: true }, type: 'PageInfo' }], fieldName: 'friends', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'FriendsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'ZqhoSDNuWqM3:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'IntersectRelayQueryRelayQL', type: 'Actor' };})());












      var patternNode = getNode((function () {return { children: [{ children: [{ fieldName: 'count', kind: 'Field', metadata: {}, type: 'Int' }, { children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'User' }, { fieldName: 'cursor', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'FriendsEdge' }, { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true, isGenerated: true, isRequisite: true }, type: 'PageInfo' }], fieldName: 'friends', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'FriendsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: '1PvoyHd38FPx:0', kind: 'Fragment', metadata: { pattern: true, isAbstract: true }, name: 'IntersectRelayQueryRelayQL', type: 'Actor' };})());












      var expected = getNode((function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallValue', callValue: '10' } }], children: [{ fieldName: 'count', kind: 'Field', metadata: {}, type: 'Int' }, { children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'User' }, { fieldName: 'cursor', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'FriendsEdge' }, { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true, isGenerated: true, isRequisite: true }, type: 'PageInfo' }], fieldName: 'friends', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'FriendsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'FcSG9Sz2noo4:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'IntersectRelayQueryRelayQL', type: 'Actor' };})());












      var filterUnterminatedRange = jest.genMockFunction();
      expect(
      require('intersectRelayQuery')(subjectNode, patternNode, filterUnterminatedRange)).
      toEqualQueryNode(expected);
      expect(filterUnterminatedRange).not.toBeCalled();});});});
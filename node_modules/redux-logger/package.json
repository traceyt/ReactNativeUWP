{
  "_args": [
    [
      "redux-logger@https://registry.npmjs.org/redux-logger/-/redux-logger-2.5.2.tgz",
      "C:\\gitRepo\\f8app"
    ]
  ],
  "_from": "redux-logger@>=2.5.0 <2.6.0",
  "_id": "redux-logger@2.5.2",
  "_inCache": true,
  "_location": "/redux-logger",
  "_phantomChildren": {},
  "_requested": {
    "name": "redux-logger",
    "raw": "redux-logger@https://registry.npmjs.org/redux-logger/-/redux-logger-2.5.2.tgz",
    "rawSpec": "https://registry.npmjs.org/redux-logger/-/redux-logger-2.5.2.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/redux-logger/-/redux-logger-2.5.2.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/redux-logger/-/redux-logger-2.5.2.tgz",
  "_shasum": "7831a6dbad6fb8b9a523585aca03812f29285ab8",
  "_shrinkwrap": null,
  "_spec": "redux-logger@https://registry.npmjs.org/redux-logger/-/redux-logger-2.5.2.tgz",
  "_where": "C:\\gitRepo\\f8app",
  "author": {
    "name": "Eugene Rodionov",
    "url": "https://github.com/theaqua"
  },
  "bugs": {
    "url": "https://github.com/fcomb/redux-logger/issues"
  },
  "dependencies": {},
  "description": "Logger for redux",
  "devDependencies": {
    "@dtrussia/eslint-config-dtrussia": "1.0.3",
    "babel-cli": "6.3.13",
    "babel-core": "6.3.13",
    "babel-loader": "6.2.0",
    "babel-plugin-add-module-exports": "0.1.1",
    "babel-preset-es2015": "6.3.13",
    "babel-preset-react": "6.3.13",
    "babel-preset-stage-0": "6.3.13",
    "rimraf": "2.4.4",
    "webpack": "1.12.9"
  },
  "files": [
    "dist",
    "lib",
    "src"
  ],
  "homepage": "https://github.com/fcomb/redux-logger#readme",
  "keywords": [
    "redux",
    "logger",
    "redux-logger",
    "redux",
    "middleware"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "name": "redux-logger",
  "optionalDependencies": {},
  "readme": "# Logger for Redux\n[![Build Status](https://travis-ci.org/fcomb/redux-logger.svg?branch=master)](https://travis-ci.org/fcomb/redux-logger)\n\n![redux-logger](http://i.imgur.com/pMR3OAv.png)\n\n## Install\n`npm i --save redux-logger`\n\n## Usage\n```javascript\nimport { applyMiddleware, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport promise from 'redux-promise';\nimport createLogger from 'redux-logger';\n\nconst logger = createLogger();\nconst store = createStore(\n  reducer,\n  applyMiddleware(thunk, promise, logger)\n);\n\n// Note passing middleware as the third argument requires redux@>=3.1.0\n```\nLogger **must be** last middleware in chain, otherwise it will log thunk and promise, not actual actions ([#20](https://github.com/fcomb/redux-logger/issues/20)).\n\n## API\n\n`redux-logger` exposes single constructor function for creating logger middleware.  \n\n```\ncreateLogger(options?: Object) => LoggerMiddleware\n```\n\n### Options\n```js\n{\n  level = 'log': 'log' | 'console' | 'warn' | 'error' | 'info', // console's level\n  duration = false: Boolean, // Print the duration of each action?\n  timestamp = true: Boolean, // Print the timestamp with each action?\n  colors: ColorsObject, // Object with color getters. See the ColorsObject interface.\n  logger = window.console: LoggerObject, // Implementation of the `console` API.\n  logErrors = true: Boolean, // Should the logger catch, log, and re-throw errors?\n  collapsed, // Takes a boolean or optionally a function that receives `getState` function for accessing current store state and `action` object as parameters. Returns `true` if the log group should be collapsed, `false` otherwise.\n  predicate, // If specified this function will be called before each action is processed with this middleware.\n  stateTransformer, // Transform state before print. Eg. convert Immutable object to plain JSON.\n  actionTransformer, // Transform state before print. Eg. convert Immutable object to plain JSON.\n  errorTransformer // Transform state before print. Eg. convert Immutable object to plain JSON.\n}\n```\n\n### Options\n\n#### __level (String)__\nLevel of `console`. `warn`, `error`, `info` or [else](https://developer.mozilla.org/en/docs/Web/API/console).\n\n*Default: `log`*\n\n#### __duration (Boolean)__\nPrint duration of each action?\n\n*Default: `false`*\n\n#### __timestamp (Boolean)__\nPrint timestamp with each action?\n\n*Default: `true`*\n\n#### __colors (Object)__\nObject with color getter functions: `title`, `prevState`, `action`, `nextState`, `error`. Useful if you want to paint\nmessage based on specific state or action. Set any of them to `false` if you want to show plain message without colors.\n\n* `title(action: Object) => color: String`\n* `prevState(prevState: Object) => color: String`\n* `action(action: Object) => color: String`\n* `nextState(nextState: Object) => color: String`\n* `error(error: Any, prevState: Object) => color: String`\n\n#### __logger (Object)__\nImplementation of the `console` API. Useful if you are using a custom, wrapped version of `console`.\n\n*Default: `window.console`*\n\n#### __logErrors (Boolean)__\nShould the logger catch, log, and re-throw errors? This makes it clear which action triggered the error but makes \"break\non error\" in dev tools harder to use, as it breaks on re-throw rather than the original throw location.\n\n*Default: `true`*\n\n#### __collapsed = (getState: Function, action: Object) => Boolean__\nTakes a boolean or optionally a function that receives `getState` function for accessing current store state and `action` object as parameters. Returns `true` if the log group should be collapsed, `false` otherwise.\n\n*Default: `false`*\n\n#### __predicate = (getState: Function, action: Object) => Boolean__\nIf specified this function will be called before each action is processed with this middleware.\nReceives `getState` function for  accessing current store state and `action` object as parameters. Returns `true` if action should be logged, `false` otherwise.\n\n*Default: `null` (always log)*\n\n#### __stateTransformer = (state: Object) => state__\nTransform state before print. Eg. convert Immutable object to plain JSON.\n\n*Default: identity function*\n\n#### __actionTransformer = (action: Object) => action__\nTransform action before print. Eg. convert Immutable object to plain JSON.\n\n*Default: identity function*\n\n#### __errorTransformer = (error: Any) => error__\nTransform error before print.\n\n*Default: identity function*\n\n### Recipes\n#### log only in dev mode\n```javascript\nimport thunk from 'redux-thunk';\n\nconst middlewares = [thunk];\n\nif (process.env.NODE_ENV === `development`) {\n  const createLogger = require(`redux-logger`);\n  const logger = createLogger();\n  middlewares.push(logger);\n}\n\nconst store = compose(applyMiddleware(...middlewares))(createStore)(reducer);\n```\n\n#### transform `Symbol()` action type to string\n```javascript\nimport createLogger from 'redux-logger';\n\nconst logger = createLogger({\n  actionTransformer: (action) => ({\n    ...action,\n    type: String(action.type),\n  });\n});\n```\n\n#### log everything except actions with type `AUTH_REMOVE_TOKEN`\n```javascript\ncreateLogger({\n  predicate: (getState, action) => action.type !== AUTH_REMOVE_TOKEN\n});\n```\n\n#### collapse actions with type `FORM_CHANGE`\n```javascript\ncreateLogger({\n  collapsed: (getState, action) => action.type === FORM_CHANGE\n});\n```\n\n#### transform Immutable objects into JSON\n```javascript\nimport {Iterable} from 'immutable';\n\nconst stateTransformer = (state) => {\n  if (Iterable.isIterable(state)) return state.toJS();\n  else return state;\n};\n\nconst logger = createLogger({\n  stateTransformer,\n});\n```\n\n#### log batched actions\nThanks to [@smashercosmo](https://github.com/smashercosmo)\n```javascript\nimport createLogger from 'redux-logger';\n\nconst actionTransformer = action => {\n  if (action.type === 'BATCHING_REDUCER.BATCH') {\n    action.payload.type = action.payload.reduce((result, next) => {\n      const prefix = result ? result + ' => ' : '';\n      return prefix + next.type;\n    }, '');\n\n    return action.payload;\n  }\n\n  return action;\n};\n\nconst level = 'info';\n\nconst logger = {};\n\nfor (const method in console) {\n  if (typeof console[method] === 'function') {\n    logger[method] = console[method].bind(console);\n  }\n}\n\nlogger[level] = function levelFn(...args) {\n  const lastArg = args.pop();\n\n  if (Array.isArray(lastArg)) {\n    return lastArg.forEach(item => {\n      console[level].apply(console, [...args, item]);\n    });\n  }\n\n  console[level].apply(console, arguments);\n};\n\nexport default createLogger({\n  level,\n  actionTransformer,\n  logger\n});\n```\n\n### License\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/fcomb/redux-logger.git"
  },
  "scripts": {
    "build": "npm run build:lib && npm run build:umd && npm run build:umd:min",
    "build:lib": "$(npm bin)/babel src --out-dir lib",
    "build:umd": "LIBRARY_NAME=reduxLogger NODE_ENV=development $(npm bin)/webpack src/index.js dist/index.js --config webpack.build.js",
    "build:umd:min": "LIBRARY_NAME=reduxLogger NODE_ENV=production $(npm bin)/webpack -p src/index.js dist/index.min.js --config webpack.build.js",
    "clean": "$(npm bin)/rimraf dist lib",
    "lint": "$(npm bin)/eslint src",
    "prepublish": "npm run clean && npm run test && npm run build",
    "test": "npm run lint"
  },
  "version": "2.5.2"
}

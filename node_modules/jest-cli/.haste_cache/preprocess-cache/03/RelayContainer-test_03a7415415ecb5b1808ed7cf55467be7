/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails oncall+relay
 */

'use strict';var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};

require('configureForRelayOSS');

jest.
dontMock('RelayContainerComparators').
mock('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/warning');












describe('RelayContainer', function () {
  var MockContainer;
  var MockComponent;
  var RelayTestRenderer;

  var mockBarFragment;
  var mockBarPointer;
  var mockFooFragment;
  var mockFooPointer;
  var mockRoute;
  var relayContext;var 

  getNode = require('RelayTestUtils').getNode;var getPointer = require('RelayTestUtils').getPointer;

  beforeEach(function () {
    jest.resetModuleRegistry();

    var render = jest.genMockFunction().mockImplementation(function () {
      // Make it easier to expect prop values.
      render.mock.calls[render.mock.calls.length - 1].props = this.props;
      return require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement('div', null);});

    MockComponent = require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createClass({ displayName: 'MockComponent', render: render });
    MockContainer = require('Relay').createContainer(MockComponent, { 
      fragments: { 
        foo: jest.genMockFunction().mockImplementation(
        function () {return (function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'aD2jP3wpEA2o:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'RelayContainerRelayQL', type: 'Node' };})();}), 

        bar: jest.genMockFunction().mockImplementation(
        function () {return (function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: '8f1auryOoQs1:0', kind: 'Fragment', metadata: { plural: true, isAbstract: true }, name: 'RelayContainerRelayQL', type: 'Node' };})();}) } });



    MockContainer.mock = { render: render };

    relayContext = new (require('RelayContext'))();
    mockRoute = require('RelayRoute').genMockInstance();
    mockFooFragment = getNode(MockContainer.getFragment('foo').getFragment({}));
    mockFooPointer = getPointer('42', mockFooFragment);
    mockBarFragment = getNode(MockContainer.getFragment('bar').getFragment());
    mockBarPointer = getPointer(['42'], mockBarFragment);

    RelayTestRenderer = require('RelayTestUtils').createRenderer();

    // TODO: #6524377 - migrate to RelayTestUtils matchers
    jasmine.addMatchers(require('GraphQLStoreTestUtils').matchers);
    jasmine.addMatchers(require('RelayTestUtils').matchers);});


  describe('fragments', function () {
    it('throws if fragments are missing from spec', function () {
      expect(function () {
        require('Relay').createContainer(MockComponent, {});}).
      toFailInvariant(
      'Relay.createContainer(MockComponent, ...): Missing `fragments`, ' + 
      'which is expected to be an object mapping from `propName` to: ' + 
      '() => Relay.QL`...`');});



    it('throws if container defines invalid `Relay.QL` fragment', function () {
      var BadContainer = require('Relay').createContainer(MockComponent, { 
        fragments: { 
          viewer: function () {return (function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '123' } }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'RelayContainer', type: 'Node' };})();} } });


      var badFragmentReference = BadContainer.getFragment('viewer');
      expect(function () {
        badFragmentReference.getFragment();}).
      toFailInvariant(
      'Relay.QL defined on container `Relay(MockComponent)` named `viewer` ' + 
      'is not a valid fragment. A typical fragment is defined using: ' + 
      'Relay.QL`fragment on Type {...}`');});



    it('throws if container defines a fragment without function', function () {
      var BadContainer = require('Relay').createContainer(MockComponent, { 
        fragments: { 
          viewer: (function () {return { children: [{ fieldName: 'newsFeed', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'NewsFeedConnection' }], id: 'SyK83pCTsVzK:0', kind: 'Fragment', metadata: {}, name: 'RelayContainerRelayQL', type: 'Viewer' };})() } });






      expect(function () {
        BadContainer.getFragment('viewer');}).
      toFailInvariant(
      'RelayContainer: Expected `Relay(MockComponent).fragments.viewer` to ' + 
      'be a function returning a fragment. Example: ' + 
      '`viewer: () => Relay.QL`fragment on ...`');});



    it('creates query for a container without fragments', function () {
      // Test that scalar constants are substituted, not only query fragments.
      var MockProfilePhoto = require('Relay').createContainer(MockComponent, { 
        initialVariables: { 
          testPhotoSize: '100' }, 

        fragments: { 
          photo: function () {return (function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'size', value: { kind: 'CallVariable', callVariableName: 'testPhotoSize' } }], children: [{ fieldName: 'uri', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'KMCNgeJhOaak:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'RelayContainerRelayQL', type: 'Actor' };})();} } });








      var fragment = getNode(
      MockProfilePhoto.getFragment('photo'), 
      {});

      expect(fragment).toEqualQueryNode(getNode((function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'size', value: { kind: 'CallValue', callValue: '100' } }], children: [{ fieldName: 'uri', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'gJLmFMW8VjJ6:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'RelayContainerRelayQL', type: 'Actor' };})()));});








    it('creates query for a container with fragments', function () {
      var anotherComponent = require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createClass({ displayName: 'anotherComponent', render: function () {return null;} });
      var MockProfile = require('Relay').createContainer(MockComponent, { 
        fragments: { 
          user: function () {return (function (RQL_0) {return { children: [].concat.apply([], [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, require('Relay').QL.__frag(RQL_0)]), id: '3UEfaBj571Nw:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'RelayContainerRelayQL', type: 'Actor' };})(



            MockProfileLink.getFragment('user'));} } });




      var MockProfileLink = require('Relay').createContainer(anotherComponent, { 
        fragments: { 
          user: function () {return (function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: 'url', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'JfO0adU47etq:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'RelayContainerRelayQL', type: 'Actor' };})();} } });







      var fragment = getNode(
      MockProfile.getFragment('user'), 
      {});

      expect(fragment).toEqualQueryNode(getNode((function (RQL_0) {return { children: [].concat.apply([], [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isRequisite: true }, type: 'String' }, { fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, require('Relay').QL.__frag(RQL_0)]), id: 'lvA5p7J4POHM:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'RelayContainerRelayQL', type: 'Actor' };})((function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isRequisite: true }, type: 'String' }, { fieldName: 'url', kind: 'Field', metadata: {}, type: 'String' }], id: 'VfXoUnTYIL1E:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'RelayContainerRelayQL', type: 'Actor' };})())));});















    it('returns whether a named fragment is defined', function () {
      expect(MockContainer.hasFragment('foo')).toBe(true);
      expect(MockContainer.hasFragment('bar')).toBe(true);
      expect(MockContainer.hasFragment('baz')).toBe(false);});});



  describe('conditional fragments', function () {
    var MockProfile = undefined;
    var profileFragment = undefined;

    beforeEach(function () {
      MockProfile = require('Relay').createContainer(MockComponent, { 
        fragments: { 
          viewer: function () {return (function () {return { children: [{ fieldName: 'primaryEmail', kind: 'Field', metadata: {}, type: 'String' }], id: 'eYQyZG2CvmBC:0', kind: 'Fragment', metadata: {}, name: 'RelayContainerRelayQL', type: 'Viewer' };})();} } });






      profileFragment = require('QueryBuilder').createFragment({ 
        name: 'Test', 
        type: 'Viewer', 
        children: [require('QueryBuilder').createField({ fieldName: 'primaryEmail' })] });});



    it('can conditionally include a fragment based on variables', function () {
      var MockSideshow = require('Relay').createContainer(MockComponent, { 
        initialVariables: { 
          hasSideshow: null }, 

        fragments: { 
          viewer: function (variables) {return (function (RQL_0) {return { children: [].concat.apply([], [require('Relay').QL.__frag(RQL_0)]), id: 'm6rJroVq4+RV:0', kind: 'Fragment', metadata: {}, name: 'RelayContainerRelayQL', type: 'Viewer' };})(

            MockProfile.getFragment('viewer')['if'](variables.hasSideshow));} } });





      // hasSideshow: true
      var fragment = getNode(
      MockSideshow.getFragment('viewer', { 
        hasSideshow: require('QueryBuilder').createCallVariable('sideshow') }), 

      { sideshow: true });

      var expected = require('RelayQuery').Fragment.build(
      'Test', 
      'Viewer', 
      [getNode(profileFragment)]);

      expect(fragment).toEqualQueryNode(expected);

      // hasSideshow: false
      fragment = getNode(
      MockSideshow.getFragment('viewer', { 
        hasSideshow: require('QueryBuilder').createCallVariable('sideshow') }), 

      { sideshow: false });

      expect(fragment.getChildren().length).toBe(0);});


    it('can conditionally exclude a fragment based on variables', function () {
      var MockSideshow = require('Relay').createContainer(MockComponent, { 
        initialVariables: { 
          hasSideshow: null }, 

        fragments: { 
          viewer: function (variables) {return (function (RQL_0) {return { children: [].concat.apply([], [require('Relay').QL.__frag(RQL_0)]), id: 'iXVOW4VTUbmn:0', kind: 'Fragment', metadata: {}, name: 'RelayContainerRelayQL', type: 'Viewer' };})(

            MockProfile.
            getFragment('viewer').
            unless(variables.hasSideshow));} } });





      // hasSideshow: true
      var fragment = getNode(
      MockSideshow.getFragment('viewer', { hasSideshow: true }), 
      {});

      expect(fragment.getChildren().length).toBe(0);

      // hasSideshow: false
      fragment = getNode(
      MockSideshow.getFragment('viewer', { hasSideshow: false }), 
      {});

      var expected = require('RelayQuery').Fragment.build(
      'Test', 
      'Viewer', 
      [getNode(profileFragment)]);

      expect(fragment).toEqualQueryNode(expected);});});



  it('throws if rendered without a relay context', function () {
    var ShallowRenderer = require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react/lib/ReactTestUtils.js').createRenderer();
    expect(function () {return ShallowRenderer.render(
      require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(MockContainer, { foo: mockFooPointer }));}).
    toFailInvariant(
    'RelayContainer: `Relay(MockComponent)` was rendered with invalid ' + 
    'Relay context `undefined`. Make sure the `relay` property on the ' + 
    'React context conforms to the `RelayContext` interface.');});



  it('throws if rendered with an invalid relay context', function () {
    var fakeContext = { 
      getStoreData: null, 
      getFragmentResolver: null };

    var ShallowRenderer = require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react/lib/ReactTestUtils.js').createRenderer();
    expect(function () {return ShallowRenderer.render(
      require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(MockContainer, { foo: mockFooPointer }), 
      { relay: fakeContext });}).
    toFailInvariant(
    'RelayContainer: `Relay(MockComponent)` was rendered with invalid ' + 
    'Relay context `[object Object]`. Make sure the `relay` property on ' + 
    'the React context conforms to the `RelayContext` interface.');});



  it('throws if rendered without a route', function () {
    var ShallowRenderer = require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react/lib/ReactTestUtils.js').createRenderer();
    expect(function () {return ShallowRenderer.render(
      require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(MockContainer, { foo: mockFooPointer }), 
      { relay: relayContext });}).
    toFailInvariant(
    'RelayContainer: `Relay(MockComponent)` was rendered without a valid ' + 
    'route. Make sure the route is valid, and make sure that it is ' + 
    'correctly set on the parent component\'s context ' + 
    '(e.g. using <RelayRootContainer>).');});



  it('creates resolvers for each query prop with a fragment pointer', function () {
    RelayTestRenderer.render(
    function () {return require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(MockContainer, { foo: mockFooPointer });}, 
    relayContext, 
    mockRoute);

    expect(relayContext.getFragmentResolver.mock.calls.length).toBe(1);
    expect(require('GraphQLStoreQueryResolver').mock.instances.length).toBe(1);

    RelayTestRenderer.render(
    function () {return require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(MockContainer, { foo: mockFooPointer, bar: [mockBarPointer] });}, 
    relayContext, 
    mockRoute);

    // `foo` resolver is re-used, `bar` is added
    expect(relayContext.getFragmentResolver.mock.calls.length).toBe(2);
    expect(require('GraphQLStoreQueryResolver').mock.instances.length).toBe(2);});


  it('recreates resolvers when relay context changes', function () {
    var relayContextA = new (require('RelayContext'))();
    var relayContextB = new (require('RelayContext'))();

    RelayTestRenderer.render(
    function () {return require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(MockContainer, { foo: mockFooPointer });}, 
    relayContextA, 
    mockRoute);


    expect(relayContextA.getFragmentResolver.mock.calls.length).toBe(1);
    var mockResolvers = require('GraphQLStoreQueryResolver').mock.instances;
    expect(mockResolvers.length).toBe(1);
    expect(mockResolvers[0].dispose).not.toBeCalled();
    relayContextA.getFragmentResolver.mockClear();

    RelayTestRenderer.render(
    function () {return require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(MockContainer, { foo: mockFooPointer });}, 
    relayContextB, 
    mockRoute);


    expect(relayContextA.getFragmentResolver.mock.calls.length).toBe(0);
    expect(relayContextB.getFragmentResolver.mock.calls.length).toBe(1);
    expect(mockResolvers.length).toBe(2);
    expect(mockResolvers[1].mock.store).toBe(relayContextB.getStoreData());
    expect(mockResolvers[0].dispose).toBeCalled();
    expect(mockResolvers[1].dispose).not.toBeCalled();});


  it('reuses resolvers even if route changes', function () {
    var MockRouteA = require('RelayRoute').genMock();
    var MockRouteB = require('RelayRoute').genMock();

    var mockRouteA = new MockRouteA();
    var mockRouteB = new MockRouteB();

    RelayTestRenderer.render(
    function () {return require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(MockContainer, { foo: mockFooPointer });}, 
    relayContext, 
    mockRouteA);

    RelayTestRenderer.render(
    function () {return require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(MockContainer, { foo: mockFooPointer });}, 
    relayContext, 
    mockRouteB);


    expect(relayContext.getFragmentResolver.mock.calls.length).toBe(1);
    expect(require('GraphQLStoreQueryResolver').mock.instances.length).toBe(1);
    expect(require('GraphQLStoreQueryResolver').mock.instances[0].dispose).not.toBeCalled();});


  it('resolves each prop with a query', function () {
    RelayTestRenderer.render(
    function () {return require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(MockContainer, { foo: mockFooPointer });}, 
    relayContext, 
    mockRoute);

    var fragment = getNode(MockContainer.getFragment('foo'));

    expect(relayContext.getFragmentResolver.mock.calls.length).toBe(1);
    var mockResolvers = require('GraphQLStoreQueryResolver').mock.instances;
    expect(mockResolvers.length).toBe(1);
    expect(mockResolvers[0].resolve.mock.calls[0][0]).
    toEqualQueryNode(fragment);
    expect(mockResolvers[0].resolve.mock.calls[0][1]).
    toEqual(mockFooPointer.__dataID__);});


  it('re-resolves props when notified of changes', function () {
    var mockData = { __dataID__: '42', id: '42', name: 'Tim' };

    require('GraphQLStoreQueryResolver').mockDefaultResolveImplementation(function () {return mockData;});

    RelayTestRenderer.render(
    function () {return require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(MockContainer, { foo: mockFooPointer });}, 
    relayContext, 
    mockRoute);


    expect(relayContext.getFragmentResolver.mock.calls.length).toBe(1);
    var mockResolvers = require('GraphQLStoreQueryResolver').mock.instances;
    mockResolvers[0].mock.callback();

    expect(mockResolvers.length).toBe(1);
    expect(mockResolvers[0].dispose.mock.calls.length).toBe(0);
    expect(mockResolvers[0].resolve.mock.calls.length).toBe(2);});


  it('re-resolves props when relay context changes', function () {
    var relayContextA = new (require('RelayContext'))();
    var relayContextB = new (require('RelayContext'))();

    RelayTestRenderer.render(
    function () {return require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(MockContainer, { foo: mockFooPointer });}, 
    relayContextA, 
    mockRoute);

    RelayTestRenderer.render(
    function () {return require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(MockContainer, { foo: mockFooPointer });}, 
    relayContextB, 
    mockRoute);


    var mockResolvers = require('GraphQLStoreQueryResolver').mock.instances;
    expect(mockResolvers.length).toBe(2);
    expect(mockResolvers[0].resolve.mock.calls.length).toBe(1);
    expect(mockResolvers[1].resolve.mock.calls.length).toBe(1);});


  it('re-resolves props when route changes', function () {
    var MockRouteA = require('RelayRoute').genMock();
    var MockRouteB = require('RelayRoute').genMock();

    var mockRouteA = new MockRouteA();
    var mockRouteB = new MockRouteB();

    RelayTestRenderer.render(
    function () {return require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(MockContainer, { foo: mockFooPointer });}, 
    relayContext, 
    mockRouteA);


    expect(relayContext.getFragmentResolver.mock.calls.length).toBe(1);
    var mockResolvers = require('GraphQLStoreQueryResolver').mock.instances;
    expect(mockResolvers.length).toBe(1);
    expect(mockResolvers[0].resolve.mock.calls.length).toBe(1);

    RelayTestRenderer.render(
    function () {return require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(MockContainer, { foo: mockFooPointer });}, 
    relayContext, 
    mockRouteB);


    expect(mockResolvers.length).toBe(1);
    expect(mockResolvers[0].resolve.mock.calls.length).toBe(2);});


  it('resolves with most recent props', function () {
    var fooFragment = getNode(MockContainer.getFragment('foo'));
    var mockPointerA = getPointer('42', mockFooFragment);
    var mockPointerB = getPointer('43', mockFooFragment);

    RelayTestRenderer.render(
    function () {return require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(MockContainer, { foo: mockPointerA });}, 
    relayContext, 
    mockRoute);

    RelayTestRenderer.render(
    function () {return require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(MockContainer, { foo: mockPointerB });}, 
    relayContext, 
    mockRoute);


    var mockResolvers = require('GraphQLStoreQueryResolver').mock.instances;

    expect(mockResolvers.length).toBe(1);
    expect(mockResolvers[0].dispose.mock.calls.length).toBe(0);
    expect(mockResolvers[0].resolve.mock.calls.length).toBe(2);
    expect(mockResolvers[0].resolve.mock.calls[0][0]).
    toEqualQueryNode(fooFragment);
    expect(mockResolvers[0].resolve.mock.calls[0][1]).
    toEqual(mockPointerA.__dataID__);
    expect(mockResolvers[0].resolve.mock.calls[1][0]).
    toEqualQueryNode(fooFragment);
    expect(mockResolvers[0].resolve.mock.calls[1][1]).
    toEqual(mockPointerB.__dataID__);});


  it('does not create resolvers for null/undefined props', function () {
    RelayTestRenderer.render(
    function () {return require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(MockContainer, { foo: null, bar: undefined });}, 
    relayContext, 
    mockRoute);


    expect(relayContext.getFragmentResolver.mock.calls.length).toBe(0);
    var mockResolvers = require('GraphQLStoreQueryResolver').mock.instances;
    expect(mockResolvers.length).toBe(0);
    var props = MockContainer.mock.render.mock.calls[0].props;
    expect(props.bar).toBe(undefined);
    expect(props.foo).toBe(null);});


  it('warns if props are missing fragment pointers', function () {
    var mockData = {};
    RelayTestRenderer.render(
    function () {return require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(MockContainer, { foo: mockData, bar: null });}, 
    relayContext, 
    mockRoute);


    var mockResolvers = require('GraphQLStoreQueryResolver').mock.instances;
    expect(mockResolvers.length).toBe(0);
    var props = MockContainer.mock.render.mock.calls[0].props;
    expect(props.bar).toBe(null);
    expect(props.foo).toBe(mockData);

    expect([
    'RelayContainer: Expected prop `%s` supplied to `%s` to ' + 
    'be data fetched by Relay. This is likely an error unless ' + 
    'you are purposely passing in mock data that conforms to ' + 
    'the shape of this component\'s fragment.', 
    'foo', 
    'MockComponent']).
    toBeWarnedNTimes(1);});


  it('warns if fragment pointer exists on a different prop', function () {
    var mockFooPointer = getPointer('42', mockFooFragment);

    RelayTestRenderer.render(
    function () {return require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(MockContainer, { baz: mockFooPointer });}, 
    relayContext, 
    mockRoute);


    expect([
    'RelayContainer: Expected record data for prop `%s` on `%s`, ' + 
    'but it was instead on prop `%s`. Did you misspell a prop or ' + 
    'pass record data into the wrong prop?', 
    'foo', 
    'MockComponent', 
    'baz']).
    toBeWarnedNTimes(1);});


  it('does not warn if fragment hash exists on a different prop', function () {
    var deceptiveArray = [];
    deceptiveArray[Object.keys(mockFooPointer)[0]] = {};

    RelayTestRenderer.render(
    function () {return require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(MockContainer, { baz: deceptiveArray });}, 
    relayContext, 
    mockRoute);


    expect([
    'RelayContainer: Expected record data for prop `%s` on `%s`, ' + 
    'but it was instead on prop `%s`. Did you misspell a prop or ' + 
    'pass record data into the wrong prop?', 
    'foo', 
    'MockComponent', 
    'baz']).
    toBeWarnedNTimes(0);});


  it('warns if a fragment is not passed in', function () {
    RelayTestRenderer.render(
    function () {return require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(MockContainer, { foo: null });}, 
    relayContext, 
    mockRoute);


    var mockResolvers = require('GraphQLStoreQueryResolver').mock.instances;
    expect(mockResolvers.length).toBe(0);
    var props = MockContainer.mock.render.mock.calls[0].props;
    expect(props.bar).toBe(undefined);
    expect(props.foo).toBe(null);

    expect([
    'RelayContainer: Expected prop `%s` to be supplied to `%s`, but ' + 
    'got `undefined`. Pass an explicit `null` if this is intentional.', 
    'bar', 
    'MockComponent']).
    toBeWarnedNTimes(1);});


  it('warns if a fragment prop is not an object', function () {
    RelayTestRenderer.render(
    function () {return require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(MockContainer, { foo: '' });}, 
    relayContext, 
    mockRoute);


    var mockResolvers = require('GraphQLStoreQueryResolver').mock.instances;
    expect(mockResolvers.length).toBe(0);
    var props = MockContainer.mock.render.mock.calls[0].props;
    expect(props.bar).toBe(undefined);
    expect(props.foo).toBe('');

    expect([
    'RelayContainer: Expected prop `%s` supplied to `%s` to be an ' + 
    'object, got `%s`.', 
    'foo', 
    'MockComponent', 
    '']).
    toBeWarnedNTimes(1);});


  it('throws if non-plural fragment receives an array', function () {
    var mockData = [];
    expect(function () {
      RelayTestRenderer.render(
      function () {return require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(MockContainer, { foo: mockData });}, 
      relayContext, 
      mockRoute);}).

    toFailInvariant(
    'RelayContainer: Invalid prop `foo` supplied to `MockComponent`, ' + 
    'expected a single record because the corresponding fragment is not ' + 
    'plural (i.e. does not have `@relay(plural: true)`).');});



  it('throws if plural fragment receives a non-array', function () {
    var mockData = {};
    expect(function () {
      RelayTestRenderer.render(
      function () {return require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(MockContainer, { bar: mockData });}, 
      relayContext, 
      mockRoute);}).

    toFailInvariant(
    'RelayContainer: Invalid prop `bar` supplied to `MockComponent`, ' + 
    'expected an array of records because the corresponding fragment has ' + 
    '`@relay(plural: true)`.');});



  it('warns if plural fragment array item is missing fragment pointers', function () {
    var mockData = [{}];
    RelayTestRenderer.render(
    function () {return require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(MockContainer, { bar: mockData });}, 
    relayContext, 
    mockRoute);


    expect([
    'RelayContainer: Expected prop `%s` supplied to `%s` to ' + 
    'be data fetched by Relay. This is likely an error unless ' + 
    'you are purposely passing in mock data that conforms to ' + 
    'the shape of this component\'s fragment.', 
    'bar', 
    'MockComponent']).
    toBeWarnedNTimes(1);});


  it('throws if some plural fragment items are null', function () {
    var mockData = [mockBarPointer, null];
    expect(function () {
      RelayTestRenderer.render(
      function () {return require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(MockContainer, { bar: mockData });}, 
      relayContext, 
      mockRoute);}).

    toFailInvariant(
    'RelayContainer: Invalid prop `bar` supplied to `MockComponent`. Some ' + 
    'array items contain data fetched by Relay and some items contain ' + 
    'null/mock data.');});



  it('throws if some but not all plural fragment items are mocked', function () {
    var mockData = [mockBarPointer, {}];
    expect(function () {
      RelayTestRenderer.render(
      function () {return require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(MockContainer, { bar: mockData });}, 
      relayContext, 
      mockRoute);}).

    toFailInvariant(
    'RelayContainer: Invalid prop `bar` supplied to `MockComponent`. Some ' + 
    'array items contain data fetched by Relay and some items contain ' + 
    'null/mock data.');});



  it('passes through empty arrays for plural fragments', function () {
    RelayTestRenderer.render(
    function () {return require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(MockContainer, { bar: [] });}, 
    relayContext, 
    mockRoute);

    expect(MockContainer.mock.render.mock.calls.length).toBe(1);
    expect(MockContainer.mock.render.mock.calls[0].props.bar).toEqual([]);
    expect(relayContext.getFragmentResolver).not.toBeCalled();});


  it('does not re-render if props resolve to the same object', function () {
    var mockData = { __dataID__: '42', id: '42', name: 'Tim' };

    require('GraphQLStoreQueryResolver').mockDefaultResolveImplementation(function () {return mockData;});

    RelayTestRenderer.render(
    function () {return require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(MockContainer, { foo: mockFooPointer });}, 
    relayContext, 
    mockRoute);


    expect(MockContainer.mock.render.mock.calls.length).toBe(1);
    expect(MockContainer.mock.render.mock.calls[0].props.foo).toEqual(mockData);

    require('GraphQLStoreQueryResolver').mock.instances[0].mock.callback();

    expect(MockContainer.mock.render.mock.calls.length).toBe(1);});


  it('re-renders if props resolve to different objects', function () {
    var mockDataList = [_extends({ 
      __dataID__: '42', id: '42', name: 'Tim' }, mockFooPointer), _extends({ 
      __dataID__: '42', id: '42', name: 'Tee' }, mockFooPointer)];


    require('GraphQLStoreQueryResolver').mockResolveImplementation(0, function () {
      return mockDataList[this.resolve.mock.calls.length - 1];});


    RelayTestRenderer.render(
    function () {return require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(MockContainer, { foo: mockFooPointer });}, 
    relayContext, 
    mockRoute);


    expect(MockContainer.mock.render.mock.calls.length).toBe(1);
    expect(MockContainer.mock.render.mock.calls[0].props.foo).toEqual(
    mockDataList[0]);


    require('GraphQLStoreQueryResolver').mock.instances[0].mock.callback();

    expect(MockContainer.mock.render.mock.calls.length).toBe(2);
    expect(MockContainer.mock.render.mock.calls[1].props.foo).toEqual(
    mockDataList[1]);});



  it('applies `shouldComponentUpdate` properly', function () {
    var mockDataSet = { 
      '42': { __dataID__: '42', name: 'Tim' }, 
      '43': { __dataID__: '43', name: 'Tee' }, 
      '44': { __dataID__: '44', name: 'Toe' } };

    var render = jest.genMockFunction().mockImplementation(function () {return require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement('div', null);});
    var shouldComponentUpdate = jest.genMockFunction();

    var MockFastComponent = require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createClass({ displayName: 'MockFastComponent', render: render, shouldComponentUpdate: shouldComponentUpdate });

    var MockFastContainer = require('Relay').createContainer(MockFastComponent, { 
      fragments: { 
        foo: jest.genMockFunction().mockImplementation(
        function () {return (function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'gEU38Yr1aUUY:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'RelayContainerRelayQL', type: 'Node' };})();}) } });




    require('GraphQLStoreQueryResolver').mockResolveImplementation(0, function (_, dataID) {
      return mockDataSet[dataID];});

    mockFooFragment = 
    getNode(MockFastContainer.getFragment('foo').getFragment({}));
    var mockPointerA = getPointer('42', mockFooFragment);
    var mockPointerB = getPointer('43', mockFooFragment);
    var mockPointerC = getPointer('44', mockFooFragment);

    RelayTestRenderer.render(
    function () {return require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(MockFastContainer, { foo: mockPointerA });}, 
    relayContext, 
    mockRoute);

    expect(render.mock.calls.length).toBe(1);

    shouldComponentUpdate.mockReturnValue(true);

    // Component wants to update, RelayContainer doesn't.
    RelayTestRenderer.render(
    function () {return require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(MockFastContainer, { foo: mockPointerA });}, 
    relayContext, 
    mockRoute);

    expect(render.mock.calls.length).toBe(1);

    // Component wants to update, RelayContainer does too.
    RelayTestRenderer.render(
    function () {return require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(MockFastContainer, { foo: mockPointerB });}, 
    relayContext, 
    mockRoute);

    expect(render.mock.calls.length).toBe(2);

    shouldComponentUpdate.mockReturnValue(false);

    // Component doesn't want to update, RelayContainer does.
    RelayTestRenderer.render(
    function () {return require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(MockFastContainer, { foo: mockPointerC });}, 
    relayContext, 
    mockRoute);

    expect(render.mock.calls.length).toBe(2);

    // Component doesn't want to update, RelayContainer doesn't either.
    RelayTestRenderer.render(
    function () {return require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(MockFastContainer, { foo: mockPointerC });}, 
    relayContext, 
    mockRoute);

    expect(render.mock.calls.length).toBe(2);

    shouldComponentUpdate.mockReturnValue(true);
    RelayTestRenderer.render(
    function () {return require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(MockFastContainer, { foo: mockPointerC, thing: 'scalar' });}, 
    relayContext, 
    mockRoute);

    expect(render.mock.calls.length).toBe(3);});});
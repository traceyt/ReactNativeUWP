/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule buildRQL
 * 
 * @typechecks
 */

'use strict';Object.defineProperty(exports, '__esModule', { value: true });var _extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};function _toConsumableArray(arr) {if (Array.isArray(arr)) {for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];return arr2;} else {return Array.from(arr);}}






















// Cache results of executing fragment query builders.
var fragmentCache = new (require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/Map'))();
var concreteFragmentIDSet = new (require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/Set'))();

// Cache results of executing component-specific route query builders.
var queryCache = new (require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/Map'))();

function isDeprecatedCallWithArgCountGreaterThan(
nodeBuilder, 
count) 
{
  var argLength = nodeBuilder.length;
  if (__DEV__) {
    var mockImpl = nodeBuilder;
    while (mockImpl && mockImpl._getMockImplementation) {
      mockImpl = mockImpl._getMockImplementation();}

    if (mockImpl) {
      argLength = mockImpl.length;}}


  return argLength > count;}


/**
 * @internal
 *
 * Builds a static node representation using a supplied query or fragment
 * builder. This is used for routes, containers, and mutations.
 *
 * If the supplied fragment builder produces an invalid node (e.g. the wrong
 * node type), these will return `undefined`. This is not to be confused with
 * a return value of `null`, which may result from the lack of a node.
 */
var buildRQL = { 
  Fragment: function (
  fragmentBuilder, 
  values) 
  {
    var node = fragmentCache.get(fragmentBuilder);
    if (node) {
      return require('QueryBuilder').getFragment(node);}

    var variables = toVariables(values);
    require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/invariant')(
    !isDeprecatedCallWithArgCountGreaterThan(fragmentBuilder, 1), 
    'Relay.QL: Deprecated usage detected. If you are trying to define a ' + 
    'fragment, use `variables => Relay.QL`.');

    node = fragmentBuilder(variables);
    var fragment = node != null ? 
    require('QueryBuilder').getFragment(node) : 
    null;
    if (!fragment) {
      return fragment;}

    if (concreteFragmentIDSet.has(fragment.id)) {
      fragment = _extends({}, 
      fragment, { 
        id: require('generateConcreteFragmentID')() });}


    concreteFragmentIDSet.add(fragment.id);
    fragmentCache.set(fragmentBuilder, fragment);
    return fragment;}, 


  Query: function (
  queryBuilder, 
  Component, 
  queryName, 
  values) 
  {
    var componentCache = queryCache.get(queryBuilder);
    var node = undefined;
    if (!componentCache) {
      componentCache = new (require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/Map'))();
      queryCache.set(queryBuilder, componentCache);} else 
    {
      node = componentCache.get(Component);}

    if (!node) {
      var _variables = toVariables(values);
      require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/invariant')(
      !isDeprecatedCallWithArgCountGreaterThan(queryBuilder, 2), 
      'Relay.QL: Deprecated usage detected. If you are trying to define a ' + 
      'query, use `(Component, variables) => Relay.QL`.');

      if (isDeprecatedCallWithArgCountGreaterThan(queryBuilder, 0)) {
        node = queryBuilder(Component, _variables);} else 
      {
        node = queryBuilder(Component, _variables);
        var query = require('QueryBuilder').getQuery(node);
        if (query) {(function () {
            var hasFragment = false;
            var hasScalarFieldsOnly = true;
            if (query.children) {
              query.children.forEach(function (child) {
                if (child) {
                  hasFragment = hasFragment || child.kind === 'Fragment';
                  hasScalarFieldsOnly = hasScalarFieldsOnly && 
                  child.kind === 'Field' && (
                  !child.children || child.children.length === 0);}});}




            if (!hasFragment) {
              var children = query.children ? [].concat(_toConsumableArray(query.children)) : [];
              require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/invariant')(
              hasScalarFieldsOnly, 
              'Relay.QL: Expected query `%s` to be empty. For example, use ' + 
              '`node(id: $id)`, not `node(id: $id) { ... }`.', 
              query.fieldName);

              var fragmentVariables = require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/filterObject')(_variables, function (_, name) {return (
                  Component.hasVariable(name));});

              children.push(Component.getFragment(queryName, fragmentVariables));
              node = _extends({}, 
              query, { 
                children: children });}})();}}




      componentCache.set(Component, node);}

    if (node) {
      return require('QueryBuilder').getQuery(node) || undefined;}

    return null;} };



function toVariables(variables) 
// ConcreteCallVariable should flow into mixed
{
  return require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/mapObject')(
  variables, 
  function (_, name) {return require('QueryBuilder').createCallVariable(name);});}



require('RelayProfiler').instrumentMethods(buildRQL, { 
  Fragment: 'buildRQL.Fragment', 
  Query: 'buildRQL.Query' });


module.exports = buildRQL;
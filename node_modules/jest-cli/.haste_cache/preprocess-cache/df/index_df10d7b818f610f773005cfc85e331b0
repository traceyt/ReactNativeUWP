'use strict';














var getAssetDataFromName=require('node-haste').getAssetDataFromName;


var stat=require('promise').denodeify(require('fs').stat);
var readDir=require('promise').denodeify(require('fs').readdir);
var readFile=require('promise').denodeify(require('fs').readFile);

var validateOpts=require('../lib/declareOpts')({
projectRoots:{
type:'array',
required:true},

assetExts:{
type:'array',
required:true}});var 



AssetServer=function(){
function AssetServer(options){babelHelpers.classCallCheck(this,AssetServer);
var opts=validateOpts(options);
this._roots=opts.projectRoots;
this._assetExts=opts.assetExts;}babelHelpers.createClass(AssetServer,[{key:'get',value:function get(


assetPath){var platform=arguments.length<=1||arguments[1]===undefined?null:arguments[1];
var assetData=getAssetDataFromName(assetPath);
return this._getAssetRecord(assetPath,platform).then(function(record){
for(var i=0;i<record.scales.length;i++){
if(record.scales[i]>=assetData.resolution){
return readFile(record.files[i]);}}



return readFile(record.files[record.files.length-1]);});}},{key:'getAssetData',value:function getAssetData(



assetPath){var platform=arguments.length<=1||arguments[1]===undefined?null:arguments[1];
var nameData=getAssetDataFromName(assetPath);
var data={
name:nameData.name,
type:nameData.type};


return this._getAssetRecord(assetPath,platform).then(function(record){
data.scales=record.scales;
data.files=record.files;

return require('promise').all(
record.files.map(function(file){return stat(file);}));}).

then(function(stats){
var hash=require('crypto').createHash('md5');

stats.forEach(function(fstat){return (
hash.update(fstat.mtime.getTime().toString()));});


data.hash=hash.digest('hex');
return data;});}},{key:'_getAssetRecord',value:function _getAssetRecord(














assetPath){var _this=this;var platform=arguments.length<=1||arguments[1]===undefined?null:arguments[1];
var filename=require('path').basename(assetPath);

return (
this._findRoot(
this._roots,
require('path').dirname(assetPath)).

then(function(dir){return require('promise').all([
dir,
readDir(dir)]);}).

then(function(res){
var dir=res[0];
var files=res[1];
var assetData=getAssetDataFromName(filename);

var map=_this._buildAssetMap(dir,files,platform);

var record=undefined;
if(platform!=null){
record=map[getAssetKey(assetData.assetName,platform)]||
map[assetData.assetName];}else 
{
record=map[assetData.assetName];}


if(!record){
throw new Error('Asset not found: '+
assetPath+' for platform: '+platform);}



return record;}));}},{key:'_findRoot',value:function _findRoot(




roots,dir){
return require('promise').all(
roots.map(function(root){
var absPath=require('path').join(root,dir);
return stat(absPath).then(function(fstat){
return {path:absPath,isDirectory:fstat.isDirectory()};},
function(err){
return {path:absPath,isDirectory:false};});})).


then(function(stats){
for(var i=0;i<stats.length;i++){
if(stats[i].isDirectory){
return stats[i].path;}}


throw new Error('Could not find any directories');});}},{key:'_buildAssetMap',value:function _buildAssetMap(



dir,files){
var assets=files.map(getAssetDataFromName);
var map=Object.create(null);
assets.forEach(function(asset,i){
var file=files[i];
var assetKey=getAssetKey(asset.assetName,asset.platform);
var record=map[assetKey];
if(!record){
record=map[assetKey]={
scales:[],
files:[]};}



var insertIndex=undefined;
var length=record.scales.length;

for(insertIndex=0;insertIndex<length;insertIndex++){
if(asset.resolution<record.scales[insertIndex]){
break;}}


record.scales.splice(insertIndex,0,asset.resolution);
record.files.splice(insertIndex,0,require('path').join(dir,file));});


return map;}}]);return AssetServer;}();



function getAssetKey(assetName,platform){
if(platform!=null){
return assetName+' : '+platform;}else 
{
return assetName;}}



module.exports=AssetServer;
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails oncall+relay
 */

'use strict';



describe('serializeRelayQueryCall', function () {
  it('serializes a call with a null argument', function () {
    var call = { 
      name: 'me', 
      value: null };

    expect(require('serializeRelayQueryCall')(call)).toEqual('.me()');});


  it('serializes a call with an undefined argument', function () {
    var call = { 
      name: 'me', 
      value: undefined };

    expect(require('serializeRelayQueryCall')(call)).toEqual('.me()');});


  it('serializes a call with a string argument', function () {
    var call = { 
      name: 'first', 
      value: '5' };

    expect(require('serializeRelayQueryCall')(call)).toEqual('.first(5)');});


  it('serializes a call with a numeric argument', function () {
    var call = { 
      name: 'first', 
      value: 5 };

    expect(require('serializeRelayQueryCall')(call)).toEqual('.first(5)');});


  it('serializes a call with `true` argument', function () {
    var call = { 
      name: 'if', 
      value: true };

    expect(require('serializeRelayQueryCall')(call)).toEqual('.if(true)');});


  it('serializes a call with `false` argument', function () {
    var call = { 
      name: 'unless', 
      value: false };

    expect(require('serializeRelayQueryCall')(call)).toEqual('.unless(false)');});


  it('serializes a call with many arguments', function () {
    var call = { 
      name: 'usernames', 
      value: ['glh', 'joesavona'] };

    expect(require('serializeRelayQueryCall')(call)).toEqual('.usernames(glh,joesavona)');});


  it('sanitizes argument values', function () {
    var call = { 
      name: 'checkin_search_query', 
      value: JSON.stringify({ query: 'Menlo Park' }) };

    expect(require('serializeRelayQueryCall')(call)).toEqual(
    '.checkin_search_query({"query":"Menlo Park"})');});



  it('serializes empty string values', function () {
    var call = { 
      name: 'query', 
      value: '' };

    expect(require('serializeRelayQueryCall')(call)).toEqual(
    '.query()');});



  it('serializes string values with leading/trailing whitespace', function () {
    var call = { 
      name: 'query', 
      value: ' ' };

    expect(require('serializeRelayQueryCall')(call)).toEqual(
    '.query( )');});});
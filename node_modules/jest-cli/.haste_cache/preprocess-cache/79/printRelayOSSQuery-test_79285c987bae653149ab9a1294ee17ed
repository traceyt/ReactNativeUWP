/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails oncall+relay
 */

'use strict';

require('configureForRelayOSS');










describe('printRelayOSSQuery', function () {var 
  getNode = require('RelayTestUtils').getNode;

  beforeEach(function () {
    jest.resetModuleRegistry();
    jasmine.addMatchers(require('RelayTestUtils').matchers);});


  describe('roots', function () {
    it('prints a query with no root arguments', function () {
      var query = getNode((function () {return { children: [{ fieldName: 'firstName', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'lastName', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'me', kind: 'Query', metadata: {}, name: 'PrintRelayOSSQuery', type: 'User' };})());var _printRelayOSSQuery = 







      require('printRelayOSSQuery')(query);var text = _printRelayOSSQuery.text;var variables = _printRelayOSSQuery.variables;
      expect(text).toEqualPrintedQuery('\n        query PrintRelayOSSQuery {\n          me {\n            firstName,\n            lastName,\n            id\n          }\n        }\n      ');








      expect(variables).toEqual({});});


    it('prints a generated query with one root argument', function () {
      var query = require('RelayQuery').Root.build(
      'FooQuery', 
      'node', 
      '123', 
      [
      require('RelayQuery').Field.build({ 
        fieldName: 'id', 
        type: 'String' })], 


      { 
        identifyingArgName: require('RelayNodeInterface').ID, 
        identifyingArgType: require('RelayNodeInterface').ID_TYPE, 
        isAbstract: true, 
        isDeferred: false, 
        isPlural: false }, 

      'Node');var _printRelayOSSQuery2 = 

      require('printRelayOSSQuery')(query);var text = _printRelayOSSQuery2.text;var variables = _printRelayOSSQuery2.variables;
      expect(text).toEqualPrintedQuery('\n        query FooQuery($id_0: ID!) {\n          node(id: $id_0) {\n            id\n          }\n        }\n      ');






      expect(variables).toEqual({ 
        id_0: '123' });});



    it('prints a query with one root argument', function () {
      var query = getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '123' } }], children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'PrintRelayOSSQuery', type: 'Node' };})());var _printRelayOSSQuery3 = 






      require('printRelayOSSQuery')(query);var text = _printRelayOSSQuery3.text;var variables = _printRelayOSSQuery3.variables;
      expect(text).toEqualPrintedQuery('\n        query PrintRelayOSSQuery {\n          node(id:"123") {\n            name,\n            id,\n            __typename\n          }\n        }\n      ');








      expect(variables).toEqual({});});


    it('prints a query with one root numeric argument', function () {
      var query = getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: 123 } }], children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'FooQuery', type: 'Node' };})());var _printRelayOSSQuery4 = 







      require('printRelayOSSQuery')(query);var text = _printRelayOSSQuery4.text;var variables = _printRelayOSSQuery4.variables;
      expect(text).toEqualPrintedQuery('\n        query FooQuery {\n          node(id:123) {\n            name,\n            id,\n            __typename\n          }\n        }\n      ');








      expect(variables).toEqual({});});


    it('prints a query with multiple root arguments', function () {
      var query = getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'names', value: [{ kind: 'CallValue', callValue: 'a' }, { kind: 'CallValue', callValue: 'b' }, { kind: 'CallValue', callValue: 'c' }] }], children: [{ fieldName: 'firstName', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'lastName', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'usernames', kind: 'Query', metadata: { isPlural: true, isAbstract: true, identifyingArgName: 'names' }, name: 'PrintRelayOSSQuery', type: 'Actor' };})());var _printRelayOSSQuery5 = 







      require('printRelayOSSQuery')(query);var text = _printRelayOSSQuery5.text;var variables = _printRelayOSSQuery5.variables;
      expect(text).toEqualPrintedQuery('\n        query PrintRelayOSSQuery {\n          usernames(names:["a","b","c"]) {\n            firstName,\n            lastName,\n            id,\n            __typename\n          }\n        }\n      ');









      expect(variables).toEqual({});});


    it('prints a query with multiple numeric arguments', function () {
      var query = getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'ids', value: [{ kind: 'CallValue', callValue: 123 }, { kind: 'CallValue', callValue: 456 }] }], children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'nodes', kind: 'Query', metadata: { isPlural: true, isAbstract: true, identifyingArgName: 'ids' }, name: 'FooQuery', type: 'Node' };})());var _printRelayOSSQuery6 = 







      require('printRelayOSSQuery')(query);var text = _printRelayOSSQuery6.text;var variables = _printRelayOSSQuery6.variables;
      expect(text).toEqualPrintedQuery('\n        query FooQuery {\n          nodes(ids:[123,456]) {\n            name,\n            id,\n            __typename\n          }\n        }\n      ');








      expect(variables).toEqual({});});


    it('prints enum call values', function () {
      var enumValue = 'WEB';
      var query = getNode((function () {return { calls: [{ kind: 'Call', metadata: { type: 'Environment' }, name: 'environment', value: { kind: 'CallVariable', callVariableName: 'env' } }], children: [{ fieldName: 'notificationSounds', kind: 'Field', metadata: {}, type: 'Boolean' }], fieldName: 'settings', kind: 'Query', metadata: { identifyingArgName: 'environment', identifyingArgType: 'Environment' }, name: 'FooQuery', type: 'Settings' };})(), 





      { 
        env: enumValue });var _printRelayOSSQuery7 = 

      require('printRelayOSSQuery')(query);var text = _printRelayOSSQuery7.text;var variables = _printRelayOSSQuery7.variables;
      expect(text).toEqualPrintedQuery('\n        query FooQuery($environment_0: Environment!) {\n          settings(environment: $environment_0) {\n            notificationSounds\n          }\n        }\n      ');






      expect(variables).toEqual({ 
        environment_0: enumValue });});



    it('prints object call values', function () {
      var objectValue = { query: 'Menlo Park' };
      var query = getNode((function () {return { calls: [{ kind: 'Call', metadata: { type: 'CheckinSearchInput' }, name: 'query', value: { kind: 'CallVariable', callVariableName: 'q' } }], children: [{ fieldName: 'query', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'checkinSearchQuery', kind: 'Query', metadata: { identifyingArgName: 'query', identifyingArgType: 'CheckinSearchInput' }, name: 'PrintRelayOSSQuery', type: 'CheckinSearchResult' };})(), 





      { 
        q: objectValue });var _printRelayOSSQuery8 = 


      require('printRelayOSSQuery')(query);var text = _printRelayOSSQuery8.text;var variables = _printRelayOSSQuery8.variables;
      expect(text).toEqualPrintedQuery('\n        query PrintRelayOSSQuery($query_0: CheckinSearchInput!) {\n          checkinSearchQuery(query: $query_0) {\n            query\n          }\n        }\n      ');






      expect(variables).toEqual({ 
        query_0: objectValue });});



    it('dedupes enum variables', function () {
      var enumValue = 'WEB';
      var query = getNode((function () {return { children: [{ alias: 'web', calls: [{ kind: 'Call', metadata: { type: 'Environment' }, name: 'environment', value: { kind: 'CallValue', callValue: 'WEB' } }], fieldName: 'notifications', kind: 'Field', metadata: {}, type: 'Boolean' }, { alias: 'foo', calls: [{ kind: 'Call', metadata: { type: 'Environment' }, name: 'environment', value: { kind: 'CallVariable', callVariableName: 'env' } }], fieldName: 'notifications', kind: 'Field', metadata: {}, type: 'Boolean' }], fieldName: 'defaultSettings', kind: 'Query', metadata: {}, name: 'FooQuery', type: 'Settings' };})(), 






      { 
        env: enumValue });

      var alias = require('generateRQLFieldAlias')('notifications.environment(WEB)');var _printRelayOSSQuery9 = 
      require('printRelayOSSQuery')(query);var text = _printRelayOSSQuery9.text;var variables = _printRelayOSSQuery9.variables;
      expect(text).toEqualPrintedQuery('\n        query FooQuery($environment_0: Environment!) {\n          defaultSettings {\n            ' + 


      alias + ': notifications(environment: $environment_0),\n            ' + 
      alias + ': notifications(environment: $environment_0)\n          }\n        }\n      ');



      expect(variables).toEqual({ 
        environment_0: enumValue });});



    it('dedupes object variables', function () {
      var query1 = { query: 'foo' };
      var query2 = { query: 'foo' };
      var query = getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '123' } }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, { children: [{ alias: 'foo', calls: [{ kind: 'Call', metadata: { type: 'StorySearchInput' }, name: 'query', value: { kind: 'CallVariable', callVariableName: 'query1' } }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }], fieldName: 'storySearch', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isPlural: true }, type: 'Story' }, { alias: 'bar', calls: [{ kind: 'Call', metadata: { type: 'StorySearchInput' }, name: 'query', value: { kind: 'CallVariable', callVariableName: 'query2' } }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }], fieldName: 'storySearch', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isPlural: true }, type: 'Story' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'oKsaG/SQAXr7:0', kind: 'Fragment', metadata: {}, name: 'User', type: 'User' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'FooQuery', type: 'Node' };})(), 












      { 
        query1: query1, 
        query2: query2 });

      var alias = require('generateRQLFieldAlias')('storySearch.query({"query":"foo"})');var _printRelayOSSQuery10 = 
      require('printRelayOSSQuery')(query);var text = _printRelayOSSQuery10.text;var variables = _printRelayOSSQuery10.variables;
      expect(text).toEqualPrintedQuery('\n        query FooQuery($query_0: StorySearchInput!) {\n          node(id: "123") {\n            id,\n            __typename,\n            ...F0\n          }\n        }\n        fragment F0 on User {\n          ' + 








      alias + ': storySearch(query: $query_0) {\n            id\n          },\n          ' + 


      alias + ': storySearch(query: $query_0) {\n            id\n          },\n          id\n        }\n      ');





      expect(variables).toEqual({ 
        query_0: query1 });});



    it('throws for ref queries', function () {
      var query = require('RelayQuery').Root.build(
      'RefQueryName', 
      require('RelayNodeInterface').NODE, 
      require('QueryBuilder').createBatchCallVariable('q0', '$.*.actor.id'), 
      [
      require('RelayQuery').Field.build({ fieldName: 'id', type: 'String' }), 
      require('RelayQuery').Field.build({ fieldName: 'name', type: 'String' })], 

      { 
        isDeferred: true, 
        identifyingArgName: require('RelayNodeInterface').ID, 
        type: require('RelayNodeInterface').NODE_TYPE });


      expect(function () {return require('printRelayOSSQuery')(query);}).toFailInvariant(
      'printRelayOSSQuery(): Deferred queries are not supported.');});});




  describe('fragments', function () {
    it('prints fragments', function () {
      var fragment = getNode((function () {return { children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'actor', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true }, type: 'Actor' }], id: 'NNMt0gc2i18l:0', kind: 'Fragment', metadata: {}, name: 'PrintRelayOSSQueryRelayQL', type: 'Viewer' };})());var _printRelayOSSQuery11 = 






      require('printRelayOSSQuery')(fragment);var text = _printRelayOSSQuery11.text;var variables = _printRelayOSSQuery11.variables;
      expect(text).toEqualPrintedQuery('\n        fragment PrintRelayOSSQueryRelayQL on Viewer {\n          actor {\n            id,\n            __typename\n          }\n        }\n      ');







      expect(variables).toEqual({});});


    it('prints inline fragments', function () {
      var fragment = getNode((function () {return { children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, { children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: '8bDYfyFNf3sw:0', kind: 'Fragment', metadata: {}, name: 'User', type: 'User' }, { children: [{ children: [{ fieldName: 'uri', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: '8bDYfyFNf3sw:1', kind: 'Fragment', metadata: {}, name: 'User', type: 'User' }], fieldName: 'actor', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true }, type: 'Actor' }], id: '8bDYfyFNf3sw:2', kind: 'Fragment', metadata: {}, name: 'PrintRelayOSSQueryRelayQL', type: 'Viewer' };})());var _printRelayOSSQuery12 = 














      require('printRelayOSSQuery')(fragment);var text = _printRelayOSSQuery12.text;var variables = _printRelayOSSQuery12.variables;
      expect(text).toEqualPrintedQuery('\n        fragment PrintRelayOSSQueryRelayQL on Viewer {\n          actor {\n            id,\n            __typename,\n            ...F0,\n            ...F1\n          }\n        }\n        fragment F0 on User {\n          name,\n          id\n        }\n        fragment F1 on User {\n          profilePicture {\n            uri\n          },\n          id\n        }\n      ');



















      expect(variables).toEqual({});});


    it('prints fragments with incrementing names', function () {
      var fragmentA = (function () {return { children: [{ fieldName: 'firstName', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'doKu2+N8SG/a:0', kind: 'Fragment', metadata: {}, name: 'PrintRelayOSSQueryRelayQL', type: 'User' };})();
      var fragmentB = (function () {return { children: [{ fieldName: 'lastName', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 't/uunQmaOlI8:0', kind: 'Fragment', metadata: {}, name: 'PrintRelayOSSQueryRelayQL', type: 'User' };})();
      var fragment = getNode((function (RQL_0, RQL_1) {return { children: [].concat.apply([], [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, require('Relay').QL.__frag(RQL_0), require('Relay').QL.__frag(RQL_1)]), id: 'KKBbpxY7AZ3R:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'PrintRelayOSSQueryRelayQL', type: 'Node' };})(

      fragmentA, 
      fragmentB));var _printRelayOSSQuery13 = 


      require('printRelayOSSQuery')(fragment);var text = _printRelayOSSQuery13.text;var variables = _printRelayOSSQuery13.variables;
      expect(text).toEqualPrintedQuery('\n        fragment PrintRelayOSSQueryRelayQL on Node {\n          id,\n          __typename,\n          ...F0,\n          ...F1\n        }\n        fragment F0 on User {\n          firstName,\n          id\n        }\n        fragment F1 on User {\n          lastName,\n          id\n        }\n      ');















      expect(variables).toEqual({});});


    it('prints fragments with identical children only once', function () {
      var fragmentA = (function () {return { children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'BM5uMqc1dLU1:0', kind: 'Fragment', metadata: {}, name: 'PrintRelayOSSQueryRelayQL', type: 'User' };})();
      var fragmentB = (function () {return { children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'A58LgJsk3UX5:0', kind: 'Fragment', metadata: {}, name: 'PrintRelayOSSQueryRelayQL', type: 'User' };})();
      var fragment = getNode((function (RQL_0, RQL_1) {return { children: [].concat.apply([], [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, require('Relay').QL.__frag(RQL_0), require('Relay').QL.__frag(RQL_1)]), id: 'a+Tw+3gxx5TW:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'PrintRelayOSSQueryRelayQL', type: 'Node' };})(

      fragmentA, 
      fragmentB));var _printRelayOSSQuery14 = 


      require('printRelayOSSQuery')(fragment);var text = _printRelayOSSQuery14.text;var variables = _printRelayOSSQuery14.variables;
      expect(text).toEqualPrintedQuery('\n        fragment PrintRelayOSSQueryRelayQL on Node {\n          id,\n          __typename,\n          ...F0\n        }\n        fragment F0 on User {\n          name,\n          id\n        }\n      ');










      expect(variables).toEqual({});});


    it('prints fragments with different variables separately', function () {
      var concreteFragment = (function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'size', value: [{ kind: 'CallVariable', callVariableName: 'width' }, { kind: 'CallVariable', callVariableName: 'height' }] }], children: [{ fieldName: 'uri', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'D6+kNYYkdqLb:0', kind: 'Fragment', metadata: {}, name: 'PrintRelayOSSQueryRelayQL', type: 'User' };})();






      var fragment = getNode((function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }], id: 'vpuTc7aipEQq:0', kind: 'Fragment', metadata: {}, name: 'PrintRelayOSSQueryRelayQL', type: 'User' };})()).clone([
      getNode(concreteFragment, { width: 32, height: 32 }), 
      getNode(concreteFragment, { width: 64, height: 64 })]);var _printRelayOSSQuery15 = 

      require('printRelayOSSQuery')(fragment);var text = _printRelayOSSQuery15.text;var variables = _printRelayOSSQuery15.variables;
      expect(text).toEqualPrintedQuery('\n        fragment PrintRelayOSSQueryRelayQL on User {\n          ...F0,\n          ...F1\n        }\n        fragment F0 on User {\n          ' + 





      require('generateRQLFieldAlias')('profilePicture.size(32,32)') + ':\n              profilePicture(size: [32, 32]) {\n            uri\n          },\n          id\n        }\n        fragment F1 on User {\n          ' + 






      require('generateRQLFieldAlias')('profilePicture.size(64,64)') + ':\n              profilePicture(size: [64, 64]) {\n            uri\n          },\n          id\n        }\n      ');






      expect(variables).toEqual({});});


    it('prints fragments with different runtime children separately', function () {
      var child = undefined;
      child = (function () {return { children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'TlSxpOZyB2vy:0', kind: 'Fragment', metadata: {}, name: 'PrintRelayOSSQueryRelayQL', type: 'User' };})();
      var fragmentA = (function (RQL_0) {return { children: [].concat.apply([], [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, require('Relay').QL.__frag(RQL_0)]), id: 'g4HdFDw9J9Yg:0', kind: 'Fragment', metadata: {}, name: 'PrintRelayOSSQueryRelayQL', type: 'User' };})(child);
      child = (function () {return { children: [{ children: [{ fieldName: 'uri', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: '0hzHUo3kkPJb:0', kind: 'Fragment', metadata: {}, name: 'PrintRelayOSSQueryRelayQL', type: 'User' };})();
      var fragmentB = (function (RQL_0) {return { children: [].concat.apply([], [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, require('Relay').QL.__frag(RQL_0)]), id: 'PjzFHzkc0vXU:0', kind: 'Fragment', metadata: {}, name: 'PrintRelayOSSQueryRelayQL', type: 'User' };})(child);

      var fragment = getNode((function (RQL_0, RQL_1) {return { children: [].concat.apply([], [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, require('Relay').QL.__frag(RQL_0), require('Relay').QL.__frag(RQL_1)]), id: 'BwbAgctm2jHH:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'PrintRelayOSSQueryRelayQL', type: 'Node' };})(

      fragmentA, 
      fragmentB));var _printRelayOSSQuery16 = 


      require('printRelayOSSQuery')(fragment);var text = _printRelayOSSQuery16.text;var variables = _printRelayOSSQuery16.variables;
      expect(text).toEqualPrintedQuery('\n        fragment PrintRelayOSSQueryRelayQL on Node {\n          id,\n          __typename,\n          ...F1,\n          ...F3\n        }\n        fragment F0 on User {\n          name,\n          id\n        }\n        fragment F1 on User {\n          id,\n          ...F0\n        }\n        fragment F2 on User {\n          profilePicture {\n            uri\n          },\n          id\n        }\n        fragment F3 on User {\n          id,\n          ...F2\n        }\n      ');

























      expect(variables).toEqual({});});


    it('prints fragments with different IDs but identical output once', function () {
      var concreteFragment = (function () {return { children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'dP+6Rp+7t3un:0', kind: 'Fragment', metadata: {}, name: 'PrintRelayOSSQueryRelayQL', type: 'User' };})();
      var fragment = getNode((function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }], id: 'IRunbDBqaD8E:0', kind: 'Fragment', metadata: {}, name: 'PrintRelayOSSQueryRelayQL', type: 'User' };})()).clone([
      getNode(concreteFragment, { value: 123 }), 
      getNode(concreteFragment, { value: 456 })]);var _printRelayOSSQuery17 = 

      require('printRelayOSSQuery')(fragment);var text = _printRelayOSSQuery17.text;var variables = _printRelayOSSQuery17.variables;
      expect(text).toEqualPrintedQuery('\n        fragment PrintRelayOSSQueryRelayQL on User {\n          ...F0\n        }\n        fragment F0 on User {\n          name,\n          id\n        }\n      ');








      expect(variables).toEqual({});});


    it('omits empty fragments', function () {
      var fragment = getNode((function () {return { children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'actor', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true }, type: 'Actor' }, { children: [{ children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], directives: [{ kind: 'Directive', name: 'include', args: [{ name: 'if', value: { kind: 'CallVariable', callVariableName: 'false' } }] }], fieldName: 'actor', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true }, type: 'Actor' }], id: 'raOXDbmpflsi:0', kind: 'Fragment', metadata: {}, name: 'Viewer', type: 'Viewer' }], id: 'raOXDbmpflsi:1', kind: 'Fragment', metadata: {}, name: 'PrintRelayOSSQueryRelayQL', type: 'Viewer' };})(), 










      { 'false': false });var _printRelayOSSQuery18 = 
      require('printRelayOSSQuery')(fragment);var text = _printRelayOSSQuery18.text;
      expect(text).toEqualPrintedQuery('\n        fragment PrintRelayOSSQueryRelayQL on Viewer {\n          actor {\n            id,\n            __typename\n          }\n        }\n      ');});});










  describe('fields', function () {
    it('prints a field with one argument', function () {
      var alias = require('generateRQLFieldAlias')('newsFeed.first(10)');
      var fragment = getNode((function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallVariable', callVariableName: 'first' } }], children: [{ children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, isAbstract: true, isRequisite: true }, type: 'FeedUnit' }, { fieldName: 'cursor', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'NewsFeedEdge' }, { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true, isGenerated: true, isRequisite: true }, type: 'PageInfo' }], fieldName: 'newsFeed', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'NewsFeedConnection' }], id: 'tYebAqfMD144:0', kind: 'Fragment', metadata: {}, name: 'PrintRelayOSSQueryRelayQL', type: 'Viewer' };})(), 









      { first: 10 });var _printRelayOSSQuery19 = 
      require('printRelayOSSQuery')(fragment);var text = _printRelayOSSQuery19.text;var variables = _printRelayOSSQuery19.variables;
      expect(text).toEqualPrintedQuery('\n        fragment PrintRelayOSSQueryRelayQL on Viewer {\n          ' + 

      alias + ':newsFeed(first:10) {\n            edges {\n              node {\n                id,\n                __typename\n              },\n              cursor\n            },\n            pageInfo {\n              hasNextPage,\n              hasPreviousPage\n            }\n          }\n        }\n      ');














      expect(variables).toEqual({});});


    it('prints a field with multiple arguments', function () {
      var alias = require('generateRQLFieldAlias')('profilePicture.size(32,64)');
      var fragment = getNode((function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'size', value: [{ kind: 'CallValue', callValue: '32' }, { kind: 'CallValue', callValue: '64' }] }], children: [{ fieldName: 'uri', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'KN+SSUD5OD2a:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'PrintRelayOSSQueryRelayQL', type: 'Actor' };})());var _printRelayOSSQuery20 = 






      require('printRelayOSSQuery')(fragment);var text = _printRelayOSSQuery20.text;var variables = _printRelayOSSQuery20.variables;
      expect(text).toEqualPrintedQuery('\n        fragment PrintRelayOSSQueryRelayQL on Actor {\n          ' + 

      alias + ':profilePicture(size:["32","64"]) {\n            uri\n          },\n          id,\n          __typename\n        }\n      ');






      expect(variables).toEqual({});});


    it('prints a field with multiple variable arguments', function () {
      var alias = require('generateRQLFieldAlias')('profilePicture.size(32,64)');
      var fragment = getNode((function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'size', value: [{ kind: 'CallVariable', callVariableName: 'width' }, { kind: 'CallVariable', callVariableName: 'height' }] }], children: [{ fieldName: 'uri', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'tIUwFelbkPk9:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'PrintRelayOSSQueryRelayQL', type: 'Actor' };})(), 





      { 
        height: 64, 
        width: 32 });var _printRelayOSSQuery21 = 

      require('printRelayOSSQuery')(fragment);var text = _printRelayOSSQuery21.text;var variables = _printRelayOSSQuery21.variables;
      expect(text).toEqualPrintedQuery('\n        fragment PrintRelayOSSQueryRelayQL on Actor {\n          ' + 

      alias + ':profilePicture(size:[32,64]) {\n            uri\n          },\n          id,\n          __typename\n        }\n      ');






      expect(variables).toEqual({});});


    it('prints scalar arguments', function () {
      var fragment = getNode((function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallVariable', callVariableName: 'first' } }, { kind: 'Call', metadata: {}, name: 'orderby', value: { kind: 'CallVariable', callVariableName: 'orderby' } }, { kind: 'Call', metadata: {}, name: 'isViewerFriend', value: { kind: 'CallVariable', callVariableName: 'isViewerFriend' } }], children: [{ children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'User' }, { fieldName: 'cursor', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'FriendsEdge' }, { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true, isGenerated: true, isRequisite: true }, type: 'PageInfo' }], fieldName: 'friends', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'FriendsConnection' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'Dfu3bVC/6M66:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'PrintRelayOSSQueryRelayQL', type: 'Actor' };})(), 













      { 
        first: 10, 
        orderby: ['name'], 
        isViewerFriend: false });

      var alias = fragment.getChildren()[0].getSerializationKey();var _printRelayOSSQuery22 = 
      require('printRelayOSSQuery')(fragment);var text = _printRelayOSSQuery22.text;var variables = _printRelayOSSQuery22.variables;
      expect(text).toEqualPrintedQuery('\n        fragment PrintRelayOSSQueryRelayQL on Actor {\n          ' + 

      alias + ':friends(first:10,orderby:["name"],isViewerFriend:false) {\n            edges {\n              node {\n                id\n              },\n              cursor\n            },\n            pageInfo {\n              hasNextPage,\n              hasPreviousPage\n            }\n          },\n          id,\n          __typename\n        }\n      ');















      expect(variables).toEqual({});});


    it('prints object call values', function () {
      var enumValue = 'WEB';
      var fragment = (function () {return { children: [{ calls: [{ kind: 'Call', metadata: { type: 'Environment' }, name: 'environment', value: { kind: 'CallVariable', callVariableName: 'env' } }], fieldName: 'notifications', kind: 'Field', metadata: {}, type: 'Boolean' }], id: 'px7PE+8GYGlx:0', kind: 'Fragment', metadata: {}, name: 'PrintRelayOSSQueryRelayQL', type: 'Settings' };})();




      var query = getNode((function (RQL_0) {return { children: [].concat.apply([], [require('Relay').QL.__frag(RQL_0)]), fieldName: 'defaultSettings', kind: 'Query', metadata: {}, name: 'PrintRelayOSSQuery', type: 'Settings' };})(


      fragment), 


      { 
        env: enumValue });

      var alias = require('generateRQLFieldAlias')('notifications.environment(WEB)');var _printRelayOSSQuery23 = 
      require('printRelayOSSQuery')(query);var text = _printRelayOSSQuery23.text;var variables = _printRelayOSSQuery23.variables;
      expect(text).toEqualPrintedQuery('\n        query PrintRelayOSSQuery($environment_0: Environment!) {\n          defaultSettings {\n            ...F0\n          }\n        }\n        fragment F0 on Settings {\n          ' + 






      alias + ':notifications(environment: $environment_0)\n        }\n      ');


      expect(variables).toEqual({ 
        environment_0: enumValue });});



    it('prints inline fragments as references', function () {
      // these fragments have different types and cannot be flattened
      var nestedFragment = (function () {return { children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'Vi4IK/aFBJa3:0', kind: 'Fragment', metadata: {}, name: 'PrintRelayOSSQueryRelayQL', type: 'User' };})();
      var fragment = getNode((function (RQL_0, RQL_1) {return { children: [{ children: [].concat.apply([], [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, require('Relay').QL.__frag(RQL_0), require('Relay').QL.__frag(RQL_1)]), fieldName: 'actor', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true }, type: 'Actor' }], id: 'sT3QwlQXYVks:0', kind: 'Fragment', metadata: {}, name: 'PrintRelayOSSQueryRelayQL', type: 'Viewer' };})(



      nestedFragment, 
      nestedFragment));var _printRelayOSSQuery24 = 



      require('printRelayOSSQuery')(fragment);var text = _printRelayOSSQuery24.text;var variables = _printRelayOSSQuery24.variables;
      expect(text).toEqualPrintedQuery('\n        fragment PrintRelayOSSQueryRelayQL on Viewer {\n          actor {\n            id,\n            __typename,\n            ...F0\n          }\n        }\n        fragment F0 on User {\n          name,\n          id\n        }\n      ');












      expect(variables).toEqual({});});});



  it('prints a mutation', function () {
    var inputValue = { 
      clientMutationId: '123', 
      foo: 'bar' };

    var mutation = getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'feedbackLike', value: { kind: 'CallVariable', callVariableName: 'input' } }], children: [{ fieldName: 'clientMutationId', kind: 'Field', metadata: { isRequisite: true }, type: 'String' }, { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { children: [{ calls: [{ kind: 'Call', metadata: { type: 'PhotoSize' }, name: 'preset', value: { kind: 'CallValue', callValue: 'SMALL' } }], children: [{ fieldName: 'uri', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'actor', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true }, type: 'Actor' }, { fieldName: 'likeSentence', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Text' }, { fieldName: 'likers', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'LikersOfContentConnection' }], fieldName: 'feedback', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Feedback' }], kind: 'Mutation', metadata: { inputType: 'FeedbackLikeInput' }, name: 'PrintRelayOSSQuery', responseType: 'FeedbackLikeResponsePayload' };})(), 















    { input: inputValue });

    var alias = require('generateRQLFieldAlias')('profilePicture.preset(SMALL)');var _printRelayOSSQuery25 = 
    require('printRelayOSSQuery')(mutation);var text = _printRelayOSSQuery25.text;var variables = _printRelayOSSQuery25.variables;
    expect(text).toEqualPrintedQuery('\n      mutation PrintRelayOSSQuery(\n        $input_0: FeedbackLikeInput!,\n        $preset_1: PhotoSize!\n      ) {\n        feedbackLike(input: $input_0) {\n          clientMutationId,\n          feedback {\n            id,\n            actor {\n              ' + 









    alias + ': profilePicture(preset: $preset_1) {\n                uri\n              },\n              id,\n              __typename\n            },\n            likeSentence,\n            likers\n          }\n        }\n      }\n    ');











    expect(variables).toEqual({ 
      input_0: inputValue, 
      preset_1: 'SMALL' });});



  it('prints directives', function () {
    var params = { cond: true };
    var nestedFragment = (function () {return { children: [{ directives: [{ kind: 'Directive', name: 'skip', args: [{ name: 'if', value: { kind: 'CallVariable', callVariableName: 'cond' } }] }], fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], directives: [{ kind: 'Directive', name: 'include', args: [{ name: 'if', value: { kind: 'CallVariable', callVariableName: 'cond' } }] }], id: 'YNmKwzC+WgSZ:0', kind: 'Fragment', metadata: {}, name: 'PrintRelayOSSQueryRelayQL', type: 'User' };})();




    var query = getNode((function (RQL_0) {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: 123 } }], children: [].concat.apply([], [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, require('Relay').QL.__frag(RQL_0)]), directives: [{ kind: 'Directive', name: 'skip', args: [{ name: 'if', value: { kind: 'CallValue', callValue: true } }] }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'PrintRelayOSSQuery', type: 'Node' };})(


    nestedFragment), 


    params);var _printRelayOSSQuery26 = 
    require('printRelayOSSQuery')(query);var text = _printRelayOSSQuery26.text;var variables = _printRelayOSSQuery26.variables;
    expect(text).toEqualPrintedQuery('\n      query PrintRelayOSSQuery {\n        node(id: 123) @skip(if: true) {\n          id,\n          __typename,\n          ...F0\n        }\n      }\n      fragment F0 on User @include(if: true) {\n        id\n      }\n    ');











    expect(variables).toEqual({});});


  it('throws for directives with complex values', function () {
    var params = { data: { foo: 'bar' } };
    var query = getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: 123 } }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], directives: [{ kind: 'Directive', name: 'include', args: [{ name: 'if', value: { kind: 'CallVariable', callVariableName: 'data' } }] }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'PrintRelayOSSQuery', type: 'Node' };})(), 





    params);
    expect(function () {return require('printRelayOSSQuery')(query);}).toFailInvariant(
    'printRelayOSSQuery(): Relay only supports directives with scalar ' + 
    'values (boolean, number, or string), got `if: [object Object]`.');});});
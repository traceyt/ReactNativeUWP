'use strict';









jest.
setMock('worker-farm',function(){return function(){return undefined;};}).
dontMock('node-haste/node_modules/throat').
dontMock('underscore').
dontMock('../../lib/ModuleTransport').
setMock('uglify-js').
dontMock('../');

jest.mock('fs');






describe('Bundler',function(){

function createModule(_ref)







{var path=_ref.path;var id=_ref.id;var dependencies=_ref.dependencies;var isAsset=_ref.isAsset;var isAsset_DEPRECATED=_ref.isAsset_DEPRECATED;var isJSON=_ref.isJSON;var resolution=_ref.resolution;
return {
path:path,
resolution:resolution,
getDependencies:function(){return Promise.resolve(dependencies);},
getName:function(){return Promise.resolve(id);},
isJSON:function(){return isJSON;},
isAsset:function(){return isAsset;},
isAsset_DEPRECATED:function(){return isAsset_DEPRECATED;},
read:function(){return {
code:'arbitrary',
source:'arbitrary'};}};}




var getDependencies;
var getModuleSystemDependencies;
var bundler;
var assetServer;
var modules;
var projectRoots;

beforeEach(function(){
getDependencies=jest.genMockFn();
getModuleSystemDependencies=jest.genMockFn();
projectRoots=['/root'];

require('../../Resolver').mockImpl(function(){
return {
getDependencies:getDependencies,
getModuleSystemDependencies:getModuleSystemDependencies};});



require('fs').statSync.mockImpl(function(){
return {
isDirectory:function(){return true;}};});



require('fs').readFile.mockImpl(function(file,callback){
callback(null,'{"json":true}');});


assetServer={
getAssetData:jest.genMockFn()};


bundler=new (require('../'))({
projectRoots:projectRoots,
assetServer:assetServer});


modules=[
createModule({id:'foo',path:'/root/foo.js',dependencies:[]}),
createModule({id:'bar',path:'/root/bar.js',dependencies:[]}),
createModule({
path:'/root/img/img.png',
id:'image!img',
isAsset_DEPRECATED:true,
dependencies:[],
resolution:2}),

createModule({
id:'new_image.png',
path:'/root/img/new_image.png',
isAsset:true,
resolution:2,
dependencies:[]}),

createModule({
id:'package/file.json',
path:'/root/file.json',
isJSON:true,
dependencies:[]})];



getDependencies.mockImpl(function(main,options,transformOptions){return (
Promise.resolve({
mainModuleId:'foo',
dependencies:modules,
transformOptions:transformOptions}));});



getModuleSystemDependencies.mockImpl(function(){
return [];});


require('image-size').mockImpl(function(path,cb){
cb(null,{width:50,height:100});});});



pit('create a bundle',function(){
assetServer.getAssetData.mockImpl(function(){
return {
scales:[1,2,3],
files:[
'/root/img/img.png',
'/root/img/img@2x.png',
'/root/img/img@3x.png'],

hash:'i am a hash',
name:'img',
type:'png'};});



return bundler.bundle({
entryFile:'/root/foo.js',
runBeforeMainModule:[],
runModule:true,
sourceMapUrl:'source_map_url'}).
then(function(bundle){
var ithAddedModule=function(i){return bundle.addModule.mock.calls[i][2].path;};

expect(ithAddedModule(0)).toEqual('/root/foo.js');
expect(ithAddedModule(1)).toEqual('/root/bar.js');
expect(ithAddedModule(2)).toEqual('/root/img/img.png');
expect(ithAddedModule(3)).toEqual('/root/img/new_image.png');
expect(ithAddedModule(4)).toEqual('/root/file.json');

expect(bundle.finalize.mock.calls[0]).toEqual([
{runMainModule:true,runBeforeMainModule:[]}]);


expect(bundle.addAsset.mock.calls).toContain([{
__packager_asset:true,
path:'/root/img/img.png',
uri:'img',
width:25,
height:50,
deprecated:true}]);


expect(bundle.addAsset.mock.calls).toContain([{
__packager_asset:true,
fileSystemLocation:'/root/img',
httpServerLocation:'/assets/img',
width:25,
height:50,
scales:[1,2,3],
files:[
'/root/img/img.png',
'/root/img/img@2x.png',
'/root/img/img@3x.png'],

hash:'i am a hash',
name:'img',
type:'png'}]);});});







pit('gets the list of dependencies from the resolver',function(){
var entryFile='/root/foo.js';
return bundler.getDependencies({entryFile:entryFile,recursive:true}).then(function(){return (
expect(getDependencies).toBeCalledWith(
'/root/foo.js',
{dev:true,recursive:true},
{minify:false,
dev:true,
transform:{
dev:true,
hot:false,
projectRoots:projectRoots}},


undefined));});});




describe('getOrderedDependencyPaths',function(){
beforeEach(function(){
assetServer.getAssetData.mockImpl(function(relPath){
if(relPath==='img/new_image.png'){
return {
scales:[1,2,3],
files:[
'/root/img/new_image.png',
'/root/img/new_image@2x.png',
'/root/img/new_image@3x.png'],

hash:'i am a hash',
name:'img',
type:'png'};}else 

if(relPath==='img/new_image2.png'){
return {
scales:[1,2,3],
files:[
'/root/img/new_image2.png',
'/root/img/new_image2@2x.png',
'/root/img/new_image2@3x.png'],

hash:'i am a hash',
name:'img',
type:'png'};}



throw new Error('unknown image '+relPath);});});



pit('should get the concrete list of all dependency files',function(){
modules.push(
createModule({
id:'new_image2.png',
path:'/root/img/new_image2.png',
isAsset:true,
resolution:2,
dependencies:[]}));



return bundler.getOrderedDependencyPaths('/root/foo.js',true).
then(function(paths){return expect(paths).toEqual([
'/root/foo.js',
'/root/bar.js',
'/root/img/img.png',
'/root/img/new_image.png',
'/root/img/new_image@2x.png',
'/root/img/new_image@3x.png',
'/root/file.json',
'/root/img/new_image2.png',
'/root/img/new_image2@2x.png',
'/root/img/new_image2@3x.png']);});});});});
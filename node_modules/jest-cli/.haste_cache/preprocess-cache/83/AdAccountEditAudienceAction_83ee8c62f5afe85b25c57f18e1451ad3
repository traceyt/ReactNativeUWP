'use strict';













var AdAccountEditAudienceAction={







editAudience:function(
audienceID,
audienceName,
targetSpec,
onSuccess,
onFailure)
{
!
require('isValidRecordID')(audienceID)?require('invariant')(0,
'Action taken on unknown ad audience id '+audienceID):undefined;


var mutationFrag=require('GraphQLMutationQueryCreator').createQuery(
'ad_audience_edit',
{ad_audience:audienceID});


var mutation=function(RQL_0){return {calls:[{kind:'Call',metadata:{},name:'ad_audience_edit',value:{kind:'CallVariable',callVariableName:'input'}}],children:[].concat.apply([],[{fieldName:'client_mutation_id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},require('Relay').QL.__frag(RQL_0)]),kind:'Mutation',metadata:{inputType:'AdAudienceEditData!'},name:'AdAccountEditAudienceAction',responseType:'AdAudienceEditResponsePayload'};}(


mutationFrag);




var action=new (require('AdsManagerMutationAction'))(
require('MobileAdsManagerLoggerConsts').events.EDIT_AUDIENCE);


action.runServerAction(
mutation,
{
ad_audience_id:audienceID,
name:audienceName,
target_spec:targetSpec},

function(err,response){
if(err){
onFailure&&onFailure(err);}else 
{
onSuccess&&onSuccess(response);}


var id=action.getClientMutationID();
require('defaultRQLMutationCallback')(err,response,mutation,id);});}};





module.exports=AdAccountEditAudienceAction;
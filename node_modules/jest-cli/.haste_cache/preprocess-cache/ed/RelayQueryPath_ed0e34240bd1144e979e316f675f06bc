'use strict';var _RelayNodeInterface=require('RelayNodeInterface');var 

























ID=_RelayNodeInterface.ID;var ID_TYPE=_RelayNodeInterface.ID_TYPE;var NODE=_RelayNodeInterface.NODE;var NODE_TYPE=_RelayNodeInterface.NODE_TYPE;var TYPENAME=_RelayNodeInterface.TYPENAME;

var idField=require('RelayQuery').Field.build({
fieldName:ID,
type:'String'});

var typeField=require('RelayQuery').Field.build({
fieldName:TYPENAME,
type:'String'});


























var RelayQueryPath={
createForID:function(dataID,name){
!
!require('RelayRecord').isClientID(dataID)?require('invariant')(0,
'RelayQueryPath.createForID: Expected dataID to be a server id, got '+
'`%s`.',
dataID):undefined;

return {
dataID:dataID,
name:name,
type:'node'};},



create:function(root){
if(root.getFieldName()===NODE){
var identifyingArg=root.getIdentifyingArg();
if(identifyingArg&&typeof identifyingArg.value==='string'){
return {
dataID:identifyingArg.value,
name:root.getName(),
type:'node'};}}



return {
root:root,
type:'root'};},



getPath:function(
parent,
node,
dataID)
{
if(require('RelayRecord').isClientID(dataID)){
return {
node:node,
parent:parent,
type:'client'};}else 

if(parent.type==='node'&&parent.dataID===dataID){
return parent;}else 
{
return {
dataID:dataID,
name:RelayQueryPath.getName(parent),
type:'node'};}},




isRootPath:function(path){
return path.type==='node'||path.type==='root';},


getParent:function(path){
!(
path.type==='client')?require('invariant')(0,
'RelayQueryPath: Cannot get the parent of a root path.'):undefined;

return path.parent;},


getName:function(path){
while(path.type==='client'){
path=path.parent;}

if(path.type==='root'){
return path.root.getName();}else 
if(path.type==='node'){
return path.name;}else 
{
!
false?require('invariant')(0,
'RelayQueryPath: Invalid path `%s`.',
path):undefined;}},




getQuery:function(
store,
path,
appendNode)
{
var child=appendNode;
while(path.type==='client'){
var _node=path.node;
var idFieldName=_node instanceof require('RelayQuery').Field?
_node.getInferredPrimaryKey():
ID;
if(idFieldName){
child=_node.clone([
child,
_node.getFieldByStorageKey(idFieldName),
_node.getFieldByStorageKey(TYPENAME)]);}else 

{
child=_node.clone([child]);}

path=path.parent;}

var root=path.type==='root'?
path.root:
createRootQueryFromNodePath(path);
var children=[
child,
root.getFieldByStorageKey(ID),
root.getFieldByStorageKey(TYPENAME)];

var rootChildren=getRootFragmentForQuery(store,root,children);
var pathQuery=root.clone(rootChildren);

!(
pathQuery instanceof require('RelayQuery').Root)?require('invariant')(0,
'RelayQueryPath: Expected the root of path `%s` to be a query.',
RelayQueryPath.getName(path)):undefined;

return pathQuery;}};



function createRootQueryFromNodePath(
nodePath)
{
return require('RelayQuery').Root.build(
nodePath.name,
NODE,
nodePath.dataID,
[idField,typeField],
{
identifyingArgName:ID,
identifyingArgType:ID_TYPE,
isAbstract:true,
isDeferred:false,
isPlural:false},

NODE_TYPE);}



function getRootFragmentForQuery(
store,
root,
children)
{
var nextChildren=[];


children.forEach(function(child){
if(child){
nextChildren.push(child);}});


if(!root.isAbstract()){

return nextChildren;}

var identifyingArgKeys=[];
require('forEachRootCallArg')(root,function(_ref){var identifyingArgKey=_ref.identifyingArgKey;
identifyingArgKeys.push(identifyingArgKey);});

var identifyingArgKey=identifyingArgKeys[0];
var rootID=store.getDataID(
root.getStorageKey(),
identifyingArgKey);

var rootType=rootID&&store.getType(rootID);

if(rootType!=null){
return [require('RelayQuery').Fragment.build(
root.getName(),
rootType,
nextChildren)];}else 

{
var rootState=rootID!=null?
store.getRecordState(rootID):
require('RelayRecordState').UNKNOWN;
require('warning')(
false,
'RelayQueryPath: No typename found for %s record `%s`. Generating a '+
'possibly invalid query.',
rootState.toLowerCase(),
rootID);

return nextChildren;}}



module.exports=RelayQueryPath;
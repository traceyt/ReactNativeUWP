/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails oncall+relay
 */

'use strict';



describe('stableStringify', function () {
  it('stringifies non-objects', function () {
    expect(require('stableStringify')('foo')).toBe('"foo"');
    expect(require('stableStringify')(1)).toBe('1');
    expect(require('stableStringify')(-1)).toBe('-1');
    expect(require('stableStringify')(true)).toBe('true');
    expect(require('stableStringify')(false)).toBe('false');
    expect(require('stableStringify')(null)).toBe('null');
    expect(require('stableStringify')()).toBe(undefined);});


  it('stringifies empty objects', function () {
    expect(require('stableStringify')({})).toBe('{}');});


  it('stringifies empty arrays', function () {
    expect(require('stableStringify')([])).toBe('[]');});


  it('stringifies shallow objects', function () {
    var object = {};
    object.a = 1;
    object.b = 2;
    expect(require('stableStringify')(object)).toBe('{a:1,b:2}');});


  it('stringifies stably, despite opposite key insertion order', function () {
    var object = {};
    object.b = 2;
    object.a = 1;
    expect(require('stableStringify')(object)).toBe('{a:1,b:2}');});


  it('stringifies shallow arrays', function () {
    var array = ['foo', 'bar', 'baz'];
    expect(require('stableStringify')(array)).toBe('[0:"foo",1:"bar",2:"baz"]');});


  it('skips "holes" in sparse arrays', function () {
    var array = [];
    array[5] = 'foo';
    expect(require('stableStringify')(array)).toBe('[5:"foo"]');});


  it('stringifies nested structures', function () {
    var object = { 
      top2: { 
        middle: { 
          inner: [1, 'foo', ['bar', 2]], 
          other: false } }, 


      top1: [
      { first: true }, 
      { first: false }, 
      'random'], 

      misc: true, 
      extra: null };


    var expected = 
    '{' + 
    'extra:null,' + 
    'misc:true,' + 
    'top1:[0:{first:true},1:{first:false},2:"random"],' + 
    'top2:{middle:{inner:[0:1,1:"foo",2:[0:"bar",1:2]],other:false}}' + 
    '}';

    expect(require('stableStringify')(object)).toBe(expected);});});
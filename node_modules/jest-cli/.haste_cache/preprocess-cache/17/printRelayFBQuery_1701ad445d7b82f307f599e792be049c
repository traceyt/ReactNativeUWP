'use strict';


































function printRelayFBQuery(node){
var fragmentTexts=[];
var variables={};
var printerState={
fragmentCount:0,
fragmentNameByHash:{},
fragmentNameByText:{},
fragmentTexts:fragmentTexts,
variables:variables};

var queryText=null;
if(node instanceof require('RelayQuery').Root){
queryText=printRoot(node,printerState);}else 
if(node instanceof require('RelayQuery').Fragment){
queryText=printFragment(node,printerState);}else 
if(node instanceof require('RelayQuery').Mutation){
queryText=printMutation(node,printerState);}else 
if(node instanceof require('RelayQuery').Subscription){
queryText=printSubscription(node,printerState);}

!
queryText?require('invariant')(0,
'printRelayFBQuery(): Unsupported node type.'):undefined;

return {
text:[queryText].concat(fragmentTexts).join(' '),
variables:variables};}



function printRoot(node,printerState){
var batchCall=node.getBatchCall();
var fieldName=node.getFieldName();
var identifyingArg=node.getIdentifyingArg();
var rootCallString=undefined;
if(batchCall){
rootCallString=fieldName+'(<'+batchCall.refParamName+'>)';}else 
if(identifyingArg==null){
rootCallString=fieldName+'()';}else 
{
rootCallString=require('printRelayFBQueryCall')({
name:fieldName,
value:identifyingArg.value}).
slice(1);}


return 'Query '+node.getName()+'{'+rootCallString+
printChildren(node,printerState)+'}';}


function printMutation(
node,
printerState)
{
var call=node.getCall();
var callVariableName=node.getCallVariableName();
printerState.variables[callVariableName]=call.value;
return 'Mutation '+node.getName()+' : '+node.getResponseType()+'{'+
call.name+'(<'+callVariableName+'>)'+
printChildren(node,printerState)+'}';}


function printSubscription(
node,
printerState)
{
var call=node.getCall();
var callVariableName=node.getCallVariableName();
printerState.variables[callVariableName]=call.value;
return 'Subscription '+node.getName()+' : '+node.getResponseType()+
'{'+call.name+'(<'+callVariableName+'>)'+
printChildren(node,printerState)+'}';}


function printFragment(
node,
printerState)
{
return 'QueryFragment '+node.getDebugName()+' : '+
node.getType()+printChildren(node,printerState);}


function printChildren(
node,
printerState)
{
var childrenText=[];
var children=node.getChildren();
var fragments=undefined;
for(var ii=0;ii<children.length;ii++){
var child=children[ii];
if(child instanceof require('RelayQuery').Field){
var fieldText=child.getSchemaName();
var fieldCalls=child.getCallsWithValues();
if(fieldCalls.length){
var aggregatedCalls=require('aggregateRelayCalls')(fieldCalls);
for(var jj=0;jj<aggregatedCalls.length;jj++){
fieldText+=require('printRelayFBQueryCall')(aggregatedCalls[jj]);}

fieldText+=' as '+child.getSerializationKey();}

var fbExportName=undefined;
child.getDirectives().some(function(directive){
if(directive.name==='fb_export'){
var argument=directive.args[0];
if(argument&&argument.name==='as'){
fbExportName=String(argument.value);}

return true;}});


if(fbExportName){
fieldText+=' exports '+fbExportName+' ';}

if(child.getChildren().length){
fieldText+=printChildren(child,printerState);}

childrenText.push(fieldText);}else 
if(child instanceof require('RelayQuery').Fragment){
if(child.getChildren().length){var 

_fragmentNameByHash=


printerState.fragmentNameByHash;var _fragmentNameByText=printerState.fragmentNameByText;var _fragmentTexts=printerState.fragmentTexts;


var _fragmentHash=child.getCompositeHash();

var fragmentName=undefined;
if(_fragmentNameByHash.hasOwnProperty(_fragmentHash)){
fragmentName=_fragmentNameByHash[_fragmentHash];}else 
{

var _fragmentText=
child.getType()+
printChildren(child,printerState);
if(_fragmentNameByText.hasOwnProperty(_fragmentText)){
fragmentName=_fragmentNameByText[_fragmentText];}else 
{
fragmentName='F'+require('base62')(printerState.fragmentCount++);
_fragmentNameByHash[_fragmentHash]=fragmentName;
_fragmentNameByText[_fragmentText]=fragmentName;
_fragmentTexts.push(
'QueryFragment '+fragmentName+' : '+_fragmentText);}}



if(!fragments||!fragments.hasOwnProperty(fragmentName)){
fragments=fragments||{};
fragments[fragmentName]=true;
childrenText.push('@'+fragmentName);}}}else 


{
!
false?require('invariant')(0,
'printRelayFBQuery(): Expected a field or fragment, got `%s`.',
child.constructor.name):undefined;}}



return childrenText.length?'{'+childrenText.join(',')+'}':'';}


module.exports=require('RelayProfiler').instrument('printRelayQuery',printRelayFBQuery);
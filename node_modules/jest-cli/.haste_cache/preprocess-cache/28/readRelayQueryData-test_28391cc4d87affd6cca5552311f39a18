'use strict';












require('configureForRelayOSS');












describe('readRelayQueryData',function(){
var RelayRecordStore=undefined;var _RelayTestUtils=require('RelayTestUtils');var 

getNode=_RelayTestUtils.getNode;var getVerbatimNode=_RelayTestUtils.getVerbatimNode;
var END_CURSOR=undefined,HAS_NEXT_PAGE=undefined,HAS_PREV_PAGE=undefined,PAGE_INFO=undefined,START_CURSOR=undefined;

function getStoreData(records){
var recordStore=new RelayRecordStore(records);
var storeData=new (require('RelayStoreData'))();

storeData.getQueuedStore=jest.genMockFunction().mockImplementation(function(){
return recordStore;});


return storeData;}


function readData(storeData,queryNode,dataID,options){
return require('readRelayQueryData')(
storeData,
queryNode,
dataID,
options).
data;}


beforeEach(function(){
jest.resetModuleRegistry();

RelayRecordStore=require('RelayRecordStore');var _RelayConnectionInter=require('RelayConnectionInterface');


END_CURSOR=_RelayConnectionInter.END_CURSOR;
HAS_NEXT_PAGE=_RelayConnectionInter.HAS_NEXT_PAGE;
HAS_PREV_PAGE=_RelayConnectionInter.HAS_PREV_PAGE;
PAGE_INFO=_RelayConnectionInter.PAGE_INFO;
START_CURSOR=_RelayConnectionInter.START_CURSOR;


jasmine.addMatchers(require('RelayTestUtils').matchers);});


it('returns undefined for data that is not in the store',function(){
var records={};
var query=getNode(function(){return {children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'ReadRelayQueryDataRelayQL',type:'Actor'};}());
var data=readData(getStoreData({records:records}),query,'1055790163');
expect(data).toBe(undefined);});


it('returns null for data that is null in the store',function(){
var records={1055790163:null};
var query=getNode(function(){return {children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'ReadRelayQueryDataRelayQL',type:'Actor'};}());
var data=readData(getStoreData({records:records}),query,'1055790163');
expect(data).toBe(null);});


it('retrieves data that is in the store',function(){
var records={
'client:1':{
__dataID__:'client:1',
actor:{
__dataID__:'660361306'}},


660361306:{
__dataID__:'660361306',
firstName:'Greg'}};


var query=getNode(function(){return {children:[{children:[{fieldName:'firstName',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'actor',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true},type:'Actor'}],fieldName:'viewer',kind:'Query',metadata:{},name:'ReadRelayQueryData',type:'Viewer'};}());
var data=readData(getStoreData({records:records}),query,'client:1');
expect(data).toEqual({
__dataID__:'client:1',
actor:{
__dataID__:'660361306',
firstName:'Greg'}});});




it('returns the ids for all read data',function(){
var records={
address:null,
date:{day:21},
hometown:{name:'Vancouver'},
node:{
name:'Chris',
birthdate:{__dataID__:'date'},
address:{__dataID__:'address'},
hometown:{__dataID__:'hometown'}}};


var hometownFragmentReference=require('RelayFragmentReference').createForContainer(
function(){return function(){return {children:[{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'ReadRelayQueryDataRelayQL',type:'Page'};}();},
{});

var query=getNode(function(RQL_0){return {children:[{children:[{fieldName:'city',kind:'Field',metadata:{},type:'String'}],fieldName:'address',kind:'Field',metadata:{canHaveSubselections:true},type:'StreetAddress'},{children:[{fieldName:'day',kind:'Field',metadata:{},type:'Int'}],fieldName:'birthdate',kind:'Field',metadata:{canHaveSubselections:true},type:'Date'},{children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},require('Relay').QL.__frag(RQL_0)]),fieldName:'hometown',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Page'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'ReadRelayQueryDataRelayQL',type:'User'};}(



hometownFragmentReference));var _readRelayQueryData=


require('readRelayQueryData')(
getStoreData({records:records}),
query,
'node');var dataIDs=_readRelayQueryData.dataIDs;

expect(dataIDs).toEqual({
address:true,
date:true,
hometown:true,
node:true});});



it('retrieves data that references null nodes in the store',function(){
var records={
1055790163:{
address:{__dataID__:'client:1'},
firstName:'Yuzhi'},

'client:1':null};

var query=getNode(function(){return {children:[{children:[{fieldName:'city',kind:'Field',metadata:{},type:'String'}],fieldName:'address',kind:'Field',metadata:{canHaveSubselections:true},type:'StreetAddress'},{fieldName:'firstName',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'ReadRelayQueryDataRelayQL',type:'Actor'};}());







var data=readData(getStoreData({records:records}),query,'1055790163');
expect(data).toEqual({
__dataID__:'1055790163',
address:null,
firstName:'Yuzhi'});});



it('includes `null` scalar values along with existing sibling fields',function(){
var records={
feedbackID:{
__dataID__:'feedbackID',
doesViewerLike:null,
id:'feedbackID'}};


var query=getNode(function(){return {children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'doesViewerLike',kind:'Field',metadata:{},type:'Boolean'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'ReadRelayQueryDataRelayQL',type:'Feedback'};}());





var data=readData(getStoreData({records:records}),query,'feedbackID');
expect(data.id).toBe('feedbackID');
expect(data.doesViewerLike).toBeNull();

records={
feedbackID:{
__dataID__:'feedbackID',
id:'feedbackID'}};


data=readData(getStoreData({records:records}),query,'feedbackID');
expect(data.id).toBe('feedbackID');
expect(data.doesViewerLike).toBeUndefined();
expect('doesViewerLike' in data).toBe(false);});


it('retrieves empty plural fields',function(){
var records={
user_id:{
id:'user_id',
websites:[]}};


var query=getNode(function(){return {children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'websites',kind:'Field',metadata:{isPlural:true},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'ReadRelayQueryDataRelayQL',type:'User'};}());
var data=readData(getStoreData({records:records}),query,'user_id');
expect(data.websites).toEqual([]);});


it('retrieves plural fields',function(){
var websites=['website1','website2'];

var records={
user_id:{
id:'user_id',
websites:websites}};


var query=getNode(function(){return {children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'websites',kind:'Field',metadata:{isPlural:true},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'ReadRelayQueryDataRelayQL',type:'User'};}());
var data=readData(getStoreData({records:records}),query,'user_id');
expect(data.websites).toEqual(
['website1','website2']);});



it('retrieves status information for nodes with queued changes',function(){
var STATUS=require('RelayRecordStatusMap').setOptimisticStatus(
require('RelayRecordStatusMap').setErrorStatus(0,true),
0);

var records={
660361306:{
__dataID__:'660361306',
firstName:'Greg'}};


var queuedRecords={
660361306:{
__dataID__:'660361306',
__status__:STATUS,
firstName:'Snoop Lion'}};


var query=getNode(function(){return {children:[{fieldName:'firstName',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'ReadRelayQueryDataRelayQL',type:'User'};}());
var storeData=getStoreData({records:records,queuedRecords:queuedRecords});
var data=readData(storeData,query,'660361306');
expect(data).toEqual({
__dataID__:'660361306',
__status__:STATUS,
firstName:'Snoop Lion'});});



it('retrieves resolved fragment map generation information',function(){
var records={
'a':{
__dataID__:'a',
__resolvedFragmentMapGeneration__:42,
firstName:'Steve'}};


var query=getNode(function(){return {children:[{fieldName:'firstName',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'ReadRelayQueryDataRelayQL',type:'User'};}());
var data=readData(getStoreData({records:records}),query,'a');
expect(data).toEqual({
__dataID__:'a',
__resolvedFragmentMapGeneration__:42,
firstName:'Steve'});});



it('retrieves resolved fragment map info for fragment references',function(){
var records={
user:{
__dataID__:'a',
address:{
__dataID__:'address'}},


address:{
__dataID__:'address',
__resolvedFragmentMapGeneration__:42,
city:'Menlo Park'}};


var fragment=function(){return {children:[{fieldName:'city',kind:'Field',metadata:{},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'ReadRelayQueryDataRelayQL',type:'StreetAddress'};}();
var fragmentReference=require('RelayFragmentReference').createForContainer(
function(){return fragment;},
{});

var query=getVerbatimNode(function(RQL_0){return {children:[{children:[].concat.apply([],[require('Relay').QL.__frag(RQL_0)]),fieldName:'address',kind:'Field',metadata:{canHaveSubselections:true},type:'StreetAddress'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'ReadRelayQueryDataRelayQL',type:'User'};}(


fragmentReference));



var data=readData(getStoreData({records:records}),query,'user');
expect(data).toEqual({
__dataID__:'user',
address:{
__dataID__:'address',
__fragments__:babelHelpers.defineProperty({},
fragment.id,'address'),

__resolvedFragmentMapGeneration__:42}});});




it('populates data ID for nodes containing only non-local fragments',function(){
var records={
'client:1':{
__dataID__:'client:1',
actor:{
__dataID__:'660361306'}},


660361306:{
__dataID__:'660361306',
firstName:'Greg'}};


var fragment=function(){return {children:[{children:[{fieldName:'firstName',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'actor',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true},type:'Actor'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'ReadRelayQueryDataRelayQL',type:'Viewer'};}();
var fragmentReference=require('RelayFragmentReference').createForContainer(
function(){return fragment;},
{});

var query=getNode(function(RQL_0){return {children:[].concat.apply([],[require('Relay').QL.__frag(RQL_0)]),fieldName:'viewer',kind:'Query',metadata:{},name:'ReadRelayQueryData',type:'Viewer'};}(fragmentReference));
var data=readData(getStoreData({records:records}),query,'client:1');
expect(data.__dataID__).toBe('client:1');
expect(data.__fragments__).toEqual(babelHelpers.defineProperty({},
getNode(fragment).getConcreteFragmentID(),'client:1'));});



it('reads data for non-container fragment references',function(){
var records={
'client:1':{
__dataID__:'client:1',
actor:{
__dataID__:'660361306'}},


660361306:{
__dataID__:'660361306',
firstName:'Greg'}};


var fragmentReference=new (require('RelayFragmentReference'))(
function(){return function(){return {children:[{children:[{fieldName:'firstName',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'actor',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true},type:'Actor'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'ReadRelayQueryDataRelayQL',type:'Viewer'};}();},
{});

var query=getNode(function(RQL_0){return {children:[].concat.apply([],[require('Relay').QL.__frag(RQL_0)]),fieldName:'viewer',kind:'Query',metadata:{},name:'ReadRelayQueryData',type:'Viewer'};}(fragmentReference));
var data=readData(getStoreData({records:records}),query,'client:1');
expect(data).toEqual({
__dataID__:'client:1',
actor:{
__dataID__:'660361306',
firstName:'Greg'}});});




it('merges data from multiple fragments that reference the same node',function(){
var records={
1055790163:{
__dataID__:'1055790163',
address:{__dataID__:'client:1'},
last_name:'Zheng'},

'client:1':{
__dataID__:'client:1',
city:'San Francisco',
country:'US'}};



var fragment1=function(){return {children:[{children:[{fieldName:'city',kind:'Field',metadata:{},type:'String'}],fieldName:'address',kind:'Field',metadata:{canHaveSubselections:true},type:'StreetAddress'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'ReadRelayQueryDataRelayQL',type:'Actor'};}();
var fragment2=function(){return {children:[{children:[{fieldName:'country',kind:'Field',metadata:{},type:'String'}],fieldName:'address',kind:'Field',metadata:{canHaveSubselections:true},type:'StreetAddress'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'ReadRelayQueryDataRelayQL',type:'Actor'};}();
var query=getNode(function(RQL_0,RQL_1){return {children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'},require('Relay').QL.__frag(RQL_0),require('Relay').QL.__frag(RQL_1)]),id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'ReadRelayQueryDataRelayQL',type:'Actor'};}(
fragment1,
fragment2));

var data=readData(getStoreData({records:records}),query,'1055790163');
expect(data).toEqual({
__dataID__:'1055790163',
address:{
__dataID__:'client:1',
city:'San Francisco',
country:'US'}});});




it('retrieves non-edge fields from filtered connections',function(){var _pageInfo;
var records={
'client:123':{
id:'client:123',
count:42,
__dataID__:'client:123',
__range__:new (require('GraphQLRange'))()}};


var query=getNode(function(){return {children:[{fieldName:'count',kind:'Field',metadata:{},type:'Int'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'ReadRelayQueryDataRelayQL',type:'FriendsConnection'};}());




var storeData=getStoreData({records:records});
var rangeID=storeData.getRangeData().getClientIDForRangeWithID(
require('callsToGraphQL')([
{name:'is_viewer_friend',value:null},
{name:'first',value:10}]),

{},
'client:123');

expect(rangeID).toBe('client:123_is_viewer_friend(),first(10)');

require('GraphQLRange').prototype.retrieveRangeInfoForQuery.mockReturnValue({
requestedEdgeIDs:[],
diffCalls:[],
pageInfo:(_pageInfo={},babelHelpers.defineProperty(_pageInfo,
START_CURSOR,'cursor'),babelHelpers.defineProperty(_pageInfo,
END_CURSOR,'cursor'),babelHelpers.defineProperty(_pageInfo,
HAS_NEXT_PAGE,false),babelHelpers.defineProperty(_pageInfo,
HAS_PREV_PAGE,false),_pageInfo)});


var data=readData(storeData,query,rangeID);
expect(data).toEqual({
__dataID__:rangeID,
count:42});});



it('retrieves non-edge fields from a connection',function(){
var records={
feedback_id:{
__dataID__:'feedback_id',
likers:{
__dataID__:'likers_id'}},


likers_id:{
__dataID__:'likers_id',
count:31337}};


var query=getNode(function(){return {children:[{children:[{fieldName:'count',kind:'Field',metadata:{},type:'Int'}],fieldName:'likers',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'LikersOfContentConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'ReadRelayQueryDataRelayQL',type:'Feedback'};}());
var data=readData(getStoreData({records:records}),query,'feedback_id');
expect(data).toEqual({
__dataID__:'feedback_id',
likers:{
__dataID__:'likers_id',
count:31337}});});




it('retrieves non-"range" fields within a connection',function(){var _pageInfo2;


var query=getNode(function(){return {children:[{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'1'}}],children:[{fieldName:'count',kind:'Field',metadata:{},type:'Int'}],fieldName:'topLevelComments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'TopLevelCommentsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'ReadRelayQueryDataRelayQL',type:'Feedback'};}());







var records={
feedbackID:{
__dataID__:'feedbackID',
topLevelComments:{
__dataID__:'commentsID'}},


commentsID:{
__dataID__:'commentsID',
__range__:new (require('GraphQLRange'))(),
count:57}};



require('GraphQLRange').prototype.retrieveRangeInfoForQuery.mockReturnValue({
requestedEdgeIDs:['comment_edge_id'],
diffCalls:[],
pageInfo:(_pageInfo2={},babelHelpers.defineProperty(_pageInfo2,
START_CURSOR,'cursor'),babelHelpers.defineProperty(_pageInfo2,
END_CURSOR,'cursor'),babelHelpers.defineProperty(_pageInfo2,
HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_pageInfo2,
HAS_PREV_PAGE,false),_pageInfo2)});



var data=readData(getStoreData({records:records}),query,'feedbackID');
expect(data).toEqual({
__dataID__:'feedbackID',
topLevelComments:{
__dataID__:'commentsID_first(1)',
count:57}});});




it('retrieves a mixture of "range" and non-"range" connection fields',function(){var _pageInfo3;
var query=getNode(function(){return {children:[{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'1'}}],children:[{fieldName:'count',kind:'Field',metadata:{},type:'Int'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true},type:'PageInfo'}],fieldName:'topLevelComments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'TopLevelCommentsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'ReadRelayQueryDataRelayQL',type:'Feedback'};}());










var records={
feedbackID:{
__dataID__:'feedbackID',
topLevelComments:{
__dataID__:'commentsID'}},


commentsID:{
__dataID__:'commentsID',
__range__:new (require('GraphQLRange'))(),
count:57}};



require('GraphQLRange').prototype.retrieveRangeInfoForQuery.mockReturnValue({
requestedEdgeIDs:['comment_edge_id'],
diffCalls:[],
pageInfo:(_pageInfo3={},babelHelpers.defineProperty(_pageInfo3,
START_CURSOR,'cursor'),babelHelpers.defineProperty(_pageInfo3,
END_CURSOR,'cursor'),babelHelpers.defineProperty(_pageInfo3,
HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_pageInfo3,
HAS_PREV_PAGE,false),_pageInfo3)});



var data=readData(getStoreData({records:records}),query,'feedbackID');
expect(data).toEqual({
__dataID__:'feedbackID',
topLevelComments:babelHelpers.defineProperty({
__dataID__:'commentsID_first(1)',
count:57},
PAGE_INFO,babelHelpers.defineProperty({},
HAS_NEXT_PAGE,true))});});





it('requires filter calls on connections with range fields',function(){
var records={
story_id:{
__dataID__:'story_id',
feedback:{
__dataID__:'feedback_id'}},


feedback_id:{
__dataID__:'feedback_id',
likers:{
__dataID__:'likers_id'}},


likers_id:{
__dataID__:'likers_id',
__range__:new (require('GraphQLRange'))(),
count:31337}};


var error=
'readRelayQueryData(): The field `likers` is a connection. '+
'Fields `edges` and `pageInfo` cannot be fetched without a '+
'`first`, `last` or `find` argument.';


var edgesFragment=function(){return {children:[{children:[{children:[{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true,isRequisite:true},type:'Actor'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'LikersEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'ReadRelayQueryDataRelayQL',type:'LikersOfContentConnection'};}();








var query=getNode(function(RQL_0){return {children:[{children:[{children:[].concat.apply([],[require('Relay').QL.__frag(RQL_0)]),fieldName:'likers',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'LikersOfContentConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'ReadRelayQueryDataRelayQL',type:'Story'};}(



edgesFragment));




expect(
function(){return readData(getStoreData({records:records}),query,'story_id');}).
toFailInvariant(error);


var pageInfoFragment=function(){return {children:[{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true},type:'PageInfo'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'ReadRelayQueryDataRelayQL',type:'LikersOfContentConnection'};}();






query=getNode(function(RQL_0){return {children:[{children:[{children:[].concat.apply([],[require('Relay').QL.__frag(RQL_0)]),fieldName:'likers',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'LikersOfContentConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'ReadRelayQueryDataRelayQL',type:'Story'};}(



pageInfoFragment));




expect(
function(){return readData(getStoreData({records:records}),query,'story_id');}).
toFailInvariant(error);


query=getNode(function(){return {children:[{children:[{children:[{fieldName:'count',kind:'Field',metadata:{},type:'Int'}],fieldName:'likers',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'LikersOfContentConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'ReadRelayQueryDataRelayQL',type:'Story'};}());
expect(
function(){return readData(getStoreData({records:records}),query,'story_id');}).
not.toThrowError();});


it('requires filter calls on connections with filtered range fields ',function(){
var records={
story_id:{
__dataID__:'story_id',
feedback:{
__dataID__:'feedback_id'}},


feedback_id:{
__dataID__:'feedback_id',
likers:{
__dataID__:'likers_id'}},


likers_id:{
__dataID__:'likers_id',
__range__:new (require('GraphQLRange'))(),
count:31337}};


var error=
'readRelayQueryData(): The field `likers` is a connection. '+
'Fields `edges` and `pageInfo` cannot be fetched without a '+
'`first`, `last` or `find` argument.';

var fragmentReference=require('RelayFragmentReference').createForContainer(
function(){return function(){return {children:[{children:[{children:[{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true,isRequisite:true},type:'Actor'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'LikersEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'ReadRelayQueryDataRelayQL',type:'LikersOfContentConnection'};}();},
{});

var query=getNode(function(RQL_0){return {children:[{children:[{children:[].concat.apply([],[require('Relay').QL.__frag(RQL_0)]),fieldName:'likers',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'LikersOfContentConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'ReadRelayQueryDataRelayQL',type:'Story'};}(
fragmentReference));

expect(function(){return readData(getStoreData({records:records}),query,'story_id');}).
toFailInvariant(error);

var fragment=function(){return {children:[{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true},type:'PageInfo'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'ReadRelayQueryDataRelayQL',type:'LikersOfContentConnection'};}();
query=getNode(function(RQL_0){return {children:[{children:[{children:[].concat.apply([],[require('Relay').QL.__frag(RQL_0)]),fieldName:'likers',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'LikersOfContentConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'ReadRelayQueryDataRelayQL',type:'Story'};}(fragment));
expect(function(){return readData(getStoreData({records:records}),query,'story_id');}).
toFailInvariant(error);

fragment=function(){return {children:[{fieldName:'count',kind:'Field',metadata:{},type:'Int'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'ReadRelayQueryDataRelayQL',type:'LikersOfContentConnection'};}();
query=getNode(function(RQL_0){return {children:[{children:[{children:[].concat.apply([],[require('Relay').QL.__frag(RQL_0)]),fieldName:'likers',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'LikersOfContentConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'ReadRelayQueryDataRelayQL',type:'Story'};}(fragment));
expect(function(){return readData(getStoreData({records:records}),query,'story_id');}).
not.toThrowError();});


it('reads `edge`/`pageInfo` without range info like linked records',function(){
var records={
feedback_id:{
__dataID__:'feedback_id',
likers:{
__dataID__:'likers_id'}},


likers_id:babelHelpers.defineProperty({
__dataID__:'likers_id',
edges:[
{
__dataID__:'likers_edge_id'}]},


PAGE_INFO,{
__dataID__:'likers_page_info_id'}),


likers_edge_id:{
__dataID__:'likers_edge_id',
node:{
__dataID__:'liker_id'}},


likers_page_info_id:babelHelpers.defineProperty({
__dataID__:'likers_page_info_id'},
HAS_NEXT_PAGE,true),

liker_id:{
__dataID__:'liker_id',
name:'Tim'}};



var query=getNode(function(){return {children:[{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'1'}}],children:[{children:[{children:[{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true,isRequisite:true},type:'Actor'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'LikersEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],fieldName:'likers',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'LikersOfContentConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'ReadRelayQueryDataRelayQL',type:'Feedback'};}());


var data=readData(getStoreData({records:records}),query,'feedback_id');
expect(data).toEqual({
__dataID__:'feedback_id',
likers:{
__dataID__:'likers_id_first(1)',
edges:[
{
__dataID__:'likers_edge_id',
node:{
__dataID__:'liker_id',
name:'Tim'}}]}});






query=getNode(function(){return {children:[{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'1'}}],children:[{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true},type:'PageInfo'}],fieldName:'likers',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'LikersOfContentConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'ReadRelayQueryDataRelayQL',type:'Feedback'};}());


data=readData(getStoreData({records:records}),query,'feedback_id');
expect(data).toEqual({
__dataID__:'feedback_id',
likers:babelHelpers.defineProperty({
__dataID__:'likers_id_first(1)'},
PAGE_INFO,babelHelpers.defineProperty({
__dataID__:'likers_page_info_id'},
HAS_NEXT_PAGE,true))});});





it('recurses through fragments when retrieving pageInfo',function(){var _pageInfo4,_PAGE_INFO3;
var records={
feedback_id:{
__dataID__:'feedback_id',
comments:{
__dataID__:'comments_id'}},


comments_id:{
__dataID__:'comments_id',
__range__:new (require('GraphQLRange'))()}};


var fragmentReference=require('RelayFragmentReference').createForContainer(
function(){return function(){return {children:[{fieldName:'hasNextPage',kind:'Field',metadata:{},type:'Boolean'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'ReadRelayQueryDataRelayQL',type:'PageInfo'};}();},
{});

var query=getNode(function(RQL_0){return {children:[{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'1'}}],children:[{children:[].concat.apply([],[{fieldName:'startCursor',kind:'Field',metadata:{},type:'String'},{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},require('Relay').QL.__frag(RQL_0)]),fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true},type:'PageInfo'}],fieldName:'comments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'CommentsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'ReadRelayQueryDataRelayQL',type:'Feedback'};}(



fragmentReference));




require('GraphQLRange').prototype.retrieveRangeInfoForQuery.mockReturnValue({
requestedEdgeIDs:[],
diffCalls:[],
pageInfo:(_pageInfo4={},babelHelpers.defineProperty(_pageInfo4,
START_CURSOR,'cursor'),babelHelpers.defineProperty(_pageInfo4,
END_CURSOR,'cursor'),babelHelpers.defineProperty(_pageInfo4,
HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_pageInfo4,
HAS_PREV_PAGE,false),_pageInfo4)});



var data=readData(
getStoreData({records:records}),
query,
'feedback_id',
{traverseFragmentReferences:true});


expect(data.comments).toEqual(babelHelpers.defineProperty({
__dataID__:'comments_id_first(1)'},
PAGE_INFO,(_PAGE_INFO3={},babelHelpers.defineProperty(_PAGE_INFO3,
START_CURSOR,'cursor'),babelHelpers.defineProperty(_PAGE_INFO3,
HAS_NEXT_PAGE,true),_PAGE_INFO3)));



data=readData(getStoreData({records:records}),query,'feedback_id');

var fragmentSourceID=
getNode(fragmentReference.getFragment()).getConcreteFragmentID();
expect(data.comments.pageInfo.__fragments__).toEqual(babelHelpers.defineProperty({},
fragmentSourceID,'comments_id_first(1)'));});



it('retrieves data and fragment pointers from range',function(){var _pageInfo5;
var records={
feedback_id:{
__dataID__:'feedback_id',
comments:{
__dataID__:'comments_id'}},


comments_id:{
__dataID__:'comments_id',
__range__:new (require('GraphQLRange'))()},

comment_node_id:{
__dataID__:'comment_node_id',
id:'comment_node_id'},

comment_edge_id:{
__dataID__:'comment_edge_id',
node:{__dataID__:'comment_node_id'},
cursor:'cursor'}};


var fragmentReference=require('RelayFragmentReference').createForContainer(
function(){return function(){return {children:[{children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'Comment'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'CommentsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'ReadRelayQueryDataRelayQL',type:'CommentsConnection'};}();},
{});

var query=getNode(function(RQL_0){return {children:[{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'1'}}],children:[].concat.apply([],[{children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'Comment'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'CommentsEdge'},{children:[{fieldName:'startCursor',kind:'Field',metadata:{},type:'String'},{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isRequisite:true},type:'PageInfo'},require('Relay').QL.__frag(RQL_0)]),fieldName:'comments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'CommentsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'ReadRelayQueryDataRelayQL',type:'Feedback'};}(









fragmentReference));



require('GraphQLRange').prototype.retrieveRangeInfoForQuery.mockReturnValue({
requestedEdgeIDs:['comment_edge_id'],
diffCalls:[],
pageInfo:(_pageInfo5={},babelHelpers.defineProperty(_pageInfo5,
START_CURSOR,'cursor'),babelHelpers.defineProperty(_pageInfo5,
END_CURSOR,'cursor'),babelHelpers.defineProperty(_pageInfo5,
HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_pageInfo5,
HAS_PREV_PAGE,false),_pageInfo5)});



var data=readData(
getStoreData({records:records}),
query,
'feedback_id',
{traverseFragmentReferences:true});


expect(data.comments).toEqual(babelHelpers.defineProperty({
__dataID__:'comments_id_first(1)',
edges:[{
__dataID__:'comment_edge_id',
node:{
__dataID__:'comment_node_id',
id:'comment_node_id'}}]},


PAGE_INFO,babelHelpers.defineProperty({},
START_CURSOR,'cursor')));



data=readData(getStoreData({records:records}),query,'feedback_id');

var fragmentSourceID=
getNode(fragmentReference.getFragment()).getConcreteFragmentID();
expect(data.comments.__fragments__).toEqual(babelHelpers.defineProperty({},
fragmentSourceID,'comments_id_first(1)'));});



it('returns RelayFragmentPointers for child queries',function(){
var records={
user_id:{
__dataID__:'user_id',
id:'user_id',
screennames:[
{__dataID__:'client1'},
{__dataID__:'client2'}],

hometown:{__dataID__:'hometown_id'}},

hometown_id:{
__dataID__:'hometown_id',
id:'hometown_id',
name:'hometown name'},

client1:{
__dataID__:'client1',
service:'GTALK',
name:'123'},

client2:{
__dataID__:'client1',
service:'TWITTER',
name:'123'}};


var fragmentReference=require('RelayFragmentReference').createForContainer(
function(){return function(){return {children:[{fieldName:'service',kind:'Field',metadata:{},type:'String'},{fieldName:'name',kind:'Field',metadata:{},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'ReadRelayQueryDataRelayQL',type:'Screenname'};}();},
{});

var query=getNode(function(RQL_0){return {children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{children:[{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'hometown',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Page'},{children:[].concat.apply([],[require('Relay').QL.__frag(RQL_0)]),fieldName:'screennames',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'Screenname'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'ReadRelayQueryDataRelayQL',type:'User'};}(






fragmentReference));





var data=readData(getStoreData({records:records}),query,'user_id');

expect(data.id).toBe('user_id');
expect(data.hometown.name).toEqual('hometown name');
expect(data.screennames.length).toBe(2);
var screennames=data.screennames;
var fragmentSourceID0=
getNode(fragmentReference.getFragment()).getConcreteFragmentID();
expect(screennames[0].__fragments__).toEqual(babelHelpers.defineProperty({},
fragmentSourceID0,'client1'));

var fragmentSourceID1=
getNode(fragmentReference.getFragment()).getConcreteFragmentID();
expect(screennames[1].__fragments__).toEqual(babelHelpers.defineProperty({},
fragmentSourceID1,'client2'));});



it('reads dataID if a linked dataID is `null` or `undefined`',function(){
var query=getNode(function(){return {children:[{children:[{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'actor',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true},type:'Actor'}],fieldName:'viewer',kind:'Query',metadata:{},name:'ReadRelayQueryData',type:'Viewer'};}());








var records={
'client:1':{
__dataID__:'client:1',
actor:null}};


var data=readData(getStoreData({records:records}),query,'client:1');
expect(data.actor).toBeNull();

records={
'client:1':{
__dataID__:'client:1'}};


data=readData(getStoreData({records:records}),query,'client:1');
expect(data.actor).toBeUndefined();});


it('does not clobber previously-read sibling fields when a linked dataID is `null` or `undefined`',function(){
var query=getNode(function(){return {children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{children:[{fieldName:'city',kind:'Field',metadata:{},type:'String'}],fieldName:'address',kind:'Field',metadata:{canHaveSubselections:true},type:'StreetAddress'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'ReadRelayQueryDataRelayQL',type:'User'};}());







var records={
user_id:{
__dataID__:'user_id',
id:'user_id',
address:null}};


var data=readData(getStoreData({records:records}),query,'user_id');
expect(data.address).toBeNull();
expect(data.id).toBe('user_id');

records={
user_id:{
__dataID__:'user_id',
id:'user_id'}};


data=readData(getStoreData({records:records}),query,'user_id');
expect(data.address).toBeUndefined();
expect(data.id).toBe('user_id');});


it('does not set undefined value if linked dataID missing',function(){
var query=getNode(function(){return {children:[{children:[{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'actor',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true},type:'Actor'}],fieldName:'viewer',kind:'Query',metadata:{},name:'ReadRelayQueryData',type:'Viewer'};}());









var records={
'client:1':{
__dataID__:'client:1'}};



var data=readData(getStoreData({records:records}),query,'client:1');
expect(data.__dataID__).toBe('client:1');



expect('actor' in data).toBe(false);});


it('allocates fragments even if all child fields are null',function(){
var query=getNode(function(){return {children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'ReadRelayQueryDataRelayQL',type:'Feedback'};}());




var records={
feedbackID:{
__dataID__:'feedbackID',
id:null}};


var store=getStoreData({records:records});var _readRelayQueryData2=
require('readRelayQueryData')(store,query,'feedbackID');var data=_readRelayQueryData2.data;var dataIDs=_readRelayQueryData2.dataIDs;
expect(data).toEqual({
__dataID__:'feedbackID',
id:null});

expect(dataIDs).toEqual({
feedbackID:true});});



it('allocates connection fields even if all child fields are null',function(){
var query=getNode(function(){return {children:[{children:[{fieldName:'count',kind:'Field',metadata:{},type:'Int'}],fieldName:'comments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'CommentsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'ReadRelayQueryDataRelayQL',type:'Feedback'};}());






var records={
feedbackID:{
__dataID__:'feedbackID',
comments:{
__dataID__:'commentsID'}},


commentsID:{
__dataID__:'commentsID',
count:null}};


var store=getStoreData({records:records});var _readRelayQueryData3=
require('readRelayQueryData')(store,query,'feedbackID');var data=_readRelayQueryData3.data;var dataIDs=_readRelayQueryData3.dataIDs;
expect(data).toEqual({
__dataID__:'feedbackID',
comments:{
__dataID__:'commentsID',
count:null}});


expect(dataIDs).toEqual({
commentsID:true,
feedbackID:true});});



it('allocates plural fields even if all child fields are null',function(){
var query=getNode(function(){return {children:[{children:[{fieldName:'isVerified',kind:'Field',metadata:{},type:'Boolean'}],fieldName:'allPhones',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'Phone'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'ReadRelayQueryDataRelayQL',type:'User'};}());






var records={
userID:{
__dataID__:'userID',
allPhones:[{__dataID__:'phone1ID'},{__dataID__:'phone2ID'}]},

phone1ID:{
__dataID__:'phone1ID',
isVerified:null},

phone2ID:{
__dataID__:'phone2ID',
isVerified:null}};


var store=getStoreData({records:records});var _readRelayQueryData4=
require('readRelayQueryData')(store,query,'userID');var data=_readRelayQueryData4.data;var dataIDs=_readRelayQueryData4.dataIDs;
expect(data).toEqual({
__dataID__:'userID',
allPhones:[
{
__dataID__:'phone1ID',
isVerified:null},

{
__dataID__:'phone2ID',
isVerified:null}]});



expect(dataIDs).toEqual({
phone1ID:true,
phone2ID:true,
userID:true});});



it('allocates linked fields even if all child fields are null',function(){
var query=getNode(function(){return {children:[{children:[{fieldName:'year',kind:'Field',metadata:{},type:'Int'}],fieldName:'birthdate',kind:'Field',metadata:{canHaveSubselections:true},type:'Date'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'ReadRelayQueryDataRelayQL',type:'User'};}());






var records={
userID:{
__dataID__:'userID',
birthdate:{
__dataID__:'birthdateID'}},


birthdateID:{
__dataID__:'birthdateID',
year:null}};


var store=getStoreData({records:records});var _readRelayQueryData5=
require('readRelayQueryData')(store,query,'userID');var data=_readRelayQueryData5.data;var dataIDs=_readRelayQueryData5.dataIDs;
expect(data).toEqual({
__dataID__:'userID',
birthdate:{
__dataID__:'birthdateID',
year:null}});


expect(dataIDs).toEqual({
birthdateID:true,
userID:true});});



it('reads fields for connections without calls',function(){var _pageInfo6;
var query=getNode(function(){return {children:[{children:[{fieldName:'count',kind:'Field',metadata:{},type:'Int'}],fieldName:'friends',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'FriendsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'ReadRelayQueryDataRelayQL',type:'User'};}());






var records={
'user_id':{
__dataID__:'user_id',
friends:{
__dataID__:'client:1'}},


'client:1':{
__dataID__:'client:1',
count:42}};


var data=readData(getStoreData({records:records}),query,'user_id');
expect(data.friends.count).toBe(42);



records={
'user_id':{
__dataID__:'user_id',
friends:{
__dataID__:'client:1'}},


'client:1':{
__dataID__:'client:1',
__range__:new (require('GraphQLRange'))(),
count:42}};


require('GraphQLRange').prototype.retrieveRangeInfoForQuery.mockReturnValue({
requestedEdgeIDs:['edgeID'],
diffCalls:[],
pageInfo:(_pageInfo6={},babelHelpers.defineProperty(_pageInfo6,
START_CURSOR,'cursor'),babelHelpers.defineProperty(_pageInfo6,
END_CURSOR,'cursor'),babelHelpers.defineProperty(_pageInfo6,
HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_pageInfo6,
HAS_PREV_PAGE,false),_pageInfo6)});


data=readData(getStoreData({records:records}),query,'user_id');
expect(data.friends.count).toBe(42);});


it('handles "empty" ref query dependencies',function(){




var query=getNode(function(){return {children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{children:[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'ReadRelayQueryDataRelayQL',type:'Story'};}());







query=query.clone(
query.getChildren().map(function(outerChild,ii){
if(ii===1){
return outerChild.clone(
outerChild.getChildren().map(function(innerChild,jj){
if(jj===0){
return innerChild.cloneAsRefQueryDependency();}else 
{
return innerChild;}}));}else 



{
return outerChild;}}));




var records={
storyID:{
__dataID__:'storyID',
id:'storyID',
feedback:{
__dataID__:'feedbackID'}},


feedbackID:{
__dataID__:'feedbackID',
id:'feedbackID'}};


var data=readData(getStoreData({records:records}),query,'storyID');
expect(data).toEqual({
__dataID__:'storyID',
id:'storyID',
feedback:{
__dataID__:'feedbackID'}});});




it('parses range client IDs',function(){var _pageInfo7;
var fragmentReference=require('RelayFragmentReference').createForContainer(
function(){return function(){return {children:[{children:[{children:[{children:[{fieldName:'city',kind:'Field',metadata:{},type:'String'},{fieldName:'country',kind:'Field',metadata:{},type:'String'}],fieldName:'address',kind:'Field',metadata:{canHaveSubselections:true},type:'StreetAddress'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'User'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'FriendsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'ReadRelayQueryDataRelayQL',type:'FriendsConnection'};}();},











{});

var query=getNode(function(RQL_0){return {children:[{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'25'}}],children:[].concat.apply([],[require('Relay').QL.__frag(RQL_0)]),fieldName:'friends',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'FriendsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'ReadRelayQueryDataRelayQL',type:'User'};}(


fragmentReference));




var records={
userID:{
__dataID__:'userID',
friends:{
__dataID__:'friendsID'}},


friendsID:{
__dataID__:'friendsID',
__range__:new (require('GraphQLRange'))()},

edgeID:{
__dataID__:'edgeID',
node:{
__dataID__:'friendID'},

cursor:'cursor'},

friendID:{
__dataID__:'friendID',
address:{
__dataID__:'addressID'}},


addressID:{
__dataID__:'addressID',
city:'Menlo Park',
country:'USA'}};


var storeData=getStoreData({records:records});

require('GraphQLRange').prototype.retrieveRangeInfoForQuery.mockReturnValue({
requestedEdgeIDs:['edgeID'],
diffCalls:[],
pageInfo:(_pageInfo7={},babelHelpers.defineProperty(_pageInfo7,
START_CURSOR,'cursor'),babelHelpers.defineProperty(_pageInfo7,
END_CURSOR,'cursor'),babelHelpers.defineProperty(_pageInfo7,
HAS_NEXT_PAGE,false),babelHelpers.defineProperty(_pageInfo7,
HAS_PREV_PAGE,false),_pageInfo7)});






var data=readData(storeData,query,'userID');
var fragmentSourceID=
getNode(fragmentReference.getFragment()).getConcreteFragmentID();
expect(data).toEqual({
__dataID__:'userID',
friends:{
__dataID__:'friendsID_first(25)',
__fragments__:babelHelpers.defineProperty({},
fragmentSourceID,'friendsID_first(25)')}});





data=readData(
storeData,
getNode(fragmentReference.getFragment()),
'friendsID_first(25)');

expect(data).toEqual({
__dataID__:'friendsID_first(25)',
edges:[
{
__dataID__:'edgeID',
node:{
__dataID__:'friendID',
address:{
__dataID__:'addressID',
city:'Menlo Park',
country:'USA'}}}]});});







it('can be configured to read generated fields (scalar case)',function(){
var records={
'client:1':{
__dataID__:'client:1',
actor:{
__dataID__:'660361306'}},


660361306:{
__dataID__:'660361306',
__typename:'User',
firstName:'Greg',
id:'660361306'}};


var query=getNode(function(){return {children:[{children:[{fieldName:'firstName',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'actor',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true},type:'Actor'}],fieldName:'viewer',kind:'Query',metadata:{},name:'ReadRelayQueryData',type:'Viewer'};}());
var data=readData(
getStoreData({records:records}),
query,
'client:1',
{traverseGeneratedFields:true});

expect(data).toEqual({
__dataID__:'client:1',
actor:{
__dataID__:'660361306',
__typename:'User',
firstName:'Greg',
id:'660361306'}});});




it('can be configured to read generated fields (page info case)',function(){var _pageInfo8,_PAGE_INFO5;
var query=getNode(function(){return {children:[{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'1'}}],children:[{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true},type:'PageInfo'}],fieldName:'topLevelComments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'TopLevelCommentsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'ReadRelayQueryDataRelayQL',type:'Feedback'};}());









var records={
feedbackID:{
__dataID__:'feedbackID',
id:'feedbackID',
topLevelComments:{
__dataID__:'commentsID'}},


commentsID:{
__dataID__:'commentsID',
__range__:new (require('GraphQLRange'))(),
count:57}};



require('GraphQLRange').prototype.retrieveRangeInfoForQuery.mockReturnValue({
requestedEdgeIDs:['commentEdgeID'],
diffCalls:[],
pageInfo:(_pageInfo8={},babelHelpers.defineProperty(_pageInfo8,
START_CURSOR,'cursor'),babelHelpers.defineProperty(_pageInfo8,
END_CURSOR,'cursor'),babelHelpers.defineProperty(_pageInfo8,
HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_pageInfo8,
HAS_PREV_PAGE,false),_pageInfo8)});



var data=readData(
getStoreData({records:records}),
query,
'feedbackID',
{traverseGeneratedFields:true});

expect(data).toEqual({
__dataID__:'feedbackID',
id:'feedbackID',
topLevelComments:babelHelpers.defineProperty({
__dataID__:'commentsID_first(1)'},
PAGE_INFO,(_PAGE_INFO5={},babelHelpers.defineProperty(_PAGE_INFO5,
HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_PAGE_INFO5,
HAS_PREV_PAGE,false),_PAGE_INFO5))});});





it('does not attempt to traverse missing data IDs',function(){
var records={};



var fragmentReference=require('RelayFragmentReference').createForContainer(
function(){return function(){return {children:[{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'ReadRelayQueryDataRelayQL',type:'User'};}();},
{});

var query=getNode(function(RQL_0){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'},require('Relay').QL.__frag(RQL_0)]),fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'ReadRelayQueryData',type:'Node'};}(fragmentReference));
var data=readData(getStoreData({records:records}),query,'4');
expect(data).toBe(undefined);});


it('does not attempt to traverse non-existent data IDs',function(){
var records={4:null};



var fragmentReference=require('RelayFragmentReference').createForContainer(
function(){return function(){return {children:[{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'ReadRelayQueryDataRelayQL',type:'User'};}();},
{});

var query=getNode(function(RQL_0){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'},require('Relay').QL.__frag(RQL_0)]),fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'ReadRelayQueryData',type:'Node'};}(fragmentReference));
var data=readData(getStoreData({records:records}),query,'4');
expect(data).toBe(null);});


it('reads data for matching fragments',function(){
var records={
123:{
__dataID__:'123',
id:'123',
__typename:'User'}};


var query=getNode(function(){return {children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'ReadRelayQueryDataRelayQL',type:'User'};}());
var data=readData(getStoreData({records:records}),query,'123');
expect(data).toEqual({
__dataID__:'123',
id:'123'});});



it('omits fields for non-matching fragments',function(){
var records={
123:{
__dataID__:'123',
id:'123',
__typename:'User'}};


var query=getNode(function(){return {children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'ReadRelayQueryDataRelayQL',type:'Page'};}());
var data=readData(getStoreData({records:records}),query,'123');
expect(data).toEqual({__dataID__:'123'});});


it('skips non-matching child fragments',function(){
var records={
123:{
__dataID__:'123',
id:'123',
__typename:'User',
name:'Greg'}};


var query=getNode(function(){return {children:[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'},{children:[{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'User',type:'User'},{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'Page',type:'Page'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'ReadRelayQueryDataRelayQL',type:'Actor'};}());







var data=readData(getStoreData({records:records}),query,'123');
expect(data).toEqual({
__dataID__:'123',
name:'Greg'});});



describe('readRelayQueryData-partialStatus',function(){
beforeEach(function(){
jasmine.addMatchers({
toHavePartialStatus:function(){
return {
compare:function(record){
var isValidRecord=
typeof record==='object'&&record&&!Array.isArray(record);
if(isValidRecord){
if(record.hasOwnProperty('__status__')&&
require('RelayRecordStatusMap').isPartialStatus(record.__status__)){
return {
pass:true};}else 

{
return {
pass:false,
message:
'Expected record to have partial status, but it does '+
'not:\n'+JSON.stringify(record,null,2)};}}else 


{
return {
pass:false,
message:
'Expected a record to have partial status, but the '+
'supplied value is not a valid record: '+record};}}};}});});








it('marks nodes with missing scalar field as partial',function(){
var records={
feedbackID:{
__dataID__:'feedbackID',
id:'feedbackID'}};



var query=getNode(function(){return {children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'doesViewerLike',kind:'Field',metadata:{},type:'Boolean'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'ReadRelayQueryDataRelayQL',type:'Feedback'};}());





var data=readData(getStoreData({records:records}),query,'feedbackID');

expect(data).toHavePartialStatus();});


it('marks nested nodes with missing field as partial',function(){
var records={
feedbackID:{
__dataID__:'feedbackID',
id:'feedbackID',
comments:{__dataID__:'commentsID'}},

commentsID:{
__dataID__:'commentsID'}};



var query=getNode(function(){return {children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{children:[{fieldName:'count',kind:'Field',metadata:{},type:'Int'}],fieldName:'comments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'CommentsConnection'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'ReadRelayQueryDataRelayQL',type:'Feedback'};}());







var data=readData(getStoreData({records:records}),query,'feedbackID');

expect(data).toHavePartialStatus();
expect(data.comments).toHavePartialStatus();});


it('marks nodes with missing linked nodes as partial',function(){
var records={
'client:1':{
__dataID__:'client:1',
actor:{
__dataID__:'123'}}};




var query=getNode(function(){return {children:[{children:[{fieldName:'firstName',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'actor',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true},type:'Actor'}],fieldName:'viewer',kind:'Query',metadata:{},name:'ReadRelayQueryData',type:'Viewer'};}());








var data=readData(getStoreData({records:records}),query,'client:1');

expect(data).toHavePartialStatus();});


it('marks nodes with missing plural linked nodes as partial',function(){
var records={
'123':{
__dataID__:'123',
allPhones:[
{__dataID__:'client:1'},
{__dataID__:'client:2'}]},


'client:1':{
__dataID__:'client:1'},

'client:2':{
__dataID__:'client:2',
isVerified:true}};



var query=getNode(function(){return {children:[{children:[{fieldName:'isVerified',kind:'Field',metadata:{},type:'Boolean'}],fieldName:'allPhones',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'Phone'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'ReadRelayQueryDataRelayQL',type:'User'};}());






var data=readData(getStoreData({records:records}),query,'123');

expect(data).toHavePartialStatus();
expect(data.allPhones[0]).toHavePartialStatus();});


it('marks nodes with missing edges as partial',function(){var _pageInfo9;
var records={
feedbackID:{
__dataID__:'feedbackID',
comments:{
__dataID__:'commentsID'}},


commentsID:{
__dataID__:'commentsID',
__range__:new (require('GraphQLRange'))()},

commentEdgeID:{
__dataID__:'commentEdgeID',
node:{__dataID__:'commentNodeID'},
cursor:'cursor'},

commentNodeID:{
__dataID__:'commentNodeID',
id:'commentNodeID'}};


var query=getNode(function(){return {children:[{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'5'}}],children:[{children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'Comment'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'CommentsEdge'},{children:[{fieldName:'startCursor',kind:'Field',metadata:{},type:'String'},{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isRequisite:true},type:'PageInfo'}],fieldName:'comments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'CommentsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'ReadRelayQueryDataRelayQL',type:'Feedback'};}());














require('GraphQLRange').prototype.retrieveRangeInfoForQuery.mockReturnValue({
requestedEdgeIDs:['commentEdgeID'],
diffCalls:[require('RelayTestUtils').createCall('first',4)],
pageInfo:(_pageInfo9={},babelHelpers.defineProperty(_pageInfo9,
START_CURSOR,'cursor'),babelHelpers.defineProperty(_pageInfo9,
END_CURSOR,'cursor'),babelHelpers.defineProperty(_pageInfo9,
HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_pageInfo9,
HAS_PREV_PAGE,false),_pageInfo9)});


var data=readData(getStoreData({records:records}),query,'feedbackID',{
traverseFragmentReferences:true});


expect(data).toHavePartialStatus();
expect(data.comments).toHavePartialStatus();});


it('marks nodes with missing edge data as partial',function(){var _pageInfo10;
var records={
feedbackID:{
__dataID__:'feedbackID',
comments:{
__dataID__:'commentsID'}},


commentsID:{
__dataID__:'commentsID',
__range__:new (require('GraphQLRange'))()},

commentEdgeID:{
__dataID__:'commentEdgeID',
node:{__dataID__:'commentNodeID'},
cursor:'cursor'},

commentNodeID:{
__dataID__:'commentNodeID',
id:'commentNodeID'}};



var query=getNode(function(){return {children:[{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'1'}}],children:[{children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{children:[{fieldName:'text',kind:'Field',metadata:{},type:'String'}],fieldName:'body',kind:'Field',metadata:{canHaveSubselections:true},type:'Text'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'Comment'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'CommentsEdge'},{children:[{fieldName:'startCursor',kind:'Field',metadata:{},type:'String'},{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isRequisite:true},type:'PageInfo'}],fieldName:'comments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'CommentsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'ReadRelayQueryDataRelayQL',type:'Feedback'};}());
















require('GraphQLRange').prototype.retrieveRangeInfoForQuery.mockReturnValue({
requestedEdgeIDs:['commentEdgeID'],
diffCalls:[],
pageInfo:(_pageInfo10={},babelHelpers.defineProperty(_pageInfo10,
START_CURSOR,'cursor'),babelHelpers.defineProperty(_pageInfo10,
END_CURSOR,'cursor'),babelHelpers.defineProperty(_pageInfo10,
HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_pageInfo10,
HAS_PREV_PAGE,false),_pageInfo10)});


var data=readData(getStoreData({records:records}),query,'feedbackID',{
traverseFragmentReferences:true});


expect(data).toHavePartialStatus();
expect(data.comments).toHavePartialStatus();
expect(data.comments.edges[0].node).toHavePartialStatus();});});});
'use strict';var _RelayConnectionInter=require('RelayConnectionInterface');var 




































NODE=_RelayConnectionInter.NODE;
var EMPTY='';
var FILTER_CALLS='__filterCalls__';
var FORCE_INDEX='__forceIndex__';
var RANGE='__range__';
var RESOLVED_FRAGMENT_MAP='__resolvedFragmentMap__';
var PATH='__path__';var 






































RelayRecordStore=function(){








function RelayRecordStore(
records,
rootCallMaps,
nodeConnectionMap)
{babelHelpers.classCallCheck(this,RelayRecordStore);
this.$RelayRecordStore_cachedRecords=records.cachedRecords;
this.$RelayRecordStore_cachedRootCallMap=
rootCallMaps&&rootCallMaps.cachedRootCallMap||{};
this.$RelayRecordStore_queuedRecords=records.queuedRecords;
this.$RelayRecordStore_nodeConnectionMap=nodeConnectionMap||{};
this.$RelayRecordStore_records=records.records;
this.$RelayRecordStore_rootCallMap=rootCallMaps&&rootCallMaps.rootCallMap||{};
this.$RelayRecordStore_storage=[];
if(this.$RelayRecordStore_queuedRecords){
this.$RelayRecordStore_storage.push(this.$RelayRecordStore_queuedRecords);}

if(this.$RelayRecordStore_records){
this.$RelayRecordStore_storage.push(this.$RelayRecordStore_records);}

if(this.$RelayRecordStore_cachedRecords){
this.$RelayRecordStore_storage.push(this.$RelayRecordStore_cachedRecords);}}babelHelpers.createClass(RelayRecordStore,[{key:'getDataID',value:function getDataID(








storageKey,
identifyingArgValue)
{
if(require('RelayNodeInterface').isNodeRootCall(storageKey)){
!(
identifyingArgValue!=null)?require('invariant')(0,
'RelayRecordStore.getDataID(): Argument to `%s()` '+
'cannot be null or undefined.',
storageKey):undefined;

return identifyingArgValue;}

if(identifyingArgValue==null){
identifyingArgValue=EMPTY;}

if(this.$RelayRecordStore_rootCallMap.hasOwnProperty(storageKey)&&
this.$RelayRecordStore_rootCallMap[storageKey].hasOwnProperty(identifyingArgValue)){
return this.$RelayRecordStore_rootCallMap[storageKey][identifyingArgValue];}else 
if(this.$RelayRecordStore_cachedRootCallMap.hasOwnProperty(storageKey)){
return this.$RelayRecordStore_cachedRootCallMap[storageKey][identifyingArgValue];}}},{key:'getRecordState',value:function getRecordState(






dataID){
var record=this.$RelayRecordStore_getRecord(dataID);
if(record===null){
return 'NONEXISTENT';}else 
if(record===undefined){
return 'UNKNOWN';}

return 'EXISTENT';}},{key:'getPathToRecord',value:function getPathToRecord(






dataID)
{
var path=this.$RelayRecordStore_getField(dataID,PATH);
return path;}},{key:'hasOptimisticUpdate',value:function hasOptimisticUpdate(





dataID){
!
this.$RelayRecordStore_queuedRecords?require('invariant')(0,
'RelayRecordStore.hasOptimisticUpdate(): Optimistic updates require '+
'queued records.'):undefined;

return this.$RelayRecordStore_queuedRecords.hasOwnProperty(dataID);}},{key:'getClientMutationIDs',value:function getClientMutationIDs(







dataID){
!
this.$RelayRecordStore_queuedRecords?require('invariant')(0,
'RelayRecordStore.getClientMutationIDs(): Optimistic updates require '+
'queued records.'):undefined;

var record=this.$RelayRecordStore_queuedRecords[dataID];
return record?record.__mutationIDs__:null;}},{key:'hasDeferredFragmentData',value:function hasDeferredFragmentData(





dataID,fragmentID){
var resolvedFragmentMap=this.$RelayRecordStore_getField(dataID,RESOLVED_FRAGMENT_MAP);
!(
typeof resolvedFragmentMap==='object'||resolvedFragmentMap==null)?require('invariant')(0,
'RelayRecordStore.hasDeferredFragmentData(): Expected the map of '+
'resolved deferred fragments associated with record `%s` to be null or '+
'an object. Found a(n) `%s`.',
dataID,
typeof resolvedFragmentMap):undefined;

return !!(resolvedFragmentMap&&resolvedFragmentMap[fragmentID]);}},{key:'getType',value:function getType(


dataID){

return this.$RelayRecordStore_getField(dataID,'__typename');}},{key:'getField',value:function getField(






dataID,
storageKey)
{
return this.$RelayRecordStore_getField(dataID,storageKey);}},{key:'getLinkedRecordID',value:function getLinkedRecordID(







dataID,
storageKey)
{
var field=this.$RelayRecordStore_getField(dataID,storageKey);
if(field==null){
return field;}

!(
typeof field==='object'&&
field!==null&&
!Array.isArray(field)&&(
field.__dataID__==null||typeof field.__dataID__==='string'))?require('invariant')(0,
'RelayRecordStore.getLinkedRecordID(): Expected field `%s` for record '+
'`%s` to have a linked record.',
storageKey,
dataID):undefined;

return field.__dataID__;}},{key:'getLinkedRecordIDs',value:function getLinkedRecordIDs(







dataID,
storageKey)
{
var field=this.$RelayRecordStore_getField(dataID,storageKey);
if(field==null){
return field;}

!
Array.isArray(field)?require('invariant')(0,
'RelayRecordStore.getLinkedRecordIDs(): Expected field `%s` for '+
'record `%s` to have an array of linked records.',
storageKey,
dataID):undefined;

return field.map(function(item,ii){
!(
typeof item==='object'&&item.__dataID__)?require('invariant')(0,
'RelayRecordStore.getLinkedRecordIDs(): Expected element at index %s '+
'in field `%s` for record `%s` to be a linked record.',
ii,
storageKey,
dataID):undefined;

return item.__dataID__;});}},{key:'getConnectionIDsForRecord',value:function getConnectionIDsForRecord(









dataID)
{
var connectionIDs=this.$RelayRecordStore_nodeConnectionMap[dataID];
if(connectionIDs){
return Object.keys(connectionIDs);}

return null;}},{key:'getConnectionIDsForField',value:function getConnectionIDsForField(







dataID,
schemaName)
{

var record=this.$RelayRecordStore_records[dataID];
if(record==null){
return record;}

var connectionIDs=undefined;
require('forEachObject')(record,function(datum,key){
if(datum&&getFieldNameFromKey(key)===schemaName){
var connectionID=datum.__dataID__;
if(connectionID){
connectionIDs=connectionIDs||[];
connectionIDs.push(connectionID);}}});



return connectionIDs;}},{key:'getRangeForceIndex',value:function getRangeForceIndex(






connectionID)
{
var forceIndex=this.$RelayRecordStore_getField(connectionID,FORCE_INDEX);
if(forceIndex===null){
return -1;}


return forceIndex||0;}},{key:'getRangeFilterCalls',value:function getRangeFilterCalls(








connectionID)
{
return this.$RelayRecordStore_getField(connectionID,FILTER_CALLS);}},{key:'getRangeMetadata',value:function getRangeMetadata(












connectionID,
calls)
{var _this=this;
if(connectionID==null){
return connectionID;}

var range=this.$RelayRecordStore_getField(connectionID,RANGE);
if(range==null){
if(range===null){
require('warning')(
false,
'RelayRecordStore.getRangeMetadata(): Expected range to exist if '+
'`edges` has been fetched.');}


return undefined;}

var filterCalls=getFilterCalls(calls);


if(calls.length===filterCalls.length){
return {
diffCalls:calls,
filterCalls:filterCalls,
pageInfo:undefined,
requestedEdgeIDs:[],
filteredEdges:[]};}


var queuedRecord=this.$RelayRecordStore_queuedRecords?
this.$RelayRecordStore_queuedRecords[connectionID]:
null;var _range$retrieveRangeI=




range.retrieveRangeInfoForQuery(calls,queuedRecord);var diffCalls=_range$retrieveRangeI.diffCalls;var pageInfo=_range$retrieveRangeI.pageInfo;var requestedEdgeIDs=_range$retrieveRangeI.requestedEdgeIDs;
if(diffCalls&&diffCalls.length){
diffCalls=filterCalls.concat(diffCalls);}else 
{
diffCalls=[];}

var filteredEdges;
if(requestedEdgeIDs){
filteredEdges=requestedEdgeIDs.
map(function(edgeID){return {
edgeID:edgeID,
nodeID:_this.getLinkedRecordID(edgeID,NODE)};}).

filter(function(edge){return _this.$RelayRecordStore_getRecord(edge.nodeID);});}else 
{
filteredEdges=[];}

return {
diffCalls:diffCalls,
filterCalls:filterCalls,
pageInfo:pageInfo,
requestedEdgeIDs:requestedEdgeIDs,
filteredEdges:filteredEdges};}},{key:'hasRange',value:function hasRange(






connectionID){
return !!this.$RelayRecordStore_getField(connectionID,RANGE);}},{key:'removeRecord',value:function removeRecord(






dataID){
delete this.$RelayRecordStore_records[dataID];
if(this.$RelayRecordStore_queuedRecords){
delete this.$RelayRecordStore_queuedRecords[dataID];}

if(this.$RelayRecordStore_cachedRecords){
delete this.$RelayRecordStore_cachedRecords[dataID];}

delete this.$RelayRecordStore_nodeConnectionMap[dataID];}},{key:'$RelayRecordStore_getRecord',value:function $RelayRecordStore_getRecord(





dataID){
if(this.$RelayRecordStore_queuedRecords&&this.$RelayRecordStore_queuedRecords.hasOwnProperty(dataID)){
return this.$RelayRecordStore_queuedRecords[dataID];}else 
if(this.$RelayRecordStore_records.hasOwnProperty(dataID)){
return this.$RelayRecordStore_records[dataID];}else 
if(this.$RelayRecordStore_cachedRecords){
return this.$RelayRecordStore_cachedRecords[dataID];}}},{key:'$RelayRecordStore_getField',value:function $RelayRecordStore_getField(








dataID,storageKey){
var storage=this.$RelayRecordStore_storage;
for(var ii=0;ii<storage.length;ii++){
var record=storage[ii][dataID];
if(record===null){
return null;}else 
if(record&&record.hasOwnProperty(storageKey)){
return record[storageKey];}}


return undefined;}}]);return RelayRecordStore;}();







function getFilterCalls(calls){
return calls.filter(function(call){return !require('RelayConnectionInterface').isConnectionCall(call);});}







function getFieldNameFromKey(key){

return key.split(/(?![_A-Za-z][_0-9A-Za-z]*)/,1)[0];}


module.exports=RelayRecordStore;
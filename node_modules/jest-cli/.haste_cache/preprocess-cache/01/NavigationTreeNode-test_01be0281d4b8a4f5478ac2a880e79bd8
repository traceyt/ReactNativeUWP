'use strict';





jest.
dontMock('NavigationTreeNode').
dontMock('fbjs/lib/invariant').
dontMock('immutable');



describe('NavigationTreeNode-test',function(){
it('should be empty',function(){
var node=new (require('NavigationTreeNode'))();
expect(node.getValue()).toEqual(undefined);
expect(node.getParent()).toEqual(null);
expect(node.getChildrenCount()).toEqual(0);
expect(node.getChildAt(0)).toEqual(null);});



it('should contain value',function(){
var node=new (require('NavigationTreeNode'))(123);
expect(node.getValue()).toEqual(123);});


it('should appendChild',function(){
var papa=new (require('NavigationTreeNode'))('hedger');
var baby=new (require('NavigationTreeNode'))('hedger jr');
papa.appendChild(baby);
expect(papa.getChildAt(0)).toEqual(baby);
expect(papa.getChildrenCount()).toEqual(1);
expect(baby.getParent()).toEqual(papa);});


it('should removeChild',function(){
var papa=new (require('NavigationTreeNode'))('Eddard Stark');
var baby=new (require('NavigationTreeNode'))('Robb Stark');
papa.appendChild(baby);

papa.removeChild(baby);
expect(papa.getChildAt(0)).toEqual(null);
expect(papa.getChildrenCount()).toEqual(0);
expect(baby.getParent()).toEqual(null);});


it('should not remove non-child',function(){
var papa=new (require('NavigationTreeNode'))('dog');
var baby=new (require('NavigationTreeNode'))('cat');
expect(papa.removeChild.bind(papa,baby)).toThrow();});


it('should find child',function(){
var papa=new (require('NavigationTreeNode'))('Eddard Stark');
var baby=new (require('NavigationTreeNode'))('Robb Stark');

papa.appendChild(baby);
expect(papa.indexOf(baby)).toEqual(0);

papa.removeChild(baby);
expect(papa.indexOf(baby)).toEqual(-1);});



it('should traverse each child',function(){
var parent=new (require('NavigationTreeNode'))();
parent.appendChild(new (require('NavigationTreeNode'))('a'));
parent.appendChild(new (require('NavigationTreeNode'))('b'));
parent.appendChild(new (require('NavigationTreeNode'))('c'));
var result=[];
parent.forEach(function(child,index){
result[index]=child.getValue();});


expect(result).toEqual(['a','b','c']);});


it('should map children',function(){
var parent=new (require('NavigationTreeNode'))();
parent.appendChild(new (require('NavigationTreeNode'))('a'));
parent.appendChild(new (require('NavigationTreeNode'))('b'));
parent.appendChild(new (require('NavigationTreeNode'))('c'));
var result=parent.map(function(child,index){
return child.getValue();});


expect(result).toEqual(['a','b','c']);});


it('should traverse some children',function(){
var parent=new (require('NavigationTreeNode'))();
parent.appendChild(new (require('NavigationTreeNode'))('a'));
parent.appendChild(new (require('NavigationTreeNode'))('b'));
parent.appendChild(new (require('NavigationTreeNode'))('c'));

var result=[];
var value=parent.some(function(child,index){
if(index>1){
return true;}else 
{
result[index]=child.getValue();}});



expect(value).toEqual(true);
expect(result).toEqual(['a','b']);});});
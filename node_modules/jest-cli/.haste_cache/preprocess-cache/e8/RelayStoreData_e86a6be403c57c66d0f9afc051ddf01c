'use strict';var _RelayConnectionInter=require('RelayConnectionInterface');var 

























































CLIENT_MUTATION_ID=_RelayConnectionInter.CLIENT_MUTATION_ID;var _RelayNodeInterface=require('RelayNodeInterface');var 
ID=_RelayNodeInterface.ID;var ID_TYPE=_RelayNodeInterface.ID_TYPE;var NODE=_RelayNodeInterface.NODE;var NODE_TYPE=_RelayNodeInterface.NODE_TYPE;var TYPENAME=_RelayNodeInterface.TYPENAME;

var idField=require('RelayQuery').Field.build({
fieldName:ID,
type:'String'});

var typeField=require('RelayQuery').Field.build({
fieldName:TYPENAME,
type:'String'});var 








RelayStoreData=function(){




















function RelayStoreData(){babelHelpers.classCallCheck(this,RelayStoreData);
var cachedRecords={};
var cachedRootCallMap={};
var queuedRecords={};
var records={};
var rootCallMap={};
var nodeRangeMap={};var _createRecordCollecti=




createRecordCollection({
cachedRecords:cachedRecords,
cachedRootCallMap:cachedRootCallMap,
cacheWriter:null,
queuedRecords:queuedRecords,
nodeRangeMap:nodeRangeMap,
records:records,
rootCallMap:rootCallMap});var cachedStore=_createRecordCollecti.cachedStore;var queuedStore=_createRecordCollecti.queuedStore;var recordStore=_createRecordCollecti.recordStore;

var rangeData=new (require('GraphQLStoreRangeUtils'))();

this.$RelayStoreData_cacheManager=null;
this.$RelayStoreData_cachedRecords=cachedRecords;
this.$RelayStoreData_cachedRootCallMap=cachedRootCallMap;
this.$RelayStoreData_cachedStore=cachedStore;
this.$RelayStoreData_changeEmitter=new (require('GraphQLStoreChangeEmitter'))(rangeData);
this.$RelayStoreData_mutationQueue=new (require('RelayMutationQueue'))(this);
this.$RelayStoreData_networkLayer=new (require('RelayNetworkLayer'))();
this.$RelayStoreData_nodeRangeMap=nodeRangeMap;
this.$RelayStoreData_pendingQueryTracker=new (require('RelayPendingQueryTracker'))(this);
this.$RelayStoreData_queryRunner=new (require('GraphQLQueryRunner'))(this);
this.$RelayStoreData_queryTracker=new (require('RelayQueryTracker'))();
this.$RelayStoreData_queuedRecords=queuedRecords;
this.$RelayStoreData_queuedStore=queuedStore;
this.$RelayStoreData_records=records;
this.$RelayStoreData_recordStore=recordStore;
this.$RelayStoreData_rangeData=rangeData;
this.$RelayStoreData_rootCallMap=rootCallMap;
this.$RelayStoreData_taskQueue=new (require('RelayTaskQueue'))();}babelHelpers.createClass(RelayStoreData,[{key:'initializeGarbageCollector',value:function initializeGarbageCollector(







scheduler){
!
!this.$RelayStoreData_garbageCollector?require('invariant')(0,
'RelayStoreData: Garbage collector is already initialized.'):undefined;

var shouldInitialize=this.$RelayStoreData_isStoreDataEmpty();
require('warning')(
shouldInitialize,
'RelayStoreData: Garbage collection can only be initialized when no '+
'data is present.');

if(shouldInitialize){
this.$RelayStoreData_garbageCollector=new (require('RelayGarbageCollector'))(this,scheduler);}}},{key:'injectTaskScheduler',value:function injectTaskScheduler(







scheduler){
this.$RelayStoreData_taskQueue.injectScheduler(scheduler);}},{key:'injectCacheManager',value:function injectCacheManager(






cacheManager){var _createRecordCollecti2=




createRecordCollection({
cachedRecords:this.$RelayStoreData_cachedRecords,
cachedRootCallMap:this.$RelayStoreData_cachedRootCallMap,
cacheWriter:cacheManager?cacheManager.getQueryWriter():null,
queuedRecords:this.$RelayStoreData_queuedRecords,
nodeRangeMap:this.$RelayStoreData_nodeRangeMap,
records:this.$RelayStoreData_records,
rootCallMap:this.$RelayStoreData_rootCallMap});var cachedStore=_createRecordCollecti2.cachedStore;var queuedStore=_createRecordCollecti2.queuedStore;var recordStore=_createRecordCollecti2.recordStore;


this.$RelayStoreData_cacheManager=cacheManager;
this.$RelayStoreData_cachedStore=cachedStore;
this.$RelayStoreData_queuedStore=queuedStore;
this.$RelayStoreData_recordStore=recordStore;}},{key:'clearCacheManager',value:function clearCacheManager()


{var _createRecordCollecti3=




createRecordCollection({
cachedRecords:this.$RelayStoreData_cachedRecords,
cachedRootCallMap:this.$RelayStoreData_cachedRootCallMap,
cacheWriter:null,
queuedRecords:this.$RelayStoreData_queuedRecords,
nodeRangeMap:this.$RelayStoreData_nodeRangeMap,
records:this.$RelayStoreData_records,
rootCallMap:this.$RelayStoreData_rootCallMap});var cachedStore=_createRecordCollecti3.cachedStore;var queuedStore=_createRecordCollecti3.queuedStore;var recordStore=_createRecordCollecti3.recordStore;


this.$RelayStoreData_cacheManager=null;
this.$RelayStoreData_cachedStore=cachedStore;
this.$RelayStoreData_queuedStore=queuedStore;
this.$RelayStoreData_recordStore=recordStore;}},{key:'hasCacheManager',value:function hasCacheManager()


{
return !!this.$RelayStoreData_cacheManager;}},{key:'hasOptimisticUpdate',value:function hasOptimisticUpdate(





dataID){
dataID=this.getRangeData().getCanonicalClientID(dataID);
return this.getQueuedStore().hasOptimisticUpdate(dataID);}},{key:'getClientMutationIDs',value:function getClientMutationIDs(







dataID){
dataID=this.getRangeData().getCanonicalClientID(dataID);
return this.getQueuedStore().getClientMutationIDs(dataID);}},{key:'readFromDiskCache',value:function readFromDiskCache(








queries,
callbacks)
{var _this=this;
var cacheManager=this.$RelayStoreData_cacheManager;
!
cacheManager?require('invariant')(0,
'RelayStoreData: `readFromDiskCache` should only be called when cache '+
'manager is available.'):undefined;

var changeTracker=new (require('RelayChangeTracker'))();
var profile=require('RelayProfiler').profile('RelayStoreData.readFromDiskCache');
require('RelayDiskCacheReader').readQueries(
queries,
this.$RelayStoreData_queuedStore,
this.$RelayStoreData_cachedRecords,
this.$RelayStoreData_cachedRootCallMap,
this.$RelayStoreData_garbageCollector,
cacheManager,
changeTracker,
{
onSuccess:function(){
_this.$RelayStoreData_handleChangedAndNewDataIDs(changeTracker.getChangeSet());
profile.stop();
callbacks.onSuccess&&callbacks.onSuccess();},

onFailure:function(){
_this.$RelayStoreData_handleChangedAndNewDataIDs(changeTracker.getChangeSet());
profile.stop();
callbacks.onFailure&&callbacks.onFailure();}});}},{key:'readFragmentFromDiskCache',value:function readFragmentFromDiskCache(











dataID,
fragment,
path,
callbacks)
{var _this2=this;
var cacheManager=this.$RelayStoreData_cacheManager;
!
cacheManager?require('invariant')(0,
'RelayStoreData: `readFragmentFromDiskCache` should only be called '+
'when cache manager is available.'):undefined;

var changeTracker=new (require('RelayChangeTracker'))();
var profile=
require('RelayProfiler').profile('RelayStoreData.readFragmentFromDiskCache');
require('RelayDiskCacheReader').readFragment(
dataID,
fragment,
path,
this.$RelayStoreData_queuedStore,
this.$RelayStoreData_cachedRecords,
this.$RelayStoreData_cachedRootCallMap,
this.$RelayStoreData_garbageCollector,
cacheManager,
changeTracker,
{
onSuccess:function(){
_this2.$RelayStoreData_handleChangedAndNewDataIDs(changeTracker.getChangeSet());
profile.stop();
callbacks.onSuccess&&callbacks.onSuccess();},

onFailure:function(){
_this2.$RelayStoreData_handleChangedAndNewDataIDs(changeTracker.getChangeSet());
profile.stop();
callbacks.onFailure&&callbacks.onFailure();}});}},{key:'handleQueryPayload',value:function handleQueryPayload(









query,
response,
forceIndex)
{
var profiler=require('RelayProfiler').profile('RelayStoreData.handleQueryPayload');
var changeTracker=new (require('RelayChangeTracker'))();
var writer=new (require('RelayQueryWriter'))(
this.$RelayStoreData_recordStore,
this.getRecordWriter(),
this.$RelayStoreData_queryTracker,
changeTracker,
{
forceIndex:forceIndex,
updateTrackedQueries:true});


require('writeRelayQueryPayload')(
writer,
query,
response);

this.$RelayStoreData_handleChangedAndNewDataIDs(changeTracker.getChangeSet());
profiler.stop();}},{key:'handleUpdatePayload',value:function handleUpdatePayload(






operation,
payload,_ref)

{var configs=_ref.configs;var isOptimisticUpdate=_ref.isOptimisticUpdate;
var profiler=require('RelayProfiler').profile('RelayStoreData.handleUpdatePayload');
var changeTracker=new (require('RelayChangeTracker'))();
var store=undefined;
var recordWriter=undefined;
if(isOptimisticUpdate){
var clientMutationID=payload[CLIENT_MUTATION_ID];
!(
typeof clientMutationID==='string')?require('invariant')(0,
'RelayStoreData.handleUpdatePayload(): Expected optimistic payload '+
'to have a valid `%s`.',
CLIENT_MUTATION_ID):undefined;

store=this.getRecordStoreForOptimisticMutation(clientMutationID);
recordWriter=
this.getRecordWriterForOptimisticMutation(clientMutationID);}else 
{
store=this.$RelayStoreData_getRecordStoreForMutation();
recordWriter=this.$RelayStoreData_getRecordWriterForMutation();}

var writer=new (require('RelayQueryWriter'))(
store,
recordWriter,
this.$RelayStoreData_queryTracker,
changeTracker,
{
forceIndex:require('generateForceIndex')(),
isOptimisticUpdate:isOptimisticUpdate,
updateTrackedQueries:false});


require('writeRelayUpdatePayload')(
writer,
operation,
payload,
{configs:configs,isOptimisticUpdate:isOptimisticUpdate});

this.$RelayStoreData_handleChangedAndNewDataIDs(changeTracker.getChangeSet());
profiler.stop();}},{key:'buildFragmentQueryForDataID',value:function buildFragmentQueryForDataID(







fragment,
dataID)
{
if(require('RelayRecord').isClientID(dataID)){
var path=this.$RelayStoreData_queuedStore.getPathToRecord(
this.$RelayStoreData_rangeData.getCanonicalClientID(dataID));

!
path?require('invariant')(0,
'RelayStoreData.buildFragmentQueryForDataID(): Cannot refetch '+
'record `%s` without a path.',
dataID):undefined;

return require('RelayQueryPath').getQuery(
this.$RelayStoreData_cachedStore,
path,
fragment);}




return require('RelayQuery').Root.build(
fragment.getDebugName()||'UnknownQuery',
NODE,
dataID,
[idField,typeField,fragment],
{
identifyingArgName:ID,
identifyingArgType:ID_TYPE,
isAbstract:true,
isDeferred:false,
isPlural:false},

NODE_TYPE);}},{key:'getNodeData',value:function getNodeData()



{
return this.$RelayStoreData_records;}},{key:'getQueuedData',value:function getQueuedData()


{
return this.$RelayStoreData_queuedRecords;}},{key:'clearQueuedData',value:function clearQueuedData()


{var _this3=this;
require('forEachObject')(this.$RelayStoreData_queuedRecords,function(_,key){
delete _this3.$RelayStoreData_queuedRecords[key];
_this3.$RelayStoreData_changeEmitter.broadcastChangeForID(key);});}},{key:'getCachedData',value:function getCachedData()



{
return this.$RelayStoreData_cachedRecords;}},{key:'getGarbageCollector',value:function getGarbageCollector()


{
return this.$RelayStoreData_garbageCollector;}},{key:'getMutationQueue',value:function getMutationQueue()


{
return this.$RelayStoreData_mutationQueue;}},{key:'getNetworkLayer',value:function getNetworkLayer()


{
return this.$RelayStoreData_networkLayer;}},{key:'getCachedStore',value:function getCachedStore()





{
return this.$RelayStoreData_cachedStore;}},{key:'getQueuedStore',value:function getQueuedStore()





{
return this.$RelayStoreData_queuedStore;}},{key:'getRecordStore',value:function getRecordStore()





{
return this.$RelayStoreData_recordStore;}},{key:'getRecordWriter',value:function getRecordWriter()





{
return new (require('RelayRecordWriter'))(
this.$RelayStoreData_records,
this.$RelayStoreData_rootCallMap,
false,
this.$RelayStoreData_nodeRangeMap,
this.$RelayStoreData_cacheManager?
this.$RelayStoreData_cacheManager.getQueryWriter():
null);}},{key:'getQueryTracker',value:function getQueryTracker()



{
return this.$RelayStoreData_queryTracker;}},{key:'getQueryRunner',value:function getQueryRunner()


{
return this.$RelayStoreData_queryRunner;}},{key:'getChangeEmitter',value:function getChangeEmitter()


{
return this.$RelayStoreData_changeEmitter;}},{key:'getRangeData',value:function getRangeData()


{
return this.$RelayStoreData_rangeData;}},{key:'getPendingQueryTracker',value:function getPendingQueryTracker()


{
return this.$RelayStoreData_pendingQueryTracker;}},{key:'getTaskQueue',value:function getTaskQueue()


{
return this.$RelayStoreData_taskQueue;}},{key:'getRootCallData',value:function getRootCallData()








{
return this.$RelayStoreData_rootCallMap;}},{key:'$RelayStoreData_isStoreDataEmpty',value:function $RelayStoreData_isStoreDataEmpty()


{
return (
Object.keys(this.$RelayStoreData_records).length===0&&
Object.keys(this.$RelayStoreData_queuedRecords).length===0&&
Object.keys(this.$RelayStoreData_cachedRecords).length===0);}},{key:'$RelayStoreData_handleChangedAndNewDataIDs',value:function $RelayStoreData_handleChangedAndNewDataIDs(







changeSet){var _this4=this;
var updatedDataIDs=Object.keys(changeSet.updated);
updatedDataIDs.forEach(function(id){return _this4.$RelayStoreData_changeEmitter.broadcastChangeForID(id);});
if(this.$RelayStoreData_garbageCollector){(function(){
var createdDataIDs=Object.keys(changeSet.created);
var garbageCollector=_this4.$RelayStoreData_garbageCollector;
createdDataIDs.forEach(function(dataID){return garbageCollector.register(dataID);});})();}}},{key:'$RelayStoreData_getRecordStoreForMutation',value:function $RelayStoreData_getRecordStoreForMutation()



{
var records=this.$RelayStoreData_records;
var rootCallMap=this.$RelayStoreData_rootCallMap;

return new (require('RelayRecordStore'))(
{records:records},
{rootCallMap:rootCallMap},
this.$RelayStoreData_nodeRangeMap);}},{key:'$RelayStoreData_getRecordWriterForMutation',value:function $RelayStoreData_getRecordWriterForMutation()



{
return new (require('RelayRecordWriter'))(
this.$RelayStoreData_records,
this.$RelayStoreData_rootCallMap,
false,
this.$RelayStoreData_nodeRangeMap,
this.$RelayStoreData_cacheManager?
this.$RelayStoreData_cacheManager.getMutationWriter():
null);}},{key:'getRecordStoreForOptimisticMutation',value:function getRecordStoreForOptimisticMutation(




clientMutationID)
{
var cachedRecords=this.$RelayStoreData_cachedRecords;
var cachedRootCallMap=this.$RelayStoreData_cachedRootCallMap;
var rootCallMap=this.$RelayStoreData_rootCallMap;
var queuedRecords=this.$RelayStoreData_queuedRecords;
var records=this.$RelayStoreData_records;

return new (require('RelayRecordStore'))(
{cachedRecords:cachedRecords,queuedRecords:queuedRecords,records:records},
{cachedRootCallMap:cachedRootCallMap,rootCallMap:rootCallMap},
this.$RelayStoreData_nodeRangeMap);}},{key:'getRecordWriterForOptimisticMutation',value:function getRecordWriterForOptimisticMutation(




clientMutationID)
{
return new (require('RelayRecordWriter'))(
this.$RelayStoreData_queuedRecords,
this.$RelayStoreData_rootCallMap,
true,
this.$RelayStoreData_nodeRangeMap,
null,
clientMutationID);}}]);return RelayStoreData;}();





function createRecordCollection(_ref2)











{var cachedRecords=_ref2.cachedRecords;var cachedRootCallMap=_ref2.cachedRootCallMap;var cacheWriter=_ref2.cacheWriter;var queuedRecords=_ref2.queuedRecords;var nodeRangeMap=_ref2.nodeRangeMap;var records=_ref2.records;var rootCallMap=_ref2.rootCallMap;
return {
queuedStore:new (require('RelayRecordStore'))(
{cachedRecords:cachedRecords,queuedRecords:queuedRecords,records:records},
{cachedRootCallMap:cachedRootCallMap,rootCallMap:rootCallMap},
nodeRangeMap),

cachedStore:new (require('RelayRecordStore'))(
{cachedRecords:cachedRecords,records:records},
{cachedRootCallMap:cachedRootCallMap,rootCallMap:rootCallMap},
nodeRangeMap),

recordStore:new (require('RelayRecordStore'))(
{records:records},
{rootCallMap:rootCallMap},
nodeRangeMap)};}




require('RelayProfiler').instrumentMethods(RelayStoreData.prototype,{
handleQueryPayload:'RelayStoreData.prototype.handleQueryPayload',
handleUpdatePayload:'RelayStoreData.prototype.handleUpdatePayload'});


module.exports=RelayStoreData;
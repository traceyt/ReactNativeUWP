'use strict';









jest.dontMock('MessageQueue').
dontMock('fbjs/lib/keyMirror');


var MODULE_IDS=0;
var METHOD_IDS=1;
var PARAMS=2;

var TestModule={
testHook1:function(){},testHook2:function(){}};


var assertQueue=function(flushedQueue,index,moduleID,methodID,params){
expect(flushedQueue[MODULE_IDS][index]).toEqual(moduleID);
expect(flushedQueue[METHOD_IDS][index]).toEqual(methodID);
expect(flushedQueue[PARAMS][index]).toEqual(params);};


var queue;

describe('MessageQueue',function(){

beforeEach(function(){
queue=new (require('MessageQueue'))(
remoteModulesConfig,
localModulesConfig);


queue.registerCallableModule('one',TestModule);

TestModule.testHook1=jasmine.createSpy();
TestModule.testHook2=jasmine.createSpy();});


it('should enqueue native calls',function(){
queue.__nativeCall(0,1,[2]);
var flushedQueue=queue.flushedQueue();
assertQueue(flushedQueue,0,0,1,[2]);});


it('should call a local function with id',function(){
expect(TestModule.testHook1.calls.count()).toEqual(0);
queue.__callFunction(0,0,[1]);
expect(TestModule.testHook1.calls.count()).toEqual(1);});


it('should call a local function with the function name',function(){
expect(TestModule.testHook2.calls.count()).toEqual(0);
queue.__callFunction('one','testHook2',[2]);
expect(TestModule.testHook2.calls.count()).toEqual(1);});


it('should generate native modules',function(){
queue.RemoteModules.one.remoteMethod1('foo');
var flushedQueue=queue.flushedQueue();
assertQueue(flushedQueue,0,0,0,['foo']);});


it('should store callbacks',function(){
queue.RemoteModules.one.remoteMethod2('foo',function(){},function(){});
var flushedQueue=queue.flushedQueue();
assertQueue(flushedQueue,0,0,1,['foo',0,1]);});


it('should call the stored callback',function(){
var done=false;
queue.RemoteModules.one.remoteMethod1(function(){done=true;});
queue.__invokeCallback(1);
expect(done).toEqual(true);});


it('should throw when calling the same callback twice',function(){
queue.RemoteModules.one.remoteMethod1(function(){});
queue.__invokeCallback(1);
expect(function(){return queue.__invokeCallback(1);}).toThrow();});


it('should throw when calling both success and failure callback',function(){
queue.RemoteModules.one.remoteMethod1(function(){},function(){});
queue.__invokeCallback(1);
expect(function(){return queue.__invokeCallback(0);}).toThrow();});});



var remoteModulesConfig={
'one':{
'moduleID':0,
'methods':{
'remoteMethod1':{'type':'remote','methodID':0},
'remoteMethod2':{'type':'remote','methodID':1}}}};




var localModulesConfig={
'one':{
'moduleID':0,
'methods':{
'testHook1':{'type':'local','methodID':0},
'testHook2':{'type':'local','methodID':1}}}};
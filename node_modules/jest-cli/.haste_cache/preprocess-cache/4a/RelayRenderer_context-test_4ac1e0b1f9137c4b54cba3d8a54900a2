/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails oncall+relay
 */

'use strict';function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError('Cannot call a class as a function');}}function _inherits(subClass, superClass) {if (typeof superClass !== 'function' && superClass !== null) {throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

require('configureForRelayOSS');

jest.dontMock('RelayRenderer');








describe('RelayRenderer.context', function () {
  var MockComponent = undefined;
  var MockContainer = undefined;

  beforeEach(function () {
    jest.resetModuleRegistry();

    MockComponent = require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createClass({ displayName: 'MockComponent', render: function () {return require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement('div', null);} });
    MockContainer = require('Relay').createContainer(MockComponent, { 
      fragments: {} });


    var container = document.createElement('div');
    var contextTypes = { 
      relay: require('Relay').PropTypes.Context, 
      route: require('Relay').PropTypes.QueryConfig.isRequired };

    jasmine.addMatchers({ 
      toRenderQueryConfig: function () {
        return { 
          compare: function (actual, expected) {
            var context = undefined;var 
            MockChild = (function (_React$Component) {_inherits(MockChild, _React$Component);function MockChild() {_classCallCheck(this, MockChild);_React$Component.apply(this, arguments);}MockChild.prototype.
              render = function render() {
                context = this.context;
                return null;};return MockChild;})(require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').Component);


            MockChild.contextTypes = contextTypes;
            var element = require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').cloneElement(actual, { 
              render: function () {
                return require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(MockChild, null);} });


            require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react-dom').render(element, container);
            var mockRequests = require('RelayStore').primeCache.mock.requests;
            mockRequests[mockRequests.length - 1].block();
            return { 
              pass: context.relay === require('RelayStore') && context.route === expected };} };} });});







  it('sets query config on context', function () {
    var queryConfig = require('RelayQueryConfig').genMockInstance();
    expect(
    require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(require('RelayRenderer'), { Container: MockContainer, queryConfig: queryConfig })).
    toRenderQueryConfig(queryConfig);});


  it('updates query config on context', function () {
    var queryConfigA = require('RelayQueryConfig').genMockInstance();
    expect(
    require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(require('RelayRenderer'), { Container: MockContainer, queryConfig: queryConfigA })).
    toRenderQueryConfig(queryConfigA);

    var queryConfigB = require('RelayQueryConfig').genMockInstance();
    expect(
    require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement(require('RelayRenderer'), { Container: MockContainer, queryConfig: queryConfigB })).
    toRenderQueryConfig(queryConfigB);});});
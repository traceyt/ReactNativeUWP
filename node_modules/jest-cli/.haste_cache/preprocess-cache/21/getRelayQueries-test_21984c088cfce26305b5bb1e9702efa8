/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails oncall+relay
 */

'use strict';function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError('Cannot call a class as a function');}}function _inherits(subClass, superClass) {if (typeof superClass !== 'function' && superClass !== null) {throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

require('configureForRelayOSS');

jest.mock('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/warning');







describe('getRelayQueries', function () {
  var MockPageContainer;
  var MockPageComponent;

  var makeRoute;var 

  getNode = require('RelayTestUtils').getNode;

  beforeEach(function () {
    jest.resetModuleRegistry();

    MockPageComponent = (function (_React$Component) {_inherits(MockPageComponent, _React$Component);function MockPageComponent() {_classCallCheck(this, MockPageComponent);_React$Component.apply(this, arguments);}MockPageComponent.prototype.
      render = function render() {
        return require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement('div', null);};return MockPageComponent;})(require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').Component);



    MockPageContainer = require('Relay').createContainer(MockPageComponent, { 
      fragments: { 
        first: function () {return (function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: 'firstName', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: '03AxkZ4Tryj9:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'GetRelayQueriesRelayQL', type: 'Node' };})();}, 
        last: function () {return (function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: 'lastName', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'IrTFTPBp8kAl:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'GetRelayQueriesRelayQL', type: 'Node' };})();} } });



    makeRoute = function () {var 
      MockRoute = (function (_Relay$Route) {_inherits(MockRoute, _Relay$Route);function MockRoute() {_classCallCheck(this, MockRoute);_Relay$Route.apply(this, arguments);}return MockRoute;})(require('Relay').Route);
      MockRoute.routeName = 'MockRoute';
      MockRoute.path = '/{id}';
      MockRoute.paramDefinitions = { 
        id: { 
          type: 'String', 
          id: true } };


      MockRoute.queries = { 
        first: function (Component) {return (function (RQL_0) {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallVariable', callVariableName: 'id' } }], children: [].concat.apply([], [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'GetRelayQueries', type: 'Node' };})(


          Component.getFragment('first'));}, 



        last: function (Component) {return (function (RQL_0) {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallVariable', callVariableName: 'id' } }], children: [].concat.apply([], [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'GetRelayQueries', type: 'Node' };})(


          Component.getFragment('last'));} };




      return MockRoute;};


    jasmine.addMatchers(require('RelayTestUtils').matchers);});


  it('creates a query for a component given a route', function () {
    var MockRoute = makeRoute();
    var route = new MockRoute({ id: '123' });
    var queries = require('getRelayQueries')(MockPageContainer, route);

    var expected = { 
      first: getNode((function (RQL_0) {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '123' } }], children: [].concat.apply([], [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'GetRelayQueries', type: 'Node' };})((function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: 'firstName', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'NmIthIxJdEzj:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'GetRelayQueriesRelayQL', type: 'Node' };})())), 






      last: getNode((function (RQL_0) {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '123' } }], children: [].concat.apply([], [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'GetRelayQueries', type: 'Node' };})((function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: 'lastName', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'ih88nbeL3dpf:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'GetRelayQueriesRelayQL', type: 'Node' };})())) };








    expect(queries.first).toEqualQueryRoot(expected.first);
    expect(queries.first.getVariables()).toBe(route.params);

    expect(queries.last).toEqualQueryRoot(expected.last);
    expect(queries.last.getVariables()).toBe(route.params);});


  it('omits queries with undefined root call values', function () {
    var MockRoute = makeRoute();
    var route = new MockRoute({ id: undefined });
    var queries = require('getRelayQueries')(MockPageContainer, route);

    expect(queries).toEqual({ 
      first: null, 
      last: null });});



  it('returns null for fragments without a matching route query', function () {var 
    FirstRoute = (function (_Relay$Route2) {_inherits(FirstRoute, _Relay$Route2);function FirstRoute() {_classCallCheck(this, FirstRoute);_Relay$Route2.apply(this, arguments);}return FirstRoute;})(require('Relay').Route);
    FirstRoute.routeName = 'BadRoute';
    FirstRoute.queries = { 
      first: function () {return (function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '123' } }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'GetRelayQueries', type: 'Node' };})();} };

    var route = new FirstRoute({});
    var queries = require('getRelayQueries')(MockPageContainer, route);

    expect(queries.last).toBe(null);});


  it('throws for invalid `Relay.QL` queries', function () {var 
    BadRoute = (function (_Relay$Route3) {_inherits(BadRoute, _Relay$Route3);function BadRoute() {_classCallCheck(this, BadRoute);_Relay$Route3.apply(this, arguments);}return BadRoute;})(require('Relay').Route);
    BadRoute.routeName = 'BadRoute';
    BadRoute.queries = { 
      first: function () {return (function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'fQj5FUnrY8CV:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'GetRelayQueriesRelayQL', type: 'Node' };})();} };

    var badRoute = new BadRoute({});

    expect(function () {
      require('getRelayQueries')(MockPageContainer, badRoute);}).
    toFailInvariant(
    'Relay.QL: query `BadRoute.queries.first` is invalid, a typical ' + 
    'query is defined using: () => Relay.QL`query { ... }`.');});



  it('warns if a container does not include a required fragment', function () {
    var MockRoute = makeRoute();
    var route = new MockRoute({ id: '123' });

    var AnotherMockContainer = require('Relay').createContainer(MockPageComponent, { 
      fragments: { 
        first: function () {return (function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'vK9wniIaVsra:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'GetRelayQueriesRelayQL', type: 'Node' };})();} } });



    var queries = require('getRelayQueries')(AnotherMockContainer, route);
    expect(queries.last).toBe(undefined);

    expect([
    'Relay.QL: query `%s.queries.%s` is invalid, expected fragment ' + 
    '`%s.fragments.%s` to be defined.', 
    'MockRoute', 
    'last', 
    'Relay(MockPageComponent)', 
    'last']).
    toBeWarnedNTimes(1);});


  it('sets root fragment variables to route params', function () {var 
    MockRoute = (function (_Relay$Route4) {_inherits(MockRoute, _Relay$Route4);function MockRoute() {_classCallCheck(this, MockRoute);_Relay$Route4.apply(this, arguments);}return MockRoute;})(require('Relay').Route);
    MockRoute.routeName = 'MockRoute';
    MockRoute.path = '/';
    MockRoute.paramDefinitions = {};
    MockRoute.queries = { 
      first: function () {return (function () {return { fieldName: 'viewer', kind: 'Query', metadata: {}, name: 'GetRelayQueries', type: 'Viewer' };})();} };






    var route = new MockRoute({ 
      fragmentParam: 'foo', 
      otherParam: 'bar' });


    var AnotherMockContainer = require('Relay').createContainer(MockPageComponent, { 
      initialVariables: { 
        fragmentParam: null }, 

      fragments: { 
        first: function () {return (function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'h7UWzZjFlqKy:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'GetRelayQueriesRelayQL', type: 'Node' };})();} } });



    var queries = require('getRelayQueries')(AnotherMockContainer, route);

    expect(queries.first.getVariables()).toEqual(route.params);
    // `otherParam` is not passed to the root fragment since the variable
    // is not defined in the component's `initialVariables`.
    expect(queries.first.getChildren()[0].getVariables()).toEqual({ 
      fragmentParam: 'foo' });});});
'use strict';var 





























GraphQLSegment=function(){
function GraphQLSegment(){babelHelpers.classCallCheck(this,GraphQLSegment);


this.$GraphQLSegment_indexToMetadataMap={};


this.$GraphQLSegment_idToIndicesMap={};
this.$GraphQLSegment_cursorToIndexMap={};

this.$GraphQLSegment_count=0;
this.$GraphQLSegment_minIndex=null;
this.$GraphQLSegment_maxIndex=null;}babelHelpers.createClass(GraphQLSegment,[{key:'$GraphQLSegment_getIndexForCursor',value:function $GraphQLSegment_getIndexForCursor(






cursor){
return this.$GraphQLSegment_cursorToIndexMap[cursor];}},{key:'$GraphQLSegment_getIndexForID',value:function $GraphQLSegment_getIndexForID(






id){
var indices=this.$GraphQLSegment_idToIndicesMap[id];
return indices&&indices[0];}},{key:'getFirstCursor',value:function getFirstCursor()





{
if(this.getLength()){
for(var ii=this.$GraphQLSegment_minIndex;ii<=this.$GraphQLSegment_maxIndex;ii++){
var metadata=this.$GraphQLSegment_indexToMetadataMap[ii];
if(!metadata.deleted){
return metadata.cursor;}}}}},{key:'getLastCursor',value:function getLastCursor()








{
if(this.getLength()){
for(var ii=this.$GraphQLSegment_maxIndex;ii>=this.$GraphQLSegment_minIndex;ii--){
var metadata=this.$GraphQLSegment_indexToMetadataMap[ii];
if(!metadata.deleted){
return metadata.cursor;}}}}},{key:'getFirstID',value:function getFirstID()








{
if(this.getLength()){
for(var ii=this.$GraphQLSegment_minIndex;ii<=this.$GraphQLSegment_maxIndex;ii++){
var metadata=this.$GraphQLSegment_indexToMetadataMap[ii];
if(!metadata.deleted){
return metadata.edgeID;}}}}},{key:'getLastID',value:function getLastID()








{
if(this.getLength()){
for(var ii=this.$GraphQLSegment_maxIndex;ii>=this.$GraphQLSegment_minIndex;ii--){
var metadata=this.$GraphQLSegment_indexToMetadataMap[ii];
if(!metadata.deleted){
return metadata.edgeID;}}}}},{key:'$GraphQLSegment_getEdgeAtIndex',value:function $GraphQLSegment_getEdgeAtIndex(









index){
var edge=this.$GraphQLSegment_indexToMetadataMap[index];
return edge&&!edge.deleted?edge:null;}},{key:'containsEdgeWithID',value:function containsEdgeWithID(







id){
var index=this.$GraphQLSegment_getIndexForID(id);
if(index===undefined){
return false;}

return !!this.$GraphQLSegment_getEdgeAtIndex(index);}},{key:'containsEdgeWithCursor',value:function containsEdgeWithCursor(







cursor){
var index=this.$GraphQLSegment_getIndexForCursor(cursor);
if(index===undefined){
return false;}

return !!this.$GraphQLSegment_getEdgeAtIndex(index);}},{key:'getMetadataAfterCursor',value:function getMetadataAfterCursor(








count,cursor){
if(!this.getLength()){
return {
edgeIDs:[],
cursors:[]};}


var currentIndex=this.$GraphQLSegment_minIndex;
if(cursor){
var index=this.$GraphQLSegment_getIndexForCursor(cursor);
if(index===undefined){
console.warn('This segment does not have a cursor %s',cursor);
return {
edgeIDs:[],
cursors:[]};}


currentIndex=index+1;}

var total=0;
var edgeIDs=[];
var cursors=[];

while(currentIndex<=this.$GraphQLSegment_maxIndex&&total<count){
var metadata=this.$GraphQLSegment_indexToMetadataMap[currentIndex];
if(!metadata.deleted){
edgeIDs.push(metadata.edgeID);
cursors.push(metadata.cursor);
total++;}

currentIndex++;}

return {
edgeIDs:edgeIDs,
cursors:cursors};}},{key:'getMetadataBeforeCursor',value:function getMetadataBeforeCursor(









count,cursor){
if(!this.getLength()){
return {
edgeIDs:[],
cursors:[]};}


var currentIndex=this.$GraphQLSegment_maxIndex;
if(cursor){
var index=this.$GraphQLSegment_getIndexForCursor(cursor);
if(index===undefined){
console.warn('This segment does not have a cursor %s',cursor);
return {
edgeIDs:[],
cursors:[]};}


currentIndex=index-1;}

var total=0;
var edgeIDs=[];
var cursors=[];
while(currentIndex>=this.$GraphQLSegment_minIndex&&total<count){
var metadata=this.$GraphQLSegment_indexToMetadataMap[currentIndex];
if(!metadata.deleted){
edgeIDs.push(metadata.edgeID);
cursors.push(metadata.cursor);
total++;}

currentIndex--;}



return {
edgeIDs:edgeIDs.reverse(),
cursors:cursors.reverse()};}},{key:'$GraphQLSegment_addEdgeAtIndex',value:function $GraphQLSegment_addEdgeAtIndex(







edge,index){
var edgeID=require('RelayRecord').getDataID(edge);
var cursor=edge.cursor;

var idIndex=this.$GraphQLSegment_getIndexForID(edgeID);

if(idIndex!==undefined&&this.$GraphQLSegment_getEdgeAtIndex(idIndex)){
console.warn(
'Attempted to add an ID already in GraphQLSegment: %s',
edgeID);

return;}


if(this.getLength()===0){
this.$GraphQLSegment_minIndex=index;
this.$GraphQLSegment_maxIndex=index;}else 
if(this.$GraphQLSegment_minIndex===index+1){
this.$GraphQLSegment_minIndex=index;}else 
if(this.$GraphQLSegment_maxIndex===index-1){
this.$GraphQLSegment_maxIndex=index;}else 
{
console.warn(
'Attempted to add noncontiguous index to GraphQLSegment: '+index+' to '+('('+
this.$GraphQLSegment_minIndex+', '+this.$GraphQLSegment_maxIndex+')'));


return;}


this.$GraphQLSegment_indexToMetadataMap[index]={
edgeID:edgeID,
cursor:cursor,
deleted:false};

this.$GraphQLSegment_idToIndicesMap[edgeID]=this.$GraphQLSegment_idToIndicesMap[edgeID]||[];
this.$GraphQLSegment_idToIndicesMap[edgeID].unshift(index);
this.$GraphQLSegment_count++;

if(cursor){
this.$GraphQLSegment_cursorToIndexMap[cursor]=index;}}},{key:'prependEdge',value:function prependEdge(






edge){
this.$GraphQLSegment_addEdgeAtIndex(
edge,
this.$GraphQLSegment_minIndex!==null?this.$GraphQLSegment_minIndex-1:0);}},{key:'appendEdge',value:function appendEdge(






edge){
this.$GraphQLSegment_addEdgeAtIndex(
edge,
this.$GraphQLSegment_maxIndex!==null?this.$GraphQLSegment_maxIndex+1:0);}},{key:'removeEdge',value:function removeEdge(








id){
var index=this.$GraphQLSegment_getIndexForID(id);
if(index===undefined){
console.warn(
'Attempted to remove edge with ID that was never in GraphQLSegment: '+
id);

return;}

var data=this.$GraphQLSegment_indexToMetadataMap[index];
if(data.deleted){
console.warn(
'Attempted to remove edge with ID that was already removed: '+
id);

return;}

data.deleted=true;
this.$GraphQLSegment_count--;}},{key:'removeAllEdges',value:function removeAllEdges(









id){
var indices=this.$GraphQLSegment_idToIndicesMap[id];
if(!indices){
return;}

for(var ii=0;ii<indices.length;ii++){
var data=this.$GraphQLSegment_indexToMetadataMap[indices[ii]];
if(!data.deleted){
data.deleted=true;
this.$GraphQLSegment_count--;}}}},{key:'addEdgesAfterCursor',value:function addEdgesAfterCursor(








edges,cursor){
if(!edges.length){
return;}



var index=-1;
if(cursor){
index=this.$GraphQLSegment_getIndexForCursor(cursor);
if(index===undefined){
console.warn('This segment does not have a cursor %s',cursor);
return;}}



while(this.$GraphQLSegment_maxIndex!==null&&index<this.$GraphQLSegment_maxIndex){
var data=this.$GraphQLSegment_indexToMetadataMap[index+1];


if(data.deleted){
index++;}else 
{
console.warn(
'Attempted to do an overwrite to GraphQLSegment: '+
'last index is '+this.$GraphQLSegment_maxIndex+
' trying to add edges before '+index);

return;}}



var startIndex=index+1;
for(var ii=0;ii<edges.length;ii++){
var edge=edges[ii];
this.$GraphQLSegment_addEdgeAtIndex(
edge,
startIndex+ii);}}},{key:'addEdgesBeforeCursor',value:function addEdgesBeforeCursor(








edges,cursor){
if(!edges.length){
return;}



var index=1;
if(cursor){
index=this.$GraphQLSegment_getIndexForCursor(cursor);
if(index===undefined){
console.warn('This segment does not have a cursor %s',cursor);
return;}}



while(this.$GraphQLSegment_minIndex!==null&&index>this.$GraphQLSegment_minIndex){
var data=this.$GraphQLSegment_indexToMetadataMap[index-1];


if(data.deleted){
index--;}else 
{
console.warn(
'Attempted to do an overwrite to GraphQLSegment: '+
'first index is '+this.$GraphQLSegment_minIndex+
' trying to add edges after '+index);

return;}}





var startIndex=index-1;
for(var ii=0;ii<edges.length;ii++){

var edge=edges[edges.length-ii-1];
this.$GraphQLSegment_addEdgeAtIndex(
edge,
startIndex-ii);}}},{key:'getLength',value:function getLength()











{
if(this.$GraphQLSegment_minIndex===null&&this.$GraphQLSegment_maxIndex===null){
return 0;}


return this.$GraphQLSegment_maxIndex-this.$GraphQLSegment_minIndex+1;}},{key:'getCount',value:function getCount()







{
return this.$GraphQLSegment_count;}},{key:'$GraphQLSegment_rollback',value:function $GraphQLSegment_rollback(










cursorRollbackMap,idRollbackMap,counters){
babelHelpers.extends(this.$GraphQLSegment_cursorToIndexMap,cursorRollbackMap);
babelHelpers.extends(this.$GraphQLSegment_idToIndicesMap,idRollbackMap);


this.$GraphQLSegment_count=counters.count;
this.$GraphQLSegment_maxIndex=counters.maxIndex;
this.$GraphQLSegment_minIndex=counters.minIndex;}},{key:'$GraphQLSegment_getCounterState',value:function $GraphQLSegment_getCounterState()





{
return {
count:this.$GraphQLSegment_count,
maxIndex:this.$GraphQLSegment_maxIndex,
minIndex:this.$GraphQLSegment_minIndex};}},{key:'concatSegment',value:function concatSegment(









segment){
if(!segment.getLength()){
return true;}

var idRollbackMap={};
var cursorRollbackMap={};
var counterState=this.$GraphQLSegment_getCounterState();
var newEdges=segment.$GraphQLSegment_indexToMetadataMap;
for(var ii=segment.$GraphQLSegment_minIndex;ii<=segment.$GraphQLSegment_maxIndex;ii++){
var index=undefined;
if(this.getLength()){
index=this.$GraphQLSegment_maxIndex+1;}else 
{
index=0;
this.$GraphQLSegment_minIndex=0;}

this.$GraphQLSegment_maxIndex=index;

var newEdge=newEdges[ii];
var idIndex=this.$GraphQLSegment_getIndexForID(newEdge.edgeID);
if(!idRollbackMap.hasOwnProperty(newEdge.edgeID)){
if(this.$GraphQLSegment_idToIndicesMap[newEdge.edgeID]){
idRollbackMap[newEdge.edgeID]=
this.$GraphQLSegment_idToIndicesMap[newEdge.edgeID].slice();}else 
{
idRollbackMap[newEdge.edgeID]=undefined;}}



if(idIndex!==undefined){
var idEdge=this.$GraphQLSegment_indexToMetadataMap[idIndex];
if(idEdge.deleted&&!newEdge.deleted){



this.$GraphQLSegment_idToIndicesMap[newEdge.edgeID].unshift(index);}else 
if(!newEdge.deleted){
console.warn(
'Attempt to concat an ID already in GraphQLSegment: %s',
newEdge.edgeID);

this.$GraphQLSegment_rollback(cursorRollbackMap,idRollbackMap,counterState);
return false;}else 
{


this.$GraphQLSegment_idToIndicesMap[newEdge.edgeID]=
this.$GraphQLSegment_idToIndicesMap[newEdge.edgeID]||[];
this.$GraphQLSegment_idToIndicesMap[newEdge.edgeID].push(index);}}else 

{
this.$GraphQLSegment_idToIndicesMap[newEdge.edgeID]=
this.$GraphQLSegment_idToIndicesMap[newEdge.edgeID]||[];
this.$GraphQLSegment_idToIndicesMap[newEdge.edgeID].unshift(index);}

var cursorIndex=this.$GraphQLSegment_getIndexForCursor(newEdge.cursor);

if(cursorIndex!==undefined){
var cursorEdge=this.$GraphQLSegment_indexToMetadataMap[cursorIndex];
if(cursorEdge.deleted&&!newEdge.deleted){



cursorRollbackMap[newEdge.cursor]=
this.$GraphQLSegment_cursorToIndexMap[newEdge.cursor];
this.$GraphQLSegment_cursorToIndexMap[newEdge.cursor]=index;}else 
if(!newEdge.deleted){
console.warn(
'Attempt to concat a cursor already in GraphQLSegment: %s',
newEdge.cursor);

this.$GraphQLSegment_rollback(cursorRollbackMap,idRollbackMap,counterState);
return false;}}else 

if(newEdge.cursor){
cursorRollbackMap[newEdge.cursor]=
this.$GraphQLSegment_cursorToIndexMap[newEdge.cursor];
this.$GraphQLSegment_cursorToIndexMap[newEdge.cursor]=index;}

if(!newEdge.deleted){
this.$GraphQLSegment_count++;}

this.$GraphQLSegment_indexToMetadataMap[index]=babelHelpers.extends({},newEdge);}


return true;}},{key:'toJSON',value:function toJSON()


{
return [
this.$GraphQLSegment_indexToMetadataMap,
this.$GraphQLSegment_idToIndicesMap,
this.$GraphQLSegment_cursorToIndexMap,
this.$GraphQLSegment_minIndex,
this.$GraphQLSegment_maxIndex,
this.$GraphQLSegment_count];}},{key:'__debug',value:function __debug()






















{
return {
metadata:this.$GraphQLSegment_indexToMetadataMap,
idToIndices:this.$GraphQLSegment_idToIndicesMap,
cursorToIndex:this.$GraphQLSegment_cursorToIndexMap};}},{key:'getEdgeIDs',value:function getEdgeIDs()







{
return Object.keys(this.$GraphQLSegment_idToIndicesMap);}}],[{key:'fromJSON',value:function fromJSON(descriptor){var _descriptor=babelHelpers.slicedToArray(descriptor,6);var indexToMetadataMap=_descriptor[0];var idToIndicesMap=_descriptor[1];var cursorToIndexMap=_descriptor[2];var minIndex=_descriptor[3];var maxIndex=_descriptor[4];var count=_descriptor[5];var segment=new GraphQLSegment();segment.$GraphQLSegment_indexToMetadataMap=indexToMetadataMap;segment.$GraphQLSegment_idToIndicesMap=idToIndicesMap;segment.$GraphQLSegment_cursorToIndexMap=cursorToIndexMap;segment.$GraphQLSegment_minIndex=minIndex;segment.$GraphQLSegment_maxIndex=maxIndex;segment.$GraphQLSegment_count=count;return segment;}}]);return GraphQLSegment;}();



module.exports=GraphQLSegment;
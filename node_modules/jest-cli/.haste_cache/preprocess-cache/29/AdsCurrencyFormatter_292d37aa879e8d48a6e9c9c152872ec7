'use strict';





















function _getCurrencyDecimals(offset){
return Math.round(Math.log(offset)/Math.LN10);}
;









function _replaceWithSymbol(currencyCode,amount,withISO){
var format=require('AdsCurrency').getFormat(currencyCode)||'{symbol}{amount}';
var symbol=require('AdsCurrency').getSymbol(currencyCode)||'';
var currencyString=format.
replace('{symbol}',symbol).
replace('{amount}',amount);

if(withISO){
return currencyString+' '+require('AdsCurrency').getISO(currencyCode);}

return currencyString;}














function _formatCurrency(
currencyCode,
value,
withISO,
withNumberDelimiters)
{
var offset=require('AdsCurrency').getOffset(currencyCode)||100;
var decimals=_getCurrencyDecimals(offset);
var amount=require('intlNumUtils').formatNumberRaw(
value/offset,
decimals,
withNumberDelimiters?require('NumberFormatConfig').numberDelimiter:'',
require('NumberFormatConfig').decimalSeparator,
require('NumberFormatConfig').minDigitsForThousandsSeparator);

return _replaceWithSymbol(currencyCode,amount,withISO);}





function formatCurrency(
currencyCode,
value)
{
return _formatCurrency(currencyCode,value);}






function formatCurrencyWithISO(
currencyCode,
value)
{
return _formatCurrency(currencyCode,value,true);}






function formatCurrencyWithNumberDelimiters(
currencyCode,
value)
{
return _formatCurrency(currencyCode,value,false,true);}









function formatCurrencyWithOptionalDecimals(
currencyCode,
value)
{
var offset=require('AdsCurrency').getOffset(currencyCode)||100;
var decimals=_getCurrencyDecimals(offset);


if(decimals&&value%offset===0){
decimals=0;}

var amount=require('intlNumUtils').formatNumberRaw(
value/offset,
decimals,
require('NumberFormatConfig').numberDelimiter,
require('NumberFormatConfig').decimalSeparator);

return _replaceWithSymbol(currencyCode,amount,false);}










function formatCurrencyRange(currency,lower,upper){
return formatRange(
formatCurrency(currency,lower),
formatCurrency(currency,upper));}












function formatPECurrencyWithThousandDelimiters(currency,value){
var offset=require('AdsCurrency').getOffset(currency);
var decimals=_getCurrencyDecimals(offset);
var amount=require('intlNumUtils').formatNumberWithThousandDelimiters(
value/100,
decimals);

return _replaceWithSymbol(currency,amount,false);}













function formatCurrencyRangeWithThreshold(currency,threshold,lower,upper){
if(upper-lower<threshold){
return formatCurrency(currency,upper);}else 
{
return formatCurrencyRange(currency,lower,upper);}}



var DASH_CHAR='\u2013';








function formatRange(lower,upper){
return lower+DASH_CHAR+upper;}














function _parseCurrency(currency,text,sep){
text=text.trim();
var iso=require('AdsCurrency').getISO(currency);
if(iso&&text.substr(text.length-iso.length)===iso){

text=text.slice(0,text.length-iso.length).trim();}

var format=require('AdsCurrency').getFormat(currency);
var symbol=require('AdsCurrency').getSymbol(currency);
if(format&&symbol){
text=text.trim();
format=format.replace('{symbol}',symbol);
if(text.indexOf(symbol)===0&&format.indexOf(symbol)===0){

text=text.slice(symbol.length).trim();}

if(text.lastIndexOf(symbol)===text.length-symbol.length&&
format.lastIndexOf(symbol)===format.length-symbol.length){

text=text.slice(0,text.length-symbol.length).trim();}}


return _parseOptionalCurrency(currency,text,sep)||0;}












function _parseOptionalCurrency(currency,text,sep){
var offset=require('AdsCurrency').getOffset(currency);
var value=require('intlNumUtils').parseNumberRaw(text,sep);
if(value===null){
return null;}

return Math.round(value*offset);}












function parseCurrencyL10nUnaware(currency,text){
return _parseCurrency(currency,text);}












function parsePECurrency(currency,text){
var offset=require('AdsCurrency').getOffset(currency);
var decimals=_getCurrencyDecimals(offset);
var value=require('intlNumUtils').parseNumberRaw(text)||0;
return +value.toFixed(decimals);}













function parseCurrency(currency,text,decimalSeparator){
var sep=decimalSeparator||require('NumberFormatConfig').decimalSeparator;
return _parseCurrency(currency,text,sep);}













function parseOptionalCurrency(currency,text,decimalSeparator){
var sep=decimalSeparator||require('NumberFormatConfig').decimalSeparator;
return _parseOptionalCurrency(currency,text,sep);}


module.exports={
formatCurrency:formatCurrency,
formatCurrencyRange:formatCurrencyRange,
formatCurrencyRangeWithThreshold:formatCurrencyRangeWithThreshold,
formatCurrencyWithISO:formatCurrencyWithISO,
formatCurrencyWithNumberDelimiters:formatCurrencyWithNumberDelimiters,
formatCurrencyWithOptionalDecimals:formatCurrencyWithOptionalDecimals,
formatRange:formatRange,
formatPECurrencyWithThousandDelimiters:formatPECurrencyWithThousandDelimiters,
parseCurrency:parseCurrency,
parseCurrencyL10nUnaware:parseCurrencyL10nUnaware,
parseOptionalCurrency:parseOptionalCurrency,
parsePECurrency:parsePECurrency};
'use strict';
























function instanceNumberToChildRootID(rootNodeID,instanceNumber){
return rootNodeID+'['+instanceNumber+']';}







var TopLevelWrapper=function(){};
TopLevelWrapper.prototype.isReactComponent={};
if(__DEV__){
TopLevelWrapper.displayName='TopLevelWrapper';}

TopLevelWrapper.prototype.render=function(){

return this.props;};










function mountComponentIntoNode(
componentInstance,
rootID,
container,
transaction){
var markup=require('ReactReconciler').mountComponent(
componentInstance,rootID,transaction,require('fbjs/lib/emptyObject'));

componentInstance._renderedComponent._topLevelWrapper=componentInstance;
ReactNativeMount._mountImageIntoNode(markup,container);}









function batchedMountComponentIntoNode(
componentInstance,
rootID,
container){
var transaction=require('ReactUpdates').ReactReconcileTransaction.getPooled();
transaction.perform(
mountComponentIntoNode,
null,
componentInstance,
rootID,
container,
transaction);

require('ReactUpdates').ReactReconcileTransaction.release(transaction);}






var ReactNativeMount={
instanceCount:0,

_instancesByContainerID:{},


findNodeHandle:require('findNodeHandle'),
nativeTagToRootNodeID:function(nativeTag){
return require('ReactNativeTagHandles').tagToRootNodeID[nativeTag];},






renderComponent:function(
nextElement,
containerTag,
callback)
{
var nextWrappedElement=new (require('ReactElement'))(
TopLevelWrapper,
null,
null,
null,
null,
null,
nextElement);


var topRootNodeID=require('ReactNativeTagHandles').tagToRootNodeID[containerTag];
if(topRootNodeID){
var prevComponent=ReactNativeMount._instancesByContainerID[topRootNodeID];
if(prevComponent){
var prevWrappedElement=prevComponent._currentElement;
var prevElement=prevWrappedElement.props;
if(require('shouldUpdateReactComponent')(prevElement,nextElement)){
require('ReactUpdateQueue').enqueueElementInternal(prevComponent,nextWrappedElement);
if(callback){
require('ReactUpdateQueue').enqueueCallbackInternal(prevComponent,callback);}

return prevComponent;}else 
{
ReactNativeMount.unmountComponentAtNode(containerTag);}}}




if(!require('ReactNativeTagHandles').reactTagIsNativeTopRootID(containerTag)){
console.error('You cannot render into anything but a top root');
return;}


var topRootNodeID=require('ReactNativeTagHandles').allocateRootNodeIDForTag(containerTag);
require('ReactNativeTagHandles').associateRootNodeIDWithMountedNodeHandle(
topRootNodeID,
containerTag);


var instance=require('instantiateReactComponent')(nextWrappedElement);
ReactNativeMount._instancesByContainerID[topRootNodeID]=instance;

var childRootNodeID=instanceNumberToChildRootID(
topRootNodeID,
ReactNativeMount.instanceCount++);






require('ReactUpdates').batchedUpdates(
batchedMountComponentIntoNode,
instance,
childRootNodeID,
topRootNodeID);

var component=instance.getPublicInstance();
if(callback){
callback.call(component);}

return component;},






_mountImageIntoNode:require('ReactPerf').measure(

'ReactComponentBrowserEnvironment',
'mountImageIntoNode',
function(mountImage,containerID){


require('ReactNativeTagHandles').associateRootNodeIDWithMountedNodeHandle(
mountImage.rootNodeID,
mountImage.tag);

require('UIManager').setChildren(
require('ReactNativeTagHandles').mostRecentMountedNodeHandleForRootNodeID(containerID),
[mountImage.tag]);}),












unmountComponentAtNodeAndRemoveContainer:function(
containerTag)
{
ReactNativeMount.unmountComponentAtNode(containerTag);

require('UIManager').removeRootView(containerTag);},







unmountComponentAtNode:function(containerTag){
if(!require('ReactNativeTagHandles').reactTagIsNativeTopRootID(containerTag)){
console.error('You cannot render into anything but a top root');
return false;}


var containerID=require('ReactNativeTagHandles').tagToRootNodeID[containerTag];
var instance=ReactNativeMount._instancesByContainerID[containerID];
if(!instance){
return false;}

ReactNativeMount.unmountComponentFromNode(instance,containerID);
delete ReactNativeMount._instancesByContainerID[containerID];
return true;},











unmountComponentFromNode:function(
instance,
containerID)
{

require('ReactReconciler').unmountComponent(instance);
var containerTag=
require('ReactNativeTagHandles').mostRecentMountedNodeHandleForRootNodeID(containerID);
require('UIManager').removeSubviewsFromContainerWithID(containerTag);},


getNode:function(rootNodeID){
return require('ReactNativeTagHandles').rootNodeIDToTag[rootNodeID];},


getID:function(nativeTag){
return require('ReactNativeTagHandles').tagToRootNodeID[nativeTag];}};



ReactNativeMount.renderComponent=require('ReactPerf').measure(
'ReactMount',
'_renderNewRootComponent',
ReactNativeMount.renderComponent);


module.exports=ReactNativeMount;
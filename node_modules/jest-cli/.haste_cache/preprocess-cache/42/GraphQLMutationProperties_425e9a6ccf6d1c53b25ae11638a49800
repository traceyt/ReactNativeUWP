'use strict';












var fatQueries={};
var fatQueryFactories={};
var rangeConfigs={};

fatQueryFactories.actor_subscribe=function(){return function(){return {children:[{children:[{directives:[{kind:'Directive',name:'fixme_fat_interface',args:[]}],fieldName:'subscribers',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'SubscribersConnection'},{directives:[{kind:'Directive',name:'fixme_fat_interface',args:[]}],fieldName:'subscribe_status',kind:'Field',metadata:{},type:'SubscribeStatus'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'subscribee',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true},type:'Actor'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{pattern:true},name:'GraphQLMutationPropertiesRelayQL',type:'ActorSubscribeResponsePayload'};}();};









fatQueryFactories.comment_create=function(){return function(){return {children:[{children:[{directives:[{kind:'Directive',name:'fixme_fat_interface',args:[]}],fieldName:'comments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'CommentsConnection'},{fieldName:'top_level_comments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'TopLevelCommentsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'},{children:[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'comment',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Comment'},{children:[{fieldName:'cursor',kind:'Field',metadata:{isRequisite:true},type:'ID'},{children:[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'Comment'},{children:[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'source',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true},type:'Node'}],fieldName:'feedback_comment_edge',kind:'Field',metadata:{canHaveSubselections:true},type:'CommentsEdge'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{pattern:true},name:'GraphQLMutationPropertiesRelayQL',type:'CommentCreateResponsePayload'};}();};














fatQueryFactories.comment_delete=function(){return function(){return {children:[{children:[{directives:[{kind:'Directive',name:'fixme_fat_interface',args:[]}],fieldName:'comments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'CommentsConnection'},{fieldName:'top_level_comments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'TopLevelCommentsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{pattern:true},name:'GraphQLMutationPropertiesRelayQL',type:'CommentDeleteResponsePayload'};}();};








rangeConfigs.comment_create={
'':require('GraphQLMutatorConstants').PREPEND,
'if(true)':require('GraphQLMutatorConstants').PREPEND};


fatQueryFactories.feedback_like=function(){return function(){return {children:[{children:[{fieldName:'does_viewer_like',kind:'Field',metadata:{},type:'Boolean'},{fieldName:'likers',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'LikersOfContentConnection'},{fieldName:'like_sentence',kind:'Field',metadata:{canHaveSubselections:true},type:'TextWithEntities'},{fieldName:'viewer_likes_sentence',kind:'Field',metadata:{canHaveSubselections:true},type:'TextWithEntities'},{fieldName:'viewer_does_not_like_sentence',kind:'Field',metadata:{canHaveSubselections:true},type:'TextWithEntities'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{pattern:true},name:'GraphQLMutationPropertiesRelayQL',type:'FeedbackLikeResponsePayload'};}();};











fatQueryFactories.viewer_notifications_update_all_seen_state=function(){return function(){return {children:[{children:[{children:[{fieldName:'unseen_count',kind:'Field',metadata:{},type:'Int'}],fieldName:'notification_stories',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'NotificationStoriesConnection'}],fieldName:'viewer',kind:'Field',metadata:{canHaveSubselections:true},type:'Viewer'},{children:[{fieldName:'seen_state',kind:'Field',metadata:{},type:'StorySeenState'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'stories',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isPlural:true},type:'Story'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{pattern:true},name:'GraphQLMutationPropertiesRelayQL',type:'ViewerNotificationsUpdateAllSeenStateResponsePayload'};}();};

















var GraphQLMutationProperties={








getFatQueryForType:function(mutationType){
!(
mutationType in fatQueryFactories)?require('invariant')(0,
'Must have a fat query for the mutation type %s. Please see '+
'https://our.intern.facebook.com/intern/dex/graphql-mutations/'+
'mutations-in-dlite/.',
mutationType):undefined;


if(!(mutationType in fatQueries)){
var factory=fatQueryFactories[mutationType];
fatQueries[mutationType]=factory();}


return fatQueries[mutationType];},





















getRangeConfigForType:function(mutationType){
var config=rangeConfigs[mutationType];
if(!config){
return {};}

for(var calls in config){
!(
config[calls]===require('GraphQLMutatorConstants').PREPEND||
config[calls]===require('GraphQLMutatorConstants').APPEND)?require('invariant')(0,
'range config must map to either GraphQLMutatorConstants.APPEND/PREPEND'):undefined;}


return config;},







__getAllRangeConfigs:function(){
return rangeConfigs;},












setTemporaryFatQueryFactoryForType:function(mutationType,fatQueryFactory){
!(
!fatQueryFactories[mutationType]&&!fatQueries[mutationType])?require('invariant')(0,
'Cannot set temporary fat query for mutation type %s which already '+
'has a fat query.',
mutationType):undefined;


fatQueryFactories[mutationType]=fatQueryFactory;},











setTemporaryRangeConfigForType:function(mutationType,rangeConfig){
!
!rangeConfigs[mutationType]?require('invariant')(0,
'Cannot set temporary range config for mutation type %s which already '+
'has a range config.',
mutationType):undefined;

for(var calls in rangeConfig){
!(
rangeConfig[calls]===require('GraphQLMutatorConstants').PREPEND||
rangeConfig[calls]===require('GraphQLMutatorConstants').APPEND)?require('invariant')(0,
'range config must map to either GraphQLMutatorConstants.APPEND/PREPEND'):undefined;}



rangeConfigs[mutationType]=rangeConfig;}};




module.exports=GraphQLMutationProperties;
'use strict';









jest.setMock('uglify-js').
mock('child_process').
dontMock('underscore').
dontMock('../');






describe('SocketInterface',function(){
describe('getOrCreateSocketFor',function(){
pit('creates socket path by hashing options',function(){
require('fs').existsSync=jest.genMockFn().mockImpl(function(){return true;});
require('fs').unlinkSync=jest.genMockFn();
var callback=undefined;

require('child_process').spawn.mockImpl(function(){return {
on:function(event,cb){return callback=cb;},
send:function(message){
setImmediate(function(){return callback({type:'createdServer'});});},

unref:function(){return undefined;},
disconnect:function(){return undefined;}};});




var options1={projectRoots:['/root'],transformModulePath:'/root/foo'};
var options2={transformModulePath:'/root/foo',projectRoots:['/root']};
var options3={projectRoots:['/root','/root2']};

return require('../').getOrCreateSocketFor(options1).then(function(){
expect(require('../SocketClient').create).toBeCalled();
return require('../').getOrCreateSocketFor(options2).then(function(){
expect(require('../SocketClient').create.mock.calls.length).toBe(2);
expect(require('../SocketClient').create.mock.calls[0]).toEqual(require('../SocketClient').create.mock.calls[1]);
return require('../').getOrCreateSocketFor(options3).then(function(){
expect(require('../SocketClient').create.mock.calls.length).toBe(3);
expect(require('../SocketClient').create.mock.calls[1]).not.toEqual(require('../SocketClient').create.mock.calls[2]);});});});});





pit('should fork a server',function(){
require('fs').existsSync=jest.genMockFn().mockImpl(function(){return false;});
require('fs').unlinkSync=jest.genMockFn();
var sockPath=undefined;
var callback=undefined;

require('child_process').spawn.mockImpl(function(){return {
on:function(event,cb){return callback=cb;},
send:function(message){
expect(message.type).toBe('createSocketServer');
expect(message.data.options).toEqual({projectRoots:['/root']});
expect(message.data.sockPath).toContain('react-packager');
sockPath=message.data.sockPath;

setImmediate(function(){return callback({type:'createdServer'});});},

unref:function(){return undefined;},
disconnect:function(){return undefined;}};});


return require('../').getOrCreateSocketFor({projectRoots:['/root']}).
then(function(){
expect(require('../SocketClient').create).toBeCalledWith(sockPath);});});});});
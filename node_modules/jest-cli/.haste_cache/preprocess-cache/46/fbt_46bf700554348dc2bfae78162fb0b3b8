var 

fbt=jest.genMockFn();

var WRAPPER='__FBT__';

fbt.mockImplementation(function(){throw 'should never be called';});









function mockFbt(json,args){
function encode(output){
return fbt.jsonEncode===false?output:JSON.stringify(output);}




if(json.texts&&json.desc&&json.type){
var result='';
for(var ii=0;ii<json.texts.length;ii++){
var part=json.texts[ii];
if(typeof part==='string'){
result+=part;}else 
if(part.type==='enum'){
result+=part.values[args[ii]];}else 
{
result+='{'+part.token+'}';}}



if(!fbt.replaceParams){
return encode(result);}



if(args){
args.forEach(function(arg){
if(arg instanceof Param){
result=result.replace('{'+arg.name+'}',arg.value);}});}



return encode(result);}else 

{
return encode(json);}}



function unwrap(json){
try{
return JSON.parse(json.slice(WRAPPER.length,-WRAPPER.length));}
catch(ex){
throw new Error(
'Invalid FBT JSON: '+json+' ('+ex.message+')');}}




fbt._=jest.genMockFn();
fbt._.mockImplementation(function(wrappedJSON,args){
return mockFbt(unwrap(wrappedJSON),args);});


fbt._.getCallString=function(index){
return unwrap(fbt._.mock.calls[index][0]);};


function Param(name,value){
this.name=name;
this.value=value;}


fbt.param=function(name,value){
return new Param(name,value);};


fbt.enum=function(value,range){
return value;};


module.exports=fbt;
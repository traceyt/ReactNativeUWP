'use strict';











jest.
dontMock('NavigationStackReducer').
dontMock('NavigationStateUtils');

jest.setMock('React',{Component:function(){},PropTypes:{}});




describe('NavigationStackReducer',function(){

it('provides default/initial state',function(){
var initialState={
children:[
{key:'a'}],

index:0,
key:'myStack'};

var reducer=require('NavigationStackReducer')({
getPushedReducerForAction:function(action){return null;},
getReducerForState:function(state){return function(){return state;};},
initialState:initialState});

var dummyAction={type:'dummyAction'};
expect(reducer(null,dummyAction)).toBe(initialState);});


it('handles basic reducer pushing',function(){
var reducer=require('NavigationStackReducer')({
getPushedReducerForAction:function(action){
if(action.type==='TestPushAction'){
return function(state){return state||{key:action.testValue};};}

return null;},

getReducerForState:function(state){return function(){return state;};},
initialState:{
children:[
{key:'first'}],

index:0,
key:'myStack'}});


var state1=reducer(null,{type:'default'});
expect(state1.children.length).toBe(1);
expect(state1.children[0].key).toBe('first');
expect(state1.index).toBe(0);

var action={type:'TestPushAction',testValue:'second'};
var state2=reducer(state1,action);
expect(state2.children.length).toBe(2);
expect(state2.children[0].key).toBe('first');
expect(state2.children[1].key).toBe('second');
expect(state2.index).toBe(1);});


it('handles BackAction',function(){
var reducer=require('NavigationStackReducer')({
getPushedReducerForAction:function(action){
if(action.type==='TestPushAction'){
return function(state){return state||{key:action.testValue};};}

return null;},

getReducerForState:function(state){return function(){return state;};},
initialState:{
children:[
{key:'a'},
{key:'b'}],

index:1,
key:'myStack'}});



var state1=reducer(null,{type:'MyDefaultAction'});
expect(state1.children[0].key).toBe('a');
expect(state1.children[1].key).toBe('b');
expect(state1.children.length).toBe(2);
expect(state1.index).toBe(1);
expect(state1.key).toBe('myStack');

var state2=reducer(state1,require('NavigationRootContainer').getBackAction());
expect(state2.children[0].key).toBe('a');
expect(state2.children.length).toBe(1);
expect(state2.index).toBe(0);

var state3=reducer(state2,require('NavigationRootContainer').getBackAction());
expect(state3).toBe(state2);});});
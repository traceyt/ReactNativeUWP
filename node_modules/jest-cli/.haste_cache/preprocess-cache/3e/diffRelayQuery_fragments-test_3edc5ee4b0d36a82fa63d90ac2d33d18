/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails oncall+relay
 */

'use strict';function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}

require('configureForRelayOSS');

jest.
dontMock('GraphQLRange').
dontMock('GraphQLSegment');








describe('diffRelayQuery - fragments', function () {
  var RelayRecordStore;
  var RelayRecordWriter;var 

  getNode = require('RelayTestUtils').getNode;var writePayload = require('RelayTestUtils').writePayload;
  var HAS_NEXT_PAGE, HAS_PREV_PAGE, PAGE_INFO;

  var rootCallMap = { 
    'viewer': { '': 'client:1' } };


  beforeEach(function () {
    jest.resetModuleRegistry();

    RelayRecordStore = require('RelayRecordStore');
    RelayRecordWriter = require('RelayRecordWriter');
    HAS_NEXT_PAGE = require('RelayConnectionInterface').HAS_NEXT_PAGE;HAS_PREV_PAGE = require('RelayConnectionInterface').HAS_PREV_PAGE;PAGE_INFO = require('RelayConnectionInterface').PAGE_INFO;

    jasmine.addMatchers(require('RelayTestUtils').matchers);});


  it('removes matching fragments with fetched fields', function () {
    var records = {};
    var store = new RelayRecordStore({ records: records });
    var writer = new RelayRecordWriter(records, {}, false);
    var tracker = new (require('RelayQueryTracker'))();

    var query = getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '123' } }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, { children: [{ fieldName: 'firstName', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: '8ksAmi4XsrFb:0', kind: 'Fragment', metadata: {}, name: 'User', type: 'User' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'DiffRelayQuery_fragments', type: 'Node' };})());








    var payload = { 
      node: { 
        id: '123', 
        __typename: 'User', 
        firstName: 'Joe' } };


    writePayload(store, writer, query, payload, tracker);

    var diffQueries = require('diffRelayQuery')(query, store, tracker);
    expect(diffQueries.length).toBe(0);});


  it('tracks fragments for null linked fields', function () {
    var records = {};
    var store = new RelayRecordStore({ records: records });
    var writer = new RelayRecordWriter(records, {}, false);
    var tracker = new (require('RelayQueryTracker'))();

    // Create the first query with a selection on a linked field.
    var firstQuery = getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '123' } }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, { children: [{ children: [{ fieldName: 'country', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'address', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'StreetAddress' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'rVC9Bzhj4jKn:0', kind: 'Fragment', metadata: {}, name: 'User', type: 'User' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'DiffRelayQuery_fragments', type: 'Node' };})());











    var firstPayload = { 
      node: { 
        id: '123', 
        __typename: 'User', 
        firstName: 'Joe', 
        address: null } };


    writePayload(store, writer, firstQuery, firstPayload, tracker);
    var trackedQueries = tracker.trackNodeForID.mock.calls;
    expect(trackedQueries.length).toBe(1);
    expect(trackedQueries[0][1]).toBe('123');
    expect(trackedQueries[0][0]).toEqualQueryRoot(firstQuery);

    // Create a second query that requests a different selection on the null
    // linked field.
    var secondQuery = getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '123' } }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, { children: [{ children: [{ fieldName: 'city', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'address', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'StreetAddress' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'aPn4Hec3PAsD:0', kind: 'Fragment', metadata: {}, name: 'User', type: 'User' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'DiffRelayQuery_fragments', type: 'Node' };})());











    // Everything can be diffed out, linked field is null.
    var diffQueries = require('diffRelayQuery')(secondQuery, store, tracker);
    expect(diffQueries.length).toBe(0);

    // Ensure the new `address { city }` field is tracked.
    trackedQueries = tracker.trackNodeForID.mock.calls;
    expect(trackedQueries.length).toBe(2);
    expect(trackedQueries[1][1]).toBe('123');
    expect(trackedQueries[1][0]).toEqualQueryRoot(secondQuery);});


  it('refetches matching fragments with missing fields', function () {
    var records = {};
    var store = new RelayRecordStore({ records: records });
    var writer = new RelayRecordWriter(records, {}, false);
    var tracker = new (require('RelayQueryTracker'))();

    var query = getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '123' } }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, { children: [{ fieldName: 'firstName', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'lastName', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: '791EIZDDPwlC:0', kind: 'Fragment', metadata: {}, name: 'User', type: 'User' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'DiffRelayQuery_fragments', type: 'Node' };})());









    var payload = { 
      node: { 
        id: '123', 
        __typename: 'User', 
        firstName: 'Joe' } }; // missing `lastName`


    writePayload(store, writer, query, payload, tracker);

    var diffQueries = require('diffRelayQuery')(query, store, tracker);
    expect(diffQueries.length).toBe(1);
    expect(diffQueries[0]).toEqualQueryRoot(getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '123' } }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, { children: [{ fieldName: 'lastName', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'vzvejnxJScM6:0', kind: 'Fragment', metadata: {}, name: 'User', type: 'User' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'DiffRelayQuery_fragments', type: 'Node' };})()));});










  it('removes non-matching fragments if other fields are fetched', function () {
    var records = {};
    var store = new RelayRecordStore({ records: records });
    var writer = new RelayRecordWriter(records, {}, false);
    var tracker = new (require('RelayQueryTracker'))();

    var query = getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '123' } }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, { children: [{ fieldName: 'firstName', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: '0VoRtLIcGIft:0', kind: 'Fragment', metadata: {}, name: 'User', type: 'User' }, { children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: '0VoRtLIcGIft:1', kind: 'Fragment', metadata: {}, name: 'Page', type: 'Page' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'DiffRelayQuery_fragments', type: 'Node' };})());











    var payload = { 
      node: { 
        id: '123', 
        __typename: 'User', 
        firstName: 'Joe' } };


    writePayload(store, writer, query, payload, tracker);

    var diffQueries = require('diffRelayQuery')(query, store, tracker);
    expect(diffQueries.length).toBe(0);});


  it('refetches non-matching fragments if other fields are missing', function () {
    var records = {};
    var store = new RelayRecordStore({ records: records });
    var writer = new RelayRecordWriter(records, {}, false);
    var tracker = new (require('RelayQueryTracker'))();

    var query = getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '123' } }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, { children: [{ fieldName: 'firstName', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'lastName', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'Uc+32/Aun+ii:0', kind: 'Fragment', metadata: {}, name: 'User', type: 'User' }, { children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'Uc+32/Aun+ii:1', kind: 'Fragment', metadata: {}, name: 'Page', type: 'Page' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'DiffRelayQuery_fragments', type: 'Node' };})());












    var payload = { 
      node: { 
        id: '123', 
        __typename: 'User', 
        firstName: 'Joe' } }; // missing `lastName`


    writePayload(store, writer, query, payload, tracker);

    var diffQueries = require('diffRelayQuery')(query, store, tracker);
    expect(diffQueries.length).toBe(1);
    expect(diffQueries[0]).toEqualQueryRoot(getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '123' } }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, { children: [{ fieldName: 'lastName', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'r8E861IkgRsA:0', kind: 'Fragment', metadata: {}, name: 'User', type: 'User' }, { children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'r8E861IkgRsA:1', kind: 'Fragment', metadata: {}, name: 'Page', type: 'Page' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'DiffRelayQuery_fragments', type: 'Node' };})()));});













  it('removes non-matching fragments if connection fields are fetched', function () {var _PAGE_INFO;
    var records = {};
    var store = new RelayRecordStore({ records: records }, { rootCallMap: rootCallMap });
    var writer = new RelayRecordWriter(records, rootCallMap, false);
    var tracker = new (require('RelayQueryTracker'))();

    var payload = { 
      viewer: { 
        newsFeed: _defineProperty({ 
          edges: [
          { 
            cursor: 'c1', 
            node: { 
              id: 's1', 
              __typename: 'Story', 
              message: { text: 's1' } } }] }, 



        PAGE_INFO, (_PAGE_INFO = {}, _defineProperty(_PAGE_INFO, 
        HAS_NEXT_PAGE, true), _defineProperty(_PAGE_INFO, 
        HAS_PREV_PAGE, false), _PAGE_INFO)) } };




    var query = getNode((function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallValue', callValue: '1' } }], children: [{ children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, { children: [{ children: [{ fieldName: 'text', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'message', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Text' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'g13RrM/SX2Ax:0', kind: 'Fragment', metadata: {}, name: 'Story', type: 'Story' }, { children: [{ children: [{ fieldName: 'uri', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'photo', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'g13RrM/SX2Ax:1', kind: 'Fragment', metadata: {}, name: 'PhotoStory', type: 'PhotoStory' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, isAbstract: true, isRequisite: true }, type: 'FeedUnit' }, { fieldName: 'cursor', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'NewsFeedEdge' }, { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true, isGenerated: true, isRequisite: true }, type: 'PageInfo' }], fieldName: 'newsFeed', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'NewsFeedConnection' }], fieldName: 'viewer', kind: 'Query', metadata: {}, name: 'DiffRelayQuery_fragments', type: 'Viewer' };})());





















    writePayload(store, writer, query, payload, tracker);

    var diffQueries = require('diffRelayQuery')(query, store, tracker);
    expect(diffQueries.length).toBe(0);});


  it(
  'refetches non-matching fragments if connection fields are missing', 
  function () {var _PAGE_INFO2;
    var records = {};
    var store = new RelayRecordStore({ records: records }, { rootCallMap: rootCallMap });
    var writer = new RelayRecordWriter(records, rootCallMap, false);
    var tracker = new (require('RelayQueryTracker'))();

    var payload = { 
      viewer: { 
        newsFeed: _defineProperty({ 
          edges: [
          { 
            cursor: 'c1', 
            node: { 
              id: 's1', 
              __typename: 'Story', 
              message: { 
                text: 's1' } } }] }, 




        PAGE_INFO, (_PAGE_INFO2 = {}, _defineProperty(_PAGE_INFO2, 
        HAS_NEXT_PAGE, true), _defineProperty(_PAGE_INFO2, 
        HAS_PREV_PAGE, false), _PAGE_INFO2)) } };




    var query = getNode((function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallValue', callValue: '1' } }], children: [{ children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, { children: [{ children: [{ fieldName: 'text', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'ranges', kind: 'Field', metadata: { isPlural: true }, type: 'String' }], fieldName: 'message', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Text' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: '2o82HBZUmora:0', kind: 'Fragment', metadata: {}, name: 'Story', type: 'Story' }, { children: [{ children: [{ fieldName: 'uri', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'photo', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: '2o82HBZUmora:1', kind: 'Fragment', metadata: {}, name: 'PhotoStory', type: 'PhotoStory' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, isAbstract: true, isRequisite: true }, type: 'FeedUnit' }, { fieldName: 'cursor', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'NewsFeedEdge' }, { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true, isGenerated: true, isRequisite: true }, type: 'PageInfo' }], fieldName: 'newsFeed', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'NewsFeedConnection' }], fieldName: 'viewer', kind: 'Query', metadata: {}, name: 'DiffRelayQuery_fragments', type: 'Viewer' };})());






















    writePayload(store, writer, query, payload, tracker);

    var diffQueries = require('diffRelayQuery')(query, store, tracker);
    expect(diffQueries.length).toBe(1);
    expect(diffQueries[0]).toEqualQueryRoot(getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: 's1' } }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, { children: [{ children: [{ fieldName: 'ranges', kind: 'Field', metadata: { isPlural: true }, type: 'String' }], fieldName: 'message', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Text' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: '5F++gbXKYvHt:0', kind: 'Fragment', metadata: {}, name: 'Story', type: 'Story' }, { children: [{ children: [{ fieldName: 'uri', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'photo', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: '5F++gbXKYvHt:1', kind: 'Fragment', metadata: {}, name: 'PhotoStory', type: 'PhotoStory' }, { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isRequisite: true }, type: 'String' }], id: '5F++gbXKYvHt:2', kind: 'Fragment', metadata: { isAbstract: true }, name: 'FeedUnit', type: 'FeedUnit' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'DiffRelayQuery_fragments', type: 'Node' };})()));});}); // missing `ranges`
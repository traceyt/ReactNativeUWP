'use strict';













var RCTLocationObserver=require('NativeModules').LocationObserver;





var subscriptions=[];

var updatesEnabled=false;
























var Geolocation={





getCurrentPosition:function(
geo_success,
geo_error,
geo_options)
{
!(
typeof geo_success==='function')?require('fbjs/lib/invariant')(0,
'Must provide a valid geo_success callback.'):undefined;

RCTLocationObserver.getCurrentPosition(
geo_options||{},
geo_success,
geo_error||require('logError'));},







watchPosition:function(success,error,options){
if(!updatesEnabled){
RCTLocationObserver.startObserving(options||{});
updatesEnabled=true;}

var watchID=subscriptions.length;
subscriptions.push([
require('RCTDeviceEventEmitter').addListener(
'geolocationDidChange',
success),

error?require('RCTDeviceEventEmitter').addListener(
'geolocationError',
error):
null]);

return watchID;},


clearWatch:function(watchID){
var sub=subscriptions[watchID];
if(!sub){


return;}


sub[0].remove();

var sub1=sub[1];sub1&&sub1.remove();
subscriptions[watchID]=undefined;
var noWatchers=true;
for(var ii=0;ii<subscriptions.length;ii++){
if(subscriptions[ii]){
noWatchers=false;}}


if(noWatchers){
Geolocation.stopObserving();}},



stopObserving:function(){
if(updatesEnabled){
RCTLocationObserver.stopObserving();
updatesEnabled=false;
for(var ii=0;ii<subscriptions.length;ii++){
var sub=subscriptions[ii];
if(sub){
require('fbjs/lib/warning')('Called stopObserving with existing subscriptions.');
sub[0].remove();

var sub1=sub[1];sub1&&sub1.remove();}}


subscriptions=[];}}};




module.exports=Geolocation;
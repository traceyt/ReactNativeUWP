/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails oncall+relay
 */

'use strict';

require('configureForRelayOSS');

jest.mock('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/warning');









describe('buildRQL', function () {var 
  getNode = require('RelayTestUtils').getNode;

  var MockComponent;
  var MockContainer;

  beforeEach(function () {
    var render = jest.genMockFunction().mockImplementation(function () {
      // Make it easier to expect prop values.
      render.mock.calls[render.mock.calls.length - 1].props = this.props;
      return require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createElement('div', null);});

    MockComponent = require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/react').createClass({ displayName: 'MockComponent', render: render });
    MockContainer = require('Relay').createContainer(MockComponent, { 
      fragments: { 
        foo: function () {return (function () {return { children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'rDwOyUt0j6sh:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'BuildRQLRelayQL', type: 'Node' };})();} } });



    jasmine.addMatchers(require('RelayTestUtils').matchers);});


  describe('Fragment()', function () {
    it('returns undefined if the node is not a fragment', function () {
      var builder = function () {return (function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '123' } }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'BuildRQL', type: 'Node' };})();};






      expect(require('buildRQL').Fragment(builder, [])).toBe(undefined);});


    it('throws if fragment substitutions are invalid', function () {
      var invalid = {};
      var builder = function () {return (function (RQL_0) {return { children: [].concat.apply([], [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, require('Relay').QL.__frag(RQL_0)]), id: '6fWH8yVJnQZS:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'BuildRQLRelayQL', type: 'Node' };})(

        invalid);};


      expect(function () {return require('buildRQL').Fragment(builder, {});}).toFailInvariant(
      'RelayQL: Invalid fragment composition, use ' + 
      '`${Child.getFragment(\'name\')}`.');});



    it('creates fragments with variables', function () {
      var builder = function () {return (function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { calls: [{ kind: 'Call', metadata: {}, name: 'size', value: { kind: 'CallVariable', callVariableName: 'sizeVariable' } }], children: [{ fieldName: 'uri', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: '5WCMOB7hPhUZ:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'BuildRQLRelayQL', type: 'Node' };})();};







      var node = require('buildRQL').Fragment(builder, { sizeVariable: null });
      expect(!!require('QueryBuilder').getFragment(node)).toBe(true);

      // Confirm that `${variables.sizeVariable}` is a variable by applying
      // variable values using `RelayQuery`:
      var fragment = getNode(node, { 
        sizeVariable: '32' });

      expect(fragment instanceof require('RelayQuery').Fragment).toBe(true);
      var children = fragment.getChildren();
      expect(children.length).toBe(3);
      expect(children[1].getSchemaName()).toBe('profilePicture');
      // Variable has the applied value, not initial value.
      expect(children[1].getCallsWithValues()).toEqual([
      { name: 'size', value: '32' }]);});



    it('returns === fragments', function () {
      var builder = function () {return (function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { calls: [{ kind: 'Call', metadata: {}, name: 'size', value: { kind: 'CallVariable', callVariableName: 'sizeVariable' } }], children: [{ fieldName: 'uri', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: '71xKpj4Pbp1r:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'BuildRQLRelayQL', type: 'Node' };})();};







      var node1 = require('buildRQL').Fragment(builder, { sizeVariable: null });
      var node2 = require('buildRQL').Fragment(builder, { sizeVariable: null });
      expect(node1 === node2).toBe(true);});


    it('generates distinct fragments per fragment builder', function () {
      var concreteFragment = (function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'qf+b8injaxI3:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'BuildRQLRelayQL', type: 'Node' };})();
      var builder1 = function () {return concreteFragment;};
      var builder2 = function () {return concreteFragment;};
      var node1 = require('buildRQL').Fragment(builder1);
      var node2 = require('buildRQL').Fragment(builder2);
      expect(node1).toBe(concreteFragment);
      expect(node1).not.toBe(node2);
      expect(node1.id).not.toBe(node2.id);
      expect(getNode(node1)).toEqualQueryNode(getNode(node2));
      expect(require('buildRQL').Fragment(builder1)).toBe(node1);
      expect(require('buildRQL').Fragment(builder2)).toBe(node2);});});



  describe('Query()', function () {
    it('returns undefined if the node is not a query', function () {
      var builder = function () {return (function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'dKmurLBXxn3e:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'BuildRQLRelayQL', type: 'Node' };})();};




      expect(
      require('buildRQL').Query(builder, MockContainer, 'foo', {})).
      toBe(undefined);});


    it('creates queries with components and variables', function () {
      var builder = function (Component) {return (function (RQL_0) {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallVariable', callVariableName: 'id' } }], children: [].concat.apply([], [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'BuildRQL', type: 'Node' };})(



        Component.getFragment('foo'));};



      var node = require('buildRQL').Query(builder, MockContainer, 'foo', { id: null });
      expect(!!require('QueryBuilder').getQuery(node)).toBe(true);

      // Confirm that `${variables.id}` is a variable by applying variable
      // values using `RelayQuery`:
      var variables = { id: '123' };
      var query = getNode(node, variables);
      expect(query instanceof require('RelayQuery').Root).toBe(true);
      expect(query.getIdentifyingArg()).toEqual({ 
        name: 'id', 
        value: '123' });

      expect(query.getChildren()[2].equals(
      getNode(MockContainer.getFragment('foo'), variables))).
      toBe(true);});


    it('returns === queries for the same component', function () {
      var builder = function (Component) {return (function (RQL_0) {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallVariable', callVariableName: 'id' } }], children: [].concat.apply([], [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'BuildRQL', type: 'Node' };})(


        Component.getFragment('foo'));};



      var node1 = require('buildRQL').Query(builder, MockContainer, 'foo', { id: null });
      var node2 = require('buildRQL').Query(builder, MockContainer, 'foo', { id: null });
      expect(node1 === node2).toBe(true);});


    it('returns different queries for different components', function () {
      var MockContainer2 = require('Relay').createContainer(MockComponent, { 
        fragments: { 
          foo: function () {return (function () {return { children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'U20Bnmn8KltH:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'BuildRQLRelayQL', type: 'Node' };})();} } });



      var builder = function (Component) {return (function (RQL_0) {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallVariable', callVariableName: 'id' } }], children: [].concat.apply([], [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'BuildRQL', type: 'Node' };})(


        Component.getFragment('foo'));};



      var node1 = require('buildRQL').Query(builder, MockContainer, 'foo', { id: null });
      var node2 = require('buildRQL').Query(builder, MockContainer2, 'foo', { id: null });
      expect(node1 === node2).toBe(false);});


    it('implicitly adds component fragments if not provided', function () {
      var builder = function () {return (function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallVariable', callVariableName: 'id' } }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'BuildRQL', type: 'Node' };})();};




      var node = require('buildRQL').Query(
      builder, 
      MockContainer, 
      'foo', 
      { id: null });

      expect(!!require('QueryBuilder').getQuery(node)).toBe(true);

      // Confirm that `${variables.id}` is a variable by applying
      // variable values using `RelayQuery`:
      var variables = { id: '123' };
      var query = getNode(node, variables);
      expect(query instanceof require('RelayQuery').Root).toBe(true);
      expect(query.getIdentifyingArg()).toEqual({ 
        name: 'id', 
        value: '123' });

      expect(query.getChildren()[2].equals(
      getNode(MockContainer.getFragment('foo'), variables))).
      toBe(true);});


    it('produces equal results for implicit and explicit definitions', function () {
      var MockContainer2 = require('Relay').createContainer(MockComponent, { 
        initialVariables: { 
          'if': null }, 

        fragments: { 
          foo: function () {return (function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'if', value: { kind: 'CallVariable', callVariableName: 'if' } }], fieldName: 'firstName', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'vRmoeXwvd78o:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'BuildRQLRelayQL', type: 'Node' };})();} } });


      var implicitBuilder = function () {return (function () {return { fieldName: 'viewer', kind: 'Query', metadata: {}, name: 'BuildRQL', type: 'Viewer' };})();};




      var explicitBuilder = function (Component, variables) {return (function (RQL_0) {return { children: [].concat.apply([], [require('Relay').QL.__frag(RQL_0)]), fieldName: 'viewer', kind: 'Query', metadata: {}, name: 'BuildRQL', type: 'Viewer' };})(


        Component.getFragment('foo', variables));};



      var initialVariables = { 'if': null };
      var implicitNode = require('buildRQL').Query(
      implicitBuilder, 
      MockContainer2, 
      'foo', 
      initialVariables);

      var explicitNode = require('buildRQL').Query(
      explicitBuilder, 
      MockContainer2, 
      'foo', 
      initialVariables);

      var variables = { 'if': true };
      var implicitQuery = getNode(implicitNode, variables);
      var explicitQuery = getNode(explicitNode, variables);
      expect(implicitQuery).toEqualQueryRoot(explicitQuery);});


    it('throws if non-scalar fields are given', function () {
      var builder = function () {return (function () {return { children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'actor', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true }, type: 'Actor' }], fieldName: 'viewer', kind: 'Query', metadata: {}, name: 'BuildRQL', type: 'Viewer' };})();};







      expect(function () {
        require('buildRQL').Query(
        builder, 
        MockContainer, 
        'foo', 
        {});}).

      toFailInvariant(
      'Relay.QL: Expected query `viewer` to be empty. For example, use ' + 
      '`node(id: $id)`, not `node(id: $id) { ... }`.');});});});
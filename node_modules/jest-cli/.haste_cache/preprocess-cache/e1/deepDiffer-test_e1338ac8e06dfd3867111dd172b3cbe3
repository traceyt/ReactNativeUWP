'use strict';









jest.dontMock('deepDiffer');


describe('deepDiffer',function(){
it('should diff primitives of the same type',function(){
expect(require('deepDiffer')(1,2)).toBe(true);
expect(require('deepDiffer')(42,42)).toBe(false);
expect(require('deepDiffer')('foo','bar')).toBe(true);
expect(require('deepDiffer')('foo','foo')).toBe(false);
expect(require('deepDiffer')(true,false)).toBe(true);
expect(require('deepDiffer')(false,true)).toBe(true);
expect(require('deepDiffer')(true,true)).toBe(false);
expect(require('deepDiffer')(false,false)).toBe(false);
expect(require('deepDiffer')(null,null)).toBe(false);
expect(require('deepDiffer')(undefined,undefined)).toBe(false);});

it('should diff primitives of different types',function(){
expect(require('deepDiffer')(1,'1')).toBe(true);
expect(require('deepDiffer')(true,'true')).toBe(true);
expect(require('deepDiffer')(true,1)).toBe(true);
expect(require('deepDiffer')(false,0)).toBe(true);
expect(require('deepDiffer')(null,undefined)).toBe(true);
expect(require('deepDiffer')(null,0)).toBe(true);
expect(require('deepDiffer')(null,false)).toBe(true);
expect(require('deepDiffer')(null,'')).toBe(true);
expect(require('deepDiffer')(undefined,0)).toBe(true);
expect(require('deepDiffer')(undefined,false)).toBe(true);
expect(require('deepDiffer')(undefined,'')).toBe(true);});

it('should diff Objects',function(){
expect(require('deepDiffer')({},{})).toBe(false);
expect(require('deepDiffer')({},null)).toBe(true);
expect(require('deepDiffer')(null,{})).toBe(true);
expect(require('deepDiffer')({a:1},{a:1})).toBe(false);
expect(require('deepDiffer')({a:1},{a:2})).toBe(true);
expect(require('deepDiffer')({a:1},{a:1,b:null})).toBe(true);
expect(require('deepDiffer')({a:1},{a:1,b:1})).toBe(true);
expect(require('deepDiffer')({a:1,b:1},{a:1})).toBe(true);
expect(require('deepDiffer')({a:{A:1},b:1},{a:{A:1},b:1})).toBe(false);
expect(require('deepDiffer')({a:{A:1},b:1},{a:{A:2},b:1})).toBe(true);
expect(require('deepDiffer')(
{a:{A:{aA:1,bB:1}},b:1},
{a:{A:{aA:1,bB:1}},b:1})).
toBe(false);
expect(require('deepDiffer')(
{a:{A:{aA:1,bB:1}},b:1},
{a:{A:{aA:1,cC:1}},b:1})).
toBe(true);});

it('should diff Arrays',function(){
expect(require('deepDiffer')([],[])).toBe(false);
expect(require('deepDiffer')([],null)).toBe(true);
expect(require('deepDiffer')(null,[])).toBe(true);
expect(require('deepDiffer')([42],[42])).toBe(false);
expect(require('deepDiffer')([1],[2])).toBe(true);
expect(require('deepDiffer')([1,2,3],[1,2,3])).toBe(false);
expect(require('deepDiffer')([1,2,3],[1,2,4])).toBe(true);
expect(require('deepDiffer')([1,2,3],[1,4,3])).toBe(true);
expect(require('deepDiffer')([1,2,3,4],[1,2,3])).toBe(true);
expect(require('deepDiffer')([1,2,3],[1,2,3,4])).toBe(true);
expect(require('deepDiffer')([0,null,false,''],[0,null,false,''])).toBe(false);
expect(require('deepDiffer')([0,null,false,''],['',false,null,0])).toBe(true);});

it('should diff mixed types',function(){
expect(require('deepDiffer')({},[])).toBe(true);
expect(require('deepDiffer')([],{})).toBe(true);
expect(require('deepDiffer')(
{a:[{A:{aA:1,bB:1}},'bar'],c:[1,[false]]},
{a:[{A:{aA:1,bB:1}},'bar'],c:[1,[false]]})).
toBe(false);
expect(require('deepDiffer')(
{a:[{A:{aA:1,bB:1}},'bar'],c:[1,[false]]},
{a:[{A:{aA:1,bB:2}},'bar'],c:[1,[false]]})).
toBe(true);
expect(require('deepDiffer')(
{a:[{A:{aA:1,bB:1}},'bar'],c:[1,[false]]},
{a:[{A:{aA:1,bB:1}},'bar'],c:[1,[false],null]})).
toBe(true);
expect(require('deepDiffer')(
{a:[{A:{aA:1,bB:1}},'bar'],c:[1,[false]]},
{a:[{A:{aA:1,bB:1}},['bar']],c:[1,[false]]})).
toBe(true);});

it('should distinguish between proper Array and Object',function(){
expect(require('deepDiffer')(['a','b'],{0:'a',1:'b',length:2})).toBe(true);
expect(require('deepDiffer')(['a','b'],{length:2,0:'a',1:'b'})).toBe(true);});

it('should diff same object',function(){
var obj=[1,[2,3]];
expect(require('deepDiffer')(obj,obj)).toBe(false);});});
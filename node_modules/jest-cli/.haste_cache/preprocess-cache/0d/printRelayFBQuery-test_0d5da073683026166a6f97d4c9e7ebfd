'use strict';
















describe('printRelayFBQuery',function(){var _RelayTestUtils=require('RelayTestUtils');var 
getNode=_RelayTestUtils.getNode;

function printQuery(node){var _printRelayFBQuery=
require('printRelayFBQuery')(node);var text=_printRelayFBQuery.text;var variables=_printRelayFBQuery.variables;
expect(variables).toEqual({});
return text;}


beforeEach(function(){
jest.resetModuleRegistry();

jasmine.addMatchers(require('RelayTestUtils').matchers);});


describe('roots',function(){
it('prints a query with no root arguments',function(){
var query=getNode(function(){return {children:[{directives:[{kind:'Directive',name:'fixme_fat_interface',args:[]}],fieldName:'first_name',kind:'Field',metadata:{},type:'String'},{directives:[{kind:'Directive',name:'fixme_fat_interface',args:[]}],fieldName:'last_name',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'me',kind:'Query',metadata:{isAbstract:true},name:'PrintRelayFBQuery',type:'Actor'};}());







expect(printQuery(query)).toEqualPrintedQuery('\n        Query PrintRelayFBQuery {\n          me() {\n            first_name,\n            last_name,\n            id,\n            __typename\n          }\n        }\n      ');});











it('prints a query with one root argument',function(){
var query=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID!'},name:'id',value:{kind:'CallValue',callValue:'123'}}],children:[{directives:[{kind:'Directive',name:'fixme_fat_interface',args:[]}],fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID!'},name:'PrintRelayFBQuery',type:'Node'};}());






expect(printQuery(query)).toEqualPrintedQuery('\n        Query PrintRelayFBQuery {\n          node(123) {\n            name,\n            id,\n            __typename\n          }\n        }\n      ');});










it('prints a query with multiple root arguments',function(){
var query=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'[String]!'},name:'username',value:[{kind:'CallValue',callValue:'a'},{kind:'CallValue',callValue:'b'},{kind:'CallValue',callValue:'c'}]}],children:[{directives:[{kind:'Directive',name:'fixme_fat_interface',args:[]}],fieldName:'first_name',kind:'Field',metadata:{},type:'String'},{directives:[{kind:'Directive',name:'fixme_fat_interface',args:[]}],fieldName:'last_name',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'usernames',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'username',identifyingArgType:'[String]!'},name:'PrintRelayFBQuery',type:'Profile'};}());







expect(printQuery(query)).toEqualPrintedQuery('\n        Query PrintRelayFBQuery {\n          usernames(a,b,c) {\n            first_name,\n            last_name,\n            id,\n            __typename\n          }\n        }\n      ');});











it('prints object call values as JSON',function(){
var value={query:['Menlo Park']};
var query=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'CheckinSearchQueryParams'},name:'checkin_search_query',value:{kind:'CallVariable',callVariableName:'q'}}],children:[{fieldName:'query',kind:'Field',metadata:{},type:'String'}],fieldName:'checkin_search_query',kind:'Query',metadata:{identifyingArgName:'checkin_search_query',identifyingArgType:'CheckinSearchQueryParams'},name:'PrintRelayFBQuery',type:'CheckinSearchQuery'};}(),





{
q:value});


expect(printQuery(query)).toEqualPrintedQuery('\n        Query PrintRelayFBQuery {\n          checkin_search_query(\\{"query":["Menlo Park"]\\}) {\n            query\n          }\n        }\n      ');});








it('prints ref queries',function(){
var query=require('RelayQuery').Root.build(
'RefQueryName',
require('RelayNodeInterface').NODE,
require('QueryBuilder').createBatchCallVariable('q0','$.*.actor.id'),
[
require('RelayQuery').Field.build({fieldName:'id',type:'String'}),
require('RelayQuery').Field.build({fieldName:'name',type:'String'})],

{
isDeferred:true,
identifyingArgName:require('RelayNodeInterface').ID,
type:require('RelayNodeInterface').NODE_TYPE});


expect(printQuery(query)).toEqualPrintedQuery('\n        Query RefQueryName {\n          node(<ref_q0>) {\n            id,\n            name\n          }\n        }\n      ');});});










describe('fragments',function(){
it('prints fragments',function(){
var fragment=getNode(function(){return {children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'actor',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true},type:'Actor'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'PrintRelayFBQueryRelayQL',type:'Viewer'};}());






expect(printQuery(fragment)).toEqualPrintedQuery('\n        QueryFragment PrintRelayFBQueryRelayQL : Viewer {\n          actor {\n            id,\n            __typename\n          }\n        }\n      ');});









it('prints inline fragments',function(){
var fragment=getNode(function(){return {children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'},{children:[{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'User',type:'User'},{children:[{children:[{fieldName:'uri',kind:'Field',metadata:{},type:'Url'}],fieldName:'profile_picture',kind:'Field',metadata:{canHaveSubselections:true},type:'Image'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'User',type:'User'}],fieldName:'actor',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true},type:'Actor'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'PrintRelayFBQueryRelayQL',type:'Viewer'};}());














expect(printQuery(fragment)).toEqualPrintedQuery('\n        QueryFragment PrintRelayFBQueryRelayQL : Viewer {\n          actor {\n            id,\n            __typename,\n            @F0,\n            @F1\n          }\n        }\n        QueryFragment F0 : User {\n          name,\n          id\n        }\n        QueryFragment F1 : User {\n          profile_picture {\n            uri\n          },\n          id\n        }\n      ');});





















it('prints fragments with incrementing names',function(){
var fragmentA=function(){return {children:[{fieldName:'first_name',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'PrintRelayFBQueryRelayQL',type:'User'};}();
var fragmentB=function(){return {children:[{fieldName:'last_name',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'PrintRelayFBQueryRelayQL',type:'User'};}();
var fragment=getNode(function(RQL_0,RQL_1){return {children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'},require('Relay').QL.__frag(RQL_0),require('Relay').QL.__frag(RQL_1)]),id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'PrintRelayFBQueryRelayQL',type:'Node'};}(

fragmentA,
fragmentB));


expect(printQuery(fragment)).toEqualPrintedQuery('\n        QueryFragment PrintRelayFBQueryRelayQL : Node {\n          id,\n          __typename,\n          @F0,\n          @F1\n        }\n        QueryFragment F0 : User {\n          first_name,\n          id\n        }\n        QueryFragment F1 : User {\n          last_name,\n          id\n        }\n      ');});

















it('prints fragments with identical children only once',function(){
var fragmentA=function(){return {children:[{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'PrintRelayFBQueryRelayQL',type:'User'};}();
var fragmentB=function(){return {children:[{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'PrintRelayFBQueryRelayQL',type:'User'};}();
var fragment=getNode(function(RQL_0,RQL_1){return {children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'},require('Relay').QL.__frag(RQL_0),require('Relay').QL.__frag(RQL_1)]),id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'PrintRelayFBQueryRelayQL',type:'Node'};}(

fragmentA,
fragmentB));


expect(printQuery(fragment)).toEqualPrintedQuery('\n        QueryFragment PrintRelayFBQueryRelayQL : Node {\n          id,\n          __typename,\n          @F0\n        }\n        QueryFragment F0 : User {\n          name,\n          id\n        }\n      ');});












it('prints fragments with different variables separately',function(){
var concreteFragment=function(){return {children:[{calls:[{kind:'Call',metadata:{},name:'scale',value:{kind:'CallVariable',callVariableName:'scale'}}],children:[{fieldName:'uri',kind:'Field',metadata:{},type:'Url'}],fieldName:'profile_picture',kind:'Field',metadata:{canHaveSubselections:true},type:'Image'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'PrintRelayFBQueryRelayQL',type:'User'};}();






var fragment=getNode(function(){return {children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'PrintRelayFBQueryRelayQL',type:'User'};}()).clone([
getNode(concreteFragment,{scale:1}),
getNode(concreteFragment,{scale:2})]);

expect(printQuery(fragment)).toEqualPrintedQuery('\n        QueryFragment PrintRelayFBQueryRelayQL : User {\n          @F0,\n          @F1\n        }\n        QueryFragment F0 : User {\n          profile_picture.scale(1)\n              as '+






require('generateRQLFieldAlias')('profile_picture.scale(1)')+' {\n            uri\n          },\n          id\n        }\n        QueryFragment F1 : User {\n          profile_picture.scale(2)\n              as '+






require('generateRQLFieldAlias')('profile_picture.scale(2)')+' {\n            uri\n          },\n          id\n        }\n      ');});







it('prints fragments with different runtime children separately',function(){
var child=undefined;
child=function(){return {children:[{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'PrintRelayFBQueryRelayQL',type:'User'};}();
var fragmentA=function(RQL_0){return {children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},require('Relay').QL.__frag(RQL_0)]),id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'PrintRelayFBQueryRelayQL',type:'User'};}(child);
child=function(){return {children:[{children:[{fieldName:'uri',kind:'Field',metadata:{},type:'Url'}],fieldName:'profile_picture',kind:'Field',metadata:{canHaveSubselections:true},type:'Image'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'PrintRelayFBQueryRelayQL',type:'User'};}();
var fragmentB=function(RQL_0){return {children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},require('Relay').QL.__frag(RQL_0)]),id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'PrintRelayFBQueryRelayQL',type:'User'};}(child);

var fragment=getNode(function(RQL_0,RQL_1){return {children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'},require('Relay').QL.__frag(RQL_0),require('Relay').QL.__frag(RQL_1)]),id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'PrintRelayFBQueryRelayQL',type:'Node'};}(

fragmentA,
fragmentB));


expect(printQuery(fragment)).toEqualPrintedQuery('\n        QueryFragment PrintRelayFBQueryRelayQL : Node {\n          id,\n          __typename,\n          @F1,\n          @F3\n        }\n        QueryFragment F0 : User {\n          name,\n          id\n        }\n        QueryFragment F1 : User {\n          id,\n          @F0\n        }\n        QueryFragment F2 : User {\n          profile_picture {\n            uri\n          },\n          id\n        }\n        QueryFragment F3 : User {\n          id,\n          @F2\n        }\n      ');});



























it('prints fragments with different IDs but identical output once',function(){
var concreteFragment=function(){return {children:[{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'PrintRelayFBQueryRelayQL',type:'User'};}();
var fragment=getNode(function(){return {children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'PrintRelayFBQueryRelayQL',type:'User'};}()).clone([
getNode(concreteFragment,{value:123}),
getNode(concreteFragment,{value:456})]);

expect(printQuery(fragment)).toEqualPrintedQuery('\n        QueryFragment PrintRelayFBQueryRelayQL : User {\n          @F0\n        }\n        QueryFragment F0 : User {\n          name,\n          id\n        }\n      ');});










it('omits empty fragments',function(){


var nestedFragment=function(){return {children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'PrintRelayFBQueryRelayQL',type:'Node'};}();
nestedFragment.children=[];

var fragment=getNode(function(RQL_0){return {children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'},require('Relay').QL.__frag(RQL_0)]),id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'PrintRelayFBQueryRelayQL',type:'Node'};}(


nestedFragment));var _printRelayFBQuery2=


require('printRelayFBQuery')(fragment);var text=_printRelayFBQuery2.text;
expect(text).toEqualPrintedQuery('\n        QueryFragment PrintRelayFBQueryRelayQL : Node {\n          id,\n          __typename\n        }\n      ');});});








describe('fields',function(){
it('prints a field with one argument',function(){
var alias=require('generateRQLFieldAlias')('profile_picture.scale(2)');
var fragment=getNode(function(){return {children:[{calls:[{kind:'Call',metadata:{},name:'scale',value:{kind:'CallVariable',callVariableName:'scale'}}],children:[{fieldName:'uri',kind:'Field',metadata:{},type:'Url'}],fieldName:'profile_picture',kind:'Field',metadata:{canHaveSubselections:true},type:'Image'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'PrintRelayFBQueryRelayQL',type:'Actor'};}(),





{scale:2});
expect(printQuery(fragment)).toEqualPrintedQuery('\n        QueryFragment PrintRelayFBQueryRelayQL : Actor {\n          profile_picture.scale(2) as '+

alias+' {\n            uri\n          },\n          id,\n          __typename\n        }\n      ');});








it('prints a field with multiple arguments',function(){
var fragment=getNode(function(){return {children:[{calls:[{kind:'Call',metadata:{},name:'size__width',value:{kind:'CallValue',callValue:32}},{kind:'Call',metadata:{},name:'size__height',value:{kind:'CallValue',callValue:64}}],children:[{fieldName:'uri',kind:'Field',metadata:{},type:'Url'}],directives:[{kind:'Directive',name:'fixme_call_args',args:[]}],fieldName:'profile_picture',kind:'Field',metadata:{canHaveSubselections:true},type:'Image'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'PrintRelayFBQueryRelayQL',type:'Actor'};}());






var alias=fragment.getChildren()[0].getSerializationKey();
expect(printQuery(fragment)).toEqualPrintedQuery('\n        QueryFragment PrintRelayFBQueryRelayQL : Actor {\n          profile_picture.size(32, 64) as '+

alias+' {\n            uri\n          },\n          id,\n          __typename\n        }\n      ');});








it('prints a field with multiple variable arguments',function(){
var variables={
height:64,
width:32};

var fragment=getNode(function(){return {children:[{calls:[{kind:'Call',metadata:{},name:'size__width',value:{kind:'CallVariable',callVariableName:'width'}},{kind:'Call',metadata:{},name:'size__height',value:{kind:'CallVariable',callVariableName:'height'}}],children:[{fieldName:'uri',kind:'Field',metadata:{},type:'Url'}],directives:[{kind:'Directive',name:'fixme_call_args',args:[]}],fieldName:'profile_picture',kind:'Field',metadata:{canHaveSubselections:true},type:'Image'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'PrintRelayFBQueryRelayQL',type:'Actor'};}(),





variables);
var alias=fragment.getChildren()[0].getSerializationKey();
expect(printQuery(fragment)).toEqualPrintedQuery('\n        QueryFragment PrintRelayFBQueryRelayQL : Actor {\n          profile_picture.size(32, 64) as '+

alias+' {\n            uri\n          },\n          id,\n          __typename\n        }\n      ');});








it('prints a field exported with `@fb_export(as: ...)`',function(){
var fragment=getNode(function(){return {children:[{directives:[{kind:'Directive',name:'fb_export',args:[{name:'as',value:{kind:'CallValue',callValue:'foo'}}]}],fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'PrintRelayFBQueryRelayQL',type:'Actor'};}());




expect(printQuery(fragment)).toEqualPrintedQuery('\n        QueryFragment PrintRelayFBQueryRelayQL : Actor {\n          name exports foo,\n          id,\n          __typename\n        }\n      ');});








it('includes fields with `@include(if: true)`',function(){
var node=function(){return {children:[{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:5}}],children:[{children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'User'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'FriendsEdge'},{children:[{fieldName:'has_next_page',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'has_previous_page',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'page_info',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],directives:[{kind:'Directive',name:'include',args:[{name:'if',value:{kind:'CallVariable',callVariableName:'condition'}}]}],fieldName:'friends',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'FriendsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'PrintRelayFBQueryRelayQL',type:'User'};}();










var alias=require('generateRQLFieldAlias')('friends.first(5)');
var fragment=getNode(node,{condition:true});
expect(printQuery(fragment)).toEqualPrintedQuery('\n        QueryFragment PrintRelayFBQueryRelayQL : User {\n          friends.first(5) as '+

alias+' {\n            edges {\n              node {\n                id\n              },\n              cursor\n            },\n            page_info {\n              has_next_page,\n              has_previous_page\n            }\n          },\n          id\n        }\n      ');});
















it('omits fields with `@include(if: false)`',function(){
var node=function(){return {children:[{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:5}}],children:[{children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'User'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'FriendsEdge'},{children:[{fieldName:'has_next_page',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'has_previous_page',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'page_info',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],directives:[{kind:'Directive',name:'include',args:[{name:'if',value:{kind:'CallVariable',callVariableName:'condition'}}]}],fieldName:'friends',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'FriendsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'PrintRelayFBQueryRelayQL',type:'User'};}();










var fragment=getNode(node,{condition:false});
expect(printQuery(fragment)).toEqualPrintedQuery('\n        QueryFragment PrintRelayFBQueryRelayQL : User {\n          id\n        }\n      ');});






it('prints inline fragments as references',function(){

var nestedFragment=function(){return {children:[{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'PrintRelayFBQueryRelayQL',type:'User'};}();
var fragment=getNode(function(RQL_0,RQL_1){return {children:[{children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'},require('Relay').QL.__frag(RQL_0),require('Relay').QL.__frag(RQL_1)]),fieldName:'actor',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true},type:'Actor'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'PrintRelayFBQueryRelayQL',type:'Viewer'};}(



nestedFragment,
nestedFragment));



expect(printQuery(fragment)).toEqualPrintedQuery('\n        QueryFragment PrintRelayFBQueryRelayQL : Viewer {\n          actor {\n            id,\n            __typename,\n            @F0\n          }\n        }\n        QueryFragment F0 : User {\n          name,\n          id\n        }\n      ');});});















it('prints a mutation',function(){
var inputValue={
client_mutation_id:'0',
foo:'bar'};

var mutation=getNode(function(){return {calls:[{kind:'Call',metadata:{},name:'feedback_like',value:{kind:'CallVariable',callVariableName:'input'}}],children:[{fieldName:'client_mutation_id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'like_sentence',kind:'Field',metadata:{canHaveSubselections:true},type:'TextWithEntities'},{fieldName:'likers',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'LikersOfContentConnection'}],fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'}],kind:'Mutation',metadata:{inputType:'FeedbackLikeData!'},name:'PrintRelayFBQuery',responseType:'FeedbackLikeResponsePayload'};}(),










{input:inputValue});var _printRelayFBQuery3=

require('printRelayFBQuery')(mutation);var text=_printRelayFBQuery3.text;var variables=_printRelayFBQuery3.variables;
expect(text).toEqualPrintedQuery('\n      Mutation PrintRelayFBQuery : FeedbackLikeResponsePayload {\n        feedback_like(<input>) {\n          client_mutation_id,\n          feedback {\n            id,\n            like_sentence,\n            likers\n          }\n        }\n      }\n    ');











expect(variables).toEqual({
input:inputValue});});



it('prints a subscription',function(){
var inputValue={
client_subscription_id:'0',
foo:'bar'};

var subscription=getNode(function(){return {calls:[{kind:'Call',metadata:{},name:'feedback_like_subscribe',value:{kind:'CallVariable',callVariableName:'input'}}],children:[{directives:[{kind:'Directive',name:'fixme_fat_interface',args:[]}],fieldName:'client_subscription_id',kind:'Field',metadata:{},type:'ID'},{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'like_sentence',kind:'Field',metadata:{canHaveSubselections:true},type:'TextWithEntities'},{fieldName:'likers',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'LikersOfContentConnection'}],directives:[{kind:'Directive',name:'fixme_fat_interface',args:[]}],fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'}],kind:'Subscription',metadata:{inputType:'FeedbackLikeSubscribeData!'},name:'PrintRelayFBQuery',responseType:'FeedbackLikeSubscribeResponsePayload'};}(),










{input:inputValue});var _printRelayFBQuery4=

require('printRelayFBQuery')(subscription);var text=_printRelayFBQuery4.text;var variables=_printRelayFBQuery4.variables;
expect(text).toEqualPrintedQuery('\n      Subscription PrintRelayFBQuery : FeedbackLikeSubscribeResponsePayload {\n        feedback_like_subscribe(<input>) {\n          client_subscription_id,\n          feedback {\n            id,\n            like_sentence,\n            likers\n          }\n        }\n      }\n    ');











expect(variables).toEqual({
input:inputValue});});});
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails oncall+relay
 */

'use strict';

jest.
autoMockOff().
mock('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/performanceNow');








describe('RelayMetricsRecorder', function () {
  var query;

  beforeEach(function () {
    window.__DEV__ = true;
    jest.resetModuleRegistry();var 

    getNode = require('RelayTestUtils').getNode;
    query = getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '123' } }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, { children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'fcSdFeaG9+ev:0', kind: 'Fragment', metadata: {}, name: 'User', type: 'User' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'RelayMetricsRecorder', type: 'Node' };})());});










  function mockPerformanceNowSequence(times) {
    var index = 0;
    require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/performanceNow').mockImplementation(function () {
      var time = times[index++];
      expect(time).not.toBe(undefined);
      return time;});}



  it('returns empty metrics until methods are called', function () {
    var recorder = new (require('RelayMetricsRecorder'))();
    require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/performanceNow').mockReturnValue(0);
    recorder.start();
    require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/performanceNow').mockReturnValue(1000);
    recorder.stop();
    expect(recorder.getMetrics()).toEqual({ 
      measurements: {}, 
      profiles: [], 
      recordingTime: 1000, 
      totalTime: 0 });});



  it('returns timing for synchronous methods', function () {
    var recorder = new (require('RelayMetricsRecorder'))();
    require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/performanceNow').mockReturnValue(0);
    recorder.start();
    mockPerformanceNowSequence([1, 101]);
    query.getChildren();
    require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/performanceNow').mockReturnValue(3000);
    recorder.stop();

    expect(recorder.getMetrics()).toEqual({ 
      measurements: { 
        '@RelayQueryNode.prototype.getChildren': { 
          aggregateTime: 100, 
          callCount: 1 } }, 


      profiles: [], 
      recordingTime: 3000, 
      totalTime: 100 });});



  it('returns timing for asynchronous events', function () {
    var recorder = new (require('RelayMetricsRecorder'))();
    require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/performanceNow').mockReturnValue(0);
    recorder.start();

    require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/performanceNow').mockReturnValue(1);var _RelayProfiler$profile = 
    require('RelayProfiler').profile('fetchRelayQuery');var stop = _RelayProfiler$profile.stop;
    require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/performanceNow').mockReturnValue(1001);
    stop();
    require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/performanceNow').mockReturnValue(2000);
    recorder.stop();

    expect(recorder.getMetrics()).toEqual({ 
      measurements: {}, 
      profiles: [
      { 
        endTime: 1001, 
        name: 'fetchRelayQuery', 
        startTime: 1 }], 


      recordingTime: 2000, 
      totalTime: 0 });});



  describe('__DEV__ false', function () {
    beforeEach(function () {
      window.__DEV__ = false;
      jest.resetModuleRegistry();});


    it('records profiles only', function () {
      var recorder = new (require('RelayMetricsRecorder'))();
      require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/performanceNow').mockReturnValue(0);
      recorder.start();
      query.getChildren(); // not recorded
      require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/performanceNow').mockReturnValue(1);var _RelayProfiler$profile2 = 
      require('RelayProfiler').profile('fetchRelayQuery');var stop = _RelayProfiler$profile2.stop;
      require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/performanceNow').mockReturnValue(11);
      stop();
      require('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/performanceNow').mockReturnValue(1000);
      recorder.stop();

      expect(recorder.getMetrics()).toEqual({ 
        measurements: {}, 
        profiles: [
        { 
          endTime: 11, 
          name: 'fetchRelayQuery', 
          startTime: 1 }], 


        recordingTime: 1000, 
        totalTime: 0 });});});});
'use strict';










var RelayEnvironment=require.requireActual('RelayEnvironment');

















function genMockRequest(args){
var ready=false;
return {
abort:function(){
args[1]({aborted:true,done:false,error:null,ready:ready,stale:false});},

block:function(){
args[1]({aborted:false,done:false,error:null,ready:ready,stale:false});},

resolve:function(config){
var stale=config?!!config.stale:false;
ready=true;
args[1]({aborted:false,done:false,error:null,ready:ready,stale:stale});},

succeed:function(){
ready=true;
args[1]({aborted:false,done:true,error:null,ready:ready,stale:false});},

fail:function(error){
args[1]({aborted:false,done:false,error:error,ready:ready,stale:false});}};}var 




MockRelayEnvironment=function(_RelayEnvironment){babelHelpers.inherits(MockRelayEnvironment,_RelayEnvironment);
function MockRelayEnvironment(){babelHelpers.classCallCheck(this,MockRelayEnvironment);var _this=babelHelpers.possibleConstructorReturn(this,Object.getPrototypeOf(MockRelayEnvironment).call(this));var _arr=


['getFragmentResolver','read'];for(var _i=0;_i<_arr.length;_i++){var method=_arr[_i];
_this[method]=jest.genMockFn().mockImplementation(
RelayEnvironment.prototype[method]);}



_this.primeCache=jest.genMockFunction();
_this.primeCache.mock.abort=[];
_this.primeCache.mock.requests=[];
_this.primeCache.mockImplementation(function(){for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}
var request=genMockRequest(args);
var returnValue={
abort:jest.genMockFunction().mockImplementation(function(){
require('resolveImmediate')(request.abort);})};


_this.primeCache.mock.abort.push(returnValue.abort);
_this.primeCache.mock.requests.push(request);
return returnValue;});


_this.forceFetch=jest.genMockFunction();
_this.forceFetch.mock.abort=[];
_this.forceFetch.mock.requests=[];
_this.forceFetch.mockImplementation(function(){for(var _len2=arguments.length,args=Array(_len2),_key2=0;_key2<_len2;_key2++){args[_key2]=arguments[_key2];}
var request=genMockRequest(args);
var returnValue={
abort:jest.genMockFunction().mockImplementation(function(){
require('resolveImmediate')(request.abort);})};


_this.forceFetch.mock.abort.push(returnValue.abort);
_this.forceFetch.mock.requests.push(request);
return returnValue;});


_this.mock={
setMockRecords:function(records){
_this.mock.recordStore=new (require('RelayRecordStore'))({records:records});},

recordStore:null};return _this;}return MockRelayEnvironment;}(RelayEnvironment);




module.exports=MockRelayEnvironment;
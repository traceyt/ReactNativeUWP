'use strict';






















var SECRET_KEY=require('keyOf')({_DONT_EVER_TYPE_THIS_SECRET_KEY:null});var 

















Immutable=function(){










function Immutable(secret){babelHelpers.classCallCheck(this,Immutable);
!(
secret===Immutable[SECRET_KEY])?require('invariant')(0,
'Only certain classes should create instances of `Immutable`.'+
'You probably want something like ImmutableObject.create.'):undefined;}babelHelpers.createClass(Immutable,null,[{key:'mergeAllPropertiesInto',value:function mergeAllPropertiesInto(









destination,propertyObjects){
var argLength=propertyObjects.length;
for(var i=0;i<argLength;i++){
!
!Array.isArray(propertyObjects[i])?require('invariant')(0,
'Tried to merge an object, instead got %s.',
propertyObjects[i]):undefined;

babelHelpers.extends(destination,propertyObjects[i]);}}},{key:'deepFreezeRootNode',value:function deepFreezeRootNode(










object){
if(require('isNode')(object)){
return;}

Object.freeze(object);
for(var prop in object){
if(object.hasOwnProperty(prop)){
Immutable.recurseDeepFreeze(object[prop]);}}


Object.seal(object);}},{key:'recurseDeepFreeze',value:function recurseDeepFreeze(








object){
if(require('isNode')(object)||!Immutable.shouldRecurseFreeze(object)){
return;}

Object.freeze(object);
for(var prop in object){
if(object.hasOwnProperty(prop)){
Immutable.recurseDeepFreeze(object[prop]);}}


Object.seal(object);}},{key:'shouldRecurseFreeze',value:function shouldRecurseFreeze(










object){
return (
typeof object==='object'&&
!(object instanceof Immutable)&&
object!==null);}}]);return Immutable;}();




Immutable._DONT_EVER_TYPE_THIS_SECRET_KEY=Math.random();

module.exports=Immutable;
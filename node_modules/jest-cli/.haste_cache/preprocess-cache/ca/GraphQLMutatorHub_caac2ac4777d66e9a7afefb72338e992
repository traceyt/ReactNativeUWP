'use strict';














var mutatorsByType={};




function validateNodeDeleteMutationConfig(config){
!(
typeof config.deletedIDFieldName==='string')?require('invariant')(0,
'Node delete mutation config must have valid types on register'):undefined;}






function validateRangeAddMutationConfig(config){
!(
(!config.parentID||typeof config.parentID==='string')&&
typeof config.connectionName==='string'&&
typeof config.edgeName==='string')?require('invariant')(0,
'Range add mutation config must have valid types on register'):undefined;}






function validateRangeDeleteMutationConfig(config){
!(
Array.isArray(config.pathToConnection)&&
config.pathToConnection.length>=2&&
typeof config.deletedIDFieldName==='string')?require('invariant')(0,
'Range delete mutation config must have valid types on register'):undefined;}







function registerMutationConfig(type,config){
if(mutatorsByType[type]===undefined){
mutatorsByType[type]=[];}

mutatorsByType[type].push(config);}









































var GraphQLMutatorHub={

























registerForRangeAddMutationType:function(type,config){
validateRangeAddMutationConfig(config);
registerMutationConfig(
type,babelHelpers.extends({},

config,{
type:require('RelayMutationType').RANGE_ADD,
rangeBehaviors:require('GraphQLMutationProperties').getRangeConfigForType(type)}));},

























registerForRangeDeleteMutationType:function(type,config){
validateRangeDeleteMutationConfig(config);
registerMutationConfig(
type,babelHelpers.extends({},

config,{
type:require('RelayMutationType').RANGE_DELETE}));},
















registerForNodeDeleteMutationType:function(type,config){
validateNodeDeleteMutationConfig(config);
registerMutationConfig(
type,babelHelpers.extends({},

config,{
type:require('RelayMutationType').NODE_DELETE}));},














registerForRangeAddSubscriptionType:function(subscriptionType,mutationType,config){
validateRangeAddMutationConfig(config);
var rangeBehaviors=
require('GraphQLMutationProperties').getRangeConfigForType(mutationType);
registerMutationConfig(
subscriptionType,babelHelpers.extends({},

config,{
type:require('RelayMutationType').RANGE_ADD,
mutationType:mutationType,
rangeBehaviors:rangeBehaviors}));},








getConfigs:function(type){
return mutatorsByType[type]?mutatorsByType[type]:[];}};



module.exports=GraphQLMutatorHub;
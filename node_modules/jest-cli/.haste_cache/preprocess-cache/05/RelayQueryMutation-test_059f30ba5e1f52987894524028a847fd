/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails oncall+relay
 */

'use strict';function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}

require('configureForRelayOSS');





describe('RelayQueryMutation', function () {var 
  getNode = require('RelayTestUtils').getNode;

  var input = undefined;
  var mutationQuery = undefined;

  beforeEach(function () {var _JSON$stringify;
    jest.resetModuleRegistry();

    jasmine.addMatchers(require('RelayTestUtils').matchers);

    input = JSON.stringify((_JSON$stringify = {}, _defineProperty(_JSON$stringify, 
    require('RelayConnectionInterface').CLIENT_MUTATION_ID, 'mutation:id'), _defineProperty(_JSON$stringify, 'actor', 
    'actor:id'), _defineProperty(_JSON$stringify, 'feedback_id', 
    'feedback:id'), _defineProperty(_JSON$stringify, 'message', 
    { 
      text: 'comment!' }), _JSON$stringify));


    mutationQuery = getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'commentCreate', value: { kind: 'CallVariable', callVariableName: 'input' } }], children: [{ fieldName: 'clientMutationId', kind: 'Field', metadata: { isRequisite: true }, type: 'String' }, { children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'Comment' }, { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }], fieldName: 'source', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Feedback' }, { fieldName: 'cursor', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'feedbackCommentEdge', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'CommentsEdge' }], kind: 'Mutation', metadata: { inputType: 'CommentCreateInput' }, name: 'RelayQueryMutation', responseType: 'CommentCreateResponsePayload' };})(), 









    { input: input });});


  it('creates mutations', function () {
    expect(mutationQuery.getName()).toBe('RelayQueryMutation');
    expect(mutationQuery.getResponseType()).toBe(
    'CommentCreateResponsePayload');

    expect(mutationQuery.getCall()).toEqual({ 
      name: 'commentCreate', 
      value: input });

    var children = mutationQuery.getChildren();
    expect(children.length).toBe(2);
    expect(children[0].getSchemaName()).toBe(
    require('RelayConnectionInterface').CLIENT_MUTATION_ID);

    expect(children[1].getSchemaName()).toBe('feedbackCommentEdge');
    var edgeChildren = children[1].getChildren();
    expect(edgeChildren.length).toBe(3);
    expect(edgeChildren[0].getSchemaName()).toBe('node');
    expect(edgeChildren[1].getSchemaName()).toBe('source');
    expect(edgeChildren[2].getSchemaName()).toBe('cursor'); // generated
  });

  it('clones mutations', function () {
    var clone = mutationQuery.clone(mutationQuery.getChildren());
    expect(clone).toBe(mutationQuery);

    clone = mutationQuery.clone(
    mutationQuery.getChildren().slice(0, 1));

    expect(clone).not.toBe(mutationQuery);
    expect(clone.getChildren().length).toBe(1);
    expect(clone.getChildren()[0].getSchemaName()).toBe(
    require('RelayConnectionInterface').CLIENT_MUTATION_ID);


    clone = mutationQuery.clone([null]);
    expect(clone).toBe(null);});


  it('tests for equality', function () {
    var equivalentQuery = getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'commentCreate', value: { kind: 'CallVariable', callVariableName: 'input' } }], children: [{ fieldName: 'clientMutationId', kind: 'Field', metadata: { isRequisite: true }, type: 'String' }, { children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'Comment' }, { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }], fieldName: 'source', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Feedback' }, { fieldName: 'cursor', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'feedbackCommentEdge', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'CommentsEdge' }], kind: 'Mutation', metadata: { inputType: 'CommentCreateInput' }, name: 'RelayQueryMutation', responseType: 'CommentCreateResponsePayload' };})(), 









    { input: input });
    var differentQuery = getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'commentCreate', value: { kind: 'CallVariable', callVariableName: 'input' } }], children: [{ fieldName: 'clientMutationId', kind: 'Field', metadata: { isRequisite: true }, type: 'String' }, { children: [{ fieldName: 'cursor', kind: 'Field', metadata: { isRequisite: true }, type: 'String' }, { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'Comment' }, { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }], fieldName: 'source', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Feedback' }], fieldName: 'feedbackCommentEdge', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'CommentsEdge' }], kind: 'Mutation', metadata: { inputType: 'CommentCreateInput' }, name: 'RelayQueryMutation', responseType: 'CommentCreateResponsePayload' };})(), 










    { input: input });

    expect(mutationQuery).not.toBe(equivalentQuery);
    expect(mutationQuery.equals(equivalentQuery)).toBe(true);
    expect(mutationQuery.equals(differentQuery)).toBe(false);});


  describe('canHaveSubselections()', function () {
    it('returns true', function () {
      expect(mutationQuery.canHaveSubselections()).toBe(true);});});});
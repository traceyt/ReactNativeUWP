/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails oncall+relay
 */

'use strict';

require('configureForRelayOSS');

jest.mock('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/warning');







describe('RelayFragmentReference', function () {
  var route;

  beforeEach(function () {
    jest.resetModuleRegistry();

    route = new (require('RelayMetaRoute'))('');
    jasmine.addMatchers(require('RelayTestUtils').matchers);});


  it('creates fragments with default variables', function () {
    var node = (function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'size', value: { kind: 'CallVariable', callVariableName: 'size' } }], children: [{ fieldName: 'uri', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'FTMHaZt5UbQM:0', kind: 'Fragment', metadata: {}, name: 'RelayFragmentReferenceRelayQL', type: 'User' };})();






    // equivalent to `getQuery('foo')` without variables
    var reference = new (require('RelayFragmentReference'))(
    function () {return node;}, 
    { 
      size: 'default' });


    var variables = { size: 'ignored' };
    expect(reference instanceof require('RelayFragmentReference')).toBe(true);
    // size ignored because no variables are passed into the fragment
    expect(reference.getFragment(variables)).toBe(node);
    expect(reference.getVariables(route, variables)).toEqual({ 
      size: 'default' });});



  it('creates fragments with a variable mapping', function () {
    var node = (function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'size', value: { kind: 'CallVariable', callVariableName: 'size' } }], children: [{ fieldName: 'uri', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'profilePicture', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Image' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'CHDJli/9bIC2:0', kind: 'Fragment', metadata: {}, name: 'RelayFragmentReferenceRelayQL', type: 'User' };})();






    // equivalent to `getQuery('foo', {size: variables.outerSize})`
    var reference = new (require('RelayFragmentReference'))(
    function () {return node;}, 
    { 
      size: 'default' }, 

    { 
      size: require('QueryBuilder').createCallVariable('outerSize') });


    // no outer variable, default is used
    var variables = {};
    expect(reference.getFragment(variables)).toBe(node);
    expect(reference.getVariables(route, variables)).toEqual({ 
      size: 'default' });


    // outer variable overrides inner default
    variables = { outerSize: 'override' };
    expect(reference.getFragment(variables)).toBe(node);
    expect(reference.getVariables(route, variables)).toEqual({ 
      size: 'override' });});



  it('creates deferred fragment references', function () {
    var node = (function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'nxOQqYp+issa:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'RelayFragmentReferenceRelayQL', type: 'Node' };})();
    var reference = new (require('RelayFragmentReference'))(function () {return node;}, {});
    reference.defer();

    // fragment is the original node, unchanged and not deferred
    expect(reference.getFragment({})).toBe(node);
    // but the reference is marked as deferred
    expect(reference.isDeferred()).toBe(true);});


  it('creates fragments with if/unless conditions', function () {
    var node = (function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: '2RP6jOoocMjx:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'RelayFragmentReferenceRelayQL', type: 'Node' };})();
    var reference = new (require('RelayFragmentReference'))(function () {return node;}, {});
    reference['if'](require('QueryBuilder').createCallVariable('if'));
    reference.unless(require('QueryBuilder').createCallVariable('unless'));

    var fragment = reference.getFragment({ 'if': true, unless: false });
    expect(fragment).toBe(node);

    fragment = reference.getFragment({ 'if': false, unless: false });
    expect(fragment).toBe(null);

    fragment = reference.getFragment({ 'if': true, unless: true });
    expect(fragment).toBe(null);

    fragment = reference.getFragment({ 'if': false, unless: true });
    expect(fragment).toBe(null);});


  it('processes variables using the route', function () {
    var node = (function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'h6UFkL4wl9Si:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'RelayFragmentReferenceRelayQL', type: 'Node' };})();
    var prepareVariables = jest.genMockFunction();
    var reference = new (require('RelayFragmentReference'))(
    function () {return node;}, 
    { 
      size: 'default' }, 

    {}, 
    prepareVariables);


    var customVariables = { 
      size: 'override', 
      other: 'custom' };

    prepareVariables.mockImplementation(function () {return customVariables;});

    var variables = { size: 'default' };
    expect(reference.getFragment(variables)).toBe(node);
    expect(reference.getVariables(route, variables)).toEqual(customVariables);
    expect(prepareVariables).toBeCalledWith({ size: 'default' }, route);});


  it('warns if a variable is undefined', function () {
    var node = (function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'S0pJLgV6ju3k:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'RelayFragmentReferenceRelayQL', type: 'Node' };})();
    var reference = new (require('RelayFragmentReference'))(
    function () {return node;}, 
    {}, 
    { 
      dynamic: require('QueryBuilder').createCallVariable('dynamic'), 
      'static': undefined });


    var variables = {};
    expect(reference.getFragment(variables)).toBe(node);
    expect(reference.getVariables(route, variables)).toEqual({});
    expect([
    'RelayFragmentReference: Variable `%s` is undefined in fragment `%s`.', 
    'static', 
    node.name]).
    toBeWarnedNTimes(1);
    expect([
    'RelayFragmentReference: Variable `%s` is undefined in fragment `%s`.', 
    'dynamic', 
    node.name]).
    toBeWarnedNTimes(1);});});
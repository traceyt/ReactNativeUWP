'use strict';












require('configureForRelayOSS');












describe('findRelayQueryLeaves',function(){var _RelayTestUtils=require('RelayTestUtils');var 
getNode=_RelayTestUtils.getNode;
var HAS_NEXT_PAGE=undefined,HAS_PREV_PAGE=undefined;

var dummyPath=undefined;

function findLeaves(
queryNode,
dataID,
path,
records,
cachedRecords,
calls)
{
var store=new (require('RelayRecordStore'))({
records:records||{},
cachedRecords:cachedRecords||{}});

return require('findRelayQueryLeaves')(
store,
cachedRecords,
queryNode,
dataID,
path,
calls);}



function encode(node){

function filter(obj){
return require('mapObject')(obj,function(value,key){
if(typeof value==='object'&&value!==null){
return filter(value);}else 
if(key==='__id__'){

return null;}else 
{
return value;}});}



return filter(JSON.parse(JSON.stringify(node)));}


beforeEach(function(){
jest.resetModuleRegistry();var _RelayConnectionInter=require('RelayConnectionInterface');

HAS_NEXT_PAGE=_RelayConnectionInter.HAS_NEXT_PAGE;HAS_PREV_PAGE=_RelayConnectionInter.HAS_PREV_PAGE;

dummyPath=require('RelayQueryPath').create(getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'dummy'}}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'FindRelayQueryLeaves',type:'Node'};}()));







jasmine.addMatchers({
toMatchPendingNodes:function(){
return {
compare:function(actual,pendingNodes){
expect(encode(actual)).toEqual(encode(pendingNodes));
return {
pass:true};}};}});});







it('returns pendingNodes when node is not in the store',function(){
var queryNode=getNode(function(){return {children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'FindRelayQueryLeavesRelayQL',type:'Node'};}());




var result=findLeaves(
queryNode,
'1055790163',
dummyPath);


var pendingItems=[{
node:queryNode,
path:dummyPath,
rangeCalls:undefined}];


expect(result.pendingNodes).toMatchPendingNodes(
{'1055790163':pendingItems});

expect(result.missingData).toBe(false);});


it('returns missingData when node is not in the cache',function(){
var queryNode=getNode(function(){return {children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'FindRelayQueryLeavesRelayQL',type:'Node'};}());




var result=findLeaves(
queryNode,
'1055790163',
dummyPath,
{},
{'1055790163':undefined});

expect(result.pendingNodes).toMatchPendingNodes({});
expect(result.missingData).toBe(true);});


it('has all required data when node is in store',function(){
var queryNode=getNode(function(){return {children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'FindRelayQueryLeavesRelayQL',type:'Node'};}());




var result=findLeaves(
queryNode,
'1055790163',
dummyPath,
{'1055790163':null},
{});


expect(result.pendingNodes).toMatchPendingNodes({});
expect(result.missingData).toBe(false);});


it('has all required data when node is in cache',function(){
var queryNode=getNode(function(){return {children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'FindRelayQueryLeavesRelayQL',type:'Node'};}());




var result=findLeaves(
queryNode,
'1055790163',
dummyPath,
{},
{'1055790163':null});


expect(result.pendingNodes).toMatchPendingNodes({});
expect(result.missingData).toBe(false);});


it('returns pendingNodes when field is not in the store',function(){
var queryNode=getNode(function(){return {children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'firstName',kind:'Field',metadata:{},type:'String'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'FindRelayQueryLeavesRelayQL',type:'Node'};}());





var records={
'1055790163':{
id:'1055790163',
__dataID__:'1055790163',
__typename:'User'}};


var result=findLeaves(
queryNode,
'1055790163',
dummyPath,
records);


expect(result.pendingNodes).toMatchPendingNodes(
{'1055790163':[{
node:queryNode.getFieldByStorageKey('firstName'),
path:dummyPath,
rangeCalls:undefined}]});


expect(result.missingData).toBe(false);});


it('returns missingData when field is not in the cache',function(){
var queryNode=getNode(function(){return {children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'firstName',kind:'Field',metadata:{},type:'String'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'FindRelayQueryLeavesRelayQL',type:'Node'};}());





var records={
'1055790163':{
id:'1055790163',
__dataID__:'1055790163',
__typename:'User'}};


var result=findLeaves(
queryNode,
'1055790163',
dummyPath,
{},
records);


expect(result.pendingNodes).toMatchPendingNodes({});
expect(result.missingData).toBe(true);});


it('has all required data when field is in store',function(){
var queryNode=getNode(function(){return {children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'firstName',kind:'Field',metadata:{},type:'String'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'FindRelayQueryLeavesRelayQL',type:'Node'};}());





var records={
'1055790163':{
id:'1055790163',
firstName:'Yuzhi',
__dataID__:'1055790163',
__typename:'User'}};


var result=findLeaves(
queryNode,
'1055790163',
dummyPath,
records);


expect(result.pendingNodes).toMatchPendingNodes({});
expect(result.missingData).toBe(false);});


it('has all required data when field is in cache',function(){
var queryNode=getNode(function(){return {children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'firstName',kind:'Field',metadata:{},type:'String'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'FindRelayQueryLeavesRelayQL',type:'Node'};}());





var records={
'1055790163':{
id:'1055790163',
firstName:'Yuzhi',
__dataID__:'1055790163',
__typename:'User'}};


var result=findLeaves(
queryNode,
'1055790163',
dummyPath,
{},
records);


expect(result.pendingNodes).toMatchPendingNodes({});
expect(result.missingData).toBe(false);});


it('returns pendingNodes when linked node is not in the store',function(){
var queryNode=getNode(function(){return {children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{children:[{fieldName:'count',kind:'Field',metadata:{},type:'Int'}],fieldName:'friends',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'FriendsConnection'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'FindRelayQueryLeavesRelayQL',type:'Node'};}());





var records={
'1055790163':{
id:'1055790163',
friends:{__dataID__:'friends_id'},
__dataID__:'1055790163',
__typename:'User'}};


var result=findLeaves(
queryNode,
'1055790163',
dummyPath,
records);

var friendsField=queryNode.getFieldByStorageKey('friends');
var countField=friendsField.getFieldByStorageKey('count');
expect(result.pendingNodes).toMatchPendingNodes({'friends_id':[{
node:countField,
path:require('RelayQueryPath').getPath(dummyPath,friendsField,'friends_id'),
rangeCalls:[]}]});

expect(result.missingData).toBe(false);});


it('returns missingData when linked node is not in the cache',function(){
var queryNode=getNode(function(){return {children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{children:[{fieldName:'count',kind:'Field',metadata:{},type:'Int'}],fieldName:'friends',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'FriendsConnection'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'FindRelayQueryLeavesRelayQL',type:'Node'};}());





var records={
'1055790163':{
id:'1055790163',
friends:{__dataID__:'friends_id'},
__dataID__:'1055790163',
__typename:'User'},

'friends_id':undefined};

var result=findLeaves(
queryNode,
'1055790163',
dummyPath,
{},
records);


expect(result.pendingNodes).toMatchPendingNodes({});
expect(result.missingData).toBe(true);});


it('has all required data when linked node is in store',function(){
var queryNode=getNode(function(){return {children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{children:[{fieldName:'count',kind:'Field',metadata:{},type:'Int'}],fieldName:'friends',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'FriendsConnection'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'FindRelayQueryLeavesRelayQL',type:'Node'};}());





var records={
'1055790163':{
id:'1055790163',
__dataID__:'1055790163',
__typename:'User',
friends:{__dataID__:'friends_id'}},

friends_id:{
__dataID__:'friends_id',
count:500}};


var result=findLeaves(
queryNode,
'1055790163',
dummyPath,
records);


expect(result.pendingNodes).toMatchPendingNodes({});
expect(result.missingData).toBe(false);});


it('has all required data when linked node is in cache',function(){
var queryNode=getNode(function(){return {children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{children:[{fieldName:'count',kind:'Field',metadata:{},type:'Int'}],fieldName:'friends',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'FriendsConnection'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'FindRelayQueryLeavesRelayQL',type:'Node'};}());





var records={
'1055790163':{
id:'1055790163',
__dataID__:'1055790163',
__typename:'User',
friends:{__dataID__:'friends_id'}},

friends_id:{
__dataID__:'friends_id',
count:500}};


var result=findLeaves(
queryNode,
'1055790163',
dummyPath,
{},
records);


expect(result.pendingNodes).toMatchPendingNodes({});
expect(result.missingData).toBe(false);});


it('returns pendingNodes when plural node is not in the store',function(){
var queryNode=getNode(function(){return {children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{children:[{fieldName:'service',kind:'Field',metadata:{},type:'String'}],fieldName:'screennames',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'Screenname'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'FindRelayQueryLeavesRelayQL',type:'Node'};}());





var records={
'1055790163':{
id:'1055790163',
__dataID__:'1055790163',
__typename:'User',
screennames:[
{__dataID__:'client:screenname1'},
{__dataID__:'client:screenname2'}]}};




var result=findLeaves(
queryNode,
'1055790163',
dummyPath,
records);


var screennamesField=queryNode.getFieldByStorageKey('screennames');
var serviceField=screennamesField.getFieldByStorageKey('service');
var path=require('RelayQueryPath').getPath(
dummyPath,
screennamesField,
'client:screenname');

var pendingItems=[{
node:serviceField,
path:path,
rangeCalls:undefined}];

expect(result.pendingNodes).toMatchPendingNodes({
'client:screenname1':pendingItems,
'client:screenname2':pendingItems});

expect(result.missingData).toBe(false);});


it('returns missingData when plural node is not in the cache',function(){
var queryNode=getNode(function(){return {children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{children:[{fieldName:'service',kind:'Field',metadata:{},type:'String'}],fieldName:'screennames',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'Screenname'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'FindRelayQueryLeavesRelayQL',type:'Node'};}());





var records={
'1055790163':{
id:'1055790163',
__dataID__:'1055790163',
__typename:'User',
screennames:[
{__dataID__:'client:screenname1'},
{__dataID__:'client:screenname2'}]},


'client:screenname1':undefined};


var result=findLeaves(
queryNode,
'1055790163',
dummyPath,
{},
records);


expect(result.pendingNodes).toMatchPendingNodes({});
expect(result.missingData).toBe(true);});


it('has all required data when plural node is in store',function(){
var queryNode=getNode(function(){return {children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{children:[{fieldName:'service',kind:'Field',metadata:{},type:'String'}],fieldName:'screennames',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'Screenname'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'FindRelayQueryLeavesRelayQL',type:'Node'};}());





var records={
'1055790163':{
id:'1055790163',
__dataID__:'1055790163',
__typename:'User',
screennames:[
{__dataID__:'client:screenname1'},
{__dataID__:'client:screenname2'}]},


'client:screenname1':{
__dataID__:'client:screenname1',
service:true},

'client:screenname2':{
__dataID__:'client:screenname2',
service:true}};



var result=findLeaves(
queryNode,
'1055790163',
dummyPath,
records);

expect(result.pendingNodes).toMatchPendingNodes({});
expect(result.missingData).toBe(false);});


it('has all required data when plural node is in cache',function(){
var queryNode=getNode(function(){return {children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{children:[{fieldName:'service',kind:'Field',metadata:{},type:'String'}],fieldName:'screennames',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'Screenname'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'FindRelayQueryLeavesRelayQL',type:'Node'};}());





var records={
'1055790163':{
id:'1055790163',
__dataID__:'1055790163',
__typename:'User',
screennames:[
{__dataID__:'client:screenname1'},
{__dataID__:'client:screenname2'}]},


'client:screenname1':{
__dataID__:'client:screenname1',
service:true},

'client:screenname2':{
__dataID__:'client:screenname2',
service:true}};



var result=findLeaves(
queryNode,
'1055790163',
dummyPath,
{},
records);


expect(result.pendingNodes).toMatchPendingNodes({});
expect(result.missingData).toBe(false);});



it('returns pendingNodes when range node is not in the store',function(){
var queryNode=getNode(function(){return {children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'10'}}],children:[{children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'User'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'FriendsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],fieldName:'friends',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'FriendsConnection'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'FindRelayQueryLeavesRelayQL',type:'Node'};}());







var records={
'1055790163':{
id:'1055790163',
__dataID__:'1055790163',
__typename:'User',
friends:{__dataID__:'friends_id'}}};



var result=findLeaves(
queryNode,
'1055790163',
dummyPath,
records);


var rangeField=queryNode.getFieldByStorageKey('friends');
var calls=rangeField.getCallsWithValues();


var pendingItems=rangeField.getChildren().map(function(node){
return {
node:node,
path:require('RelayQueryPath').getPath(dummyPath,rangeField,'friends_id'),
rangeCalls:calls};});



expect(result.pendingNodes).
toMatchPendingNodes({'friends_id':pendingItems});
expect(result.missingData).toBe(false);});


it('returns missingData when range node is not in the cache',function(){
var queryNode=getNode(function(){return {children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'10'}}],children:[{children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'User'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'FriendsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],fieldName:'friends',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'FriendsConnection'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'FindRelayQueryLeavesRelayQL',type:'Node'};}());







var records={
'1055790163':{
id:'1055790163',
__dataID__:'1055790163',
__typename:'User',
friends:{__dataID__:'friends_id'}},

'friends_id':undefined};


var result=findLeaves(
queryNode,
'1055790163',
dummyPath,
{},
records);


expect(result.pendingNodes).toMatchPendingNodes({});
expect(result.missingData).toBe(true);});


it('returns pendingNodes when range field is not in the store',function(){
var queryNode=getNode(function(){return {children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'10'}}],children:[{children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'User'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'FriendsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],fieldName:'friends',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'FriendsConnection'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'FindRelayQueryLeavesRelayQL',type:'Node'};}());







var records={
'1055790163':{
id:'1055790163',
__dataID__:'1055790163',
__typename:'User',
friends:{__dataID__:'friends_id'}},

friends_id:{
__dataID__:'friends_id'}};



var result=findLeaves(
queryNode,
'1055790163',
dummyPath,
records);


var friendField=queryNode.getFieldByStorageKey('friends');
var calls=friendField.getCallsWithValues();
var pendingItems=friendField.getChildren().map(function(node){
return {
node:node,
path:require('RelayQueryPath').getPath(dummyPath,friendField,'friends_id'),
rangeCalls:calls};});


expect(result.pendingNodes).toMatchPendingNodes({
'friends_id':pendingItems});

expect(result.missingData).toBe(false);});


it('returns missingData when range field is not in the cache',function(){
var queryNode=getNode(function(){return {children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'10'}}],children:[{children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'User'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'FriendsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],fieldName:'friends',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'FriendsConnection'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'FindRelayQueryLeavesRelayQL',type:'Node'};}());







var records={
'1055790163':{
id:'1055790163',
__dataID__:'1055790163',
__typename:'User',
friends:{__dataID__:'friends_id'}},

friends_id:{
__dataID__:'friends_id'}};



var result=findLeaves(
queryNode,
'1055790163',
dummyPath,
{},
records);


expect(result.pendingNodes).toMatchPendingNodes({});
expect(result.missingData).toBe(true);});


it('returns missingData when range has diffQuery in the store',function(){var _pageInfo;
var queryNode=getNode(function(){return {children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'10'}}],children:[{children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'User'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'FriendsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],fieldName:'friends',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'FriendsConnection'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'FindRelayQueryLeavesRelayQL',type:'Node'};}());







var records={
'1055790163':{
id:'1055790163',
__dataID__:'1055790163',
__typename:'User',
friends:{__dataID__:'friends_id'}},

friends_id:{
__dataID__:'friends_id',
__range__:new (require('GraphQLRange'))()}};


records.friends_id.__range__.retrieveRangeInfoForQuery.mockReturnValue({
requestedEdgeIDs:[],
diffCalls:[require('RelayTestUtils').createCall('first',10)],
pageInfo:(_pageInfo={},babelHelpers.defineProperty(_pageInfo,HAS_NEXT_PAGE,false),babelHelpers.defineProperty(_pageInfo,HAS_PREV_PAGE,false),_pageInfo)});

var result=findLeaves(
queryNode,
'1055790163',
dummyPath,
records);


expect(result.pendingNodes).toMatchPendingNodes({});
expect(result.missingData).toBe(true);});


it('returns missingData when range has diffQuery in the cache',function(){var _pageInfo2;
var queryNode=getNode(function(){return {children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'10'}}],children:[{children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'User'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'FriendsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],fieldName:'friends',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'FriendsConnection'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'FindRelayQueryLeavesRelayQL',type:'Node'};}());







var records={
'1055790163':{
id:'1055790163',
__dataID__:'1055790163',
__typename:'User',
friends:{__dataID__:'friends_id'}},

friends_id:{
__dataID__:'friends_id',
__range__:new (require('GraphQLRange'))()}};


records.friends_id.__range__.retrieveRangeInfoForQuery.mockReturnValue({
requestedEdgeIDs:[],
diffCalls:[require('RelayTestUtils').createCall('first',10)],
pageInfo:(_pageInfo2={},babelHelpers.defineProperty(_pageInfo2,HAS_NEXT_PAGE,false),babelHelpers.defineProperty(_pageInfo2,HAS_PREV_PAGE,false),_pageInfo2)});

var result=findLeaves(
queryNode,
'1055790163',
dummyPath,
{},
records);


expect(result.pendingNodes).toMatchPendingNodes({});
expect(result.missingData).toBe(true);});


it('returns pendingNodes when edge node is not in the store',function(){var _pageInfo3;
var queryNode=getNode(function(){return {children:[{children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'User'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'FriendsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'FindRelayQueryLeavesRelayQL',type:'FriendsConnection'};}());





var records={
friends_id:{
__dataID__:'friends_id',
__range__:new (require('GraphQLRange'))()}};



records.friends_id.__range__.retrieveRangeInfoForQuery.mockReturnValue({
requestedEdgeIDs:['edge_id'],
diffCalls:[],
pageInfo:(_pageInfo3={},babelHelpers.defineProperty(_pageInfo3,HAS_NEXT_PAGE,false),babelHelpers.defineProperty(_pageInfo3,HAS_PREV_PAGE,false),_pageInfo3)});


var rangeCalls=[require('RelayTestUtils').createCall('first',10)];
var result=findLeaves(
queryNode,
'friends_id',
dummyPath,
records,
{},
rangeCalls);


var mockRetrieveRange=
records.friends_id.__range__.retrieveRangeInfoForQuery.mock;
expect(mockRetrieveRange.calls.length).toBe(1);
expect(mockRetrieveRange.calls[0][0]).toBe(rangeCalls);

var edgeFields=queryNode.
getFieldByStorageKey('edges').
getChildren();
var pendingItems=edgeFields.map(function(node){
return {
node:node,
path:require('RelayQueryPath').getPath(dummyPath,edgeFields,'edge_id'),
rangeCalls:undefined};});


expect(result.pendingNodes).toMatchPendingNodes({'edge_id':pendingItems});
expect(result.missingData).toBe(false);});


it('returns missingData when edge node is not in the cache',function(){var _pageInfo4;
var queryNode=getNode(function(){return {children:[{children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'User'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'FriendsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'FindRelayQueryLeavesRelayQL',type:'FriendsConnection'};}());





var records={
friends_id:{
__dataID__:'friends_id',
__range__:new (require('GraphQLRange'))()},

edge_id:undefined};


records.friends_id.__range__.retrieveRangeInfoForQuery.mockReturnValue({
requestedEdgeIDs:['edge_id'],
diffCalls:[],
pageInfo:(_pageInfo4={},babelHelpers.defineProperty(_pageInfo4,HAS_NEXT_PAGE,false),babelHelpers.defineProperty(_pageInfo4,HAS_PREV_PAGE,false),_pageInfo4)});


var rangeCalls=[require('RelayTestUtils').createCall('first',10)];
var result=findLeaves(
queryNode,
'friends_id',
dummyPath,
{},
records,
rangeCalls);


var mockRetrieveRange=
records.friends_id.__range__.retrieveRangeInfoForQuery.mock;
expect(mockRetrieveRange.calls.length).toBe(1);
expect(mockRetrieveRange.calls[0][0]).toBe(rangeCalls);
expect(result.pendingNodes).toMatchPendingNodes({});
expect(result.missingData).toBe(true);});


it('has all required data when the range and edges are is in store',function(){var _pageInfo5;
var queryNode=getNode(function(){return {children:[{children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'User'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'FriendsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'FindRelayQueryLeavesRelayQL',type:'FriendsConnection'};}());





var records={
friends_id:{
__dataID__:'friends_id',
__range__:new (require('GraphQLRange'))()},

edge_id:{
__dataID__:'edge_id',
node:{__dataID__:'node_id'},
cursor:'cursor'},

node_id:{
__dataID__:'node_id',
id:'node_id,'}};



records.friends_id.__range__.retrieveRangeInfoForQuery.mockReturnValue({
requestedEdgeIDs:['edge_id'],
diffCalls:[],
pageInfo:(_pageInfo5={},babelHelpers.defineProperty(_pageInfo5,HAS_NEXT_PAGE,false),babelHelpers.defineProperty(_pageInfo5,HAS_PREV_PAGE,false),_pageInfo5)});


var rangeCalls=[require('RelayTestUtils').createCall('first',10)];
var result=findLeaves(
queryNode,
'friends_id',
dummyPath,
records,
{},
rangeCalls);


var mockRetrieveRange=
records.friends_id.__range__.retrieveRangeInfoForQuery.mock;
expect(mockRetrieveRange.calls.length).toBe(1);
expect(mockRetrieveRange.calls[0][0]).toBe(rangeCalls);
expect(result.pendingNodes).toMatchPendingNodes({});
expect(result.missingData).toBe(false);});


it('has all required data when the range and edges are is in cache',function(){var _pageInfo6;
var queryNode=getNode(function(){return {children:[{children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'User'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'FriendsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'FindRelayQueryLeavesRelayQL',type:'FriendsConnection'};}());





var records={
friends_id:{
__dataID__:'friends_id',
__range__:new (require('GraphQLRange'))()},

edge_id:{
__dataID__:'edge_id',
node:{__dataID__:'node_id'},
cursor:'cursor'},

node_id:{
__dataID__:'node_id',
id:'node_id,'}};



records.friends_id.__range__.retrieveRangeInfoForQuery.mockReturnValue({
requestedEdgeIDs:['edge_id'],
diffCalls:[],
pageInfo:(_pageInfo6={},babelHelpers.defineProperty(_pageInfo6,HAS_NEXT_PAGE,false),babelHelpers.defineProperty(_pageInfo6,HAS_PREV_PAGE,false),_pageInfo6)});


var rangeCalls=[require('RelayTestUtils').createCall('first',10)];
var result=findLeaves(
queryNode,
'friends_id',
dummyPath,
{},
records,
rangeCalls);


var mockRetrieveRange=
records.friends_id.__range__.retrieveRangeInfoForQuery.mock;
expect(mockRetrieveRange.calls.length).toBe(1);
expect(mockRetrieveRange.calls[0][0]).toBe(rangeCalls);
expect(result.pendingNodes).toMatchPendingNodes({});
expect(result.missingData).toBe(false);});


it('returns pendingNodes when root node is not in the store',function(){
var queryNode=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'1055790163'}}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'FindRelayQueryLeaves',type:'Node'};}());






var result=findLeaves(
queryNode,
'1055790163',
dummyPath);


var pendingItems=queryNode.getChildren().map(function(node){
return {
node:node,
path:dummyPath,
rangeCalls:undefined};});



expect(result.pendingNodes).toMatchPendingNodes(
{'1055790163':pendingItems});

expect(result.missingData).toBe(false);});


it('returns missingData when root node is not in the cache',function(){
var queryNode=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'1055790163'}}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'FindRelayQueryLeaves',type:'Node'};}());






var result=findLeaves(
queryNode,
'1055790163',
dummyPath,
{},
{'1055790163':undefined});


expect(result.pendingNodes).toMatchPendingNodes({});
expect(result.missingData).toBe(true);});


it('returns pendingNodes when matched fragment is not in the store',function(){
var queryNode=getNode(function(){return {children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'},{children:[{fieldName:'firstName',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'User',type:'User'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'FindRelayQueryLeavesRelayQL',type:'Node'};}());







var records={
'1055790163':{
id:'1055790163',
__dataID__:'1055790163',
__typename:'User'}};



var result=findLeaves(
queryNode,
'1055790163',
dummyPath,
records);

var userFragment=queryNode.getChildren().filter(
function(item){return item instanceof require('RelayQuery').Fragment;})[
0];
expect(result.pendingNodes).toMatchPendingNodes(
{'1055790163':[{
node:userFragment.getFieldByStorageKey('firstName'),
path:dummyPath,
rangeCalls:undefined}]});


expect(result.missingData).toBe(false);});


it('returns missingData when matched fragment is not in the cache',function(){
var queryNode=getNode(function(){return {children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'},{children:[{fieldName:'firstName',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'User',type:'User'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'FindRelayQueryLeavesRelayQL',type:'Node'};}());







var records={
'1055790163':{
id:'1055790163',
__dataID__:'1055790163',
__typename:'User'}};


var result=findLeaves(
queryNode,
'1055790163',
dummyPath,
{},
records);


expect(result.pendingNodes).toMatchPendingNodes({});
expect(result.missingData).toBe(true);});


it('has all required data in store when ignoring unmatched fragment',function(){
var queryNode=getNode(function(){return {children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'},{children:[{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'Page',type:'Page'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'FindRelayQueryLeavesRelayQL',type:'Node'};}());







var records={
'1055790163':{
id:'1055790163',
__dataID__:'1055790163',
__typename:'User'}};


var result=findLeaves(
queryNode,
'1055790163',
dummyPath,
records);


expect(result.pendingNodes).toMatchPendingNodes({});
expect(result.missingData).toBe(false);});


it('has all required data in cache when ignoring unmatched fragment',function(){
var queryNode=getNode(function(){return {children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'},{children:[{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'Page',type:'Page'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'FindRelayQueryLeavesRelayQL',type:'Node'};}());







var records={
'1055790163':{
id:'1055790163',
__dataID__:'1055790163',
__typename:'User'}};


var result=findLeaves(
queryNode,
'1055790163',
dummyPath,
{},
records);


expect(result.pendingNodes).toMatchPendingNodes({});
expect(result.missingData).toBe(false);});});
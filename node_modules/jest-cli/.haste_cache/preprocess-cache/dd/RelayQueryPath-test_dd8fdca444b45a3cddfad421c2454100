/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails oncall+relay
 */

'use strict';

require('configureForRelayOSS');

jest.mock('/Users/cpojer/Projects/relay/scripts/jest/../../node_modules/fbjs/lib/warning');







describe('RelayQueryPath', function () {var 
  getNode = require('RelayTestUtils').getNode;var getVerbatimNode = require('RelayTestUtils').getVerbatimNode;
  var store = undefined;
  var writer = undefined;

  beforeEach(function () {
    jest.resetModuleRegistry();

    var records = {};
    store = new (require('RelayRecordStore'))({ records: records });
    writer = new (require('RelayRecordWriter'))(records);

    jasmine.addMatchers(require('RelayTestUtils').matchers);});


  it('creates root paths', function () {
    var query = getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '123' } }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'RelayQueryPath', type: 'Node' };})());






    var fragment = (function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isRequisite: true }, type: 'String' }, { fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }], id: 'JW6Z7W1c6Riz:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'RelayQueryPathRelayQL', type: 'Node' };})();







    var path = new (require('RelayQueryPath'))(query);
    expect(path.getName()).toBe(query.getName());

    writer.putRecord('123', 'User');
    var pathQuery = path.getQuery(store, getNode(fragment));
    expect(pathQuery).toEqualQueryRoot(getVerbatimNode((function (RQL_0) {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '123' } }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, { children: [].concat.apply([], [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: {}, type: 'String' }, require('Relay').QL.__frag(RQL_0)]), id: 'gt7lOy5bX3Mx:0', kind: 'Fragment', metadata: {}, name: 'User', type: 'User' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'RelayQueryPath', type: 'Node' };})(





    fragment)));});






  it('creates root paths for argument-less root calls with IDs', function () {
    var query = getNode((function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }], fieldName: 'me', kind: 'Query', metadata: {}, name: 'RelayQueryPath', type: 'User' };})());






    var fragment = (function () {return { children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'c1KS7usxWtnt:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'RelayQueryPathRelayQL', type: 'Actor' };})();




    var path = new (require('RelayQueryPath'))(query);
    var pathQuery = path.getQuery(store, getNode(fragment));
    expect(pathQuery).toEqualQueryRoot(getNode((function (RQL_0) {return { children: [].concat.apply([], [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'me', kind: 'Query', metadata: {}, name: 'RelayQueryPath', type: 'User' };})(



    fragment)));



    expect(path.getName()).toBe(query.getName());});


  it('creates root paths for argument-less root calls without IDs', function () {
    var query = getNode((function () {return { children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'actor', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true }, type: 'Actor' }], fieldName: 'viewer', kind: 'Query', metadata: {}, name: 'RelayQueryPath', type: 'Viewer' };})());








    var fragment = (function () {return { children: [{ children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'actor', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true }, type: 'Actor' }], id: 'ednP+S/RmIzo:0', kind: 'Fragment', metadata: {}, name: 'RelayQueryPathRelayQL', type: 'Viewer' };})();






    var path = new (require('RelayQueryPath'))(query);
    var pathQuery = path.getQuery(store, getNode(fragment));
    expect(pathQuery).toEqualQueryRoot(getNode((function (RQL_0) {return { children: [].concat.apply([], [require('Relay').QL.__frag(RQL_0)]), fieldName: 'viewer', kind: 'Query', metadata: {}, name: 'RelayQueryPath', type: 'Viewer' };})(


    fragment)));



    expect(path.getName()).toBe(query.getName());});


  it('creates paths to non-refetchable fields', function () {
    var query = getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '123' } }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'RelayQueryPath', type: 'Node' };})());






    var address = getNode((function () {return { children: [{ children: [{ fieldName: 'city', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'address', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'StreetAddress' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: '/rpdAMrEc3u/:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'RelayQueryPathRelayQL', type: 'Actor' };})()).





    getFieldByStorageKey('address');
    var city = getNode((function () {return { children: [{ fieldName: 'city', kind: 'Field', metadata: {}, type: 'String' }], id: 'BYu5kR+X/eeH:0', kind: 'Fragment', metadata: {}, name: 'RelayQueryPathRelayQL', type: 'StreetAddress' };})()).



    getFieldByStorageKey('city');

    // address is not refetchable, has client ID
    writer.putRecord('123', 'User');
    var root = new (require('RelayQueryPath'))(query);
    var path = root.getPath(address, 'client:1');
    var pathQuery = path.getQuery(store, city);
    expect(pathQuery).toEqualQueryRoot(getVerbatimNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '123' } }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: {}, type: 'String' }, { children: [{ fieldName: 'city', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'address', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'StreetAddress' }], id: '0aLMnb6JTx5g:0', kind: 'Fragment', metadata: {}, name: 'User', type: 'User' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'RelayQueryPath', type: 'Node' };})()));












    expect(path.getName()).toBe(query.getName());
    expect(pathQuery.getName()).toBe(query.getName());
    expect(pathQuery.isAbstract()).toBe(true);});


  it('creates roots for refetchable fields', function () {
    var query = getNode((function () {return { children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'actor', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true }, type: 'Actor' }], fieldName: 'viewer', kind: 'Query', metadata: {}, name: 'RelayQueryPath', type: 'Viewer' };})());








    var actor = query.getFieldByStorageKey('actor');
    var fragment = (function () {return { children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'O1WyR+4ysZVp:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'RelayQueryPathRelayQL', type: 'Node' };})();





    // actor has an ID and is refetchable
    writer.putRecord('123', 'User');
    var root = new (require('RelayQueryPath'))(query);
    var path = root.getPath(actor, '123');
    var pathQuery = path.getQuery(store, getNode(fragment));
    expect(pathQuery).toEqualQueryRoot(getVerbatimNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '123' } }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: {}, type: 'String' }, { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isRequisite: true }, type: 'String' }, { fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }], id: 'shH+hjlMIHHm:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'Node', type: 'Node' }], id: 'shH+hjlMIHHm:1', kind: 'Fragment', metadata: {}, name: 'User', type: 'User' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'RelayQueryPath', type: 'Node' };})()));














    expect(path.getName()).toBe(query.getName());});


  it('warns if the root record\'s type is unknown', function () {
    var query = getNode((function () {return { children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'actor', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true }, type: 'Actor' }], fieldName: 'viewer', kind: 'Query', metadata: {}, name: 'RelayQueryPath', type: 'Viewer' };})());








    var actor = query.getFieldByStorageKey('actor');
    var fragment = (function () {return { children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: '0ojXJM8oVm7r:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'RelayQueryPathRelayQL', type: 'Node' };})();





    // actor has an ID and is refetchable, but the type of actor is unknown.
    var root = new (require('RelayQueryPath'))(query);
    var path = root.getPath(actor, '123');
    var pathQuery = path.getQuery(store, getNode(fragment));
    expect(pathQuery).toEqualQueryRoot(getVerbatimNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '123' } }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isRequisite: true }, type: 'String' }, { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isRequisite: true }, type: 'String' }, { fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }], id: 'jKnDSQjXiIt2:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'Node', type: 'Node' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'RelayQueryPath', type: 'Node' };})()));













    expect(path.getName()).toBe(query.getName());
    expect([
    'RelayQueryPath: No typename found for %s record `%s`. Generating a ' + 
    'possibly invalid query.', 
    'unknown', 
    '123']).
    toBeWarnedNTimes(1);});});
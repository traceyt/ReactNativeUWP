'use strict';












require('configureForRelayOSS');









describe('splitDeferredRelayQueries()',function(){var _RelayTestUtils=require('RelayTestUtils');var 

defer=_RelayTestUtils.defer;var getNode=_RelayTestUtils.getNode;var getRefNode=_RelayTestUtils.getRefNode;


function filterGeneratedRootFields(node){
var children=node.getChildren().filter(function(child){return !(
child instanceof require('RelayQuery').Field&&
child.isGenerated());});

return node.clone(children);}


beforeEach(function(){

jest.resetModuleRegistry();

jasmine.addMatchers(require('RelayTestUtils').matchers);});


it('returns the original query when there are no fragments',function(){
var node=function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'SplitDeferredRelayQueries',type:'Node'};}();
var queryNode=getNode(node);var _splitDeferredRelayQu=
require('splitDeferredRelayQueries')(queryNode);var required=_splitDeferredRelayQu.required;var deferred=_splitDeferredRelayQu.deferred;

expect(required).toBe(queryNode);
expect(deferred).toEqual([]);});


it('returns the original query when there are no deferred fragments',function(){
var fragment=function(){return {children:[{children:[{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'hometown',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Page'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'SplitDeferredRelayQueriesRelayQL',type:'User'};}();
var node=function(RQL_0){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'},require('Relay').QL.__frag(RQL_0)]),fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'SplitDeferredRelayQueries',type:'Node'};}(




fragment);



var queryNode=getNode(node);var _splitDeferredRelayQu2=
require('splitDeferredRelayQueries')(queryNode);var required=_splitDeferredRelayQu2.required;var deferred=_splitDeferredRelayQu2.deferred;

expect(required).toBe(queryNode);
expect(deferred).toEqual([]);});


it('splits a deferred fragment on the viewer root',function(){
var fragment=function(){return {children:[{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'10'}}],children:[{children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'actorCount',kind:'Field',metadata:{},type:'Int'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,isAbstract:true,isRequisite:true},type:'FeedUnit'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'NewsFeedEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],fieldName:'newsFeed',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'NewsFeedConnection'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'SplitDeferredRelayQueriesRelayQL',type:'Viewer'};}();











var node=function(RQL_0){return {children:[].concat.apply([],[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'actor',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true},type:'Actor'},require('Relay').QL.__frag(RQL_0)]),fieldName:'viewer',kind:'Query',metadata:{},name:'SplitDeferredRelayQueries',type:'Viewer'};}(





defer(fragment));



var queryNode=getNode(node);var _splitDeferredRelayQu3=
require('splitDeferredRelayQueries')(queryNode);var required=_splitDeferredRelayQu3.required;var deferred=_splitDeferredRelayQu3.deferred;


expect(required.getName()).toBe(queryNode.getName());
expect(required).toEqualQueryRoot(getNode(function(){return {children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'actor',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true},type:'Actor'}],fieldName:'viewer',kind:'Query',metadata:{},name:'SplitDeferredRelayQueries',type:'Viewer'};}()));
expect(required.getID()).toBe('q3');


expect(deferred.length).toBe(1);
expect(deferred[0].required.getName()).toBe(queryNode.getName());
expect(deferred[0].required).toEqualQueryRoot(getNode(function(RQL_0){return {children:[].concat.apply([],[require('Relay').QL.__frag(RQL_0)]),fieldName:'viewer',kind:'Query',metadata:{},name:'SplitDeferredRelayQueries',type:'Viewer'};}(


fragment)));



expect(deferred[0].required.getID()).toBe('q2');
expect(deferred[0].required.isDeferred()).toBe(true);


expect(deferred[0].deferred).toEqual([]);});


it('splits a nested feed on the viewer root',function(){
var nestedFragment=function(){return {children:[{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'10'}}],children:[{children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'actorCount',kind:'Field',metadata:{},type:'Int'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,isAbstract:true,isRequisite:true},type:'FeedUnit'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'NewsFeedEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],fieldName:'newsFeed',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'NewsFeedConnection'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'SplitDeferredRelayQueriesRelayQL',type:'Viewer'};}();











var fragment=function(RQL_0){return {children:[].concat.apply([],[{children:[{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'actor',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true},type:'Actor'},require('Relay').QL.__frag(RQL_0)]),id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'SplitDeferredRelayQueriesRelayQL',type:'Viewer'};}(




defer(nestedFragment));


var node=function(RQL_0){return {children:[].concat.apply([],[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'actor',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true},type:'Actor'},require('Relay').QL.__frag(RQL_0)]),fieldName:'viewer',kind:'Query',metadata:{},name:'SplitDeferredRelayQueries',type:'Viewer'};}(





fragment);



var queryNode=getNode(node);var _splitDeferredRelayQu4=
require('splitDeferredRelayQueries')(queryNode);var required=_splitDeferredRelayQu4.required;var deferred=_splitDeferredRelayQu4.deferred;


expect(required.getName()).toBe(queryNode.getName());
expect(required).toEqualQueryRoot(getNode(function(RQL_0){return {children:[].concat.apply([],[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'actor',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true},type:'Actor'},require('Relay').QL.__frag(RQL_0)]),fieldName:'viewer',kind:'Query',metadata:{},name:'SplitDeferredRelayQueries',type:'Viewer'};}(function(){return {children:[{children:[{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'actor',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true},type:'Actor'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'SplitDeferredRelayQueriesRelayQL',type:'Viewer'};}())));

















expect(deferred.length).toBe(1);
expect(deferred[0].required.getName()).toBe(queryNode.getName());
expect(deferred[0].required).toEqualQueryRoot(getNode(function(RQL_0){return {children:[].concat.apply([],[require('Relay').QL.__frag(RQL_0)]),fieldName:'viewer',kind:'Query',metadata:{},name:'SplitDeferredRelayQueries',type:'Viewer'};}(


nestedFragment)));



expect(deferred[0].required.isDeferred()).toBe(true);


expect(deferred[0].deferred).toEqual([]);});


it('splits nested deferred fragments',function(){
var nestedFragment=function(){return {children:[{children:[{fieldName:'text',kind:'Field',metadata:{},type:'String'}],fieldName:'message',kind:'Field',metadata:{canHaveSubselections:true},type:'Text'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'SplitDeferredRelayQueriesRelayQL',type:'NonNodeStory'};}();
var fragment=function(RQL_0){return {children:[{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'10'}}],children:[{children:[{children:[].concat.apply([],[{fieldName:'tracking',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'},require('Relay').QL.__frag(RQL_0)]),fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,isAbstract:true,isRequisite:true},type:'FeedUnit'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'NewsFeedEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],fieldName:'newsFeed',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'NewsFeedConnection'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'SplitDeferredRelayQueriesRelayQL',type:'Viewer'};}(





defer(nestedFragment));





var node=function(RQL_0){return {children:[].concat.apply([],[{children:[{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'actor',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true},type:'Actor'},require('Relay').QL.__frag(RQL_0)]),fieldName:'viewer',kind:'Query',metadata:{},name:'SplitDeferredRelayQueries',type:'Viewer'};}(





defer(fragment));



var queryNode=getNode(node);var _splitDeferredRelayQu5=
require('splitDeferredRelayQueries')(queryNode);var required=_splitDeferredRelayQu5.required;var deferred=_splitDeferredRelayQu5.deferred;


expect(required.getName()).toBe(queryNode.getName());
expect(required).toEqualQueryRoot(getNode(function(){return {children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'actor',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true},type:'Actor'}],fieldName:'viewer',kind:'Query',metadata:{},name:'SplitDeferredRelayQueries',type:'Viewer'};}()));




expect(required.getID()).toBe('q5');


expect(deferred.length).toBe(1);
expect(deferred[0].required.getName()).toBe(queryNode.getName());
expect(deferred[0].required).toEqualQueryRoot(getNode(function(RQL_0){return {children:[].concat.apply([],[require('Relay').QL.__frag(RQL_0)]),fieldName:'viewer',kind:'Query',metadata:{},name:'SplitDeferredRelayQueries',type:'Viewer'};}(function(){return {children:[{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'10'}}],children:[{children:[{fieldName:'cursor',kind:'Field',metadata:{isRequisite:true},type:'String'},{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'tracking',kind:'Field',metadata:{},type:'String'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,isAbstract:true,isRequisite:true},type:'FeedUnit'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'NewsFeedEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isRequisite:true},type:'PageInfo'}],fieldName:'newsFeed',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'NewsFeedConnection'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'SplitDeferredRelayQueriesRelayQL',type:'Viewer'};}())));






















expect(deferred[0].required.getID()).toBe('q4');
expect(deferred[0].required.isDeferred()).toBe(true);


expect(deferred[0].deferred.length).toBe(1);
expect(deferred[0].deferred[0].required.getName()).toBe(
queryNode.getName());






expect(require('flattenRelayQuery')(deferred[0].deferred[0].required)).
toEqualQueryRoot(require('flattenRelayQuery')(getNode(function(RQL_0){return {children:[{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'10'}}],children:[{children:[{fieldName:'cursor',kind:'Field',metadata:{isRequisite:true},type:'String'},{children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'},require('Relay').QL.__frag(RQL_0)]),fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,isAbstract:true,isRequisite:true},type:'FeedUnit'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'NewsFeedEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isRequisite:true},type:'PageInfo'}],fieldName:'newsFeed',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'NewsFeedConnection'}],fieldName:'viewer',kind:'Query',metadata:{},name:'SplitDeferredRelayQueries',type:'Viewer'};}(






nestedFragment))));











expect(deferred[0].deferred[0].required.getID()).toBe('q2');
expect(deferred[0].deferred[0].required.isDeferred()).toBe(true);


expect(deferred[0].deferred[0].deferred).toEqual([]);});


it('splits deferred fragments using ref queries',function(){
var fragment=function(){return {children:[{children:[{fieldName:'uri',kind:'Field',metadata:{},type:'String'}],fieldName:'profilePicture',kind:'Field',metadata:{canHaveSubselections:true},type:'Image'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'SplitDeferredRelayQueriesRelayQL',type:'Page'};}();
var node=function(RQL_0){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'name',kind:'Field',metadata:{},type:'String'},{children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},require('Relay').QL.__frag(RQL_0)]),fieldName:'hometown',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Page'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'SplitDeferredRelayQueries',type:'Node'};}(





defer(fragment));




var queryNode=getNode(node);var _splitDeferredRelayQu6=
require('splitDeferredRelayQueries')(queryNode);var required=_splitDeferredRelayQu6.required;var deferred=_splitDeferredRelayQu6.deferred;


expect(required.getName()).toBe(queryNode.getName());
expect(required).toEqualQueryRoot(
getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'hometown',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Page'},{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'SplitDeferredRelayQueries',type:'Node'};}()));

expect(required.getID()).toBe('q1');
expect(
required.
getFieldByStorageKey('hometown').
getFieldByStorageKey('id').
isRefQueryDependency()).
toBe(true);


expect(deferred.length).toBe(1);
expect(deferred[0].required.getName()).toBe(queryNode.getName());
expect(deferred[0].required).toEqualQueryRoot(
filterGeneratedRootFields(getRefNode(function(RQL_0){return {calls:[{kind:'Call',metadata:{type:'[ID!]'},name:'ids',value:{kind:'CallVariable',callVariableName:'ref_q1'}}],children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'},require('Relay').QL.__frag(RQL_0)]),fieldName:'nodes',kind:'Query',metadata:{isPlural:true,isAbstract:true,identifyingArgName:'ids',identifyingArgType:'[ID!]'},name:'SplitDeferredRelayQueries',type:'Node'};}(



fragment),



{path:'$.*.hometown.id'})));


expect(deferred[0].required.getID()).toBe('q2');
expect(deferred[0].required.isDeferred()).toBe(true);


expect(deferred[0].deferred).toEqual([]);});


it('splits a nested deferred fragments as a ref queries',function(){
var nestedFragment=function(){return {children:[{children:[{fieldName:'uri',kind:'Field',metadata:{},type:'String'}],fieldName:'profilePicture',kind:'Field',metadata:{canHaveSubselections:true},type:'Image'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'SplitDeferredRelayQueriesRelayQL',type:'Page'};}();
var fragment=function(RQL_0){return {children:[{children:[].concat.apply([],[{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},require('Relay').QL.__frag(RQL_0)]),fieldName:'hometown',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Page'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'SplitDeferredRelayQueriesRelayQL',type:'User'};}(



defer(nestedFragment));



var node=function(RQL_0){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'},require('Relay').QL.__frag(RQL_0)]),fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'SplitDeferredRelayQueries',type:'Node'};}(




defer(fragment));



var queryNode=getNode(node);var _splitDeferredRelayQu7=
require('splitDeferredRelayQueries')(queryNode);var required=_splitDeferredRelayQu7.required;var deferred=_splitDeferredRelayQu7.deferred;


expect(required.getName()).toBe(queryNode.getName());
expect(required).toEqualQueryRoot(getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'SplitDeferredRelayQueries',type:'Node'};}()));
expect(required.getID()).toBe('q3');


expect(deferred.length).toBe(1);
expect(deferred[0].required.getName()).toBe(queryNode.getName());
expect(deferred[0].required).toEqualQueryRoot(getNode(function(RQL_0){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'},require('Relay').QL.__frag(RQL_0)]),fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'SplitDeferredRelayQueries',type:'Node'};}(function(){return {children:[{children:[{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'hometown',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Page'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'SplitDeferredRelayQueriesRelayQL',type:'User'};}())));







expect(deferred[0].required.getID()).toBe('q2');
expect(deferred[0].required.isDeferred()).toBe(true);
expect(
deferred[0].
required.
getChildren()[0].
getChildren()[0].
getChildren()[0].
isRefQueryDependency()).
toBe(true);


expect(deferred[0].deferred.length).toBe(1);
expect(deferred[0].deferred[0].required.getName()).toBe(
queryNode.getName());

expect(deferred[0].deferred[0].required).toEqualQueryRoot(
filterGeneratedRootFields(getRefNode(function(RQL_0){return {calls:[{kind:'Call',metadata:{type:'[ID!]'},name:'ids',value:{kind:'CallVariable',callVariableName:'ref_q2'}}],children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'},require('Relay').QL.__frag(RQL_0)]),fieldName:'nodes',kind:'Query',metadata:{isPlural:true,isAbstract:true,identifyingArgName:'ids',identifyingArgType:'[ID!]'},name:'SplitDeferredRelayQueries',type:'Node'};}(



nestedFragment),



{path:'$.*.hometown.id'})));


expect(deferred[0].deferred[0].required.getID()).toBe('q4');
expect(deferred[0].deferred[0].required.isDeferred()).toBe(true);


expect(deferred[0].deferred[0].deferred).toEqual([]);});


it('splits a deferred fragment nested inside a ref query',function(){

var nestedFragment=function(){return {children:[{children:[{fieldName:'city',kind:'Field',metadata:{},type:'String'}],fieldName:'address',kind:'Field',metadata:{canHaveSubselections:true},type:'StreetAddress'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'SplitDeferredRelayQueriesRelayQL',type:'Page'};}();
var fragment=function(RQL_0){return {children:[].concat.apply([],[{children:[{fieldName:'uri',kind:'Field',metadata:{},type:'String'}],fieldName:'profilePicture',kind:'Field',metadata:{canHaveSubselections:true},type:'Image'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},require('Relay').QL.__frag(RQL_0)]),id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'SplitDeferredRelayQueriesRelayQL',type:'Page'};}(




defer(nestedFragment));


var node=function(RQL_0){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'name',kind:'Field',metadata:{},type:'String'},{children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},require('Relay').QL.__frag(RQL_0)]),fieldName:'hometown',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Page'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'SplitDeferredRelayQueries',type:'Node'};}(





defer(fragment));




var queryNode=getNode(node);var _splitDeferredRelayQu8=
require('splitDeferredRelayQueries')(queryNode);var required=_splitDeferredRelayQu8.required;var deferred=_splitDeferredRelayQu8.deferred;


expect(required.getName()).toBe(queryNode.getName());
expect(required).toEqualQueryRoot(
getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'hometown',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Page'},{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'SplitDeferredRelayQueries',type:'Node'};}()));

expect(
required.
getFieldByStorageKey('hometown').
getFieldByStorageKey('id').
isRefQueryDependency()).
toBe(true);
expect(required.getID()).toBe('q1');


expect(deferred.length).toBe(1);
expect(deferred[0].required.getName()).toBe(queryNode.getName());
expect(deferred[0].required).toEqualQueryRoot(
filterGeneratedRootFields(getRefNode(function(RQL_0){return {calls:[{kind:'Call',metadata:{type:'[ID!]'},name:'ids',value:{kind:'CallVariable',callVariableName:'ref_q1'}}],children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'},require('Relay').QL.__frag(RQL_0)]),fieldName:'nodes',kind:'Query',metadata:{isPlural:true,isAbstract:true,identifyingArgName:'ids',identifyingArgType:'[ID!]'},name:'SplitDeferredRelayQueries',type:'Node'};}(function(){return {children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{children:[{fieldName:'uri',kind:'Field',metadata:{},type:'String'}],fieldName:'profilePicture',kind:'Field',metadata:{canHaveSubselections:true},type:'Image'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'SplitDeferredRelayQueriesRelayQL',type:'Page'};}()),







{path:'$.*.hometown.id'})));


expect(deferred[0].required.getID()).toBe('q2');
expect(deferred[0].required.isDeferred()).toBe(true);


expect(deferred[0].deferred.length).toBe(1);
expect(deferred[0].deferred[0].required.getName()).toBe(
queryNode.getName());

expect(deferred[0].deferred[0].required).toEqualQueryRoot(
filterGeneratedRootFields(getRefNode(function(RQL_0){return {calls:[{kind:'Call',metadata:{type:'[ID!]'},name:'ids',value:{kind:'CallVariable',callVariableName:'ref_q2'}}],children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'},require('Relay').QL.__frag(RQL_0)]),fieldName:'nodes',kind:'Query',metadata:{isPlural:true,isAbstract:true,identifyingArgName:'ids',identifyingArgType:'[ID!]'},name:'SplitDeferredRelayQueries',type:'Node'};}(



nestedFragment),



{path:'$.*.hometown.id'})));


expect(deferred[0].deferred[0].required.getID()).toBe('q3');
expect(deferred[0].deferred[0].required.isDeferred()).toBe(true);


expect(deferred[0].deferred[0].deferred).toEqual([]);});


it('drops the required portion if it is empty',function(){
var fragment=function(){return {children:[{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'10'}}],children:[{children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'actorCount',kind:'Field',metadata:{},type:'Int'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,isAbstract:true,isRequisite:true},type:'FeedUnit'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'NewsFeedEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],fieldName:'newsFeed',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'NewsFeedConnection'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'SplitDeferredRelayQueriesRelayQL',type:'Viewer'};}();











var node=function(RQL_0){return {children:[].concat.apply([],[require('Relay').QL.__frag(RQL_0)]),fieldName:'viewer',kind:'Query',metadata:{},name:'SplitDeferredRelayQueries',type:'Viewer'};}(


defer(fragment));



var queryNode=getNode(node);var _splitDeferredRelayQu9=
require('splitDeferredRelayQueries')(queryNode);var required=_splitDeferredRelayQu9.required;var deferred=_splitDeferredRelayQu9.deferred;


expect(required).toBe(null);


expect(deferred.length).toBe(1);
expect(deferred[0].required.getName()).toBe(queryNode.getName());
expect(deferred[0].required).toEqualQueryRoot(getNode(function(RQL_0){return {children:[].concat.apply([],[require('Relay').QL.__frag(RQL_0)]),fieldName:'viewer',kind:'Query',metadata:{},name:'SplitDeferredRelayQueries',type:'Viewer'};}(


fragment)));



expect(deferred[0].required.isDeferred()).toBe(true);


expect(deferred[0].deferred).toEqual([]);});


it('handles a nested defer with no required part',function(){
var nestedFragment=function(){return {children:[{fieldName:'primaryEmail',kind:'Field',metadata:{},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'SplitDeferredRelayQueriesRelayQL',type:'Viewer'};}();
var fragment=function(RQL_0){return {children:[].concat.apply([],[require('Relay').QL.__frag(RQL_0)]),id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'SplitDeferredRelayQueriesRelayQL',type:'Viewer'};}(

defer(nestedFragment));


var node=function(RQL_0){return {children:[].concat.apply([],[{fieldName:'isFbEmployee',kind:'Field',metadata:{},type:'Boolean'},require('Relay').QL.__frag(RQL_0)]),fieldName:'viewer',kind:'Query',metadata:{},name:'SplitDeferredRelayQueries',type:'Viewer'};}(



defer(fragment));



var queryNode=getNode(node);var _splitDeferredRelayQu10=
require('splitDeferredRelayQueries')(queryNode);var required=_splitDeferredRelayQu10.required;var deferred=_splitDeferredRelayQu10.deferred;


expect(required.getName()).toBe(queryNode.getName());
expect(required).toEqualQueryRoot(getNode(function(){return {children:[{fieldName:'isFbEmployee',kind:'Field',metadata:{},type:'Boolean'}],fieldName:'viewer',kind:'Query',metadata:{},name:'SplitDeferredRelayQueries',type:'Viewer'};}()));






expect(deferred.length).toBe(1);
expect(deferred[0].required).toBe(null);


expect(deferred[0].deferred.length).toBe(1);
expect(deferred[0].deferred[0].required.getName()).toBe(
queryNode.getName());

expect(deferred[0].deferred[0].required).toEqualQueryRoot(getNode(function(RQL_0){return {children:[].concat.apply([],[require('Relay').QL.__frag(RQL_0)]),fieldName:'viewer',kind:'Query',metadata:{},name:'SplitDeferredRelayQueries',type:'Viewer'};}(


nestedFragment)));



expect(deferred[0].deferred[0].required.isDeferred()).toBe(true);


expect(deferred[0].deferred[0].deferred).toEqual([]);});


it('handles a nested ref query defer with no required part',function(){
var nestedFragment=function(){return {children:[{children:[{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'hometown',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Page'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'SplitDeferredRelayQueriesRelayQL',type:'Actor'};}();
var fragment=function(RQL_0){return {children:[].concat.apply([],[require('Relay').QL.__frag(RQL_0)]),id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'SplitDeferredRelayQueriesRelayQL',type:'Viewer'};}(

defer(nestedFragment));


var node=function(RQL_0){return {children:[{children:[].concat.apply([],[{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'},require('Relay').QL.__frag(RQL_0)]),fieldName:'actor',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true},type:'Actor'}],fieldName:'viewer',kind:'Query',metadata:{},name:'SplitDeferredRelayQueries',type:'Viewer'};}(




defer(fragment));




var queryNode=getNode(node);var _splitDeferredRelayQu11=
require('splitDeferredRelayQueries')(queryNode);var required=_splitDeferredRelayQu11.required;var deferred=_splitDeferredRelayQu11.deferred;


expect(required.getName()).toBe(queryNode.getName());
expect(required).toEqualQueryRoot(getNode(function(){return {children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'actor',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true},type:'Actor'}],fieldName:'viewer',kind:'Query',metadata:{},name:'SplitDeferredRelayQueries',type:'Viewer'};}()));




expect(required.getID()).toBe('q1');
expect(
required.
getFieldByStorageKey('actor').
getFieldByStorageKey('id').
isRefQueryDependency()).
toBe(true);


expect(deferred.length).toBe(1);
expect(deferred[0].required).toBe(null);


expect(deferred[0].deferred.length).toBe(1);
expect(deferred[0].deferred[0].required.getName()).toBe(
queryNode.getName());

expect(deferred[0].deferred[0].required).toEqualQueryRoot(
filterGeneratedRootFields(getRefNode(function(RQL_0){return {calls:[{kind:'Call',metadata:{type:'[ID!]'},name:'ids',value:{kind:'CallVariable',callVariableName:'ref_q1'}}],children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'},require('Relay').QL.__frag(RQL_0)]),fieldName:'nodes',kind:'Query',metadata:{isPlural:true,isAbstract:true,identifyingArgName:'ids',identifyingArgType:'[ID!]'},name:'SplitDeferredRelayQueries',type:'Node'};}(



nestedFragment),



{path:'$.*.actor.id'})));


expect(deferred[0].deferred[0].required.getID()).toBe('q2');
expect(deferred[0].deferred[0].required.isDeferred()).toBe(true);


expect(deferred[0].deferred[0].deferred).toEqual([]);});


it('handles paths with plural fields',function(){
var fragment=function(){return {children:[{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'SplitDeferredRelayQueriesRelayQL',type:'Actor'};}();
var node=function(RQL_0){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'123'}}],children:[{children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'},require('Relay').QL.__frag(RQL_0)]),fieldName:'actors',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true,isPlural:true},type:'Actor'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'SplitDeferredRelayQueries',type:'Node'};}(




defer(fragment));




var queryNode=getNode(node);var _splitDeferredRelayQu12=
require('splitDeferredRelayQueries')(queryNode);var required=_splitDeferredRelayQu12.required;var deferred=_splitDeferredRelayQu12.deferred;


expect(required.getName()).toBe(queryNode.getName());
expect(required).toEqualQueryRoot(getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'123'}}],children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'actors',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true,isPlural:true},type:'Actor'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'SplitDeferredRelayQueries',type:'Node'};}()));








expect(required.getID()).toBe('q1');


expect(deferred.length).toBe(1);
expect(deferred[0].required.getName()).toBe(queryNode.getName());
expect(deferred[0].required).toEqualQueryRoot(filterGeneratedRootFields(
getRefNode(function(RQL_0){return {calls:[{kind:'Call',metadata:{type:'[ID!]'},name:'ids',value:{kind:'CallVariable',callVariableName:'ref_q1'}}],children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'},require('Relay').QL.__frag(RQL_0)]),fieldName:'nodes',kind:'Query',metadata:{isPlural:true,isAbstract:true,identifyingArgName:'ids',identifyingArgType:'[ID!]'},name:'SplitDeferredRelayQueries',type:'Node'};}(



fragment),



{path:'$.*.actors.*.id'})));


expect(deferred[0].required.getID()).toBe('q2');
expect(deferred[0].required.isDeferred()).toBe(true);


expect(deferred[0].deferred).toEqual([]);});


it('works with nested node ancestors',function(){
var fragment=function(){return {children:[{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'SplitDeferredRelayQueriesRelayQL',type:'Node'};}();
var node=function(RQL_0){return {children:[{children:[{children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},require('Relay').QL.__frag(RQL_0)]),fieldName:'hometown',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Page'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'actor',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true},type:'Actor'}],fieldName:'viewer',kind:'Query',metadata:{},name:'SplitDeferredRelayQueries',type:'Viewer'};}(




defer(fragment));






var queryNode=getNode(node);var _splitDeferredRelayQu13=
require('splitDeferredRelayQueries')(queryNode);var required=_splitDeferredRelayQu13.required;var deferred=_splitDeferredRelayQu13.deferred;


expect(required.getName()).toBe(queryNode.getName());
expect(required).toEqualQueryRoot(getNode(function(){return {children:[{children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'hometown',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Page'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'actor',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true},type:'Actor'}],fieldName:'viewer',kind:'Query',metadata:{},name:'SplitDeferredRelayQueries',type:'Viewer'};}()));










expect(required.getID()).toBe('q1');


expect(deferred.length).toBe(1);
expect(deferred[0].required.getName()).toBe(queryNode.getName());
expect(deferred[0].required).toEqualQueryRoot(
filterGeneratedRootFields(getRefNode(function(RQL_0){return {calls:[{kind:'Call',metadata:{type:'[ID!]'},name:'ids',value:{kind:'CallVariable',callVariableName:'ref_q1'}}],children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'},require('Relay').QL.__frag(RQL_0)]),fieldName:'nodes',kind:'Query',metadata:{isPlural:true,isAbstract:true,identifyingArgName:'ids',identifyingArgType:'[ID!]'},name:'SplitDeferredRelayQueries',type:'Node'};}(



fragment),



{path:'$.*.actor.hometown.id'})));


expect(deferred[0].required.getID()).toBe('q2');
expect(deferred[0].required.isDeferred()).toBe(true);


expect(deferred[0].deferred).toEqual([]);});


it('uses the auto-generated alias in ref query paths',function(){
var fragment=function(){return {children:[{fieldName:'firstName',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'SplitDeferredRelayQueriesRelayQL',type:'User'};}();
var node=function(RQL_0){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'5'}}],children:[{children:[{children:[].concat.apply([],[{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},require('Relay').QL.__frag(RQL_0)]),fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'User'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'FriendsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],fieldName:'friends',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'FriendsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'SplitDeferredRelayQueries',type:'Node'};}(






defer(fragment));







var queryNode=getNode(node);var _splitDeferredRelayQu14=
require('splitDeferredRelayQueries')(queryNode);var required=_splitDeferredRelayQu14.required;var deferred=_splitDeferredRelayQu14.deferred;


expect(required.getName()).toBe(queryNode.getName());
expect(required).toEqualQueryRoot(getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'5'}}],children:[{children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'name',kind:'Field',metadata:{},type:'String'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'User'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'FriendsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],fieldName:'friends',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'FriendsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'SplitDeferredRelayQueries',type:'Node'};}()));













expect(required.getID()).toBe('q1');


var alias=require('generateRQLFieldAlias')('friends.first(5)');
expect(deferred.length).toBe(1);
expect(deferred[0].required.getName()).toBe(
queryNode.getName());

expect(deferred[0].required).toEqualQueryRoot(filterGeneratedRootFields(
getRefNode(function(RQL_0){return {calls:[{kind:'Call',metadata:{type:'[ID!]'},name:'ids',value:{kind:'CallVariable',callVariableName:'ref_q1'}}],children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'},require('Relay').QL.__frag(RQL_0)]),fieldName:'nodes',kind:'Query',metadata:{isPlural:true,isAbstract:true,identifyingArgName:'ids',identifyingArgType:'[ID!]'},name:'SplitDeferredRelayQueries',type:'Node'};}(



fragment),



{path:'$.*.'+alias+'.edges.*.node.id'})));


expect(deferred[0].required.getID()).toBe('q2');
expect(deferred[0].required.isDeferred()).toBe(true);


expect(deferred[0].deferred).toEqual([]);});


it('correctly produces multi-level JSONPaths in ref queries',function(){
var fragment=function(){return {children:[{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'SplitDeferredRelayQueriesRelayQL',type:'Actor'};}();
var node=function(RQL_0){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'5'}}],children:[{children:[{children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},require('Relay').QL.__frag(RQL_0)]),fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'User'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'FriendsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],fieldName:'friends',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'FriendsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'SplitDeferredRelayQueries',type:'Node'};}(





defer(fragment));







var queryNode=getNode(node);var _splitDeferredRelayQu15=
require('splitDeferredRelayQueries')(queryNode);var required=_splitDeferredRelayQu15.required;var deferred=_splitDeferredRelayQu15.deferred;


expect(required.getName()).toBe(queryNode.getName());
expect(required).toEqualQueryRoot(getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'5'}}],children:[{children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'User'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'FriendsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],fieldName:'friends',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'FriendsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'SplitDeferredRelayQueries',type:'Node'};}()));












expect(required.getID()).toBe('q1');


var alias=require('generateRQLFieldAlias')('friends.first(5)');
expect(deferred.length).toBe(1);
expect(deferred[0].required.getName()).toBe(
queryNode.getName());

expect(deferred[0].required).toEqualQueryRoot(filterGeneratedRootFields(
getRefNode(function(RQL_0){return {calls:[{kind:'Call',metadata:{type:'[ID!]'},name:'ids',value:{kind:'CallVariable',callVariableName:'ref_q1'}}],children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'},require('Relay').QL.__frag(RQL_0)]),fieldName:'nodes',kind:'Query',metadata:{isPlural:true,isAbstract:true,identifyingArgName:'ids',identifyingArgType:'[ID!]'},name:'SplitDeferredRelayQueries',type:'Node'};}(



fragment),



{path:'$.*.'+alias+'.edges.*.node.id'})));


expect(deferred[0].required.getID()).toBe('q2');
expect(deferred[0].required.isDeferred()).toBe(true);


expect(deferred[0].deferred).toEqual([]);});


it('handles fragments that are not nodes',function(){
var fragment=function(){return {children:[{fieldName:'uri',kind:'Field',metadata:{},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'SplitDeferredRelayQueriesRelayQL',type:'Image'};}();
var node=function(RQL_0){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{calls:[{kind:'Call',metadata:{},name:'size',value:{kind:'CallValue',callValue:'100'}}],children:[].concat.apply([],[require('Relay').QL.__frag(RQL_0)]),fieldName:'profilePicture',kind:'Field',metadata:{canHaveSubselections:true},type:'Image'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'SplitDeferredRelayQueries',type:'Node'};}(




defer(fragment));




var queryNode=getNode(node);var _splitDeferredRelayQu16=
require('splitDeferredRelayQueries')(queryNode);var required=_splitDeferredRelayQu16.required;var deferred=_splitDeferredRelayQu16.deferred;


expect(required.getName()).toBe(queryNode.getName());
expect(required).toEqualQueryRoot(getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'SplitDeferredRelayQueries',type:'Node'};}()));


expect(deferred.length).toBe(1);
expect(deferred[0].required.getName()).toBe(queryNode.getName());
expect(deferred[0].required).toEqualQueryRoot(getNode(function(RQL_0){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[{calls:[{kind:'Call',metadata:{},name:'size',value:{kind:'CallValue',callValue:'100'}}],children:[].concat.apply([],[require('Relay').QL.__frag(RQL_0)]),fieldName:'profilePicture',kind:'Field',metadata:{canHaveSubselections:true},type:'Image'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'SplitDeferredRelayQueries',type:'Node'};}(



fragment)));




expect(deferred[0].required.isDeferred()).toBe(true);


expect(deferred[0].deferred).toEqual([]);});


it('omits required queries with only generated `id` fields',function(){
var fragment=function(){return {children:[{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'SplitDeferredRelayQueriesRelayQL',type:'Node'};}();
var node=function(RQL_0){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'},require('Relay').QL.__frag(RQL_0)]),fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'SplitDeferredRelayQueries',type:'Node'};}(


defer(fragment));



var queryNode=getNode(node);var _splitDeferredRelayQu17=
require('splitDeferredRelayQueries')(queryNode);var required=_splitDeferredRelayQu17.required;var deferred=_splitDeferredRelayQu17.deferred;


expect(required).toBe(null);


expect(deferred.length).toBe(1);
expect(deferred[0].required.getName()).toBe(queryNode.getName());
expect(deferred[0].required).toEqualQueryRoot(getNode(function(RQL_0){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'},require('Relay').QL.__frag(RQL_0)]),fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'SplitDeferredRelayQueries',type:'Node'};}(


fragment)));



expect(deferred[0].required.isDeferred()).toBe(true);


expect(deferred[0].deferred).toEqual([]);});


it('does not omit "empty" required ref query dependencies',function(){



var fragment=function(){return {children:[{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'SplitDeferredRelayQueriesRelayQL',type:'Node'};}();
var id=require('RelayQuery').Field.build({
fieldName:'id',
metadata:{isRequisite:true},
type:'String'});

var typename=require('RelayQuery').Field.build({
fieldName:'__typename',
metadata:{isRequisite:true},
type:'String'});

var queryNode=require('RelayQuery').Root.build(
'splitDeferredRelayQueries',
'node',
'4',
[
id,
typename,
require('RelayQuery').Field.build({
fieldName:'hometown',
children:[id,getNode(defer(fragment))],
metadata:{
canHaveSubselections:true,
isGenerated:true,
inferredPrimaryKey:'id',
inferredRootCallName:'node'},

type:'Page'})],


{
identifyingArgName:'id'});


queryNode=queryNode.clone(
queryNode.getChildren().map(function(outerChild,ii){
if(ii===1){
return outerChild.clone(
outerChild.getChildren().map(function(innerChild,jj){
if(jj===0){
return innerChild.cloneAsRefQueryDependency();}else 
{
return innerChild;}}));}else 



{
return outerChild;}}));var _splitDeferredRelayQu18=




require('splitDeferredRelayQueries')(queryNode);var required=_splitDeferredRelayQu18.required;var deferred=_splitDeferredRelayQu18.deferred;


expect(deferred[0].required.getName()).toBe(queryNode.getName());
expect(required).toEqualQueryRoot(getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'hometown',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Page'},{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'SplitDeferredRelayQueries',type:'Node'};}()));




expect(required.getID()).toBe('q1');


expect(deferred.length).toBe(1);
expect(deferred[0].required.getName()).toBe(queryNode.getName());
expect(deferred[0].required).toEqualQueryRoot(
filterGeneratedRootFields(getRefNode(function(RQL_0){return {calls:[{kind:'Call',metadata:{type:'[ID!]'},name:'ids',value:{kind:'CallVariable',callVariableName:'ref_q1'}}],children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'},require('Relay').QL.__frag(RQL_0)]),fieldName:'nodes',kind:'Query',metadata:{isPlural:true,isAbstract:true,identifyingArgName:'ids',identifyingArgType:'[ID!]'},name:'SplitDeferredRelayQueries',type:'Node'};}(



fragment),



{path:'$.*.hometown.id'})));


expect(deferred[0].required.getID()).toBe('q2');
expect(deferred[0].required.isDeferred()).toBe(true);


expect(deferred[0].deferred).toEqual([]);});


it('preserves required queries with only a non-generated `id` field',function(){
var fragment=function(){return {children:[{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'SplitDeferredRelayQueriesRelayQL',type:'Node'};}();
var node=function(RQL_0){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'},require('Relay').QL.__frag(RQL_0)]),fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'SplitDeferredRelayQueries',type:'Node'};}(



defer(fragment));



var queryNode=getNode(node);var _splitDeferredRelayQu19=
require('splitDeferredRelayQueries')(queryNode);var required=_splitDeferredRelayQu19.required;var deferred=_splitDeferredRelayQu19.deferred;


expect(deferred[0].required.getName()).toBe(queryNode.getName());
expect(required).toEqualQueryRoot(getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'SplitDeferredRelayQueries',type:'Node'};}()));


expect(deferred.length).toBe(1);
expect(deferred[0].required.getName()).toBe(queryNode.getName());
expect(deferred[0].required).toEqualQueryRoot(getNode(function(RQL_0){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'},require('Relay').QL.__frag(RQL_0)]),fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'SplitDeferredRelayQueries',type:'Node'};}(


fragment)));



expect(deferred[0].required.isDeferred()).toBe(true);


expect(deferred[0].deferred).toEqual([]);});


it('does not split empty fragments',function(){

var nullFragment=function(RQL_0){return {children:[].concat.apply([],[require('Relay').QL.__frag(RQL_0)]),id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'SplitDeferredRelayQueriesRelayQL',type:'Viewer'};}(null);
var fragment=function(RQL_0){return {children:[].concat.apply([],[require('Relay').QL.__frag(RQL_0)]),id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'SplitDeferredRelayQueriesRelayQL',type:'Viewer'};}(nullFragment);
var node=function(RQL_0){return {children:[].concat.apply([],[{fieldName:'primaryEmail',kind:'Field',metadata:{},type:'String'},require('Relay').QL.__frag(RQL_0)]),fieldName:'viewer',kind:'Query',metadata:{},name:'SplitDeferredRelayQueries',type:'Viewer'};}(



defer(fragment));




var queryNode=getNode(node);var _splitDeferredRelayQu20=
require('splitDeferredRelayQueries')(queryNode);var required=_splitDeferredRelayQu20.required;var deferred=_splitDeferredRelayQu20.deferred;

expect(required.getName()).toBe(queryNode.getName());
expect(required).toEqualQueryRoot(getNode(function(){return {children:[{fieldName:'primaryEmail',kind:'Field',metadata:{},type:'String'}],fieldName:'viewer',kind:'Query',metadata:{},name:'SplitDeferredRelayQueries',type:'Viewer'};}()));




expect(deferred.length).toBe(0);});


it('does not flatten fragments when splitting root queries',function(){
var fragment=function(){return {children:[{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'SplitDeferredRelayQueriesRelayQL',type:'Node'};}();
var query=getNode(function(RQL_0){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'4'}}],children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'},require('Relay').QL.__frag(RQL_0)]),fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'SplitDeferredRelayQueries',type:'Node'};}(


defer(fragment)));var _splitDeferredRelayQu21=



require('splitDeferredRelayQueries')(query);var deferred=_splitDeferredRelayQu21.deferred;

expect(deferred.length).toBe(1);
expect(deferred[0].required).toContainQueryNode(getNode(fragment));});


it('does not flatten fragments when splitting ref queries',function(){
var fragment=function(){return {children:[{children:[{fieldName:'count',kind:'Field',metadata:{},type:'Int'}],fieldName:'likers',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'LikersOfContentConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'SplitDeferredRelayQueriesRelayQL',type:'Feedback'};}();
var query=getNode(function(RQL_0){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'STORY_ID'}}],children:[{children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},require('Relay').QL.__frag(RQL_0)]),fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'SplitDeferredRelayQueries',type:'Node'};}(



defer(fragment)));var _splitDeferredRelayQu22=




require('splitDeferredRelayQueries')(query);var deferred=_splitDeferredRelayQu22.deferred;

expect(deferred.length).toBe(1);
expect(deferred[0].required).toContainQueryNode(getNode(fragment));});});
'use strict';










jest.autoMockOff();



function getFakeError(){
return new Error('Happy Cat');}


describe('parseErrorStack',function(){

it('parses error stack',function(){
var stack=require('parseErrorStack')(getFakeError());
expect(stack.length).toBeGreaterThan(0);

var firstFrame=stack[0];
expect(firstFrame.methodName).toEqual('getFakeError');
expect(firstFrame.file).toMatch(/parseErrorStack-test\.js$/);});


it('supports framesToPop',function(){
function getWrappedError(){
var error=getFakeError();
error.framesToPop=1;
return error;}




var stack=require('parseErrorStack')(getWrappedError());
expect(stack[0].methodName).toEqual('getWrappedError');});


it('ignores bad inputs',function(){
expect(require('parseErrorStack')({})).toEqual([]);
expect(require('parseErrorStack')(null)).toEqual([]);});});
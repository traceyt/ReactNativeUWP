/**
* Copyright (c) 2013-present, Facebook, Inc.
* All rights reserved.
*
* This source code is licensed under the BSD-style license found in the
* LICENSE file in the root directory of this source tree. An additional grant
* of patent rights can be found in the PATENTS file in the same directory.
*
* @emails oncall+relay
*/

'use strict';function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError('Cannot call a class as a function');}}function _inherits(subClass, superClass) {if (typeof superClass !== 'function' && superClass !== null) {throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}

require('configureForRelayOSS');





describe('RelayQueryConfig', function () {
  var makeConfig;

  beforeEach(function () {
    jest.resetModuleRegistry();

    makeConfig = function () {var 
      MockConfig = (function (_RelayQueryConfig) {_inherits(MockConfig, _RelayQueryConfig);function MockConfig() {_classCallCheck(this, MockConfig);_RelayQueryConfig.apply(this, arguments);}return MockConfig;})(require('RelayQueryConfig'));



      MockConfig.routeName = 'MockConfig';
      MockConfig.queries = { 
        required: function (Component) {return (function (RQL_0) {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallVariable', callVariableName: 'required' } }], children: [].concat.apply([], [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'RelayQueryConfig', type: 'Node' };})(


          Component.getQuery('required'));}, 



        optional: function (Component) {return (function (RQL_0) {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallVariable', callVariableName: 'optional' } }], children: [].concat.apply([], [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'RelayQueryConfig', type: 'Node' };})(


          Component.getQuery('optional'));} };




      return MockConfig;};


    jasmine.addMatchers(require('RelayTestUtils').matchers);});


  it('can be created using inheritance', function () {
    var MockConfig = makeConfig();
    var config = new MockConfig({ required: 'foo' });
    expect(config.name).toEqual('MockConfig');
    expect(config.params.required).toEqual('foo');
    expect(config.queries.required).toBeTruthy();});


  it('has an immutable spec in __DEV__', function () {
    var dev = __DEV__;
    window.__DEV__ = true;

    var MockConfig = makeConfig();
    var config = new MockConfig({ required: 'foo' });
    expect(function () {return config.name = 'yo';}).toThrow();
    expect(function () {return config.params = 'I am';}).toThrow();
    expect(function () {return config.queries = 'immutable';}).toThrow();
    expect(function () {return config.params.foo = 'bar';}).toThrow();
    expect(function () {return config.queries.myCustomQuery = function () {};}).toThrow();

    window.__DEV__ = dev;});


  it('allows params to be processed if `prepareParams` is defined', function () {
    var MockConfig = makeConfig();
    MockConfig.prototype.prepareVariables = 
    jest.genMockFunction().mockReturnValue({ required: 'bar' });
    var config = new MockConfig({ required: 'foo' });
    expect(MockConfig.prototype.prepareVariables).
    toBeCalledWith({ required: 'foo' });
    expect(config.params.required).toEqual('bar');});


  it('exposes queries in the queries property', function () {
    var MockConfig = makeConfig();
    var config = new MockConfig({ required: 'foo' });
    expect(config.queries.required).toBeTruthy();
    expect(config.queries.optional).toBeTruthy();});});
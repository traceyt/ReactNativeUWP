'use strict';

jest.
dontMock('node-haste/lib/lib/getPlatformExtension').
dontMock('node-haste/node_modules/throat').
dontMock('../');

jest.
mock('crypto').
mock('fs');







describe('AssetServer',function(){
beforeEach(function(){
var NodeHaste=require('node-haste');
NodeHaste.getAssetDataFromName=require.requireActual('node-haste/lib/lib/getAssetDataFromName');});


describe('assetServer.get',function(){
pit('should work for the simple case',function(){
var server=new (require('../'))({
projectRoots:['/root'],
assetExts:['png']});


require('fs').__setMockFilesystem({
'root':{
imgs:{
'b.png':'b image',
'b@2x.png':'b2 image'}}});




return require('promise').all([
server.get('imgs/b.png'),
server.get('imgs/b@1x.png')]).
then(function(resp){return (
resp.forEach(function(data){return (
expect(data).toBe('b image'));}));});});




pit('should work for the simple case with platform ext',function(){
var server=new (require('../'))({
projectRoots:['/root'],
assetExts:['png']});


require('fs').__setMockFilesystem({
'root':{
imgs:{
'b.ios.png':'b ios image',
'b.android.png':'b android image',
'c.png':'c general image',
'c.android.png':'c android image'}}});




return require('promise').all([
server.get('imgs/b.png','ios').then(
function(data){return expect(data).toBe('b ios image');}),

server.get('imgs/b.png','android').then(
function(data){return expect(data).toBe('b android image');}),

server.get('imgs/c.png','android').then(
function(data){return expect(data).toBe('c android image');}),

server.get('imgs/c.png','ios').then(
function(data){return expect(data).toBe('c general image');}),

server.get('imgs/c.png').then(
function(data){return expect(data).toBe('c general image');})]);});





pit('should work for the simple case with jpg',function(){
var server=new (require('../'))({
projectRoots:['/root'],
assetExts:['png','jpg']});


require('fs').__setMockFilesystem({
'root':{
imgs:{
'b.png':'png image',
'b.jpg':'jpeg image'}}});




return require('promise').all([
server.get('imgs/b.jpg'),
server.get('imgs/b.png')]).
then(function(data){return (
expect(data).toEqual([
'jpeg image',
'png image']));});});




pit('should pick the bigger one',function(){
var server=new (require('../'))({
projectRoots:['/root'],
assetExts:['png']});


require('fs').__setMockFilesystem({
'root':{
imgs:{
'b@1x.png':'b1 image',
'b@2x.png':'b2 image',
'b@4x.png':'b4 image',
'b@4.5x.png':'b4.5 image'}}});




return server.get('imgs/b@3x.png').then(function(data){return (
expect(data).toBe('b4 image'));});});



pit('should pick the bigger one with platform ext',function(){
var server=new (require('../'))({
projectRoots:['/root'],
assetExts:['png']});


require('fs').__setMockFilesystem({
'root':{
imgs:{
'b@1x.png':'b1 image',
'b@2x.png':'b2 image',
'b@4x.png':'b4 image',
'b@4.5x.png':'b4.5 image',
'b@1x.ios.png':'b1 ios image',
'b@2x.ios.png':'b2 ios image',
'b@4x.ios.png':'b4 ios image',
'b@4.5x.ios.png':'b4.5 ios image'}}});




return require('promise').all([
server.get('imgs/b@3x.png').then(function(data){return (
expect(data).toBe('b4 image'));}),

server.get('imgs/b@3x.png','ios').then(function(data){return (
expect(data).toBe('b4 ios image'));})]);});




pit('should support multiple project roots',function(){
var server=new (require('../'))({
projectRoots:['/root','/root2'],
assetExts:['png']});


require('fs').__setMockFilesystem({
'root':{
imgs:{
'b.png':'b image'}},


'root2':{
'newImages':{
'imgs':{
'b@1x.png':'b1 image'}}}});





return server.get('newImages/imgs/b.png').then(function(data){return (
expect(data).toBe('b1 image'));});});});




describe('assetServer.getAssetData',function(){
pit('should get assetData',function(){
var hash={
update:jest.genMockFn(),
digest:jest.genMockFn()};


hash.digest.mockImpl(function(){return 'wow such hash';});
require('crypto').createHash.mockImpl(function(){return hash;});

var server=new (require('../'))({
projectRoots:['/root'],
assetExts:['png']});


require('fs').__setMockFilesystem({
'root':{
imgs:{
'b@1x.png':'b1 image',
'b@2x.png':'b2 image',
'b@4x.png':'b4 image',
'b@4.5x.png':'b4.5 image'}}});




return server.getAssetData('imgs/b.png').then(function(data){
expect(hash.update.mock.calls.length).toBe(4);
expect(data).toEqual({
type:'png',
name:'b',
scales:[1,2,4,4.5],
files:[
'/root/imgs/b@1x.png',
'/root/imgs/b@2x.png',
'/root/imgs/b@4x.png',
'/root/imgs/b@4.5x.png'],

hash:'wow such hash'});});});




pit('should get assetData for non-png images',function(){
var hash={
update:jest.genMockFn(),
digest:jest.genMockFn()};


hash.digest.mockImpl(function(){return 'wow such hash';});
require('crypto').createHash.mockImpl(function(){return hash;});

var server=new (require('../'))({
projectRoots:['/root'],
assetExts:['png','jpeg']});


require('fs').__setMockFilesystem({
'root':{
imgs:{
'b@1x.jpg':'b1 image',
'b@2x.jpg':'b2 image',
'b@4x.jpg':'b4 image',
'b@4.5x.jpg':'b4.5 image'}}});




return server.getAssetData('imgs/b.jpg').then(function(data){
expect(hash.update.mock.calls.length).toBe(4);
expect(data).toEqual({
type:'jpg',
name:'b',
scales:[1,2,4,4.5],
files:[
'/root/imgs/b@1x.jpg',
'/root/imgs/b@2x.jpg',
'/root/imgs/b@4x.jpg',
'/root/imgs/b@4.5x.jpg'],

hash:'wow such hash'});});});});});
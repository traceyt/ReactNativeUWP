'use strict';




jest.
mock('warning').
dontMock('JSTimers').
dontMock('JSTimersExecution');






describe('JSTimers',function(){
var firstArgumentOfTheLastCallTo=function(func){
return func.mock.calls[require('warning').mock.calls.length-1][0];};


beforeEach(function(){
global.setTimeout=require('JSTimers').setTimeout;});


it('should call function with setTimeout',function(){
var didCall=false;
var id=require('JSTimers').setTimeout(function(){
didCall=true;});

require('JSTimersExecution').callTimers([id]);
expect(didCall).toBe(true);});


it('should call nested setTimeout when cleared',function(){
var id1,id2,id3;
var didCall=false;

id1=require('JSTimers').setTimeout(function(){
require('JSTimers').clearTimeout(id1);
id2=require('JSTimers').setTimeout(function(){
require('JSTimers').clearTimeout(id2);
id3=require('JSTimers').setTimeout(function(){
didCall=true;});});});



require('JSTimersExecution').callTimers([id1]);
require('JSTimersExecution').callTimers([id2]);
require('JSTimersExecution').callTimers([id3]);

expect(didCall).toBe(true);});


it('should call nested setImmediate when cleared',function(){
var id1,id2,id3;
var didCall=false;

id1=require('JSTimers').setImmediate(function(){
require('JSTimers').clearImmediate(id1);
id2=require('JSTimers').setImmediate(function(){
require('JSTimers').clearImmediate(id2);
id3=require('JSTimers').setImmediate(function(){
didCall=true;});});});



require('JSTimersExecution').callTimers([id1]);
require('JSTimersExecution').callTimers([id2]);
require('JSTimersExecution').callTimers([id3]);

expect(didCall).toBe(true);});


it('should call nested requestAnimationFrame when cleared',function(){
var id1,id2,id3;
var didCall=false;

id1=require('JSTimers').requestAnimationFrame(function(){
require('JSTimers').cancelAnimationFrame(id1);
id2=require('JSTimers').requestAnimationFrame(function(){
require('JSTimers').cancelAnimationFrame(id2);
id3=require('JSTimers').requestAnimationFrame(function(){
didCall=true;});});});



require('JSTimersExecution').callTimers([id1]);
require('JSTimersExecution').callTimers([id2]);
require('JSTimersExecution').callTimers([id3]);

expect(didCall).toBe(true);});


it('should call nested setInterval when cleared',function(){
var id1,id2,id3;
var didCall=false;

id1=require('JSTimers').setInterval(function(){
require('JSTimers').clearInterval(id1);
id2=require('JSTimers').setInterval(function(){
require('JSTimers').clearInterval(id2);
id3=require('JSTimers').setInterval(function(){
didCall=true;});});});



require('JSTimersExecution').callTimers([id1]);
require('JSTimersExecution').callTimers([id2]);
require('JSTimersExecution').callTimers([id3]);

expect(didCall).toBe(true);});


it('should call function with setInterval',function(){
var didCall=false;
var id=require('JSTimers').setInterval(function(){
didCall=true;});

require('JSTimersExecution').callTimers([id]);
expect(didCall).toBe(true);});


it('should call function with setImmediate',function(){
var didCall=false;
require('JSTimers').setImmediate(function(){
didCall=true;});

require('JSTimersExecution').callImmediates();
expect(didCall).toBe(true);});


it('should not call function with clearImmediate',function(){
var didCall=false;
var id=require('JSTimers').setImmediate(function(){
didCall=true;});

require('JSTimers').clearImmediate(id);
require('JSTimersExecution').callImmediates();
expect(didCall).toBe(false);});


it('should call functions in the right order with setImmediate',function(){
var count=0;
var firstCalled=null;
var secondCalled=null;
require('JSTimers').setImmediate(function(){
firstCalled=count++;});

require('JSTimers').setImmediate(function(){
secondCalled=count++;});

require('JSTimersExecution').callImmediates();
expect(firstCalled).toBe(0);
expect(secondCalled).toBe(1);});


it('should call functions in the right order with nested setImmediate',function(){
var count=0;
var firstCalled=null;
var secondCalled=null;
var thirdCalled=null;
require('JSTimers').setImmediate(function(){
firstCalled=count++;
require('JSTimers').setImmediate(function(){
thirdCalled=count++;});

secondCalled=count++;});

require('JSTimersExecution').callImmediates();
expect(firstCalled).toBe(0);
expect(secondCalled).toBe(1);
expect(thirdCalled).toBe(2);});


it('should call nested setImmediate',function(){
var firstCalled=false;
var secondCalled=false;
require('JSTimers').setImmediate(function(){
firstCalled=true;
require('JSTimers').setImmediate(function(){
secondCalled=true;});});


require('JSTimersExecution').callImmediates();
expect(firstCalled).toBe(true);
expect(secondCalled).toBe(true);});


it('should call function with requestAnimationFrame',function(){
var didCall=false;
var id=require('JSTimers').requestAnimationFrame(function(){
didCall=true;});

require('JSTimersExecution').callTimers([id]);
expect(didCall).toBe(true);});


it('should not call function if we don\'t callTimers',function(){
var didCall=false;
var func=function(){
didCall=true;};

require('JSTimers').setTimeout(func,10);
expect(didCall).toBe(false);
require('JSTimers').setInterval(func,10);
expect(didCall).toBe(false);
require('JSTimers').requestAnimationFrame(func);
expect(didCall).toBe(false);});


it('should call setInterval as many times as callTimers is called',function(){
var timesCalled=0;
var id=require('JSTimers').setInterval(function(){
timesCalled++;},
10);
require('JSTimersExecution').callTimers([id]);
require('JSTimersExecution').callTimers([id]);
require('JSTimersExecution').callTimers([id]);
require('JSTimersExecution').callTimers([id]);
expect(timesCalled).toBe(4);});


it('should only call the function who\'s id we pass in',function(){
var firstCalled=false;
var secondCalled=false;
var firstID=require('JSTimers').setTimeout(function(){
firstCalled=true;});

var secondID=require('JSTimers').setTimeout(function(){
secondCalled=true;});

require('JSTimersExecution').callTimers([secondID]);
expect(firstCalled).toBe(false);
expect(secondCalled).toBe(true);});


it('should work with calling multiple timers',function(){
var firstCalled=false;
var secondCalled=false;
var firstID=require('JSTimers').setTimeout(function(){
firstCalled=true;});

var secondID=require('JSTimers').setTimeout(function(){
secondCalled=true;});

require('JSTimersExecution').callTimers([firstID,secondID]);
expect(firstCalled).toBe(true);
expect(secondCalled).toBe(true);});


it('should still execute all callbacks even if one throws',function(){
var firstID=require('JSTimers').setTimeout(function(){
throw new Error('error');},
10);
var secondCalled=false;
var secondID=require('JSTimers').setTimeout(function(){
secondCalled=true;},
10);
expect(
require('JSTimersExecution').callTimers.bind(null,[firstID,secondID])).
toThrow();
expect(secondCalled).toBe(true);});


it('should clear timers even if callback throws',function(){
var timerID=require('JSTimers').setTimeout(function(){
throw new Error('error');},
10);
var timerIndex=require('JSTimersExecution').timerIDs.indexOf(timerID);
expect(require('JSTimersExecution').timerIDs[timerIndex]!==null).toBe(true);
expect(require('JSTimersExecution').callbacks[timerIndex]!==null).toBe(true);
expect(require('JSTimersExecution').types[timerIndex]!==null).toBe(true);
expect(
require('JSTimersExecution').callTimers.bind(null,[timerID])).
toThrowError('error');
expect(require('JSTimersExecution').timerIDs[timerIndex]===null).toBe(true);
expect(require('JSTimersExecution').callbacks[timerIndex]===null).toBe(true);
expect(require('JSTimersExecution').types[timerIndex]===null).toBe(true);});


it('should not warn if callback is called on cancelled timer',function(){
var callbackCalled=false;
var timerID=require('JSTimers').setTimeout(function(){
callbackCalled=true;},
10);
require('JSTimers').clearTimeout(timerID);
require('JSTimersExecution').callTimers([timerID]);
expect(callbackCalled).toBe(false);
expect(firstArgumentOfTheLastCallTo(require('warning'))).toBe(true);});


it('should warn when callTimers is called with garbage timer id',function(){
require('JSTimersExecution').callTimers([1337]);
expect(firstArgumentOfTheLastCallTo(require('warning'))).toBe(false);});


it('should only call callback once for setTimeout',function(){
var callbackCount=0;
var timerID=require('JSTimers').setTimeout(function(){
callbackCount++;},
10);

require('JSTimersExecution').callTimers([timerID]);
expect(callbackCount).toBe(1);

require('JSTimersExecution').callTimers([timerID]);
expect(callbackCount).toBe(1);
expect(firstArgumentOfTheLastCallTo(require('warning'))).toBe(true);});


it('should only call callback once for requestAnimationFrame',function(){
var callbackCount=0;
var timerID=require('JSTimers').requestAnimationFrame(function(){
callbackCount++;},
10);

require('JSTimersExecution').callTimers([timerID]);
expect(callbackCount).toBe(1);

require('JSTimersExecution').callTimers([timerID]);
expect(callbackCount).toBe(1);
expect(firstArgumentOfTheLastCallTo(require('warning'))).toBe(true);});


it('should re-throw first exception',function(){
var timerID1=require('JSTimers').setTimeout(function(){
throw new Error('first error');});

var timerID2=require('JSTimers').setTimeout(function(){
throw new Error('second error');});

expect(
require('JSTimersExecution').callTimers.bind(null,[timerID1,timerID2])).
toThrowError('first error');});


it('should pass along errors thrown from setImmediate',function(){
require('JSTimers').setImmediate(function(){
throw new Error('error within setImmediate');});


require('NativeModules').Timing.createTimer=jest.genMockFunction();
require('JSTimersExecution').callImmediates();



expect(require('NativeModules').Timing.createTimer).toBeCalled();
var timerID=require('NativeModules').Timing.createTimer.mock.calls[0][0];
expect(require('JSTimersExecution').callTimers.bind(null,[timerID])).
toThrowError('error within setImmediate');});


it('should throw all errors from setImmediate',function(){
require('JSTimers').setImmediate(function(){
throw new Error('first error');});


require('JSTimers').setImmediate(function(){
throw new Error('second error');});


require('NativeModules').Timing.createTimer=jest.genMockFunction();
require('JSTimersExecution').callImmediates();

expect(require('NativeModules').Timing.createTimer.mock.calls.length).toBe(2);

var firstTimerID=require('NativeModules').Timing.createTimer.mock.calls[0][0];
expect(require('JSTimersExecution').callTimers.bind(null,[firstTimerID])).
toThrowError('first error');

var secondTimerID=require('NativeModules').Timing.createTimer.mock.calls[1][0];
expect(require('JSTimersExecution').callTimers.bind(null,[secondTimerID])).
toThrowError('second error');});


it('should pass along errors thrown from setTimeout',function(){
var timerID=require('JSTimers').setTimeout(function(){
throw new Error('error within setTimeout');});


expect(require('JSTimersExecution').callTimers.bind(null,[timerID])).
toThrowError('error within setTimeout');});


it('should throw all errors from setTimeout',function(){
var firstTimerID=require('JSTimers').setTimeout(function(){
throw new Error('first error');});


var secondTimerID=require('JSTimers').setTimeout(function(){
throw new Error('second error');});


require('NativeModules').Timing.createTimer=jest.genMockFunction();
expect(require('JSTimersExecution').callTimers.bind(null,[firstTimerID,secondTimerID])).
toThrowError('first error');

expect(require('NativeModules').Timing.createTimer.mock.calls.length).toBe(1);
var thirdTimerID=require('NativeModules').Timing.createTimer.mock.calls[0][0];
expect(require('JSTimersExecution').callTimers.bind(null,[thirdTimerID])).
toThrowError('second error');});


it('should pass along errors thrown from setInterval',function(){
var timerID=require('JSTimers').setInterval(function(){
throw new Error('error within setInterval');});


expect(require('JSTimersExecution').callTimers.bind(null,[timerID])).
toThrowError('error within setInterval');});


it('should not call to native when clearing a null timer',function(){
var timerID=require('JSTimers').setTimeout(function(){});
require('JSTimers').clearTimeout(timerID);
require('NativeModules').Timing.deleteTimer=jest.genMockFunction();

require('JSTimers').clearTimeout(null);
expect(require('NativeModules').Timing.deleteTimer.mock.calls.length).toBe(0);});});
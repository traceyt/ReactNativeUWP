/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails oncall+relay
 */

'use strict';

require('configureForRelayOSS');





describe('RelayQueryFragment', function () {var 
  getNode = require('RelayTestUtils').getNode;

  var fragment;

  beforeEach(function () {
    jest.resetModuleRegistry();

    jasmine.addMatchers(require('RelayTestUtils').matchers);

    var subfrag = (function () {return { children: [{ fieldName: 'city', kind: 'Field', metadata: {}, type: 'String' }], id: '6J/kAMnnDAhs:0', kind: 'Fragment', metadata: {}, name: 'RelayQueryFragmentRelayQL', type: 'StreetAddress' };})();




    var frag = (function (RQL_0) {return { children: [].concat.apply([], [{ fieldName: 'country', kind: 'Field', metadata: {}, type: 'String' }, require('Relay').QL.__frag(RQL_0)]), id: '/GvFxwQ5Emuh:0', kind: 'Fragment', metadata: {}, name: 'RelayQueryFragmentRelayQL', type: 'StreetAddress' };})(


    subfrag);


    fragment = getNode(frag);});


  it('does not equal non-fragments', function () {
    var query = getNode((function () {return { children: [{ fieldName: 'firstName', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'me', kind: 'Query', metadata: {}, name: 'RelayQueryFragment', type: 'User' };})());






    var field = query.getChildren()[0];
    expect(fragment.equals(query)).toBe(false);
    expect(fragment.equals(field)).toBe(false);});


  it('does not equal different fragment', function () {
    var fragment2 = getNode((function () {return { children: [{ fieldName: 'country', kind: 'Field', metadata: {}, type: 'String' }], id: 'Ec+9s2RCqwGs:0', kind: 'Fragment', metadata: {}, name: 'RelayQueryFragmentRelayQL', type: 'StreetAddress' };})());




    expect(fragment.equals(fragment2)).toBe(false);
    expect(fragment2.equals(fragment)).toBe(false);});


  it('does not equal equivalent fragments with a different structure', function () {
    expect(fragment.equals(fragment)).toBe(true);
    // invert the fields between outer/inner fragments
    var subfrag = (function () {return { children: [{ fieldName: 'country', kind: 'Field', metadata: {}, type: 'String' }], id: 'ZzIXiUfkG5yf:0', kind: 'Fragment', metadata: {}, name: 'RelayQueryFragmentRelayQL', type: 'StreetAddress' };})();




    var fragment2 = getNode((function (RQL_0) {return { children: [].concat.apply([], [{ fieldName: 'city', kind: 'Field', metadata: {}, type: 'String' }, require('Relay').QL.__frag(RQL_0)]), id: 'KVzUmAlT5tyT:0', kind: 'Fragment', metadata: {}, name: 'RelayQueryFragmentRelayQL', type: 'StreetAddress' };})(


    subfrag));


    expect(fragment.equals(fragment2)).toBe(false);
    expect(fragment2.equals(fragment)).toBe(false);});


  it('equals fragments with the same structure', function () {
    expect(fragment.equals(fragment)).toBe(true);
    var subfrag = (function () {return { children: [{ fieldName: 'city', kind: 'Field', metadata: {}, type: 'String' }], id: '2CVrabYrCNgo:0', kind: 'Fragment', metadata: {}, name: 'RelayQueryFragmentRelayQL', type: 'StreetAddress' };})();




    var fragment2 = getNode((function (RQL_0) {return { children: [].concat.apply([], [{ fieldName: 'country', kind: 'Field', metadata: {}, type: 'String' }, require('Relay').QL.__frag(RQL_0)]), id: 'y418S/8D/yAx:0', kind: 'Fragment', metadata: {}, name: 'RelayQueryFragmentRelayQL', type: 'StreetAddress' };})(


    subfrag));


    expect(fragment.equals(fragment2)).toBe(true);
    expect(fragment2.equals(fragment)).toBe(true);});


  it('equals fragments with different names', function () {
    // NOTE: Two fragments in the same scope will have different names.
    var fragment1 = getNode((function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'YvTzNKAnQCgT:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'RelayQueryFragmentRelayQL', type: 'Node' };})());
    var fragment2 = getNode((function () {return { children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'QfE59Uz3eXjL:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'RelayQueryFragmentRelayQL', type: 'Node' };})());
    expect(fragment1.equals(fragment2)).toBe(true);
    expect(fragment2.equals(fragment1)).toBe(true);});


  it('returns metadata', function () {
    var node = (function () {return { children: [{ fieldName: 'country', kind: 'Field', metadata: {}, type: 'String' }], id: 'DS1RtS5Ja7MC:0', kind: 'Fragment', metadata: {}, name: 'RelayQueryFragmentRelayQL', type: 'StreetAddress' };})();




    var fragment = getNode(node);
    expect(fragment.getDebugName()).toBe('RelayQueryFragmentRelayQL');
    expect(fragment.getType()).toBe('StreetAddress');});


  it('returns children', function () {
    var children = fragment.getChildren();
    expect(children.length).toBe(2);
    expect(children[0].getSchemaName()).toBe('country');
    expect(children[1].getDebugName()).toBe('RelayQueryFragmentRelayQL');});


  it('returns same object when cloning with same children', function () {
    var children = fragment.getChildren();
    expect(fragment.clone(children)).toBe(fragment);
    expect(fragment.clone(children.map(function (c) {return c;}))).toBe(fragment);});


  it('returns null when cloning without children', function () {
    expect(fragment.clone([])).toBe(null);
    expect(fragment.clone([null])).toBe(null);});


  it('clones with updated children', function () {
    var query = getNode((function () {return { children: [{ fieldName: 'country', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'city', kind: 'Field', metadata: {}, type: 'String' }], id: 'OlEjCCStBK/Z:0', kind: 'Fragment', metadata: {}, name: 'RelayQueryFragmentRelayQL', type: 'StreetAddress' };})());





    var clone = query.clone([query.getChildren()[0]]);
    expect(clone.getChildren().length).toBe(1);
    expect(clone.getChildren()[0].getSchemaName()).toBe('country');
    expect(clone.getFieldByStorageKey('city')).toBe(undefined);});


  it('is not a ref query dependency', function () {
    expect(fragment.isRefQueryDependency()).toBe(false);});


  it('is not generated', function () {
    expect(fragment.isGenerated()).toBe(false);});


  it('creates nodes', function () {
    var fragmentRQL = (function () {return { children: [{ fieldName: 'city', kind: 'Field', metadata: {}, type: 'String' }], id: 'TPTD5hNan8c5:0', kind: 'Fragment', metadata: {}, name: 'RelayQueryFragmentRelayQL', type: 'StreetAddress' };})();




    var fragment = getNode(fragmentRQL);
    var node = fragment.createNode(fragmentRQL);
    expect(node instanceof require('RelayQuery').Fragment).toBe(true);
    expect(node.getType()).toBe('StreetAddress');
    expect(node.getRoute()).toBe(fragment.getRoute());
    expect(node.getVariables()).toBe(fragment.getVariables());});


  it('returns directives', function () {
    var fragment = getNode((function () {return { children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], fieldName: 'feedback', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id' }, type: 'Feedback' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], directives: [{ kind: 'Directive', name: 'include', args: [{ name: 'if', value: { kind: 'CallVariable', callVariableName: 'cond' } }] }], id: 'T/CgYslYJCv9:0', kind: 'Fragment', metadata: {}, name: 'RelayQueryFragmentRelayQL', type: 'Story' };})(), 





    { cond: true });
    expect(fragment.getDirectives()).toEqual([
    { 
      args: [
      { name: 'if', value: true }], 

      name: 'include' }]);});




  describe('canHaveSubselections()', function () {
    it('returns true', function () {
      // fragment with children
      expect(fragment.canHaveSubselections()).toBe(true);

      // fragment without children
      expect(
      getNode((function (RQL_0) {return { children: [].concat.apply([], [require('Relay').QL.__frag(RQL_0)]), id: 'dSq5bimNpsQD:0', kind: 'Fragment', metadata: {}, name: 'RelayQueryFragmentRelayQL', type: 'Viewer' };})(null)).canHaveSubselections()).
      toBe(true);});});});
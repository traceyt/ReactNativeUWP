'use strict';









jest.autoMockOff();



describe('Dependency extraction:',function(){
it('can extract calls to require',function(){
var code='require(\'foo/bar\');\n      var React = require("React");\n      var A = React.createClass({\n        render: function() {\n          return require (  "Component" );\n        }\n      });\n      require\n      (\'more\');';var _extractDependencies=








require('../extract-dependencies')(code);var dependencies=_extractDependencies.dependencies;var dependencyOffsets=_extractDependencies.dependencyOffsets;
expect(dependencies).
toEqual(['foo/bar','React','Component','more']);
expect(dependencyOffsets).toEqual([8,46,147,203]);});


it('does not extract require method calls',function(){
var code='\n      require(\'a\');\n      foo.require(\'b\');\n      bar.\n      require ( \'c\').require(\'d\');require(\'e\')';var _extractDependencies2=





require('../extract-dependencies')(code);var dependencies=_extractDependencies2.dependencies;var dependencyOffsets=_extractDependencies2.dependencyOffsets;
expect(dependencies).toEqual(['a','e']);
expect(dependencyOffsets).toEqual([15,98]);});


it('does not extract require calls from strings',function(){
var code='require(\'foo\');\n      var React = \'\\\'require("React")\';\n      var a = \' // require("yadda")\';\n      var a = \' /* require("yadda") */\';\n      var A = React.createClass({\n        render: function() {\n          return require (  "Component" );\n        }\n      });\n      " \\" require(\'more\')";';var _extractDependencies3=










require('../extract-dependencies')(code);var dependencies=_extractDependencies3.dependencies;var dependencyOffsets=_extractDependencies3.dependencyOffsets;
expect(dependencies).toEqual(['foo','Component']);
expect(dependencyOffsets).toEqual([8,226]);});


it('does not extract require calls in comments',function(){
var code='require(\'foo\')//require("not/this")\n      /* A comment here with a require(\'call\') that should not be extracted */require(\'bar\')\n    // ending comment without newline require("baz")';var _extractDependencies4=



require('../extract-dependencies')(code);var dependencies=_extractDependencies4.dependencies;var dependencyOffsets=_extractDependencies4.dependencyOffsets;
expect(dependencies).toEqual(['foo','bar']);
expect(dependencyOffsets).toEqual([8,122]);});


it('deduplicates dependencies',function(){
var code='require(\'foo\');require( "foo" );\n      require("foo");';var _extractDependencies5=


require('../extract-dependencies')(code);var dependencies=_extractDependencies5.dependencies;var dependencyOffsets=_extractDependencies5.dependencyOffsets;
expect(dependencies).toEqual(['foo']);
expect(dependencyOffsets).toEqual([8,24,47]);});


it('does not extract calls to function with names that start with "require"',function(){
var code='arbitraryrequire(\'foo\');';var _extractDependencies6=

require('../extract-dependencies')(code);var dependencies=_extractDependencies6.dependencies;var dependencyOffsets=_extractDependencies6.dependencyOffsets;
expect(dependencies).toEqual([]);
expect(dependencyOffsets).toEqual([]);});


it('does not extract calls to require with non-static arguments',function(){
var code='require(\'foo/\' + bar)';var _extractDependencies7=

require('../extract-dependencies')(code);var dependencies=_extractDependencies7.dependencies;var dependencyOffsets=_extractDependencies7.dependencyOffsets;
expect(dependencies).toEqual([]);
expect(dependencyOffsets).toEqual([]);});


it('does not get confused by previous states',function(){

var code='require("a");/* a comment */ var a = /[a]/.test(\'a\');';var _extractDependencies8=

require('../extract-dependencies')(code);var dependencies=_extractDependencies8.dependencies;var dependencyOffsets=_extractDependencies8.dependencyOffsets;
expect(dependencies).toEqual(['a']);
expect(dependencyOffsets).toEqual([8]);});


it('can handle regular expressions',function(){
var code='require(\'a\'); /["\']/.test(\'foo\'); require("b");';var _extractDependencies9=

require('../extract-dependencies')(code);var dependencies=_extractDependencies9.dependencies;var dependencyOffsets=_extractDependencies9.dependencyOffsets;
expect(dependencies).toEqual(['a','b']);
expect(dependencyOffsets).toEqual([8,42]);});});
'use strict';



































function callsFromGraphQL(
concreteCalls,
variables)
{

var callsOrDirectives=concreteCalls;
var orderedCalls=[];
for(var ii=0;ii<callsOrDirectives.length;ii++){
var callOrDirective=callsOrDirectives[ii];var 
_value=callOrDirective.value;
if(_value!=null){
if(Array.isArray(_value)){
_value=_value.map(function(arg){return getCallValue(arg,variables);});}else 
if(_value.kind==='BatchCallVariable'){

_value=null;}else 
{
_value=getCallValue(_value,variables);}}


orderedCalls.push({name:callOrDirective.name,value:_value});}

return orderedCalls;}


function getCallValue(
concreteValue,
variables)
{
var callValue=undefined;
if(concreteValue.kind==='CallValue'){
callValue=concreteValue.callValue;}else 
{
var variableName=concreteValue.callVariableName;
!
variables.hasOwnProperty(variableName)?require('invariant')(0,
'callsFromGraphQL(): Expected a declared value for variable, `$%s`.',
variableName):undefined;

callValue=variables[variableName];}



var valueType=typeof callValue;
!(
callValue==null||
valueType==='boolean'||
valueType==='number'||
valueType==='string'||
valueType==='object')?require('invariant')(0,
'callsFromGraphQL(): Expected argument value `%s` to either be null or a '+
'boolean, number, string, or array/object.',
JSON.stringify(callValue)):undefined;

return callValue;}


module.exports=callsFromGraphQL;
'use strict';

















console.log('yo!');
require('InitializeJavaScriptAppEngine');
console.log('go!');























require('RCTEventEmitter');
require('RCTLog');
require('JSTimersExecution');

function inject(){



require('EventPluginHub').injection.injectEventPluginOrder(require('IOSDefaultEventPluginOrder'));
require('EventPluginHub').injection.injectInstanceHandle(require('ReactInstanceHandles'));

require('ResponderEventPlugin').injection.injectGlobalResponderHandler(require('ReactNativeGlobalResponderHandler'));



require('ResponderEventPlugin').injection.injectGlobalInteractionHandler(require('ReactNativeGlobalInteractionHandler'));







require('EventPluginHub').injection.injectEventPluginsByName({
'ResponderEventPlugin':require('ResponderEventPlugin'),
'IOSNativeBridgeEventPlugin':require('IOSNativeBridgeEventPlugin')});


require('ReactUpdates').injection.injectReconcileTransaction(
require('ReactNativeComponentEnvironment').ReactReconcileTransaction);


require('ReactUpdates').injection.injectBatchingStrategy(require('ReactDefaultBatchingStrategy'));



require('ReactComponentEnvironment').injection.injectEnvironment(require('ReactNativeComponentEnvironment'));



var EmptyComponent=function(){

var View=require('View');
return require('ReactElement').createElement(View,{
collapsable:true,
style:{position:'absolute'}});};


require('ReactEmptyComponent').injection.injectEmptyComponent(EmptyComponent);

require('EventPluginUtils').injection.injectMount(require('ReactNativeMount'));

require('ReactNativeComponent').injection.injectTextComponentClass(require('ReactNativeTextComponent'));


require('ReactNativeComponent').injection.injectGenericComponentClass(function(tag){

var info='';
if(typeof tag==='string'&&/^[a-z]/.test(tag)){
info+=' Each component name should start with an uppercase letter.';}

!false?require('fbjs/lib/invariant')(0,'Expected a component class, got %s.%s',tag,info):undefined;});


require('NodeHandle').injection.injectImplementation(require('UniversalWorkerNodeHandle'));}


module.exports={
inject:inject};
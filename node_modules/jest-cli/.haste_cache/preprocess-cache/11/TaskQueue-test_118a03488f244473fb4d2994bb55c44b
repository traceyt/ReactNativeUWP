'use strict';





jest.dontMock('TaskQueue');

function expectToBeCalledOnce(fn){
expect(fn.mock.calls.length).toBe(1);}


function clearTaskQueue(taskQueue){
do {
jest.runAllTimers();
taskQueue.processNext();
jest.runAllTimers();}while(
taskQueue.hasTasksToProcess());}


describe('TaskQueue',function(){
var taskQueue=undefined;
var onMoreTasks=undefined;
var sequenceId=undefined;
function createSequenceTask(expectedSequenceId){
return jest.genMockFunction().mockImplementation(function(){
expect(++sequenceId).toBe(expectedSequenceId);});}


beforeEach(function(){
jest.resetModuleRegistry();
onMoreTasks=jest.genMockFunction();
var TaskQueue=require('TaskQueue');
taskQueue=new TaskQueue({onMoreTasks:onMoreTasks});
sequenceId=0;});



it('should run a basic task',function(){
var task1=createSequenceTask(1);
taskQueue.enqueue({run:task1,name:'run1'});
expect(taskQueue.hasTasksToProcess()).toBe(true);
taskQueue.processNext();
expectToBeCalledOnce(task1);});


it('should handle blocking promise task',function(){
var task1=jest.genMockFunction().mockImplementation(function(){
return new Promise(function(resolve){
setTimeout(function(){
expect(++sequenceId).toBe(1);
resolve();},
1);});});


var task2=createSequenceTask(2);
taskQueue.enqueue({gen:task1,name:'gen1'});
taskQueue.enqueue({run:task2,name:'run2'});

taskQueue.processNext();

expectToBeCalledOnce(task1);
expect(task2).not.toBeCalled();
expect(onMoreTasks).not.toBeCalled();
expect(taskQueue.hasTasksToProcess()).toBe(false);

clearTaskQueue(taskQueue);

expectToBeCalledOnce(onMoreTasks);
expectToBeCalledOnce(task2);});


it('should handle nested simple tasks',function(){
var task1=jest.genMockFunction().mockImplementation(function(){
expect(++sequenceId).toBe(1);
taskQueue.enqueue({run:task3,name:'run3'});});

var task2=createSequenceTask(2);
var task3=createSequenceTask(3);
taskQueue.enqueue({run:task1,name:'run1'});
taskQueue.enqueue({run:task2,name:'run2'});

clearTaskQueue(taskQueue);

expectToBeCalledOnce(task1);
expectToBeCalledOnce(task2);
expectToBeCalledOnce(task3);});


it('should handle nested promises',function(){
var task1=jest.genMockFunction().mockImplementation(function(){
return new Promise(function(resolve){
setTimeout(function(){
expect(++sequenceId).toBe(1);
taskQueue.enqueue({gen:task2,name:'gen2'});
taskQueue.enqueue({run:resolve,name:'resolve1'});},
1);});});


var task2=jest.genMockFunction().mockImplementation(function(){
return new Promise(function(resolve){
setTimeout(function(){
expect(++sequenceId).toBe(2);
taskQueue.enqueue({run:task3,name:'run3'});
taskQueue.enqueue({run:resolve,name:'resolve2'});},
1);});});


var task3=createSequenceTask(3);
var task4=createSequenceTask(4);
taskQueue.enqueue({gen:task1,name:'gen1'});
taskQueue.enqueue({run:task4,name:'run4'});

clearTaskQueue(taskQueue);

expectToBeCalledOnce(task1);
expectToBeCalledOnce(task2);
expectToBeCalledOnce(task3);
expectToBeCalledOnce(task4);});});
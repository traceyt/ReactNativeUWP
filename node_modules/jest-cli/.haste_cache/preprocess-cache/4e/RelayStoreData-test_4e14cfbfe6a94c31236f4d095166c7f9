'use strict';












require('configureForRelayOSS');

jest.
dontMock('GraphQLRange').
dontMock('GraphQLSegment');






describe('RelayStoreData',function(){
var Relay=undefined;var _RelayTestUtils=require('RelayTestUtils');var 

getNode=_RelayTestUtils.getNode;var getVerbatimNode=_RelayTestUtils.getVerbatimNode;

beforeEach(function(){
jest.resetModuleRegistry();


Relay=require('Relay');

jasmine.addMatchers(require('RelayTestUtils').matchers);});


describe('handleQueryPayload',function(){
it('writes responses to `records`',function(){
var storeData=new (require('RelayStoreData'))();

var query=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'123'}}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'doesViewerLike',kind:'Field',metadata:{},type:'Boolean'},{children:[{fieldName:'count',kind:'Field',metadata:{},type:'Int'}],fieldName:'topLevelComments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'TopLevelCommentsConnection'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'RelayStoreData',type:'Node'};}());










var response={
node:{
id:'123',
doesViewerLike:false,
topLevelComments:{
count:1},

__typename:'Story'}};


storeData.handleQueryPayload(query,response);


var recordStore=storeData.getRecordStore();
expect(recordStore.getRecordState('123')).toBe('EXISTENT');
expect(recordStore.getField('123','doesViewerLike')).toBe(false);
var commentsID=
recordStore.getLinkedRecordID('123','topLevelComments');
expect(recordStore.getField(commentsID,'count')).toBe(1);


expect(storeData.getQueuedData()).toEqual({});});


it('uses cached IDs for root fields without IDs',function(){
var storeData=new (require('RelayStoreData'))();

var query=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'123'}}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'doesViewerLike',kind:'Field',metadata:{},type:'Boolean'},{children:[{fieldName:'count',kind:'Field',metadata:{},type:'Int'}],fieldName:'topLevelComments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'TopLevelCommentsConnection'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'RelayStoreData',type:'Node'};}());










var response={
node:{
id:'123',
doesViewerLike:false,
topLevelComments:{
count:1},

__typename:'Story'}};


storeData.handleQueryPayload(query,response);


var recordStore=storeData.getRecordStore();
expect(recordStore.getRecordState('123')).toBe('EXISTENT');
expect(recordStore.getField('123','doesViewerLike')).toBe(false);
var commentsID=
recordStore.getLinkedRecordID('123','topLevelComments');
expect(recordStore.getField(commentsID,'count')).toBe(1);


expect(storeData.getQueuedData()).toEqual({});});});



describe('handleUpdatePayload',function(){
it('writes server payloads to `records`',function(){var _payload;
var storeData=new (require('RelayStoreData'))();

storeData.getRecordWriter().putRecord('123');

var mutationQuery=getNode(function(){return {calls:[{kind:'Call',metadata:{},name:'feedbackLike',value:{kind:'CallVariable',callVariableName:'input'}}],children:[{fieldName:'clientMutationId',kind:'Field',metadata:{isRequisite:true},type:'String'},{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'doesViewerLike',kind:'Field',metadata:{},type:'Boolean'},{children:[{fieldName:'count',kind:'Field',metadata:{},type:'Int'}],fieldName:'topLevelComments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'TopLevelCommentsConnection'}],fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'}],kind:'Mutation',metadata:{inputType:'FeedbackLikeInput'},name:'RelayStoreData',responseType:'FeedbackLikeResponsePayload'};}());













var payload=(_payload={},babelHelpers.defineProperty(_payload,
require('RelayConnectionInterface').CLIENT_MUTATION_ID,'abc'),babelHelpers.defineProperty(_payload,'feedback',
{
id:'123',
doesViewerLike:false,
topLevelComments:{
count:1}}),_payload);



storeData.handleUpdatePayload(mutationQuery,payload,{
configs:[],
isOptimisticUpdate:false});



var recordStore=storeData.getRecordStore();
expect(recordStore.getRecordState('123')).toBe('EXISTENT');
expect(recordStore.getField('123','doesViewerLike')).toBe(false);
var commentsID=
recordStore.getLinkedRecordID('123','topLevelComments');
expect(recordStore.getField(commentsID,'count')).toBe(1);


expect(storeData.getQueuedData()).toEqual({});});


it('writes optimistic payloads to `queuedRecords`',function(){var _payload2;
var storeData=new (require('RelayStoreData'))();

storeData.getRecordWriter().putRecord('123');

var mutationQuery=getNode(function(){return {calls:[{kind:'Call',metadata:{},name:'feedbackLike',value:{kind:'CallVariable',callVariableName:'input'}}],children:[{fieldName:'clientMutationId',kind:'Field',metadata:{isRequisite:true},type:'String'},{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'doesViewerLike',kind:'Field',metadata:{},type:'Boolean'},{children:[{fieldName:'count',kind:'Field',metadata:{},type:'Int'}],fieldName:'topLevelComments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'TopLevelCommentsConnection'}],fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'}],kind:'Mutation',metadata:{inputType:'FeedbackLikeInput'},name:'RelayStoreData',responseType:'FeedbackLikeResponsePayload'};}());













var payload=(_payload2={},babelHelpers.defineProperty(_payload2,
require('RelayConnectionInterface').CLIENT_MUTATION_ID,'abc'),babelHelpers.defineProperty(_payload2,'feedback',
{
id:'123',
doesViewerLike:false,
topLevelComments:{
count:1}}),_payload2);



storeData.handleUpdatePayload(mutationQuery,payload,{
configs:[],
isOptimisticUpdate:true,
clientMutationID:'mutationID'});



var queuedStore=storeData.getQueuedStore();
expect(queuedStore.getRecordState('123')).toBe('EXISTENT');
expect(queuedStore.getField('123','doesViewerLike')).toBe(false);
var commentsID=
queuedStore.getLinkedRecordID('123','topLevelComments');
expect(queuedStore.getField(commentsID,'count')).toBe(1);


expect(storeData.getNodeData()).toEqual({
'123':{
__dataID__:'123',
__typename:undefined}});});




it(
'writes optimistic payloads to `queuedRecords` even if values are '+
'identical to those in `records`',
function(){var _payload3;





var storeData=new (require('RelayStoreData'))();


var query=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'123'}}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'doesViewerLike',kind:'Field',metadata:{},type:'Boolean'},{children:[{fieldName:'count',kind:'Field',metadata:{},type:'Int'}],fieldName:'topLevelComments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'TopLevelCommentsConnection'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'RelayStoreData',type:'Node'};}());










var response={
node:{
id:'123',
doesViewerLike:false,
topLevelComments:{
count:1},

__typename:'Story'}};


storeData.handleQueryPayload(query,response);


var mutationQuery=getNode(function(){return {calls:[{kind:'Call',metadata:{},name:'feedbackLike',value:{kind:'CallVariable',callVariableName:'input'}}],children:[{fieldName:'clientMutationId',kind:'Field',metadata:{isRequisite:true},type:'String'},{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'doesViewerLike',kind:'Field',metadata:{},type:'Boolean'},{children:[{fieldName:'count',kind:'Field',metadata:{},type:'Int'}],fieldName:'topLevelComments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'TopLevelCommentsConnection'}],fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'}],kind:'Mutation',metadata:{inputType:'FeedbackLikeInput'},name:'RelayStoreData',responseType:'FeedbackLikeResponsePayload'};}());













var payload=(_payload3={},babelHelpers.defineProperty(_payload3,
require('RelayConnectionInterface').CLIENT_MUTATION_ID,'abc'),babelHelpers.defineProperty(_payload3,'feedback',
{
id:'123',
doesViewerLike:false,
topLevelComments:{
count:1}}),_payload3);



storeData.handleUpdatePayload(mutationQuery,payload,{
configs:[],
isOptimisticUpdate:true,
clientMutationID:'mutationID'});



response={
node:{
id:'123',
doesViewerLike:true,
topLevelComments:null}};


storeData.handleQueryPayload(query,response);



var recordStore=storeData.getQueuedStore();
expect(recordStore.getField('123','doesViewerLike')).toBe(false);
var commentsID=
recordStore.getLinkedRecordID('123','topLevelComments');
expect(commentsID).toBeTruthy();
expect(recordStore.getField(commentsID,'count')).toBe(1);});});




describe('buildFragmentQueryForDataID',function(){
it('builds root queries for refetchable IDs',function(){
var data=new (require('RelayStoreData'))();
var fragment=getNode(function(){return {children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'name',kind:'Field',metadata:{},type:'String'}],id:Relay.QL.__id(),kind:'Fragment',metadata:{},name:'RelayStoreDataRelayQL',type:'User'};}());





var query=data.buildFragmentQueryForDataID(
fragment,
'123');

expect(query).toEqualQueryRoot(getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'123'}}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isRequisite:true},type:'String'},{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'name',kind:'Field',metadata:{},type:'String'}],id:Relay.QL.__id(),kind:'Fragment',metadata:{},name:'User',type:'User'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'RelayStoreData',type:'Node'};}()));











expect(query.getName()).toBe(fragment.getDebugName());
expect(query.isAbstract()).toBe(true);});


it('builds root queries using the path for non-refetchable IDs',function(){
var storeData=new (require('RelayStoreData'))();
var addressFragment=function(){return {children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{children:[{fieldName:'city',kind:'Field',metadata:{},type:'String'}],fieldName:'address',kind:'Field',metadata:{canHaveSubselections:true},type:'StreetAddress'}],id:Relay.QL.__id(),kind:'Fragment',metadata:{},name:'RelayStoreDataRelayQL',type:'User'};}();
var node=getNode(function(RQL_0){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'123'}}],children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'},Relay.QL.__frag(RQL_0)]),fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'RelayStoreData',type:'Node'};}(



addressFragment));



var payload={
node:{
id:'123',
__typename:'User',
address:{
city:'Menlo Park'}}};



storeData.handleQueryPayload(node,payload);

var fragment=getNode(function(){return {children:[{fieldName:'city',kind:'Field',metadata:{},type:'String'}],id:Relay.QL.__id(),kind:'Fragment',metadata:{},name:'RelayStoreDataRelayQL',type:'StreetAddress'};}());




var query=storeData.buildFragmentQueryForDataID(fragment,'client:1');
expect(query).toEqualQueryRoot(getVerbatimNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallVariable',callVariableName:'id_0'}}],children:[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'},{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{},type:'String'},{children:[{children:[{fieldName:'city',kind:'Field',metadata:{},type:'String'}],id:Relay.QL.__id(),kind:'Fragment',metadata:{},name:'StreetAddress',type:'StreetAddress'}],fieldName:'address',kind:'Field',metadata:{canHaveSubselections:true},type:'StreetAddress'}],id:Relay.QL.__id(),kind:'Fragment',metadata:{},name:'User',type:'User'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'RelayStoreData',type:'Node'};}(),













{id_0:'123'}));
expect(query.getName()).toBe(node.getName());
expect(query.isAbstract()).toBe(true);});});



describe('garbage collection',function(){
it('initializes the garbage collector if no data has been added',function(){
var data=new (require('RelayStoreData'))();
expect(data.getGarbageCollector()).toBe(undefined);
expect(function(){return data.initializeGarbageCollector();}).not.toThrow();
expect(
data.getGarbageCollector() instanceof require('RelayGarbageCollector')).
toBe(true);});


it('warns if initialized after data has been added',function(){
jest.mock('warning');

var response={node:{id:0,__typename:'User'}};
var data=new (require('RelayStoreData'))();
var query=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'a'}}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'RelayStoreData',type:'Node'};}());
data.handleQueryPayload(query,response);

var warningMsg=
'RelayStoreData: Garbage collection can only be initialized when '+
'no data is present.';
expect([warningMsg]).toBeWarnedNTimes(0);
data.initializeGarbageCollector();
expect([warningMsg]).toBeWarnedNTimes(1);});


it(
'registers created dataIDs in the garbage collector if it has been '+
'initialized',
function(){
require('RelayGarbageCollector').prototype.register=jest.genMockFunction();
var response={node:{id:0}};
var data=new (require('RelayStoreData'))();
data.initializeGarbageCollector();
var query=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'a'}}],children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'RelayStoreData',type:'Node'};}());
var garbageCollector=data.getGarbageCollector();

expect(garbageCollector.register).not.toBeCalled();
data.handleQueryPayload(query,response);
expect(garbageCollector.register).toBeCalled();
expect(garbageCollector.register.mock.calls[0][0]).toBe('a');});});});
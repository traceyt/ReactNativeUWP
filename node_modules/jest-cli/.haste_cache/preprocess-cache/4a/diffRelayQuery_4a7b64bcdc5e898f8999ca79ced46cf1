'use strict';var _RelayNodeInterface=require('RelayNodeInterface');var 






























ID=_RelayNodeInterface.ID;var ID_TYPE=_RelayNodeInterface.ID_TYPE;var NODE_TYPE=_RelayNodeInterface.NODE_TYPE;var TYPENAME=_RelayNodeInterface.TYPENAME;var _RelayConnectionInter=require('RelayConnectionInterface');var 
EDGES=_RelayConnectionInter.EDGES;var NODE=_RelayConnectionInter.NODE;var PAGE_INFO=_RelayConnectionInter.PAGE_INFO;
var idField=require('RelayQuery').Field.build({
fieldName:ID,
metadata:{
isRequisite:true},

type:'String'});

var typeField=require('RelayQuery').Field.build({
fieldName:TYPENAME,
metadata:{
isRequisite:true},

type:'String'});

var nodeWithID=require('RelayQuery').Field.build({
fieldName:require('RelayNodeInterface').NODE,
children:[idField,typeField],
metadata:{
canHaveSubselections:true},

type:NODE_TYPE});






















function diffRelayQuery(
root,
store,
tracker)
{
var path=require('RelayQueryPath').create(root);
var queries=[];

var visitor=new RelayDiffQueryBuilder(store,tracker);
var rootIdentifyingArg=root.getIdentifyingArg();
var rootIdentifyingArgValue=
rootIdentifyingArg&&rootIdentifyingArg.value||null;
var isPluralCall=
Array.isArray(rootIdentifyingArgValue)&&
rootIdentifyingArgValue.length>1;

var metadata=undefined;
if(rootIdentifyingArg!=null){
metadata={
identifyingArgName:rootIdentifyingArg.name,
identifyingArgType:rootIdentifyingArg.type!=null?
rootIdentifyingArg.type:
ID_TYPE,
isAbstract:true,
isDeferred:false,
isPlural:false};}


var fieldName=root.getFieldName();
var storageKey=root.getStorageKey();
require('forEachRootCallArg')(root,function(_ref){var identifyingArgValue=_ref.identifyingArgValue;var identifyingArgKey=_ref.identifyingArgKey;
var nodeRoot=undefined;
if(isPluralCall){
!(
identifyingArgValue!=null)?require('invariant')(0,
'diffRelayQuery(): Unexpected null or undefined value in root call '+
'argument array for query, `%s(...).',
fieldName):undefined;

nodeRoot=require('RelayQuery').Root.build(
root.getName(),
fieldName,
[identifyingArgValue],
root.getChildren(),
metadata,
root.getType());}else 

{

nodeRoot=root;}



var dataID=store.getDataID(storageKey,identifyingArgKey);
if(dataID==null){
queries.push(nodeRoot);
return;}



var scope=makeScope(dataID);
var diffOutput=visitor.visit(nodeRoot,path,scope);
var diffNode=diffOutput?diffOutput.diffNode:null;
if(diffNode){
!(
diffNode instanceof require('RelayQuery').Root)?require('invariant')(0,
'diffRelayQuery(): Expected result to be a root query.'):undefined;

queries.push(diffNode);}});


return queries.concat(visitor.getSplitQueries());}var 


















RelayDiffQueryBuilder=function(){




function RelayDiffQueryBuilder(store,tracker){babelHelpers.classCallCheck(this,RelayDiffQueryBuilder);
this.$RelayDiffQueryBuilder_store=store;
this.$RelayDiffQueryBuilder_splitQueries=[];
this.$RelayDiffQueryBuilder_tracker=tracker;}babelHelpers.createClass(RelayDiffQueryBuilder,[{key:'splitQuery',value:function splitQuery(



root)
{
this.$RelayDiffQueryBuilder_splitQueries.push(root);}},{key:'getSplitQueries',value:function getSplitQueries()


{
return this.$RelayDiffQueryBuilder_splitQueries;}},{key:'visit',value:function visit(



node,
path,
scope)
{
if(node instanceof require('RelayQuery').Field){
return this.visitField(node,path,scope);}else 
if(node instanceof require('RelayQuery').Fragment){
return this.visitFragment(node,path,scope);}else 
if(node instanceof require('RelayQuery').Root){
return this.visitRoot(node,path,scope);}}},{key:'visitRoot',value:function visitRoot(




node,
path,
scope)
{
return this.traverse(node,path,scope);}},{key:'visitFragment',value:function visitFragment(



node,
path,
scope)
{
return this.traverse(node,path,scope);}},{key:'visitField',value:function visitField(







node,
path,_ref2)

{var connectionField=_ref2.connectionField;var dataID=_ref2.dataID;var edgeID=_ref2.edgeID;var rangeInfo=_ref2.rangeInfo;

if(connectionField&&rangeInfo){
if(edgeID){

if(node.getSchemaName()===EDGES){
return this.diffConnectionEdge(
connectionField,
node,
require('RelayQueryPath').getPath(path,node,edgeID),
edgeID,
rangeInfo);}else 

{
return null;}}else 

{



if(
node.getSchemaName()===EDGES||
node.getSchemaName()===PAGE_INFO)
{
return rangeInfo.diffCalls.length>0?
{
diffNode:node,
trackedNode:null}:

null;}}}





if(!node.canHaveSubselections()){
return this.diffScalar(node,dataID);}else 
if(node.isGenerated()){
return {
diffNode:node,
trackedNode:null};}else 

if(node.isConnection()){
return this.diffConnection(node,path,dataID);}else 
if(node.isPlural()){
return this.diffPluralLink(node,path,dataID);}else 
{
return this.diffLink(node,path,dataID);}}},{key:'traverse',value:function traverse(







node,
path,
scope)
{var _this=this;
var diffNode=undefined;
var diffChildren=undefined;
var trackedNode=undefined;
var trackedChildren=undefined;
var hasDiffField=false;
var hasTrackedField=false;

node.getChildren().forEach(function(child){
if(child instanceof require('RelayQuery').Field){
var diffOutput=_this.visitField(child,path,scope);
var diffChild=diffOutput?diffOutput.diffNode:null;
var trackedChild=diffOutput?diffOutput.trackedNode:null;


if(diffChild){
diffChildren=diffChildren||[];
diffChildren.push(diffChild);
hasDiffField=hasDiffField||!diffChild.isGenerated();}else 
if(child.isRequisite()&&!scope.rangeInfo){









diffChildren=diffChildren||[];
diffChildren.push(child);}


if(trackedChild){
trackedChildren=trackedChildren||[];
trackedChildren.push(trackedChild);
hasTrackedField=hasTrackedField||!trackedChild.isGenerated();}else 
if(child.isRequisite()){
trackedChildren=trackedChildren||[];
trackedChildren.push(child);}}else 

if(child instanceof require('RelayQuery').Fragment){
var isCompatibleType=require('isCompatibleRelayFragmentType')(
child,
_this.$RelayDiffQueryBuilder_store.getType(scope.dataID));

if(isCompatibleType){
var diffOutput=_this.traverse(child,path,scope);
var diffChild=diffOutput?diffOutput.diffNode:null;
var trackedChild=diffOutput?diffOutput.trackedNode:null;

if(diffChild){
diffChildren=diffChildren||[];
diffChildren.push(diffChild);
hasDiffField=true;}

if(trackedChild){
trackedChildren=trackedChildren||[];
trackedChildren.push(trackedChild);
hasTrackedField=true;}}else 

{



diffChildren=diffChildren||[];
diffChildren.push(child);}}});





if(diffChildren&&hasDiffField){
diffNode=node.clone(diffChildren);}

if(trackedChildren&&hasTrackedField){
trackedNode=node.clone(trackedChildren);}




if(trackedNode&&!(trackedNode instanceof require('RelayQuery').Fragment)){
this.$RelayDiffQueryBuilder_tracker.trackNodeForID(trackedNode,scope.dataID,path);}


return {
diffNode:diffNode,
trackedNode:trackedNode};}},{key:'diffScalar',value:function diffScalar(







field,
dataID)
{
if(this.$RelayDiffQueryBuilder_store.getField(dataID,field.getStorageKey())===undefined){
return {
diffNode:field,
trackedNode:null};}


return null;}},{key:'diffLink',value:function diffLink(







field,
path,
dataID)
{
var nextDataID=
this.$RelayDiffQueryBuilder_store.getLinkedRecordID(dataID,field.getStorageKey());
if(nextDataID===undefined){
return {
diffNode:field,
trackedNode:null};}


if(nextDataID===null){
return {
diffNode:null,
trackedNode:field};}



return this.traverse(
field,
require('RelayQueryPath').getPath(path,field,nextDataID),
makeScope(nextDataID));}},{key:'diffPluralLink',value:function diffPluralLink(








field,
path,
dataID)
{var _this2=this;
var linkedIDs=
this.$RelayDiffQueryBuilder_store.getLinkedRecordIDs(dataID,field.getStorageKey());
if(linkedIDs===undefined){

return {
diffNode:field,
trackedNode:null};}else 

if(linkedIDs===null||linkedIDs.length===0){

return {
diffNode:null,
trackedNode:field};}else 

if(field.getInferredRootCallName()===NODE){var _ret=function(){




var hasSplitQueries=false;
linkedIDs.forEach(function(itemID){
var itemState=_this2.traverse(
field,
require('RelayQueryPath').getPath(path,field,itemID),
makeScope(itemID));

if(itemState){

hasSplitQueries=
hasSplitQueries||!!itemState.trackedNode||!!itemState.diffNode;

if(itemState.diffNode){
_this2.splitQuery(buildRoot(
itemID,
itemState.diffNode.getChildren(),
require('RelayQueryPath').getName(path),
field.getType()));}}});






if(hasSplitQueries){
return {v:{
diffNode:null,
trackedNode:field}};}}();if(typeof _ret==="object")return _ret.v;}else 


{




var sampleItemID=linkedIDs[0];
return this.traverse(
field,
require('RelayQueryPath').getPath(path,field,sampleItemID),
makeScope(sampleItemID));}


return null;}},{key:'diffConnection',value:function diffConnection(









field,
path,
dataID)
{var _this3=this;
var store=this.$RelayDiffQueryBuilder_store;
var connectionID=store.getLinkedRecordID(dataID,field.getStorageKey());
var rangeInfo=store.getRangeMetadata(
connectionID,
field.getCallsWithValues());


if(connectionID===undefined){
return {
diffNode:field,
trackedNode:null};}



if(connectionID===null){
return {
diffNode:null,
trackedNode:field};}





if(rangeInfo==null){
return this.traverse(
field,
require('RelayQueryPath').getPath(path,field,connectionID),
makeScope(connectionID));}var 


diffCalls=rangeInfo.diffCalls;var filteredEdges=rangeInfo.filteredEdges;


var hasSplitQueries=false;
filteredEdges.forEach(function(edge){

if(rangeInfo&&connectionID){
var _scope={
connectionField:field,
dataID:connectionID,
edgeID:edge.edgeID,
rangeInfo:rangeInfo};

var _diffOutput=_this3.traverse(
field,
require('RelayQueryPath').getPath(path,field,edge.edgeID),
_scope);



if(_diffOutput){
hasSplitQueries=hasSplitQueries||!!_diffOutput.trackedNode;}}});





var scope={
connectionField:field,
dataID:connectionID,
edgeID:null,
rangeInfo:rangeInfo};


var diffOutput=this.traverse(
field,
require('RelayQueryPath').getPath(path,field,connectionID),
scope);

var diffNode=diffOutput?diffOutput.diffNode:null;
var trackedNode=diffOutput?diffOutput.trackedNode:null;
if(diffCalls.length&&diffNode instanceof require('RelayQuery').Field){
diffNode=diffNode.cloneFieldWithCalls(
diffNode.getChildren(),
diffCalls);}













if(hasSplitQueries){
trackedNode=field;}


return {
diffNode:diffNode,
trackedNode:trackedNode};}},{key:'diffConnectionEdge',value:function diffConnectionEdge(










connectionField,
edgeField,
path,
edgeID,
rangeInfo)
{

var hasSplitQueries=false;
var diffOutput=this.traverse(
edgeField,
require('RelayQueryPath').getPath(path,edgeField,edgeID),
makeScope(edgeID));

var diffNode=diffOutput?diffOutput.diffNode:null;
var trackedNode=diffOutput?diffOutput.trackedNode:null;
var nodeID=this.$RelayDiffQueryBuilder_store.getLinkedRecordID(edgeID,NODE);

if(diffNode){
if(!nodeID||require('RelayRecord').isClientID(nodeID)){
require('warning')(
connectionField.isConnectionWithoutNodeID(),
'RelayDiffQueryBuilder: Field `node` on connection `%s` cannot be '+
'retrieved if it does not have an `id` field. If you expect fields '+
'to be retrieved on this field, add an `id` field in the schema. '+
'If you choose to ignore this warning, you can silence it by '+
'adding `@relay(isConnectionWithoutNodeID: true)` to the '+
'connection field.',
connectionField.getStorageKey());}else 

{var _splitNodeAndEdgesFie=




splitNodeAndEdgesFields(diffNode);var diffEdgesField=_splitNodeAndEdgesFie.edges;var diffNodeField=_splitNodeAndEdgesFie.node;



if(diffNodeField){
hasSplitQueries=true;
var nodeField=edgeField.getFieldByStorageKey('node');
!
nodeField?require('invariant')(0,
'RelayDiffQueryBuilder: Expected connection `%s` to have a '+
'`node` field.',
connectionField.getSchemaName()):undefined;

this.splitQuery(buildRoot(
nodeID,
diffNodeField.getChildren(),
require('RelayQueryPath').getName(path),
nodeField.getType()));}





if(diffEdgesField){
if(connectionField.isFindable()){
diffEdgesField=diffEdgesField.
clone(diffEdgesField.getChildren().concat(nodeWithID));
var connectionFind=connectionField.cloneFieldWithCalls(
[diffEdgesField],
rangeInfo.filterCalls.concat({name:'find',value:nodeID}));

if(connectionFind){
hasSplitQueries=true;

var connectionParent=require('RelayQueryPath').getParent(
require('RelayQueryPath').getParent(path));

var connectionQuery=require('RelayQueryPath').getQuery(
this.$RelayDiffQueryBuilder_store,
connectionParent,
connectionFind);

this.splitQuery(connectionQuery);}}else 

{
require('warning')(
false,
'RelayDiffQueryBuilder: connection `edges{*}` fields can only '+
'be refetched if the connection supports the `find` call. '+
'Cannot refetch data for field `%s`.',
connectionField.getStorageKey());}}}}












return {
diffNode:null,
trackedNode:hasSplitQueries?edgeField:trackedNode};}}]);return RelayDiffQueryBuilder;}();







function makeScope(dataID){
return {
connectionField:null,
dataID:dataID,
edgeID:null,
rangeInfo:null};}













































function splitNodeAndEdgesFields(
edgeOrFragment)



{
var children=edgeOrFragment.getChildren();
var edgeChildren=[];
var hasNodeChild=false;
var nodeChildren=[];
var hasEdgeChild=false;
for(var ii=0;ii<children.length;ii++){
var child=children[ii];
if(child instanceof require('RelayQuery').Field){
if(child.getSchemaName()===NODE){
var subFields=child.getChildren();
nodeChildren=nodeChildren.concat(subFields);

hasNodeChild=
hasNodeChild||
subFields.length!==1||
!(subFields[0] instanceof require('RelayQuery').Field)||




subFields[0].getSchemaName()!=='id';}else 

{
edgeChildren.push(child);
hasEdgeChild=hasEdgeChild||!child.isRequisite();}}else 

if(child instanceof require('RelayQuery').Fragment){var _splitNodeAndEdgesFie2=
splitNodeAndEdgesFields(child);var edges=_splitNodeAndEdgesFie2.edges;var node=_splitNodeAndEdgesFie2.node;
if(edges){
edgeChildren.push(edges);
hasEdgeChild=true;}

if(node){
nodeChildren.push(node);
hasNodeChild=true;}}}



return {
edges:hasEdgeChild?edgeOrFragment.clone(edgeChildren):null,
node:hasNodeChild?edgeOrFragment.clone(nodeChildren):null};}



function buildRoot(
rootID,
nodes,
name,
type)
{
var children=[idField,typeField];
var fields=[];
nodes.forEach(function(node){
if(node instanceof require('RelayQuery').Field){
fields.push(node);}else 
{
children.push(node);}});


children.push(require('RelayQuery').Fragment.build(
'diffRelayQuery',
type,
fields));


return require('RelayQuery').Root.build(
name,
NODE,
rootID,
children,
{
identifyingArgName:ID,
identifyingArgType:ID_TYPE,
isAbstract:true,
isDeferred:false,
isPlural:false},

NODE_TYPE);}



module.exports=require('RelayProfiler').instrument('diffRelayQuery',diffRelayQuery);
'use strict';









jest.dontMock('../').
dontMock('underscore');

jest.mock('path');







var DependencyGraph=jest.genMockFn();
jest.setMock('node-haste',DependencyGraph);
var Module=undefined;
var Polyfill=undefined;

describe('Resolver',function(){
beforeEach(function(){
DependencyGraph.mockClear();
Module=jest.genMockFn().mockImpl(function(){
this.getName=jest.genMockFn();
this.getDependencies=jest.genMockFn();
this.isPolyfill=jest.genMockFn().mockReturnValue(false);
this.isJSON=jest.genMockFn().mockReturnValue(false);});

Polyfill=jest.genMockFn().mockImpl(function(){
var polyfill=new Module();
polyfill.isPolyfill.mockReturnValue(true);
return polyfill;});


DependencyGraph.replacePatterns=require.requireActual('node-haste/lib/lib/replacePatterns');
DependencyGraph.prototype.createPolyfill=jest.genMockFn();
DependencyGraph.prototype.getDependencies=jest.genMockFn();


require('path').join=jest.genMockFn().mockImpl(function(a,b){return b;});

DependencyGraph.prototype.load=jest.genMockFn().mockImpl(function(){return require('promise').resolve();});});var 


ResolutionResponseMock=function(){
function ResolutionResponseMock(_ref){var dependencies=_ref.dependencies;var mainModuleId=_ref.mainModuleId;babelHelpers.classCallCheck(this,ResolutionResponseMock);
this.dependencies=dependencies;
this.mainModuleId=mainModuleId;}babelHelpers.createClass(ResolutionResponseMock,[{key:'prependDependency',value:function prependDependency(


dependency){
this.dependencies.unshift(dependency);}},{key:'finalize',value:function finalize()


{
return require('promise').resolve(this);}},{key:'getResolvedDependencyPairs',value:function getResolvedDependencyPairs()


{
return [];}}]);return ResolutionResponseMock;}();



function createModule(id,dependencies){
var module=new Module({});
module.getName.mockImpl(function(){return require('promise').resolve(id);});
module.getDependencies.mockImpl(function(){return require('promise').resolve(dependencies);});
return module;}


function createJsonModule(id){
var module=createModule(id,[]);
module.isJSON.mockReturnValue(true);
return module;}


function createPolyfill(id,dependencies){
var polyfill=new Polyfill({});
polyfill.getName=jest.genMockFn().mockImpl(function(){return require('promise').resolve(id);});
polyfill.getDependencies=
jest.genMockFn().mockImpl(function(){return require('promise').resolve(dependencies);});
return polyfill;}


describe('getDependencies',function(){
it('forwards transform options to the dependency graph',function(){
var transformOptions={arbitrary:'options'};
var platform='ios';
var entry='/root/index.js';

DependencyGraph.prototype.getDependencies.mockImplementation(
function(){return require('promise').reject();});
new (require('../'))({projectRoot:'/root'}).
getDependencies(entry,{platform:platform},transformOptions);
expect(DependencyGraph.prototype.getDependencies).toBeCalledWith({
entryPath:entry,
platform:platform,
transformOptions:transformOptions,
recursive:true});});



pit('should get dependencies with polyfills',function(){
var module=createModule('index');
var deps=[module];

var depResolver=new (require('../'))({
projectRoot:'/root'});


DependencyGraph.prototype.getDependencies.mockImpl(function(){
return require('promise').resolve(new ResolutionResponseMock({
dependencies:deps,
mainModuleId:'index'}));});



return depResolver.getDependencies('/root/index.js',{dev:false}).
then(function(result){
expect(result.mainModuleId).toEqual('index');
expect(result.dependencies[result.dependencies.length-1]).toBe(module);
expect(require('underscore').pluck(DependencyGraph.prototype.createPolyfill.mock.calls,0)).toEqual([
{file:'polyfills/polyfills.js',
id:'polyfills/polyfills.js',
dependencies:[]},

{id:'polyfills/console.js',
file:'polyfills/console.js',
dependencies:[
'polyfills/polyfills.js']},


{id:'polyfills/error-guard.js',
file:'polyfills/error-guard.js',
dependencies:[
'polyfills/polyfills.js',
'polyfills/console.js']},


{id:'polyfills/String.prototype.es6.js',
file:'polyfills/String.prototype.es6.js',
dependencies:[
'polyfills/polyfills.js',
'polyfills/console.js',
'polyfills/error-guard.js']},


{id:'polyfills/Array.prototype.es6.js',
file:'polyfills/Array.prototype.es6.js',
dependencies:[
'polyfills/polyfills.js',
'polyfills/console.js',
'polyfills/error-guard.js',
'polyfills/String.prototype.es6.js']},


{id:'polyfills/Array.es6.js',
file:'polyfills/Array.es6.js',
dependencies:[
'polyfills/polyfills.js',
'polyfills/console.js',
'polyfills/error-guard.js',
'polyfills/String.prototype.es6.js',
'polyfills/Array.prototype.es6.js']},


{id:'polyfills/Object.es7.js',
file:'polyfills/Object.es7.js',
dependencies:[
'polyfills/polyfills.js',
'polyfills/console.js',
'polyfills/error-guard.js',
'polyfills/String.prototype.es6.js',
'polyfills/Array.prototype.es6.js',
'polyfills/Array.es6.js']},


{id:'polyfills/babelHelpers.js',
file:'polyfills/babelHelpers.js',
dependencies:[
'polyfills/polyfills.js',
'polyfills/console.js',
'polyfills/error-guard.js',
'polyfills/String.prototype.es6.js',
'polyfills/Array.prototype.es6.js',
'polyfills/Array.es6.js',
'polyfills/Object.es7.js']}]);});});






pit('should get dependencies with polyfills',function(){
var module=createModule('index');
var deps=[module];

var depResolver=new (require('../'))({
projectRoot:'/root'});


DependencyGraph.prototype.getDependencies.mockImpl(function(){
return require('promise').resolve(new ResolutionResponseMock({
dependencies:deps,
mainModuleId:'index'}));});



var polyfill={};
DependencyGraph.prototype.createPolyfill.mockReturnValueOnce(polyfill);
return depResolver.getDependencies('/root/index.js',{dev:true}).
then(function(result){
expect(result.mainModuleId).toEqual('index');
expect(DependencyGraph.mock.instances[0].getDependencies).
toBeCalledWith({entryPath:'/root/index.js',recursive:true});
expect(result.dependencies[0]).toBe(polyfill);
expect(result.dependencies[result.dependencies.length-1]).
toBe(module);});});



pit('should pass in more polyfills',function(){
var module=createModule('index');
var deps=[module];

var depResolver=new (require('../'))({
projectRoot:'/root',
polyfillModuleNames:['some module']});


DependencyGraph.prototype.getDependencies.mockImpl(function(){
return require('promise').resolve(new ResolutionResponseMock({
dependencies:deps,
mainModuleId:'index'}));});



return depResolver.getDependencies('/root/index.js',{dev:false}).
then(function(result){
expect(result.mainModuleId).toEqual('index');
expect(DependencyGraph.prototype.createPolyfill.mock.calls[result.dependencies.length-2]).toEqual([
{file:'some module',
id:'some module',
dependencies:[
'polyfills/polyfills.js',
'polyfills/console.js',
'polyfills/error-guard.js',
'polyfills/String.prototype.es6.js',
'polyfills/Array.prototype.es6.js',
'polyfills/Array.es6.js',
'polyfills/Object.es7.js',
'polyfills/babelHelpers.js']}]);});});});







describe('wrapModule',function(){
pit('should resolve modules',function(){var _marked=[















findDependencyOffsets].map(regeneratorRuntime.mark);var depResolver=new (require('../'))({projectRoot:'/root'});var code=['require("x")','require("y")','require( \'z\' )','require( "a")','require("b" )'].join('\n');function findDependencyOffsets(){var 
re,
match;return regeneratorRuntime.wrap(function findDependencyOffsets$(_context){while(1){switch(_context.prev=_context.next){case 0:re=/(['"']).*?\1/g;match=undefined;case 2:if(!(
match=re.exec(code))){_context.next=7;break;}_context.next=5;return (
match.index);case 5:_context.next=2;break;case 7:case 'end':return _context.stop();}}},_marked[0],this);}



var dependencyOffsets=Array.from(findDependencyOffsets());
var module=createModule('test module',['x','y']);
var resolutionResponse=new ResolutionResponseMock({
dependencies:[module],
mainModuleId:'test module'});


resolutionResponse.getResolvedDependencyPairs=function(module){
return [
['x',createModule('changed')],
['y',createModule('Y')]];};



return depResolver.wrapModule({
resolutionResponse:resolutionResponse,
module:createModule('test module',['x','y']),
name:'test module',
code:code,
meta:{dependencyOffsets:dependencyOffsets}}).
then(function(_ref2){var processedCode=_ref2.code;
expect(processedCode).toEqual([
'__d("test module", function(global, require, module, exports) {'+

'require("changed")',
'require("Y")',
'require( \'z\' )',
'require( "a")',
'require("b" )',
'});'].
join('\n'));});});



pit('should pass through passed-in source maps',function(){
var module=createModule('test module');
var resolutionResponse=new ResolutionResponseMock({
dependencies:[module],
mainModuleId:'test module'});

var inputMap={version:3,mappings:'ARBITRARY'};
return new (require('../'))({projectRoot:'/root'}).wrapModule({
resolutionResponse:resolutionResponse,
module:module,
name:'test module',
code:'arbitrary(code)',
map:inputMap}).
then(function(_ref3){var map=_ref3.map;return expect(map).toBe(inputMap);});});


pit('should resolve polyfills',function(){
var depResolver=new (require('../'))({
projectRoot:'/root'});

var polyfill=createPolyfill('test polyfill',[]);
var code=[
'global.fetch = () => 1;'].
join('');
return depResolver.wrapModule({
module:polyfill,
code:code}).
then(function(_ref4){var processedCode=_ref4.code;
expect(processedCode).toEqual([
'(function(global) {',
'global.fetch = () => 1;',
"\n})(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this);"].
join(''));});});



describe('JSON files:',function(){
var code=JSON.stringify({arbitrary:"data"});
var id='arbitrary.json';
var depResolver=undefined,module=undefined,resolutionResponse=undefined;

beforeEach(function(){
depResolver=new (require('../'))({projectRoot:'/root'});
module=createJsonModule(id);
resolutionResponse=new ResolutionResponseMock({
dependencies:[module],
mainModuleId:id});});



pit('should prefix JSON files with `module.exports=`',function(){
return depResolver.
wrapModule({resolutionResponse:resolutionResponse,module:module,name:id,code:code}).
then(function(_ref5){var processedCode=_ref5.code;return (
expect(processedCode).toEqual(['__d('+
JSON.stringify(id)+', function(global, require, module, exports) {','module.exports = '+
code+'\n});'].
join('')));});});});



describe('minification:',function(){
var code='arbitrary(code)';
var id='arbitrary.js';
var depResolver=undefined,minifyCode=undefined,module=undefined,resolutionResponse=undefined,sourceMap=undefined;

beforeEach(function(){
minifyCode=jest.genMockFn().mockImpl(function(filename,code,map){return (
require('promise').resolve({code:code,map:map}));});
depResolver=new (require('../'))({
projectRoot:'/root',
minifyCode:minifyCode});

module=createModule(id);
module.path='/arbitrary/path.js';
resolutionResponse=new ResolutionResponseMock({
dependencies:[module],
mainModuleId:id});

sourceMap={version:3,sources:['input'],mappings:'whatever'};});


pit('should invoke the minifier with the wrapped code',function(){
var wrappedCode='__d("'+id+'", function(global, require, module, exports) {'+code+'\n});';
return depResolver.
wrapModule({
resolutionResponse:resolutionResponse,
module:module,
name:id,
code:code,
map:sourceMap,
minify:true}).
then(function(){
expect(minifyCode).toBeCalledWith(module.path,wrappedCode,sourceMap);});});



pit('should use minified code',function(){
var minifiedCode='minified(code)';
var minifiedMap={version:3,file:['minified']};
minifyCode.mockReturnValue(require('promise').resolve({code:minifiedCode,map:minifiedMap}));
return depResolver.
wrapModule({resolutionResponse:resolutionResponse,module:module,name:id,code:code,minify:true}).
then(function(_ref6){var code=_ref6.code;var map=_ref6.map;
expect(code).toEqual(minifiedCode);
expect(map).toEqual(minifiedMap);});});});});});
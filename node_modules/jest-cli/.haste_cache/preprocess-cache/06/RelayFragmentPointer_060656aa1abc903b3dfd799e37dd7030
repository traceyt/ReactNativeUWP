'use strict';







































var RelayFragmentPointer={
addFragment:function(
record,
fragment,
dataID)
{
var fragmentMap=record.__fragments__;
if(fragmentMap==null){
fragmentMap=record.__fragments__={};}

!(
typeof fragmentMap==='object'&&fragmentMap!=null)?require('invariant')(0,
'RelayFragmentPointer: Expected record to contain a fragment map, got '+
'`%s` for record `%s`.',
fragmentMap,
record.__dataID__):undefined;

fragmentMap[fragment.getConcreteFragmentID()]=dataID;},


getDataID:function(
record,
fragment)
{
var fragmentMap=record.__fragments__;
if(typeof fragmentMap==='object'&&fragmentMap!=null){
return fragmentMap[fragment.getConcreteFragmentID()];}

return null;},


create:function(
dataID,
fragment)
{
var record=require('RelayRecord').create(dataID);
RelayFragmentPointer.addFragment(record,fragment,dataID);
return record;},


createForRoot:function(
store,
query)
{
var fragment=getRootFragment(query);
if(!fragment){
return null;}

var storageKey=query.getStorageKey();
var pointers=[];
require('forEachRootCallArg')(query,function(_ref){var identifyingArgKey=_ref.identifyingArgKey;
var dataID=store.getDataID(storageKey,identifyingArgKey);
if(dataID==null){
pointers.push(null);}else 
{
pointers.push(RelayFragmentPointer.create(dataID,fragment));}});



var identifyingArg=query.getIdentifyingArg();
var identifyingArgValue=
identifyingArg&&identifyingArg.value||null;
if(Array.isArray(identifyingArgValue)){
return pointers;}

return pointers[0];}};



function getRootFragment(query){
var batchCall=query.getBatchCall();
if(batchCall){
!
false?require('invariant')(0,
'Queries supplied at the root cannot have batch call variables. Query '+
'`%s` has a batch call variable, `%s`.',
query.getName(),
batchCall.refParamName):undefined;}


var fragment=undefined;
query.getChildren().forEach(function(child){
if(child instanceof require('RelayQuery').Fragment){
!
!fragment?require('invariant')(0,
'Queries supplied at the root should contain exactly one fragment '+
'(e.g. `${Component.getFragment(\'...\')}`). Query `%s` contains '+
'more than one fragment.',
query.getName()):undefined;

fragment=child;}else 
if(child instanceof require('RelayQuery').Field){
!
child.isGenerated()?require('invariant')(0,
'Queries supplied at the root should contain exactly one fragment '+
'and no fields. Query `%s` contains a field, `%s`. If you need to '+
'fetch fields, declare them in a Relay container.',
query.getName(),
child.getSchemaName()):undefined;}});



return fragment;}


module.exports=RelayFragmentPointer;
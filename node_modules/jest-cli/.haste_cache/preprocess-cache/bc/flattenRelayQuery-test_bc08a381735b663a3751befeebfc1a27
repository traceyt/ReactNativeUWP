/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails oncall+relay
 */

'use strict';

require('configureForRelayOSS');






describe('flattenRelayQuery', function () {var 
  getNode = require('RelayTestUtils').getNode;

  beforeEach(function () {
    jasmine.addMatchers(require('RelayTestUtils').matchers);});


  it('flattens roots', function () {
    var node = getNode((function () {return { children: [{ children: [{ fieldName: 'firstName', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, { children: [{ fieldName: 'lastName', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'KS9YzyjQJqOF:1', kind: 'Fragment', metadata: { isAbstract: true }, name: 'Actor', type: 'Actor' }], fieldName: 'actor', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true }, type: 'Actor' }, { children: [{ children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'actor', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true }, type: 'Actor' }], id: 'KS9YzyjQJqOF:0', kind: 'Fragment', metadata: {}, name: 'Viewer', type: 'Viewer' }], fieldName: 'viewer', kind: 'Query', metadata: {}, name: 'FlattenRelayQuery', type: 'Viewer' };})());
















    var expected = getNode((function () {return { children: [{ children: [{ fieldName: 'firstName', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'lastName', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'actor', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true }, type: 'Actor' }], fieldName: 'viewer', kind: 'Query', metadata: {}, name: 'FlattenRelayQuery', type: 'Viewer' };})());










    expect(require('flattenRelayQuery')(node)).toEqualQueryRoot(expected);});


  it('flattens fragments', function () {
    var node = getNode((function () {return { children: [{ children: [{ fieldName: 'firstName', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, { children: [{ fieldName: 'lastName', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, { children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, { children: [{ fieldName: 'username', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'Jy2nBiXWwS34:0', kind: 'Fragment', metadata: {}, name: 'User', type: 'User' }], id: 'Jy2nBiXWwS34:1', kind: 'Fragment', metadata: { isAbstract: true }, name: 'Actor', type: 'Actor' }], id: 'Jy2nBiXWwS34:2', kind: 'Fragment', metadata: { isAbstract: true }, name: 'Actor', type: 'Actor' }], fieldName: 'actor', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true }, type: 'Actor' }], id: 'Jy2nBiXWwS34:3', kind: 'Fragment', metadata: {}, name: 'FlattenRelayQueryRelayQL', type: 'Viewer' };})());















    var expected = getNode((function () {return { children: [{ children: [{ fieldName: 'firstName', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'lastName', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, { children: [{ fieldName: 'username', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'YSLUd0WLSyfC:0', kind: 'Fragment', metadata: {}, name: 'User', type: 'User' }], fieldName: 'actor', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true }, type: 'Actor' }], id: 'YSLUd0WLSyfC:1', kind: 'Fragment', metadata: {}, name: 'FlattenRelayQueryRelayQL', type: 'Viewer' };})());











    expect(require('flattenRelayQuery')(node)).toEqualQueryNode(expected);});


  it('flattens fields', function () {
    var node = getNode((function () {return { children: [{ children: [{ fieldName: 'firstName', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, { children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'lastName', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'ZgeAgPkqSY8V:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'Actor', type: 'Actor' }], fieldName: 'actor', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true }, type: 'Actor' }], fieldName: 'viewer', kind: 'Query', metadata: {}, name: 'FlattenRelayQuery', type: 'Viewer' };})()).












    getFieldByStorageKey('actor');
    var expected = getNode((function () {return { children: [{ children: [{ fieldName: 'firstName', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'lastName', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'actor', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true }, type: 'Actor' }], fieldName: 'viewer', kind: 'Query', metadata: {}, name: 'FlattenRelayQuery', type: 'Viewer' };})()).









    getFieldByStorageKey('actor');
    expect(require('flattenRelayQuery')(node)).toEqualQueryNode(expected);});


  it('flattens empty fragments', function () {
    var emptyFragment = (function (RQL_0) {return { children: [].concat.apply([], [require('Relay').QL.__frag(RQL_0)]), id: 'FWLQXss8bq7X:0', kind: 'Fragment', metadata: {}, name: 'FlattenRelayQueryRelayQL', type: 'TimezoneInfo' };})(

    null);



    var fragmentNode = getNode(emptyFragment);
    var rootNode = getNode((function (RQL_0) {return { children: [{ children: [].concat.apply([], [require('Relay').QL.__frag(RQL_0)]), fieldName: 'timezoneEstimate', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'TimezoneInfo' }], fieldName: 'viewer', kind: 'Query', metadata: {}, name: 'FlattenRelayQuery', type: 'Viewer' };})(



    emptyFragment));




    var fieldNode = rootNode.getFieldByStorageKey('timezoneEstimate');

    expect(require('flattenRelayQuery')(fragmentNode)).toBe(null);
    expect(require('flattenRelayQuery')(rootNode)).toBe(null);
    expect(require('flattenRelayQuery')(fieldNode)).toBe(null);});


  it('optionally removes fragments', function () {
    var node = getNode((function () {return { children: [{ children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, { children: [{ fieldName: 'firstName', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'lVGmufWxAmAf:0', kind: 'Fragment', metadata: {}, name: 'User', type: 'User' }, { children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'lVGmufWxAmAf:1', kind: 'Fragment', metadata: {}, name: 'Page', type: 'Page' }], fieldName: 'actor', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true }, type: 'Actor' }], id: 'lVGmufWxAmAf:2', kind: 'Fragment', metadata: {}, name: 'Viewer', type: 'Viewer' }], fieldName: 'viewer', kind: 'Query', metadata: {}, name: 'FlattenRelayQuery', type: 'Viewer' };})());















    var expected = getNode((function () {return { children: [{ children: [{ fieldName: 'firstName', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'actor', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isAbstract: true }, type: 'Actor' }], fieldName: 'viewer', kind: 'Query', metadata: {}, name: 'FlattenRelayQuery', type: 'Viewer' };})());









    expect(require('flattenRelayQuery')(node, { 
      shouldRemoveFragments: true })).
    toEqualQueryNode(expected);});


  it('optionally preserves empty non-leaf nodes', function () {
    var node = getNode((function () {return { children: [{ fieldName: 'likers', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true }, type: 'LikersOfContentConnection' }, { fieldName: 'doesViewerLike', kind: 'Field', metadata: {}, type: 'Boolean' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'JKN8c/4qA4xs:0', kind: 'Fragment', metadata: {}, name: 'FlattenRelayQueryRelayQL', type: 'Comment' };})());





    var flattened = require('flattenRelayQuery')(node, { 
      preserveEmptyNodes: true });

    expect(flattened.getChildren().length).toBe(3);
    expect(flattened.getChildren()[0].getSchemaName()).toBe('likers');
    expect(flattened.getChildren()[1].getSchemaName()).toBe('doesViewerLike');
    expect(flattened.getChildren()[2].getSchemaName()).toBe('id');});});
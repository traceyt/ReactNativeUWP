'use strict';







jest.
dontMock('ActionCollisionMap').
dontMock('ActionQueue').
dontMock('GraphQLMutationAction').
dontMock('GraphQLMutationDataHandler').
dontMock('GraphQLMutatorHub').
dontMock('GraphQLStore');

























describe('GraphQLStore Legacy Mutations',function(){var _RelayConnectionInter=require('RelayConnectionInterface');var 
CLIENT_MUTATION_ID=_RelayConnectionInter.CLIENT_MUTATION_ID;var _RelayTestUtils=require('RelayTestUtils');var 
getNode=_RelayTestUtils.getNode;

var clientMutationIDs=undefined;
var readRecord=undefined;
var storeData=undefined;

beforeEach(function(){
jest.resetModuleRegistry();

clientMutationIDs=[];
require('ClientIDs').getNewClientID.mockImplementation(function(){
var clientMutationID='CMID['+clientMutationIDs.length+']';
clientMutationIDs.push(clientMutationID);
return clientMutationID;});

readRecord=function(fragment,dataID,callback){
callback(require('readRelayQueryData')(storeData,getNode(fragment),dataID).data);};

storeData=require('RelayStore').getStoreData();
require('GraphQLRange').prototype.retrieveRangeInfoForQuery.mockReturnValue({
requestedEdgeIDs:[],
diffCalls:null});


jasmine.addMatchers({
toBeOptimistic:function(){
return {
compare:function(record){
var dataID=require('RelayRecord').getDataID(record);
return {
pass:storeData.hasOptimisticUpdate(dataID)};}};},




toBeOptimisticFor:function(){
return {
compare:function(record,expectedClientMutationIDs){
var dataID=require('RelayRecord').getDataID(record);
if(!storeData.hasOptimisticUpdate(dataID)){
return {
pass:false,
message:'Expected `'+dataID+'` to have optimistic updates.'};}


var actualIDs=storeData.getClientMutationIDs(dataID);
return {
pass:jasmine.matchersUtil.equals(
actualIDs,
expectedClientMutationIDs),

message:'Expected `'+dataID+'` to be optimistic for '+
JSON.stringify(expectedClientMutationIDs)+', got '+
JSON.stringify(actualIDs)+'.'};}};},




toEmitChangesFor:function(){var 
calls=storeData.getChangeEmitter().broadcastChangeForID.mock.calls;
return {
compare:function(callback,expectedIDs){
var startIndex=calls.length;
callback();
var actualIDs=calls.slice(startIndex).map(function(_ref){var _ref2=babelHelpers.slicedToArray(_ref,1);var dataID=_ref2[0];return dataID;});
return {
pass:expectedIDs.every(function(dataID){return actualIDs.indexOf(dataID)>=0;}),
message:'Expected change to be emitted for '+
JSON.stringify(expectedIDs)+', got '+
JSON.stringify(actualIDs)+'.'};}};},




toHaveErrorStatus:function(){
return {
compare:function(record){
return {
pass:require('RelayRecordStatusMap').isErrorStatus(record.__status__)};}};},




toMatchRecord:function(){
return {compare:require('matchRecord')};}});});




describe('with viewer notifications data',function(){
var mutation=undefined;
var fragment=undefined;

beforeEach(function(){
fragment=function(){return {children:[{children:[{fieldName:'unseen_count',kind:'Field',metadata:{},type:'Int'}],fieldName:'notification_stories',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'NotificationStoriesConnection'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'GraphQLStoreLegacyMutationsRelayQL',type:'Viewer'};}();






mutation=function(){return {calls:[{kind:'Call',metadata:{},name:'viewer_notifications_update_all_seen_state',value:{kind:'CallVariable',callVariableName:'input'}}],children:[{children:[{children:[{fieldName:'unseen_count',kind:'Field',metadata:{},type:'Int'}],fieldName:'notification_stories',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'NotificationStoriesConnection'}],fieldName:'viewer',kind:'Field',metadata:{canHaveSubselections:true},type:'Viewer'},{fieldName:'client_mutation_id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],kind:'Mutation',metadata:{inputType:'ViewerNotificationsUpdateAllSeenStateData!'},name:'GraphQLStoreLegacyMutations',responseType:'ViewerNotificationsUpdateAllSeenStateResponsePayload'};}();










storeData.getRecordWriter().putDataID('viewer',null,require('generateClientID')());});


it('handles mutations on the viewer',function(){var _viewer_notifications;
var node=getNode(function(RQL_0){return {children:[].concat.apply([],[require('Relay').QL.__frag(RQL_0)]),fieldName:'viewer',kind:'Query',metadata:{},name:'GraphQLStoreLegacyMutations',type:'Viewer'};}(


fragment));



var queryPayload=require('transformRelayQueryPayload')(node,{
viewer:{
notification_stories:{
unseen_count:1}}});



storeData.handleQueryPayload(node,queryPayload);

var serverPayload={
viewer_notifications_update_all_seen_state:(_viewer_notifications={},babelHelpers.defineProperty(_viewer_notifications,
CLIENT_MUTATION_ID,'client_mutation_id'),babelHelpers.defineProperty(_viewer_notifications,'viewer',
{
notification_stories:{
unseen_count:0}}),_viewer_notifications)};




expect(function(){
require('GraphQLStore').handleServerMutation(serverPayload,mutation);}).
toEmitChangesFor(['client:2']);
readRecord(fragment,'client:1',function(record){
expect(record).toMatchRecord({
notification_stories:{
unseen_count:0}});});});





it('handles fields on new records',function(){var _viewer_notifications2;
readRecord(fragment,'client:1',function(record){
expect(record).toBeUndefined();});


var serverPayload={
viewer_notifications_update_all_seen_state:(_viewer_notifications2={},babelHelpers.defineProperty(_viewer_notifications2,
CLIENT_MUTATION_ID,'client_mutation_id'),babelHelpers.defineProperty(_viewer_notifications2,'viewer',
{
notification_stories:{
unseen_count:0}}),_viewer_notifications2)};




storeData.getRecordWriter().putDataID('viewer',null,'client:1');
require('GraphQLStore').handleServerMutation(serverPayload,mutation);

readRecord(fragment,'client:1',function(record){
expect(record).toMatchRecord({
notification_stories:{
unseen_count:0}});});});





it('handles mutations with plural fields',function(){var _viewer_notifications3;
var connectionFragment=function(){return {children:[{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:2}}],children:[{children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'seen_state',kind:'Field',metadata:{},type:'StorySeenState'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'Story'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'NotificationStoriesEdge'},{children:[{fieldName:'has_next_page',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'has_previous_page',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'page_info',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],fieldName:'notification_stories',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'NotificationStoriesConnection'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'GraphQLStoreLegacyMutationsRelayQL',type:'Viewer'};}();











var connectionNode=getNode(function(RQL_0){return {children:[].concat.apply([],[require('Relay').QL.__frag(RQL_0)]),fieldName:'viewer',kind:'Query',metadata:{},name:'GraphQLStoreLegacyMutations',type:'Viewer'};}(


connectionFragment));



var queryPayload=require('transformRelayQueryPayload')(connectionNode,{
viewer:{
notification_stories:{
edges:[
{
node:{
id:'123',
seen_state:'UNSEEN'},

cursor:'123'},

{
node:{
id:'124',
seen_state:'UNSEEN'},

cursor:'124'}]}}});





storeData.handleQueryPayload(connectionNode,queryPayload);

var pluralMutation=function(){return {calls:[{kind:'Call',metadata:{},name:'viewer_notifications_update_all_seen_state',value:{kind:'CallVariable',callVariableName:'input'}}],children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'seen_state',kind:'Field',metadata:{},type:'StorySeenState'}],fieldName:'stories',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isPlural:true},type:'Story'},{fieldName:'client_mutation_id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],kind:'Mutation',metadata:{inputType:'ViewerNotificationsUpdateAllSeenStateData!'},name:'GraphQLStoreLegacyMutations',responseType:'ViewerNotificationsUpdateAllSeenStateResponsePayload'};}();









var serverPayload={
viewer_notifications_update_all_seen_state:(_viewer_notifications3={},babelHelpers.defineProperty(_viewer_notifications3,
CLIENT_MUTATION_ID,require('ClientIDs').getNewClientID()),babelHelpers.defineProperty(_viewer_notifications3,'stories',
[
{
id:'123',
seen_state:'SEEN_AND_READ'},

{
id:'124',
seen_state:'SEEN_AND_READ'}]),_viewer_notifications3)};




expect(function(){
require('GraphQLStore').handleServerMutation(serverPayload,pluralMutation);}).
toEmitChangesFor(['123','124']);

require('GraphQLRange').prototype.retrieveRangeInfoForQuery.mockReturnValue({
requestedEdgeIDs:['client:client:2:123','client:client:2:124'],
diffCalls:null});


readRecord(connectionFragment,'client:1',function(record){
expect(record).toMatchRecord({
notification_stories:{
edges:[
{
node:{
id:'123',
seen_state:'SEEN_AND_READ'}},


{
node:{
id:'124',
seen_state:'SEEN_AND_READ'}}]}});});});});









describe('with feedback like data',function(){
var mutation=undefined;
var fragment=undefined;

beforeEach(function(){
fragment=function(){return {children:[{fieldName:'does_viewer_like',kind:'Field',metadata:{},type:'Boolean'},{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{children:[{fieldName:'count',kind:'Field',metadata:{},type:'Int'}],fieldName:'likers',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'LikersOfContentConnection'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'GraphQLStoreLegacyMutationsRelayQL',type:'Feedback'};}();








mutation=function(){return {calls:[{kind:'Call',metadata:{},name:'feedback_like',value:{kind:'CallVariable',callVariableName:'input'}}],children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{children:[{fieldName:'count',kind:'Field',metadata:{},type:'Int'}],fieldName:'likers',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true},type:'LikersOfContentConnection'},{fieldName:'does_viewer_like',kind:'Field',metadata:{},type:'Boolean'}],fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'},{fieldName:'client_mutation_id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],kind:'Mutation',metadata:{inputType:'FeedbackLikeData!'},name:'GraphQLStoreLegacyMutations',responseType:'FeedbackLikeResponsePayload'};}();












var node=getNode(function(RQL_0){return {calls:[{kind:'Call',metadata:{type:'ID!'},name:'id',value:{kind:'CallValue',callValue:'123'}}],children:[{children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},require('Relay').QL.__frag(RQL_0)]),directives:[{kind:'Directive',name:'fixme_fat_interface',args:[]}],fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID!'},name:'GraphQLStoreLegacyMutations',type:'Node'};}(



fragment));




var queryPayload=require('transformRelayQueryPayload')(node,{
'123':{
id:'123',
__typename:'Story',
feedback:{
does_viewer_like:false,
id:'456',
__typename:'Feedback',
likers:{
count:3}}}});




storeData.handleQueryPayload(node,queryPayload);});


it('handles simple mutations',function(){var _feedback_like;
var optimisticPayload={
feedback_like:{
feedback:{
does_viewer_like:true,
id:'456',
__typename:'Feedback',
likers:{
count:4}}}};




var action=new (require('GraphQLMutationAction'))();
expect(function(){
action.runOptimisticAction(optimisticPayload,mutation);}).
toEmitChangesFor(['456','client:1']);

readRecord(fragment,'456',function(record){
expect(record).toBeOptimisticFor([clientMutationIDs[0]]);
expect(record).toMatchRecord({
does_viewer_like:true,
id:'456',
likers:{
count:4}});});



expect(require('ActionQueue').getQueueLength()).toBe(1);
expect(require('ActionQueue').getActionByID(clientMutationIDs[0])).toEqual(action);

var serverPayload={
feedback_like:(_feedback_like={},babelHelpers.defineProperty(_feedback_like,
CLIENT_MUTATION_ID,clientMutationIDs[0]),babelHelpers.defineProperty(_feedback_like,'feedback',
{
does_viewer_like:true,
id:'456',
likers:{
count:5}}),_feedback_like)};




expect(function(){
require('GraphQLStore').handleServerMutation(serverPayload,mutation);}).
toEmitChangesFor(['456','client:1']);

readRecord(fragment,'456',function(record){
expect(record).not.toBeOptimistic();
expect(record).toMatchRecord({
does_viewer_like:true,
id:'456',
likers:{
count:5}});});



expect(require('ActionQueue').getQueueLength()).toBe(0);});


it('handles colliding mutations',function(){var _feedback_like2,_feedback_unlike;
var likeOptimisticPayload={
feedback_like:{
feedback:{
does_viewer_like:true,
id:'456',
likers:{
count:4}}}};




var likeAction=new (require('GraphQLMutationAction'))('likeCollisionKey');
expect(function(){
likeAction.runOptimisticAction(likeOptimisticPayload,mutation);}).
toEmitChangesFor(['client:1']);

likeAction.runServerAction(mutation,{type:'like'});
expect(require('ActionQueue').getQueueLength()).toBe(1);
expect(require('ActionCollisionMap').hasPendingActionForKey('likeCollisionKey')).
toBeTruthy();

readRecord(fragment,'456',function(record){
expect(record).toBeOptimisticFor([clientMutationIDs[0]]);
expect(record).toMatchRecord({
does_viewer_like:true,
id:'456',
likers:{
count:4}});});




var unlikeOptimisticPayload={
feedback_unlike:{
feedback:{
does_viewer_like:false,
id:'456',
likers:{
count:3}}}};




var unlikeAction=new (require('GraphQLMutationAction'))('likeCollisionKey');
expect(function(){
unlikeAction.runOptimisticAction(unlikeOptimisticPayload,mutation);}).
toEmitChangesFor(['client:1']);
unlikeAction.runServerAction(mutation,{type:'unlike'});
expect(require('ActionQueue').getQueueLength()).toBe(2);

readRecord(fragment,'456',function(record){
expect(record).toBeOptimisticFor([
clientMutationIDs[0],
clientMutationIDs[1]]);

expect(record).toMatchRecord({
does_viewer_like:false,
id:'456',
likers:{
count:3}});});





expect(require('RQLMutation').send.mock.calls.length).toBe(1);
expect(require('RQLMutation').send.mock.calls[0][1].input.type).toEqual('like');

var likeServerPayload={
feedback_like:(_feedback_like2={},babelHelpers.defineProperty(_feedback_like2,
CLIENT_MUTATION_ID,clientMutationIDs[0]),babelHelpers.defineProperty(_feedback_like2,'feedback',
{
does_viewer_like:true,
id:'456',
likers:{
count:5}}),_feedback_like2)};




expect(function(){
require('GraphQLStore').handleServerMutation(likeServerPayload,mutation);}).
toEmitChangesFor(['client:1']);
expect(require('ActionQueue').getQueueLength()).toBe(1);



expect(require('RQLMutation').send.mock.calls.length).toBe(2);
expect(require('RQLMutation').send.mock.calls[1][1].input.type).toEqual('unlike');



readRecord(fragment,'456',function(record){
expect(record).toBeOptimisticFor([clientMutationIDs[1]]);
expect(record).toMatchRecord({
does_viewer_like:false,
id:'456',
likers:{
count:3}});});




var unlikeServerPayload={
feedback_unlike:(_feedback_unlike={},babelHelpers.defineProperty(_feedback_unlike,
CLIENT_MUTATION_ID,clientMutationIDs[1]),babelHelpers.defineProperty(_feedback_unlike,'feedback',
{
does_viewer_like:false,
id:'456',
likers:{
count:4}}),_feedback_unlike)};




expect(function(){
require('GraphQLStore').handleServerMutation(unlikeServerPayload,mutation);}).
toEmitChangesFor(['client:1']);
expect(require('ActionQueue').getQueueLength()).toBe(0);

readRecord(fragment,'456',function(record){
expect(record).not.toBeOptimistic();
expect(record).toMatchRecord({
does_viewer_like:false,
id:'456',
likers:{
count:4}});});});





it('handles errors with rollback',function(){
var optimisticPayload={
feedback_like:{
feedback:{
does_viewer_like:true,
id:'456',
__typename:'Feedback',
likers:{
count:4}}}};




var action=new (require('GraphQLMutationAction'))();
action.runOptimisticAction(optimisticPayload,mutation);

expect(function(){
require('GraphQLStore').handleMutationRollback(clientMutationIDs[0]);}).
toEmitChangesFor(['client:1']);

readRecord(fragment,'456',function(record){
expect(record).not.toBeOptimistic();
expect(record).toMatchRecord({
does_viewer_like:false,
id:'456',
likers:{
count:3}});});



expect(require('ActionQueue').getQueueLength()).toBe(0);});


it('handles errors without rollback',function(){
var optimisticPayload={
feedback_like:{
feedback:{
does_viewer_like:true,
id:'456',
__typename:'Feedback',
likers:{
count:4}}}};




var action=new (require('GraphQLMutationAction'))();
action.runOptimisticAction(optimisticPayload,mutation);

expect(function(){
require('GraphQLStore').handleMutationError(clientMutationIDs[0]);}).
toEmitChangesFor(['client:1']);

readRecord(fragment,'456',function(record){
expect(record).toBeOptimistic();
expect(record).toMatchRecord({
does_viewer_like:true,
id:'456',
likers:{
count:4}});});



expect(require('ActionQueue').getQueueLength()).toBe(1);});


it('handles errors with colliding mutations',function(){
var likeOptimisticPayload={
feedback_like:{
feedback:{
does_viewer_like:true,
id:'456',
likers:{
count:4}}}};




var likeAction=new (require('GraphQLMutationAction'))('likeCollisionKey');
likeAction.runOptimisticAction(likeOptimisticPayload,mutation);
likeAction.runServerAction(mutation,{type:'like'});

readRecord(fragment,'456',function(record){
expect(record).toMatchRecord({
does_viewer_like:true,
id:'456',
likers:{
count:4}});});



expect(require('ActionQueue').getQueueLength()).toBe(1);
expect(require('ActionCollisionMap').hasPendingActionForKey('likeCollisionKey')).
toBeTruthy();

var unlikeOptimisticPayload={
feedback_unlike:{
feedback:{
does_viewer_like:false,
id:'456',
likers:{
count:3}}}};




var unlikeAction=new (require('GraphQLMutationAction'))('likeCollisionKey');
unlikeAction.runOptimisticAction(unlikeOptimisticPayload,mutation);
unlikeAction.runServerAction(mutation,{type:'unlike'});

readRecord(fragment,'456',function(record){
expect(record).toMatchRecord({
does_viewer_like:false,
id:'456',
likers:{
count:3}});});



expect(require('ActionQueue').getQueueLength()).toBe(2);


expect(require('RQLMutation').send.mock.calls.length).toBe(1);
expect(require('RQLMutation').send.mock.calls[0][1].input.type).toEqual('like');

require('GraphQLStore').handleMutationRollback(clientMutationIDs[0]);


expect(require('RQLMutation').send.mock.calls.length).toBe(1);

readRecord(fragment,'456',function(record){
expect(record).toMatchRecord({
does_viewer_like:false,
id:'456',
likers:{
count:3}});});



expect(require('ActionQueue').getQueueLength()).toBe(0);
expect(require('ActionCollisionMap').hasPendingActionForKey('likeCollisionKey')).
not.toBeTruthy();});


it('throws for malformed mutation payloads',function(){
expect(function(){
require('GraphQLStore').handleServerMutation(null,mutation);}).
toThrowError('malformed mutation result payload received');

expect(function(){
require('GraphQLStore').handleServerMutation({},mutation);}).
toThrowError('malformed mutation result payload received');

expect(function(){
require('GraphQLStore').handleServerMutation(
{firstField:1,secondField:2},
mutation);}).

toThrowError('malformed mutation result payload received');});


it('throws for malformed mutation inputs',function(){
expect(function(){
require('GraphQLStore').handleServerMutation({legitField:1});}).
toThrowError(
'Must pass a mutation or subscription into handleMutationResult');


expect(function(){
require('GraphQLStore').handleServerMutation(
{legitField:1},
require('QueryBuilder').createField({name:'foo'}));}).

toThrowError(
'Must pass a mutation or subscription into handleMutationResult');});});




describe('with comments connection data',function(){
var commentFragment=undefined;
var feedbackFragment=undefined;

beforeEach(function(){
commentFragment=function(){return {children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{children:[{fieldName:'text',kind:'Field',metadata:{},type:'String'}],fieldName:'body',kind:'Field',metadata:{canHaveSubselections:true},type:'TextWithEntities'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'GraphQLStoreLegacyMutationsRelayQL',type:'Comment'};}();







feedbackFragment=function(RQL_0){return {children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{calls:[{kind:'Call',metadata:{},name:'last',value:{kind:'CallValue',callValue:10}}],children:[{fieldName:'count',kind:'Field',metadata:{},type:'Int'},{children:[{children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},require('Relay').QL.__frag(RQL_0)]),fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'Comment'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'CommentsEdge'},{children:[{fieldName:'has_next_page',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'has_previous_page',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'page_info',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],directives:[{kind:'Directive',name:'fixme_fat_interface',args:[]}],fieldName:'comments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'CommentsConnection'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'GraphQLStoreLegacyMutationsRelayQL',type:'Feedback'};}(






commentFragment);





var node=getNode(function(RQL_0){return {calls:[{kind:'Call',metadata:{type:'ID!'},name:'id',value:{kind:'CallValue',callValue:'456'}}],children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'},require('Relay').QL.__frag(RQL_0)]),fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID!'},name:'GraphQLStoreLegacyMutations',type:'Node'};}(


feedbackFragment));



var queryPayload=require('transformRelayQueryPayload')(node,{
'456':{
id:'456',
__typename:'Feedback',
comments:{
count:1,
edges:[
{
node:{
id:'abc',
__typename:'Comment',
body:{
text:'...'}},


cursor:'abc'}]}}});





storeData.handleQueryPayload(node,queryPayload);});


it('handles range add mutations',function(){
require('GraphQLMutatorHub').registerForRangeAddMutationType('comment_create',{
connectionName:'comments',
edgeName:'feedback_comment_edge'});

var mutation=function(RQL_0){return {calls:[{kind:'Call',metadata:{},name:'comment_create',value:{kind:'CallVariable',callVariableName:'input'}}],children:[{children:[{children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},require('Relay').QL.__frag(RQL_0)]),fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'Comment'},{fieldName:'cursor',kind:'Field',metadata:{isRequisite:true},type:'ID'},{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'source',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true},type:'Node'}],fieldName:'feedback_comment_edge',kind:'Field',metadata:{canHaveSubselections:true},type:'CommentsEdge'},{children:[{children:[{fieldName:'count',kind:'Field',metadata:{},type:'Int'}],directives:[{kind:'Directive',name:'fixme_fat_interface',args:[]}],fieldName:'comments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'CommentsConnection'},{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'},{fieldName:'client_mutation_id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],kind:'Mutation',metadata:{inputType:'CommentCreateData!'},name:'GraphQLStoreLegacyMutations',responseType:'CommentCreateResponsePayload'};}(




commentFragment);
















var optimisticComment={
id:'def',
body:{
text:'...'}};


var optimisticPayload={
comment_create:{
feedback_comment_edge:{
node:optimisticComment,
cursor:'4',
source:{
id:'456'}},


feedback:{
comments:{
count:2},

id:'456'}}};



var action=new (require('GraphQLMutationAction'))();
expect(function(){
action.runOptimisticAction(optimisticPayload,mutation);}).
toEmitChangesFor(['client:1']);

require('GraphQLRange').prototype.retrieveRangeInfoForQuery.mockReturnValue({
requestedEdgeIDs:['client:client:1:def','client:client:1:abc'],
diffCalls:null});


readRecord(commentFragment,'def',function(record){
expect(record).toMatchRecord(optimisticComment);});

readRecord(feedbackFragment,'456',function(record){var _record$comments=
record.comments;var edges=_record$comments.edges;var count=_record$comments.count;

expect(count).toBe(2);

expect(edges).not.toBeNull();
expect(edges.length).toBe(2);
expect(edges[0].node.id).toBe('def');
expect(edges[1].node.id).toBe('abc');});var 


calls=require('GraphQLRange').prototype.retrieveRangeInfoForQuery.mock.calls;
var lastArgs=calls[calls.length-1];
var key=require('rangeOperationToMetadataKey')[require('GraphQLMutatorConstants').PREPEND];
expect(key in lastArgs[1]).toBe(true);
expect(lastArgs[1][key].length).toBe(1);});


it('handles optimistic node deletion',function(){
require('GraphQLMutatorHub').registerForNodeDeleteMutationType('comment_delete',{
deletedIDFieldName:'deleted_comment_id'});

var mutation=function(){return {calls:[{kind:'Call',metadata:{},name:'comment_delete',value:{kind:'CallVariable',callVariableName:'input'}}],children:[{fieldName:'deleted_comment_id',kind:'Field',metadata:{},type:'ID'},{fieldName:'client_mutation_id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],kind:'Mutation',metadata:{inputType:'CommentDeleteData!'},name:'GraphQLStoreLegacyMutations',responseType:'CommentDeleteResponsePayload'};}();







var optimisticPayload={
comment_delete:{
deleted_comment_id:'abc'}};


var action=new (require('GraphQLMutationAction'))();
expect(function(){
action.runOptimisticAction(optimisticPayload,mutation);}).
toEmitChangesFor(['client:1','abc','client:client:1:abc']);


readRecord(commentFragment,'abc',function(record){
expect(record).toBeNull();});});



it('handles optimistic edge deletion',function(){
var mutation=function(){return {calls:[{kind:'Call',metadata:{},name:'comment_delete',value:{kind:'CallVariable',callVariableName:'input'}}],children:[{fieldName:'deleted_comment_id',kind:'Field',metadata:{},type:'ID'},{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'},{fieldName:'client_mutation_id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],kind:'Mutation',metadata:{inputType:'CommentDeleteData!'},name:'GraphQLStoreLegacyMutations',responseType:'CommentDeleteResponsePayload'};}();









require('GraphQLMutatorHub').registerForRangeDeleteMutationType('comment_delete',{
pathToConnection:['feedback','comments'],
deletedIDFieldName:'deleted_comment_id'});


var optimisticPayload={
comment_delete:{
deleted_comment_id:'abc',
feedback:{
id:'456'}}};



var action=new (require('GraphQLMutationAction'))();
expect(function(){
action.runOptimisticAction(optimisticPayload,mutation);}).
toEmitChangesFor(['client:1','client:client:1:abc']);


readRecord(commentFragment,'abc',function(record){
expect(record).not.toBeNull();});

readRecord(feedbackFragment,'456',function(record){
expect(record).toBeOptimisticFor([clientMutationIDs[0]]);
expect(record.comments).toBeOptimisticFor([clientMutationIDs[0]]);

expect(record.comments.edges.length).toBe(0);});var 


calls=require('GraphQLRange').prototype.retrieveRangeInfoForQuery.mock.calls;
var lastArgs=calls[calls.length-1];
var key=require('rangeOperationToMetadataKey')[require('GraphQLMutatorConstants').REMOVE];
expect(key in lastArgs[1]).toBe(true);
expect(lastArgs[1][key].length).toBe(1);});


it('handles forced range updates',function(){var _feedback,_comment_create;
var mutation=function(RQL_0){return {calls:[{kind:'Call',metadata:{},name:'comment_create',value:{kind:'CallVariable',callVariableName:'input'}}],children:[{children:[{calls:[{kind:'Call',metadata:{},name:'last',value:{kind:'CallValue',callValue:10}}],children:[{fieldName:'count',kind:'Field',metadata:{},type:'Int'},{children:[{children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},require('Relay').QL.__frag(RQL_0)]),fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'Comment'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'CommentsEdge'},{children:[{fieldName:'has_next_page',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'has_previous_page',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'page_info',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],directives:[{kind:'Directive',name:'fixme_fat_interface',args:[]}],fieldName:'comments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'CommentsConnection'},{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'},{fieldName:'client_mutation_id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],kind:'Mutation',metadata:{inputType:'CommentCreateData!'},name:'GraphQLStoreLegacyMutations',responseType:'CommentCreateResponsePayload'};}(







commentFragment);









var serverPayload={
comment_create:(_comment_create={},babelHelpers.defineProperty(_comment_create,
CLIENT_MUTATION_ID,require('ClientIDs').getNewClientID()),babelHelpers.defineProperty(_comment_create,'feedback',(_feedback={},babelHelpers.defineProperty(_feedback,

require('generateRQLFieldAlias')('comments.last(10)'),{
count:1,
edges:[
{
cursor:'cursor:789',
node:{
id:'789',
__typename:'Comment',
body:{
text:'...'}}}]}),babelHelpers.defineProperty(_feedback,'id',





'456'),babelHelpers.defineProperty(_feedback,'__typename',
'Feedback'),_feedback)),_comment_create)};



var rangeCount=require('GraphQLRange').mock.calls.length;
expect(function(){
require('GraphQLStore').handleServerMutation(serverPayload,mutation);}).
toEmitChangesFor(['client:1']);

expect(require('GraphQLRange').mock.calls.length-rangeCount).toBe(1);});


it('updates error and pending states',function(){
var mutation=function(RQL_0){return {calls:[{kind:'Call',metadata:{},name:'comment_create',value:{kind:'CallVariable',callVariableName:'input'}}],children:[{children:[{children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},require('Relay').QL.__frag(RQL_0)]),fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'Comment'},{fieldName:'cursor',kind:'Field',metadata:{isRequisite:true},type:'ID'},{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'source',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true},type:'Node'}],fieldName:'feedback_comment_edge',kind:'Field',metadata:{canHaveSubselections:true},type:'CommentsEdge'},{children:[{children:[{fieldName:'count',kind:'Field',metadata:{},type:'Int'}],directives:[{kind:'Directive',name:'fixme_fat_interface',args:[]}],fieldName:'comments',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'CommentsConnection'},{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'feedback',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'Feedback'},{fieldName:'client_mutation_id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],kind:'Mutation',metadata:{inputType:'CommentCreateData!'},name:'GraphQLStoreLegacyMutations',responseType:'CommentCreateResponsePayload'};}(




commentFragment);















require('GraphQLMutatorHub').registerForRangeAddMutationType('comment_create',{
connectionName:'comments',
edgeName:'feedback_comment_edge'});


var comment={
__typename:'Comment',
body:{
text:'...'}};


var payload={
comment_create:{
feedback_comment_edge:{
node:comment,
source:{
id:'456'}},


feedback:{
comments:{
count:2},

id:'456'}}};



var action=new (require('GraphQLMutationAction'))();
expect(function(){
action.runOptimisticAction(payload,mutation);}).
toEmitChangesFor(['client:1']);

require('GraphQLRange').prototype.retrieveRangeInfoForQuery.mockReturnValue({
requestedEdgeIDs:['client:client:1:client:3','client:client:1:abc'],
diffCalls:null});



readRecord(feedbackFragment,'456',function(record){
expect(record).toBeOptimisticFor([clientMutationIDs[0]]);
expect(record.comments).toBeOptimisticFor([clientMutationIDs[0]]);var 
node=record.comments.edges[0].node;
expect(node).toBeOptimisticFor([clientMutationIDs[0]]);
expect(node).not.toHaveErrorStatus();});



expect(function(){
require('GraphQLStore').setRangeAddErrorStatus(payload);}).
toEmitChangesFor(['client:3']);
readRecord(feedbackFragment,'456',function(record){var 
node=record.comments.edges[0].node;
expect(node).toHaveErrorStatus();});



comment.id='def';
payload.comment_create[CLIENT_MUTATION_ID]=clientMutationIDs[0];


require('GraphQLStore').handleServerMutation(payload,mutation);
readRecord(commentFragment,'def',function(record){
expect(record).not.toBeOptimistic();
expect(record).not.toHaveErrorStatus();});

readRecord(feedbackFragment,'456',function(record){
expect(record).not.toBeOptimistic();
expect(record.comments).not.toBeOptimistic();var 
node=record.comments.edges[0].node;
expect(node).not.toBeOptimistic();});});



it('handles consecutive range add failures',function(){
var mutation=function(RQL_0){return {calls:[{kind:'Call',metadata:{},name:'comment_create',value:{kind:'CallVariable',callVariableName:'input'}}],children:[{children:[{children:[].concat.apply([],[{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},require('Relay').QL.__frag(RQL_0)]),fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'Comment'},{fieldName:'cursor',kind:'Field',metadata:{isRequisite:true},type:'ID'},{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'source',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true},type:'Node'}],fieldName:'feedback_comment_edge',kind:'Field',metadata:{canHaveSubselections:true},type:'CommentsEdge'},{fieldName:'client_mutation_id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'}],kind:'Mutation',metadata:{inputType:'CommentCreateData!'},name:'GraphQLStoreLegacyMutations',responseType:'CommentCreateResponsePayload'};}(




commentFragment);









require('GraphQLMutatorHub').registerForRangeAddMutationType('comment_create',{
connectionName:'comments',
edgeName:'feedback_comment_edge'});


var comment1={body:{text:'...'}};
var payload1={
comment_create:{
feedback_comment_edge:{
node:comment1,
cursor:'cursor1',
source:{id:'456'}}}};



var action1=new (require('GraphQLMutationAction'))();
action1.runOptimisticAction(payload1,mutation);

var comment2={body:{text:'...'}};
var payload2={
comment_create:{
feedback_comment_edge:{
node:comment2,
cursor:'cursor2',
source:{id:'456'}}}};



var action2=new (require('GraphQLMutationAction'))();
action2.runOptimisticAction(payload2,mutation);

require('GraphQLRange').prototype.retrieveRangeInfoForQuery.mockReturnValue({
requestedEdgeIDs:[
'client:client:1:client:5',
'client:client:1:client:3',
'client:client:1:abc'],

diffCalls:null});



readRecord(feedbackFragment,'456',function(record){
expect(record).toBeOptimisticFor([
clientMutationIDs[0],
clientMutationIDs[1]]);

expect(record.comments).toBeOptimisticFor([
clientMutationIDs[0],
clientMutationIDs[1]]);var _record$comments$edge=

record.comments.edges.map(function(edge){return edge.node;});var _record$comments$edge2=babelHelpers.slicedToArray(_record$comments$edge,2);var node2=_record$comments$edge2[0];var node1=_record$comments$edge2[1];
expect(node1).toBeOptimisticFor([clientMutationIDs[0]]);
expect(node1).not.toHaveErrorStatus();
expect(node2).toBeOptimisticFor([clientMutationIDs[1]]);
expect(node2).not.toHaveErrorStatus();});



expect(function(){
require('GraphQLStore').setRangeAddErrorStatus(payload1);}).
toEmitChangesFor(['client:3']);
readRecord(feedbackFragment,'456',function(record){var _record$comments$edge3=
record.comments.edges.map(function(edge){return edge.node;});var _record$comments$edge4=babelHelpers.slicedToArray(_record$comments$edge3,2);var node2=_record$comments$edge4[0];var node1=_record$comments$edge4[1];
expect(node1).toHaveErrorStatus();
expect(node2).not.toHaveErrorStatus();});



expect(function(){
require('GraphQLStore').setRangeAddErrorStatus(payload2);}).
toEmitChangesFor(['client:5']);
readRecord(feedbackFragment,'456',function(record){var _record$comments$edge5=
record.comments.edges.map(function(edge){return edge.node;});var _record$comments$edge6=babelHelpers.slicedToArray(_record$comments$edge5,2);var node2=_record$comments$edge6[0];var node1=_record$comments$edge6[1];
expect(node1).toHaveErrorStatus();
expect(node2).toHaveErrorStatus();});



comment1.id='def';
payload1.comment_create[CLIENT_MUTATION_ID]=clientMutationIDs[0];


require('GraphQLStore').handleServerMutation(payload1,mutation);
readRecord(commentFragment,'def',function(record){
expect(record).not.toBeOptimistic();
expect(record).not.toHaveErrorStatus();});

require('GraphQLRange').prototype.retrieveRangeInfoForQuery.mockReturnValue({
requestedEdgeIDs:[
'client:client:1:client:7',
'client:client:1:def',
'client:client:1:abc'],

diffCalls:null});

readRecord(feedbackFragment,'456',function(record){
expect(record).toBeOptimisticFor([clientMutationIDs[1]]);
expect(record.comments).toBeOptimisticFor([clientMutationIDs[1]]);var _record$comments$edge7=
record.comments.edges.map(function(edge){return edge.node;});var _record$comments$edge8=babelHelpers.slicedToArray(_record$comments$edge7,2);var node2=_record$comments$edge8[0];var node1=_record$comments$edge8[1];
expect(node1).not.toBeOptimistic();
expect(node1).not.toHaveErrorStatus();
expect(node2).toBeOptimisticFor([clientMutationIDs[1]]);
expect(node2).toHaveErrorStatus();});});});});
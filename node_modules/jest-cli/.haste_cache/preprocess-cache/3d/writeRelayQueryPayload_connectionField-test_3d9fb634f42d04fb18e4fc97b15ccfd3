'use strict';












require('configureForRelayOSS');

jest.
dontMock('GraphQLRange').
dontMock('GraphQLSegment');







describe('writeRelayQueryPayload()',function(){
var RelayRecordStore=undefined;
var RelayRecordWriter=undefined;var _RelayTestUtils=require('RelayTestUtils');var 

getNode=_RelayTestUtils.getNode;var writePayload=_RelayTestUtils.writePayload;
var END_CURSOR=undefined,HAS_NEXT_PAGE=undefined,HAS_PREV_PAGE=undefined,PAGE_INFO=undefined,START_CURSOR=undefined;

beforeEach(function(){
jest.resetModuleRegistry();

RelayRecordStore=require('RelayRecordStore');
RelayRecordWriter=require('RelayRecordWriter');var _RelayConnectionInter=require('RelayConnectionInterface');


END_CURSOR=_RelayConnectionInter.END_CURSOR;
HAS_NEXT_PAGE=_RelayConnectionInter.HAS_NEXT_PAGE;
HAS_PREV_PAGE=_RelayConnectionInter.HAS_PREV_PAGE;
PAGE_INFO=_RelayConnectionInter.PAGE_INFO;
START_CURSOR=_RelayConnectionInter.START_CURSOR;


jasmine.addMatchers(require('RelayTestUtils').matchers);});


it('creates empty first() connection records',function(){var _PAGE_INFO,_pageInfo;
var records={};
var store=new RelayRecordStore({records:records});
var writer=new RelayRecordWriter(records,{},false);
var query=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'123'}}],children:[{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'3'}}],children:[{children:[{fieldName:'cursor',kind:'Field',metadata:{isRequisite:true},type:'String'},{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'User'},{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'source',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'User'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'FriendsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isRequisite:true},type:'PageInfo'}],fieldName:'friends',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'FriendsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'WriteRelayQueryPayload_connectionField',type:'Node'};}());





















var payload={
node:{
id:'123',
friends:babelHelpers.defineProperty({
edges:[]},
PAGE_INFO,(_PAGE_INFO={},babelHelpers.defineProperty(_PAGE_INFO,
HAS_NEXT_PAGE,false),babelHelpers.defineProperty(_PAGE_INFO,
HAS_PREV_PAGE,false),_PAGE_INFO)),


__typename:'User'}};



var results=writePayload(store,writer,query,payload);
expect(results).toEqual({
created:{
'123':true,
'client:1':true},

updated:{}});

expect(store.getRangeMetadata('client:1',[
{name:'first',value:3}])).
toEqual({
diffCalls:[],
filterCalls:[],
pageInfo:(_pageInfo={},babelHelpers.defineProperty(_pageInfo,
END_CURSOR,undefined),babelHelpers.defineProperty(_pageInfo,
HAS_NEXT_PAGE,false),babelHelpers.defineProperty(_pageInfo,
HAS_PREV_PAGE,false),babelHelpers.defineProperty(_pageInfo,
START_CURSOR,undefined),_pageInfo),

requestedEdgeIDs:[],
filteredEdges:[]});});



it('creates first() connection records',function(){var _PAGE_INFO2,_pageInfo2;
var records={};
var store=new RelayRecordStore({records:records});
var writer=new RelayRecordWriter(records,{},false);
var query=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'123'}}],children:[{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'3'}}],children:[{children:[{fieldName:'cursor',kind:'Field',metadata:{isRequisite:true},type:'String'},{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'User'},{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'source',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'User'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'FriendsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isRequisite:true},type:'PageInfo'}],fieldName:'friends',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'FriendsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'WriteRelayQueryPayload_connectionField',type:'Node'};}());




















var payload={
node:{
id:'123',
friends:babelHelpers.defineProperty({
edges:[
{
cursor:'friend1',
node:{
id:'friend1ID'},

source:{
id:'123'}},


{
cursor:'friend2',
node:{
id:'friend2ID'},

source:{
id:'123'}},


{
cursor:'friend3',
node:{
id:'friend3ID'},

source:{
id:'123'}}]},



PAGE_INFO,(_PAGE_INFO2={},babelHelpers.defineProperty(_PAGE_INFO2,
HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_PAGE_INFO2,
HAS_PREV_PAGE,false),_PAGE_INFO2)),


__typename:'User'}};


var results=writePayload(store,writer,query,payload);
expect(results).toEqual({
created:{
'123':true,
'client:1':true,
'client:client:1:friend1ID':true,
'client:client:1:friend2ID':true,
'client:client:1:friend3ID':true,
'friend1ID':true,
'friend2ID':true,
'friend3ID':true},

updated:{}});

expect(store.getField('friend1ID','id')).toBe('friend1ID');
expect(store.getField('friend2ID','id')).toBe('friend2ID');
expect(store.getField('friend3ID','id')).toBe('friend3ID');
expect(store.getRangeMetadata('client:1',[
{name:'first',value:3}])).
toEqual({
diffCalls:[],
filterCalls:[],
pageInfo:(_pageInfo2={},babelHelpers.defineProperty(_pageInfo2,
END_CURSOR,'friend3'),babelHelpers.defineProperty(_pageInfo2,
HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_pageInfo2,
HAS_PREV_PAGE,false),babelHelpers.defineProperty(_pageInfo2,
START_CURSOR,'friend1'),_pageInfo2),

requestedEdgeIDs:[
'client:client:1:friend1ID',
'client:client:1:friend2ID',
'client:client:1:friend3ID'],

filteredEdges:[
{edgeID:'client:client:1:friend1ID',nodeID:'friend1ID'},
{edgeID:'client:client:1:friend2ID',nodeID:'friend2ID'},
{edgeID:'client:client:1:friend3ID',nodeID:'friend3ID'}]});});




it('skips over null edges and nodes',function(){var _PAGE_INFO3,_pageInfo3;
var records={};
var store=new RelayRecordStore({records:records});
var writer=new RelayRecordWriter(records,{},false);
var query=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'123'}}],children:[{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'3'}}],children:[{children:[{fieldName:'cursor',kind:'Field',metadata:{isRequisite:true},type:'String'},{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'User'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'FriendsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isRequisite:true},type:'PageInfo'}],fieldName:'friends',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'FriendsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'WriteRelayQueryPayload_connectionField',type:'Node'};}());

















var payload={
node:{
id:'123',
friends:babelHelpers.defineProperty({
edges:[
null,
{
cursor:'friend2',
node:null},

{
cursor:'friend3',
node:{
id:'friend3ID'}}]},



PAGE_INFO,(_PAGE_INFO3={},babelHelpers.defineProperty(_PAGE_INFO3,
HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_PAGE_INFO3,
HAS_PREV_PAGE,false),_PAGE_INFO3)),


__typename:'User'}};


var results=writePayload(store,writer,query,payload);
expect(results).toEqual({
created:{
'123':true,
'client:1':true,
'client:client:1:friend3ID':true,
'friend3ID':true},

updated:{}});

expect(store.getField('friend3ID','id')).toBe('friend3ID');
expect(store.getRangeMetadata('client:1',[
{name:'first',value:1}])).
toEqual({
diffCalls:[],
filterCalls:[],
pageInfo:(_pageInfo3={},babelHelpers.defineProperty(_pageInfo3,
END_CURSOR,'friend3'),babelHelpers.defineProperty(_pageInfo3,
HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_pageInfo3,
HAS_PREV_PAGE,false),babelHelpers.defineProperty(_pageInfo3,
START_CURSOR,'friend3'),_pageInfo3),

requestedEdgeIDs:['client:client:1:friend3ID'],
filteredEdges:[
{edgeID:'client:client:1:friend3ID',nodeID:'friend3ID'}]});});




it('creates range when a connection record already exists',function(){var _PAGE_INFO4,_pageInfo4;
var records={};
var store=new RelayRecordStore({records:records});
var writer=new RelayRecordWriter(records,{},false);
var query=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'123'}}],children:[{children:[{fieldName:'count',kind:'Field',metadata:{},type:'Int'}],fieldName:'friends',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'FriendsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'WriteRelayQueryPayload_connectionField',type:'Node'};}());






var payload={
node:{
id:'123',
friends:{count:5},
__typename:'User'}};


writePayload(store,writer,query,payload);

query=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'123'}}],children:[{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'1'}}],children:[{children:[{fieldName:'cursor',kind:'Field',metadata:{isRequisite:true},type:'String'},{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'User'},{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'source',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'User'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'FriendsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isRequisite:true},type:'PageInfo'}],fieldName:'friends',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'FriendsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'WriteRelayQueryPayload_connectionField',type:'Node'};}());




















payload={
node:{
id:'123',
friends:babelHelpers.defineProperty({
edges:[
{
cursor:'friend1',
node:{
id:'friend1ID'},

source:{
id:'123'}}]},



PAGE_INFO,(_PAGE_INFO4={},babelHelpers.defineProperty(_PAGE_INFO4,
HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_PAGE_INFO4,
HAS_PREV_PAGE,false),_PAGE_INFO4))}};




var results=writePayload(store,writer,query,payload);
expect(results).toEqual({
created:{
'client:client:1:friend1ID':true,
'friend1ID':true},

updated:{
'client:1':true}});


expect(store.getField('friend1ID','id')).toBe('friend1ID');
expect(store.getRangeMetadata('client:1',[
{name:'first',value:1}])).
toEqual({
diffCalls:[],
filterCalls:[],
pageInfo:(_pageInfo4={},babelHelpers.defineProperty(_pageInfo4,
END_CURSOR,'friend1'),babelHelpers.defineProperty(_pageInfo4,
HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_pageInfo4,
HAS_PREV_PAGE,false),babelHelpers.defineProperty(_pageInfo4,
START_CURSOR,'friend1'),_pageInfo4),

requestedEdgeIDs:['client:client:1:friend1ID'],
filteredEdges:[
{edgeID:'client:client:1:friend1ID',nodeID:'friend1ID'}]});});




it('should throw when connection is missing required calls',function(){var _PAGE_INFO5;
var records={};
var store=new RelayRecordStore({records:records});
var writer=new RelayRecordWriter(records,{},false);
var edgesFragment=function(){return {children:[{children:[{fieldName:'cursor',kind:'Field',metadata:{isRequisite:true},type:'String'},{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'User'},{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'source',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'User'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'FriendsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isRequisite:true},type:'PageInfo'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'WriteRelayQueryPayload_connectionFieldRelayQL',type:'FriendsConnection'};}();
















var query=getNode(function(RQL_0){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'123'}}],children:[{calls:[{kind:'Call',metadata:{},name:'isViewerFriend',value:{kind:'CallValue',callValue:true}}],children:[].concat.apply([],[require('Relay').QL.__frag(RQL_0)]),fieldName:'friends',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'FriendsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'WriteRelayQueryPayload_connectionField',type:'Node'};}(



edgesFragment));




var payload={
node:{
id:'123',
friends:babelHelpers.defineProperty({
edges:[
{
cursor:'friend1',
node:{
id:'friend1ID'},

source:{
id:'123'}}]},



PAGE_INFO,(_PAGE_INFO5={},babelHelpers.defineProperty(_PAGE_INFO5,
HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_PAGE_INFO5,
HAS_PREV_PAGE,false),_PAGE_INFO5)),


__typename:'User'}};


expect(function(){return writePayload(store,writer,query,payload);}).toFailInvariant(
'RelayQueryWriter: Cannot write edges for connection '+
'`friends.isViewerFriend(true)` on record `client:1` without '+
'`first`, `last`, or `find` argument.');});



describe('first() connections with existing data',function(){
var store=undefined,writer=undefined;

beforeEach(function(){var _PAGE_INFO6;
var query=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'123'}}],children:[{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'1'}}],children:[{children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'User'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'FriendsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],fieldName:'friends',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'FriendsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'WriteRelayQueryPayload_connectionField',type:'Node'};}());












var payload={
node:{
id:'123',
friends:babelHelpers.defineProperty({
edges:[{
node:{
id:'node1'},

cursor:'cursor1'}]},

PAGE_INFO,(_PAGE_INFO6={},babelHelpers.defineProperty(_PAGE_INFO6,
HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_PAGE_INFO6,
HAS_PREV_PAGE,false),_PAGE_INFO6)),


__typename:'User'}};


var records={};
store=new RelayRecordStore({records:records});
writer=new RelayRecordWriter(records,{},false);
writePayload(store,writer,query,payload);});


it('appends new edges',function(){var _PAGE_INFO7,_pageInfo5;
var query=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'123'}}],children:[{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'1'}},{kind:'Call',metadata:{},name:'after',value:{kind:'CallValue',callValue:'cursor1'}}],children:[{children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'User'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'FriendsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],fieldName:'friends',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'FriendsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'WriteRelayQueryPayload_connectionField',type:'Node'};}());












var payload={
node:{
id:'123',
friends:babelHelpers.defineProperty({
edges:[{
node:{
id:'node2'},

cursor:'cursor2'}]},

PAGE_INFO,(_PAGE_INFO7={},babelHelpers.defineProperty(_PAGE_INFO7,
HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_PAGE_INFO7,
HAS_PREV_PAGE,true),_PAGE_INFO7))}};




var results=writePayload(store,writer,query,payload);
expect(results).toEqual({
created:{
'node2':true,
'client:client:1:node2':true},

updated:{
'client:1':true}});


expect(store.getRangeMetadata('client:1',[
{name:'first',value:2}])).
toEqual({
diffCalls:[],
filterCalls:[],
pageInfo:(_pageInfo5={},babelHelpers.defineProperty(_pageInfo5,
END_CURSOR,'cursor2'),babelHelpers.defineProperty(_pageInfo5,
HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_pageInfo5,
HAS_PREV_PAGE,false),babelHelpers.defineProperty(_pageInfo5,
START_CURSOR,'cursor1'),_pageInfo5),

requestedEdgeIDs:[
'client:client:1:node1',
'client:client:1:node2'],

filteredEdges:[
{edgeID:'client:client:1:node1',nodeID:'node1'},
{edgeID:'client:client:1:node2',nodeID:'node2'}]});});




it('updates existing edges when ids match',function(){var _PAGE_INFO8,_pageInfo6;
var query=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'123'}}],children:[{calls:[{kind:'Call',metadata:{},name:'find',value:{kind:'CallValue',callValue:'node1'}}],children:[{children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'name',kind:'Field',metadata:{},type:'String'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'User'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'FriendsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],fieldName:'friends',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'FriendsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'WriteRelayQueryPayload_connectionField',type:'Node'};}());













var payload={
node:{
id:'123',
friends:babelHelpers.defineProperty({
edges:[{
node:{
id:'node1',
name:'Tim'},

cursor:'cursor1'}]},

PAGE_INFO,(_PAGE_INFO8={},babelHelpers.defineProperty(_PAGE_INFO8,
HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_PAGE_INFO8,
HAS_PREV_PAGE,true),_PAGE_INFO8))}};




var results=writePayload(store,writer,query,payload);
expect(results).toEqual({
created:{},
updated:{
'node1':true}});



expect(store.getField('node1','name')).toBe('Tim');
expect(store.getRangeMetadata('client:1',[
{name:'first',value:1}])).
toEqual({
diffCalls:[],
filterCalls:[],
pageInfo:(_pageInfo6={},babelHelpers.defineProperty(_pageInfo6,
END_CURSOR,'cursor1'),babelHelpers.defineProperty(_pageInfo6,
HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_pageInfo6,
HAS_PREV_PAGE,false),babelHelpers.defineProperty(_pageInfo6,
START_CURSOR,'cursor1'),_pageInfo6),

requestedEdgeIDs:['client:client:1:node1'],
filteredEdges:[
{edgeID:'client:client:1:node1',nodeID:'node1'}]});});




it('updates the range when edge data changes',function(){var _PAGE_INFO9,_pageInfo7;

var query=require('RelayQuery').Root.create(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'123'}}],children:[{calls:[{kind:'Call',metadata:{},name:'find',value:{kind:'CallValue',callValue:'node1'}}],children:[{children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'User'},{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'source',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id'},type:'User'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'FriendsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],fieldName:'friends',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'FriendsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'WriteRelayQueryPayload_connectionField',type:'Node'};}(),














require('RelayMetaRoute').get('$RelayTest'),{});
var payload={
node:{
id:'123',
friends:babelHelpers.defineProperty({
edges:[{
node:{
id:'node1'},

source:{
id:'456'},

cursor:'cursor1'}]},

PAGE_INFO,(_PAGE_INFO9={},babelHelpers.defineProperty(_PAGE_INFO9,
HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_PAGE_INFO9,
HAS_PREV_PAGE,true),_PAGE_INFO9))}};




var results=writePayload(store,writer,query,payload);
expect(results).toEqual({
created:{
'456':true},

updated:{
'client:1':true,
'client:client:1:node1':true}});


expect(store.getRangeMetadata('client:1',[
{name:'first',value:1}])).
toEqual({
diffCalls:[],
filterCalls:[],
pageInfo:(_pageInfo7={},babelHelpers.defineProperty(_pageInfo7,
END_CURSOR,'cursor1'),babelHelpers.defineProperty(_pageInfo7,
HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_pageInfo7,
HAS_PREV_PAGE,false),babelHelpers.defineProperty(_pageInfo7,
START_CURSOR,'cursor1'),_pageInfo7),

requestedEdgeIDs:['client:client:1:node1'],
filteredEdges:[
{edgeID:'client:client:1:node1',nodeID:'node1'}]});


var sourceID=store.getLinkedRecordID('client:client:1:node1','source');
expect(sourceID).toBe('456');
expect(store.getField(sourceID,'id')).toBe('456');});


it('does not overwrite edges when ids conflict',function(){var _PAGE_INFO10,_pageInfo8;
var query=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'123'}}],children:[{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'1'}}],children:[{children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'User'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'FriendsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],fieldName:'friends',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'FriendsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'WriteRelayQueryPayload_connectionField',type:'Node'};}());












var payload={
node:{
id:'123',
friends:babelHelpers.defineProperty({
edges:[{
node:{
id:'node1b'},

cursor:'cursor1b'}]},

PAGE_INFO,(_PAGE_INFO10={},babelHelpers.defineProperty(_PAGE_INFO10,
HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_PAGE_INFO10,
HAS_PREV_PAGE,false),_PAGE_INFO10))}};




var results=writePayload(store,writer,query,payload);
expect(results).toEqual({
created:{
'node1b':true,
'client:client:1:node1b':true},

updated:{
'client:1':true}});


expect(store.getField('node1b','id')).toBe('node1b');
expect(store.getRangeMetadata('client:1',[
{name:'first',value:1}])).
toEqual({
diffCalls:[],
filterCalls:[],
pageInfo:(_pageInfo8={},babelHelpers.defineProperty(_pageInfo8,
END_CURSOR,'cursor1'),babelHelpers.defineProperty(_pageInfo8,
HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_pageInfo8,
HAS_PREV_PAGE,false),babelHelpers.defineProperty(_pageInfo8,
START_CURSOR,'cursor1'),_pageInfo8),

requestedEdgeIDs:['client:client:1:node1'],
filteredEdges:[
{edgeID:'client:client:1:node1',nodeID:'node1'}]});});




it('overwrites ranges when force index is set',function(){var _PAGE_INFO11,_pageInfo9;
var query=getNode(function(){return {calls:[{kind:'Call',metadata:{type:'ID'},name:'id',value:{kind:'CallValue',callValue:'123'}}],children:[{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'1'}}],children:[{children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isRequisite:true},type:'User'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'FriendsEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],fieldName:'friends',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'FriendsConnection'},{fieldName:'id',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Query',metadata:{isAbstract:true,identifyingArgName:'id',identifyingArgType:'ID'},name:'WriteRelayQueryPayload_connectionField',type:'Node'};}());












var payload={
node:{
id:'123',
friends:babelHelpers.defineProperty({
edges:[{
node:{
id:'node1b'},

cursor:'cursor1b'}]},

PAGE_INFO,(_PAGE_INFO11={},babelHelpers.defineProperty(_PAGE_INFO11,
HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_PAGE_INFO11,
HAS_PREV_PAGE,false),_PAGE_INFO11))}};




var results=
writePayload(store,writer,query,payload,null,{forceIndex:1});
expect(results).toEqual({
created:{
'node1b':true,
'client:client:1:node1b':true},

updated:{
'client:1':true}});


expect(store.getField('node1b','id')).toBe('node1b');
expect(store.getRangeMetadata('client:1',[
{name:'first',value:1}])).
toEqual({
diffCalls:[],
filterCalls:[],
pageInfo:(_pageInfo9={},babelHelpers.defineProperty(_pageInfo9,
END_CURSOR,'cursor1b'),babelHelpers.defineProperty(_pageInfo9,
HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_pageInfo9,
HAS_PREV_PAGE,false),babelHelpers.defineProperty(_pageInfo9,
START_CURSOR,'cursor1b'),_pageInfo9),

requestedEdgeIDs:['client:client:1:node1b'],
filteredEdges:[
{edgeID:'client:client:1:node1b',nodeID:'node1b'}]});});});});
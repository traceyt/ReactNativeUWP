'use strict';












jest.autoMockOff();var 








APPEND=require('GraphQLMutatorConstants').APPEND;var PREPEND=require('GraphQLMutatorConstants').PREPEND;var REMOVE=require('GraphQLMutatorConstants').REMOVE;

describe('RelayRecordWriter',function(){

var HAS_NEXT_PAGE=undefined,HAS_PREV_PAGE=undefined;

beforeEach(function(){
jest.resetModuleRegistry();var _RelayConnectionInter=require('RelayConnectionInterface');

HAS_NEXT_PAGE=_RelayConnectionInter.HAS_NEXT_PAGE;HAS_PREV_PAGE=_RelayConnectionInter.HAS_PREV_PAGE;

jasmine.addMatchers(require('RelayTestUtils').matchers);});


describe('getDataID()',function(){
it('returns undefined for unknown root call ids',function(){
var store=new (require('RelayRecordWriter'))({},{},false);
expect(store.getDataID('username','zuck')).toBe(undefined);});

it('returns id for node/nodes root call ids',function(){
var store=new (require('RelayRecordWriter'))({},{},false);
expect(store.getDataID('node','4')).toBe('4');
expect(store.getDataID('nodes','4')).toBe('4');});});



describe('putDataID()',function(){
it('sets root call ids',function(){
var cache=require('RelayMockCacheManager').genCacheManager().getQueryWriter();
var store=new (require('RelayRecordWriter'))({},{},false,null,cache);
store.putDataID('username','zuck','node:4');
expect(store.getDataID('username','zuck')).toBe('node:4');
expect(cache.writeRootCall).toBeCalledWith('username','zuck','node:4');});


it('does not set ids for node/nodes root calls',function(){
var cache=require('RelayMockCacheManager').genCacheManager().getQueryWriter();
var rootCallMap={};
var store=
new (require('RelayRecordWriter'))({},rootCallMap,false,null,cache);
store.putDataID('node','4','node:4');
store.putDataID('nodes','4','node:4');
expect(rootCallMap).toEqual({});
expect(cache.writeRootCall).not.toBeCalled();});});



describe('deleteRecord()',function(){
it('sets records to null',function(){
var cache=require('RelayMockCacheManager').genCacheManager().getQueryWriter();
var records={
'1':{
__dataID__:'1'}};


var store=new (require('RelayRecordWriter'))(records,{},false,null,cache);
store.deleteRecord('1');
expect(store.getRecordState('1')).toBe('NONEXISTENT');
expect(cache.writeNode).toBeCalledWith('1',null);
store.deleteRecord('2');
expect(store.getRecordState('2')).toBe('NONEXISTENT');
expect(cache.writeNode).toBeCalledWith('2',null);});});



describe('putRecord()',function(){
it('creates records',function(){
var cache=require('RelayMockCacheManager').genCacheManager().getQueryWriter();
var records={};
var store=new (require('RelayRecordWriter'))(records,{},false,null,cache);

store.putRecord('1','Type');
expect(store.getRecordState('1')).toBe('EXISTENT');
expect(store.getType('1')).toBe('Type');
expect(cache.writeField).toBeCalledWith('1','__dataID__','1','Type');});


it('creates records for optimistic write',function(){
var records={};
var store=
new (require('RelayRecordWriter'))(records,{},true,null,null,'mutationID');

store.putRecord('b','Type');
expect(store.getRecordState('b')).toBe('EXISTENT');
expect(records.b.__status__).
toBe(require('RelayRecordStatusMap').setOptimisticStatus(0,true));
expect(records.b.__mutationIDs__).toEqual(['mutationID']);});});



describe('putField()',function(){
it('throws if the record does not exist',function(){
var store=new (require('RelayRecordWriter'))({},{},false);
expect(function(){
store.putField('1','name',null);}).
toFailInvariant(
'RelayRecordWriter.putField(): Expected record `1` to exist before '+
'writing field `name`.');});



it('writes scalar fields',function(){
var cache=require('RelayMockCacheManager').genCacheManager().getQueryWriter();
var store=new (require('RelayRecordWriter'))({},{},false,null,cache);
store.putRecord('1','Type');
store.putField('1','name',null);
expect(store.getField('1','name')).toBe(null);
expect(cache.writeField).toBeCalledWith('1','name',null,'Type');
store.putField('1','name',undefined);
expect(store.getField('1','name')).toBe(undefined);
expect(cache.writeField).
toBeCalledWith('1','name',undefined,'Type');
store.putField('1','name','Joe');
expect(store.getField('1','name')).toBe('Joe');
expect(cache.writeField).toBeCalledWith('1','name','Joe','Type');
var email='joesavona@fb.com';
store.putField('1','email_addresses',[email]);
expect(store.getField('1','email_addresses')).toEqual([email]);
expect(cache.writeField).
toBeCalledWith('1','email_addresses',[email],'Type');
var phone={
is_verified:true,
phone_number:{
display_number:'1-800-555-1212'}};


store.putField('1','all_phones',[phone]);
expect(store.getField('1','all_phones')).toEqual([phone]);
expect(cache.writeField).
toBeCalledWith('1','all_phones',[phone],'Type');});


it('writes fields optimistically',function(){
var records={};
var store=
new (require('RelayRecordWriter'))(records,{},true,null,null,'mutationID');

store.putRecord('b','Type');
store.putField('b','name','d');
expect(store.getField('b','name')).toBe('d');
expect(records.b.__status__).
toBe(require('RelayRecordStatusMap').setOptimisticStatus(0,true));
expect(records.b.__mutationIDs__).toEqual(['mutationID']);});});



describe('deleteField()',function(){
it('throws if the record does not exist',function(){
var store=new (require('RelayRecordWriter'))({},{},false);
expect(function(){
store.deleteField('1','name',null);}).
toFailInvariant(
'RelayRecordWriter.deleteField(): Expected record `1` to exist '+
'before deleting field `name`.');});



it('deletes fields',function(){
var cache=require('RelayMockCacheManager').genCacheManager().getQueryWriter();
var store=new (require('RelayRecordWriter'))({},{},false,null,cache);
store.putRecord('1','Type');
store.putRecord('2','Type');

store.putField('1','scalar','foo');
store.deleteField('1','scalar');
expect(store.getField('1','scalar')).toBe(null);
expect(cache.writeField).toBeCalledWith('1','scalar',null);

store.putLinkedRecordID('1','singular','2');
store.deleteField('1','singular');
expect(store.getField('1','singular')).toBe(null);
expect(cache.writeField).toBeCalledWith('1','singular',null);

store.putLinkedRecordIDs('1','plural',['2']);
store.deleteField('1','plural');
expect(store.getField('1','plural')).toBe(null);
expect(cache.writeField).toBeCalledWith('1','plural',null);});


it('deletes fields optimistically',function(){
var records={};
var store=
new (require('RelayRecordWriter'))(records,{},true,null,null,'mutationID');

store.putRecord('b','Type');
store.deleteField('b','name');
expect(store.getField('b','name')).toBe(null);
expect(records.b.__status__).
toBe(require('RelayRecordStatusMap').setOptimisticStatus(0,true));
expect(records.b.__mutationIDs__).toEqual(['mutationID']);});});



describe('putLinkedRecordID()',function(){
it('throws if either record does not exist',function(){
var store=new (require('RelayRecordWriter'))({},{},false);
store.putRecord('1','Type');
expect(function(){
store.putLinkedRecordID('2','link','1');}).
toFailInvariant(
'RelayRecordWriter.putLinkedRecordID(): Expected record `2` to exist '+
'before linking to record `1`.');

expect(function(){
store.putLinkedRecordID('1','link','2');}).
toFailInvariant(
'RelayRecordWriter.putLinkedRecordID(): Expected record `2` to exist '+
'before linking from record `1`.');});



it('writes links between records',function(){
var cache=require('RelayMockCacheManager').genCacheManager().getQueryWriter();
var store=new (require('RelayRecordWriter'))({},{},false,null,cache);
store.putRecord('viewerID','Type');
store.putRecord('actorID','Type');
store.putLinkedRecordID('viewerID','actor','actorID');
expect(store.getLinkedRecordID('viewerID','actor')).toBe('actorID');
expect(cache.writeField).toBeCalledWith('viewerID','actor',{
__dataID__:'actorID'});});



it('writes linked record optimistically',function(){
var records={};
var store=
new (require('RelayRecordWriter'))(records,{},true,null,null,'mutationID');

store.putRecord('a','Type');
store.putRecord('b','Type');

store.putLinkedRecordID('a','friend','b');
expect(store.getLinkedRecordID('a','friend')).toBe('b');
expect(records.a.__status__).
toBe(require('RelayRecordStatusMap').setOptimisticStatus(0,true));
expect(records.a.__mutationIDs__).toEqual(['mutationID']);});});



describe('putLinkedRecordIDs()',function(){
it('throws if either record does not exist',function(){
var store=new (require('RelayRecordWriter'))({},{},false);
store.putRecord('1','Type');
expect(function(){
store.putLinkedRecordIDs('2','link',['1']);}).
toFailInvariant(
'RelayRecordWriter.putLinkedRecordIDs(): Expected record `2` to '+
'exist before linking records.');

expect(function(){
store.putLinkedRecordIDs('1','link',['2']);}).
toFailInvariant(
'RelayRecordWriter.putLinkedRecordIDs(): Expected record `2` to '+
'exist before linking from `1`.');});



it('writes one-to-n links between records',function(){
var cache=require('RelayMockCacheManager').genCacheManager().getQueryWriter();
var store=new (require('RelayRecordWriter'))({},{},false,null,cache);
store.putRecord('storyID','Type');
store.putRecord('actor1','Type');
store.putRecord('actor2','Type');
store.putLinkedRecordIDs('storyID','actors',['actor1','actor2']);
expect(store.getLinkedRecordIDs('storyID','actors')).
toEqual(['actor1','actor2']);
expect(cache.writeField).toBeCalledWith('storyID','actors',[
{__dataID__:'actor1'},
{__dataID__:'actor2'}]);});



it('writes linked records optimistically',function(){
var records={};
var store=
new (require('RelayRecordWriter'))(records,{},true,null,null,'mutationID');

store.putRecord('a','Type');
store.putRecord('b','Type');

store.putLinkedRecordIDs('a','friends',['b']);
expect(store.getLinkedRecordIDs('a','friends')).toEqual(['b']);
expect(records.a.__status__).
toBe(require('RelayRecordStatusMap').setOptimisticStatus(0,true));
expect(records.a.__mutationIDs__).toEqual(['mutationID']);});});



describe('putRange()',function(){
it('throws if the record does not exist',function(){
var store=new (require('RelayRecordWriter'))({},{},false);
expect(function(){
store.putRange('1',[]);}).
toFailInvariant(
'RelayRecordWriter.putRange(): Expected record `1` to exist '+
'before adding a range.');});



it('creates ranges if not defined',function(){
var cache=require('RelayMockCacheManager').genCacheManager().getQueryWriter();
var records={};
var store=new (require('RelayRecordWriter'))(records,{},false,null,cache);
store.putRecord('1','Type');
store.putRange('1',[]);
expect(records['1'].__range__ instanceof require('GraphQLRange')).toBe(true);
expect(cache.writeField).toBeCalledWith(
'1',
'__range__',
records['1'].__range__);});



it('overwrites ranges if present',function(){
var cache=require('RelayMockCacheManager').genCacheManager().getQueryWriter();
var records={};
var store=new (require('RelayRecordWriter'))(records,{},false,null,cache);
store.putRecord('1','Type');
store.putRange('1',[]);
var range1=records['1'].__range__;
store.putRange('1',[]);
var range2=records['1'].__range__;
expect(range2 instanceof require('GraphQLRange')).toBe(true);
expect(range1).not.toBe(range2);
expect(cache.writeField).toBeCalledWith(
'1',
'__range__',
range2);

expect(cache.writeField).toBeCalledWith(
'1',
'__forceIndex__',
0);

expect(cache.writeField).toBeCalledWith(
'1',
'__filterCalls__',
[]);});



it('sets the force index for the new range',function(){
var cache=require('RelayMockCacheManager').genCacheManager().getQueryWriter();
var records={};
var store=new (require('RelayRecordWriter'))(records,{},false,null,cache);
expect(store.getRangeForceIndex('1')).toBe(0);
store.putRecord('1','Type');
store.putRange('1',[]);
expect(store.getRangeForceIndex('1')).toBe(0);
store.putRange('1',[],10);
expect(store.getRangeForceIndex('1')).toBe(10);
expect(cache.writeField).toBeCalledWith(
'1',
'__forceIndex__',
10);});



it('returns a negative force index for deleted ranges',function(){
var records={};
var store=new (require('RelayRecordWriter'))(records,{},false);
store.putRecord('1','Type');
store.putRange('1',[]);
store.deleteRecord('1');
expect(store.getRecordState('1')).toBe('NONEXISTENT');
expect(store.getRangeForceIndex('1')).toBe(-1);});


it('sets the filter calls for a range',function(){
var cache=require('RelayMockCacheManager').genCacheManager().getQueryWriter();
var records={};
var store=new (require('RelayRecordWriter'))(records,{},false,null,cache);
var calls=[
{
name:'orderby',
value:'TOP_STORIES'},

{
name:'first',
value:'10'}];


store.putRecord('1','Type');
store.putRange('1',calls);
expect(store.getRangeFilterCalls('1')).toEqual(calls.slice(0,1));
expect(cache.writeField).toBeCalledWith(
'1',
'__filterCalls__',
calls.slice(0,1));});});




describe('putRangeEdges()',function(){
it('throws if the record or range does not exist',function(){
var store=new (require('RelayRecordWriter'))({},{},false);
expect(function(){
store.putRangeEdges('1',[],{},[]);}).
toFailInvariant(
'RelayRecordWriter.putRangeEdges(): Expected record `1` to exist and '+
'have a range.');

store.putRecord('1','Type');
expect(function(){
store.putRangeEdges('1',[],{},[]);}).
toFailInvariant(
'RelayRecordWriter.putRangeEdges(): Expected record `1` to exist and '+
'have a range.');});



it('adds edges to the range',function(){var _pageInfo;
var connectionID='1';
var cache=require('RelayMockCacheManager').genCacheManager().getQueryWriter();
var records={};
var nodeConnectionMap={};
var store=new (require('RelayRecordStore'))({records:records},null,nodeConnectionMap);
var writer=new (require('RelayRecordWriter'))(
records,
{},
false,
nodeConnectionMap,
cache);

writer.putRecord(connectionID,'Type');
writer.putRange(connectionID,[]);
var pageInfo=(_pageInfo={},babelHelpers.defineProperty(_pageInfo,
HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_pageInfo,
HAS_PREV_PAGE,false),_pageInfo);

var calls=[{name:'first',value:3}];
var edges=[];
var nodes=[];
for(var ii=0;ii<3;ii++){
var edgeID='edge'+ii;
var nodeID='node'+ii;
writer.putRecord(edgeID,'Type');
writer.putRecord(nodeID,'Type');
writer.putLinkedRecordID(edgeID,'node',nodeID);
writer.putField(edgeID,'cursor','cursor'+ii);
edges.push(edgeID);
nodes.push(nodeID);}

writer.putRangeEdges(
connectionID,
calls,
pageInfo,
edges);



nodes.forEach(function(eachNodeID){
expect(Object.keys(nodeConnectionMap[eachNodeID])).
toEqual([connectionID]);});


var rangeInfo=store.getRangeMetadata(connectionID,calls);
expect(rangeInfo.diffCalls).toEqual([]);
expect(rangeInfo.filterCalls).toEqual([]);
expect(rangeInfo.filteredEdges).toEqual([
{edgeID:'edge0',nodeID:'node0'},
{edgeID:'edge1',nodeID:'node1'},
{edgeID:'edge2',nodeID:'node2'}]);

expect(cache.writeField).toBeCalledWith(
connectionID,
'__range__',
records[connectionID].__range__);});});




describe('applyRangeUpdate()',function(){
var cache=undefined;
var connectionID=undefined;
var firstEdgeID=undefined;
var firstNodeID=undefined;
var lastEdgeID=undefined;
var optimisticWriter=undefined;
var queuedRecords=undefined;
var records=undefined;
var store=undefined;
var writer=undefined;

var _inc=0;
function addEdgeToStore(writerArg){
var index=_inc++;
var edgeID='edge:'+index;
var nodeID='node:'+index;
var cursor='cursor:'+index;

writerArg.putRecord(edgeID,'Type');
writerArg.putRecord(nodeID,'Type');
writerArg.putLinkedRecordID(edgeID,'node',nodeID);
writerArg.putField(edgeID,'cursor',cursor);

return {cursor:cursor,edgeID:edgeID,nodeID:nodeID};}


beforeEach(function(){var _writer$putRangeEdges,_writer$putRangeEdges2;
records={};
queuedRecords={};
cache=require('RelayMockCacheManager').genCacheManager().getQueryWriter();
var nodeConnectionMap={};
store=new (require('RelayRecordStore'))(
{records:records,queuedRecords:queuedRecords},
null,
nodeConnectionMap);

writer=new (require('RelayRecordWriter'))(
records,
{},
false,
nodeConnectionMap,
cache);

optimisticWriter=new (require('RelayRecordWriter'))(
queuedRecords,
{},
true,
nodeConnectionMap,
cache,
'mutationID');

connectionID='123';


writer.putRecord(connectionID,'Type');
writer.putRange(connectionID,[]);
optimisticWriter.putRecord(connectionID,'Type');


var edge=addEdgeToStore(writer);
firstEdgeID=edge.edgeID;
firstNodeID=edge.nodeID;
writer.putRangeEdges(
connectionID,
[{name:'first',value:1}],(_writer$putRangeEdges={},babelHelpers.defineProperty(_writer$putRangeEdges,

HAS_NEXT_PAGE,true),babelHelpers.defineProperty(_writer$putRangeEdges,
HAS_PREV_PAGE,false),_writer$putRangeEdges),

[firstEdgeID]);



edge=addEdgeToStore(writer);
lastEdgeID=edge.edgeID;
writer.putRangeEdges(
connectionID,
[{name:'last',value:1}],(_writer$putRangeEdges2={},babelHelpers.defineProperty(_writer$putRangeEdges2,

HAS_NEXT_PAGE,false),babelHelpers.defineProperty(_writer$putRangeEdges2,
HAS_PREV_PAGE,true),_writer$putRangeEdges2),

[lastEdgeID]);


cache.writeNode.mockClear();
cache.writeField.mockClear();
cache.writeRootCall.mockClear();});


it('throws if the connection does not exist',function(){var _addEdgeToStore=
addEdgeToStore(writer);var edgeID=_addEdgeToStore.edgeID;
expect(function(){
writer.applyRangeUpdate('client:does.not.exist',edgeID,PREPEND);}).
toFailInvariant(
'RelayRecordWriter: Cannot apply `prepend` '+
'update to non-existent record `client:does.not.exist`.');});



it('prepends edges to base stores',function(){var _addEdgeToStore2=
addEdgeToStore(writer);var edgeID=_addEdgeToStore2.edgeID;var nodeID=_addEdgeToStore2.nodeID;
writer.applyRangeUpdate(connectionID,edgeID,PREPEND);


var calls=[{name:'first',value:2}];
var rangeInfo=store.getRangeMetadata(connectionID,calls);
expect(rangeInfo.filteredEdges.map(function(edge){return edge.edgeID;})).toEqual([
edgeID,
firstEdgeID]);

expect(store.getConnectionIDsForRecord(nodeID)).toEqual([connectionID]);
expect(cache.writeField).toBeCalledWith(
connectionID,
'__range__',
records[connectionID].__range__);});



it('optimistically prepends edges to queued stores',function(){var _addEdgeToStore3=
addEdgeToStore(optimisticWriter);var edgeID=_addEdgeToStore3.edgeID;
optimisticWriter.applyRangeUpdate(
connectionID,
edgeID,
PREPEND);



var calls=[{name:'first',value:2}];
var rangeInfo=store.getRangeMetadata(connectionID,calls);
expect(rangeInfo.filteredEdges.map(function(edge){return edge.edgeID;})).toEqual([
edgeID,
firstEdgeID]);


expect(cache.writeField).not.toBeCalledWith(
connectionID,
'__range__',
records[connectionID].__range__);


expect(queuedRecords[connectionID].__status__).
toBe(require('RelayRecordStatusMap').setOptimisticStatus(0,true));
expect(queuedRecords[connectionID].__mutationIDs__).
toEqual(['mutationID']);});


it('appends edges to base stores',function(){var _addEdgeToStore4=
addEdgeToStore(writer);var edgeID=_addEdgeToStore4.edgeID;var nodeID=_addEdgeToStore4.nodeID;
writer.applyRangeUpdate(connectionID,edgeID,APPEND);


var calls=[{name:'last',value:2}];
var rangeInfo=store.getRangeMetadata(connectionID,calls);
expect(rangeInfo.filteredEdges.map(function(edge){return edge.edgeID;})).toEqual([
lastEdgeID,
edgeID]);

expect(store.getConnectionIDsForRecord(nodeID)).toEqual([connectionID]);
expect(cache.writeField).toBeCalledWith(
connectionID,
'__range__',
records[connectionID].__range__);});



it('optimistically appends edges to queued stores',function(){var _addEdgeToStore5=
addEdgeToStore(optimisticWriter);var edgeID=_addEdgeToStore5.edgeID;var nodeID=_addEdgeToStore5.nodeID;
optimisticWriter.applyRangeUpdate(
connectionID,
edgeID,
APPEND);



var calls=[{name:'last',value:2}];
var rangeInfo=store.getRangeMetadata(connectionID,calls);
expect(rangeInfo.filteredEdges.map(function(edge){return edge.edgeID;})).toEqual([
lastEdgeID,
edgeID]);


expect(cache.writeField).not.toBeCalledWith(
connectionID,
'__range__',
records[connectionID].__range__);


expect(store.getConnectionIDsForRecord(nodeID)).toEqual(null);
expect(queuedRecords[connectionID].__status__).
toBe(require('RelayRecordStatusMap').setOptimisticStatus(0,true));
expect(queuedRecords[connectionID].__mutationIDs__).
toEqual(['mutationID']);});


it('deletes edges from base stores',function(){
expect(store.getConnectionIDsForRecord(firstNodeID)).toEqual([
connectionID]);

writer.applyRangeUpdate(connectionID,firstEdgeID,REMOVE);


var calls=[{name:'first',value:2}];
var rangeInfo=store.getRangeMetadata(connectionID,calls);
expect(rangeInfo.filteredEdges).toEqual([]);
expect(store.getConnectionIDsForRecord(firstNodeID)).toEqual(null);
expect(cache.writeField).toBeCalledWith(
connectionID,
'__range__',
records[connectionID].__range__);});



it('optimistically deletes existing edges from queued stores',function(){
optimisticWriter.applyRangeUpdate(
connectionID,
firstEdgeID,
REMOVE);



var calls=[{name:'first',value:2}];
var rangeInfo=store.getRangeMetadata(connectionID,calls);
expect(rangeInfo.filteredEdges).toEqual([]);

expect(cache.writeField).not.toBeCalledWith(
connectionID,
'__range__',
records[connectionID].__range__);



expect(store.getConnectionIDsForRecord(firstNodeID)).toEqual([
connectionID]);

expect(queuedRecords[connectionID].__status__).
toBe(require('RelayRecordStatusMap').setOptimisticStatus(0,true));
expect(queuedRecords[connectionID].__mutationIDs__).
toEqual(['mutationID']);});


it('deletes optimistically prepended edges from queued stores',function(){var _addEdgeToStore6=
addEdgeToStore(optimisticWriter);var edgeID=_addEdgeToStore6.edgeID;
optimisticWriter.applyRangeUpdate(connectionID,edgeID,PREPEND);
optimisticWriter.applyRangeUpdate(connectionID,edgeID,REMOVE);


var calls=[{name:'first',value:1}];
var rangeInfo=store.getRangeMetadata(connectionID,calls);
expect(rangeInfo.filteredEdges.map(function(edge){return edge.edgeID;})).toEqual([
firstEdgeID]);});



it('deletes optimistically appended edges from queued stores',function(){var _addEdgeToStore7=
addEdgeToStore(optimisticWriter);var edgeID=_addEdgeToStore7.edgeID;
optimisticWriter.applyRangeUpdate(connectionID,edgeID,APPEND);
optimisticWriter.applyRangeUpdate(connectionID,edgeID,REMOVE);


var calls=[{name:'last',value:1}];
var rangeInfo=store.getRangeMetadata(connectionID,calls);
expect(rangeInfo.filteredEdges.map(function(edge){return edge.edgeID;})).toEqual([
lastEdgeID]);});});




describe('setHasDeferredFragmentData()',function(){
it('creates a cache in honor of the first entry',function(){
var records={'a':{}};
var store=new (require('RelayRecordWriter'))(records,{},false);
store.setHasDeferredFragmentData('a','fragID');
expect(records.a.hasOwnProperty('__resolvedFragmentMap__')).toBe(true);});


it('creates a key in an already existing cache',function(){
var resolvedFragmentMap={'fragID':true};
var records={
'a':{'__resolvedFragmentMap__':resolvedFragmentMap}};

var store=new (require('RelayRecordWriter'))(records,{},false);
store.setHasDeferredFragmentData('a','otherFragID');
expect(resolvedFragmentMap.hasOwnProperty('otherFragID')).toBe(true);});


it('increments the generation when a fragment\'s resolvedness '+
'changes',function(){
var records={

'a':{},

'b':{
'__resolvedFragmentMap__':{'otherFragID':true},
'__resolvedFragmentMapGeneration__':0}};


var store=new (require('RelayRecordWriter'))(records,{},false);
store.setHasDeferredFragmentData('a','fragID');
expect(records.a.__resolvedFragmentMapGeneration__).toBe(0);
store.setHasDeferredFragmentData('b','fragID');
expect(records.b.__resolvedFragmentMapGeneration__).toBe(1);});


it('increments the generation even when a fragment\'s resolvedness '+
'does not change',function(){
var records={

'a':{},

'b':{
'__resolvedFragmentMap__':{'fragID':true},
'__resolvedFragmentMapGeneration__':0}};


var store=new (require('RelayRecordWriter'))(records,{},false);
store.setHasDeferredFragmentData('a','fragID');
expect(records.a.__resolvedFragmentMapGeneration__).toBe(0);
store.setHasDeferredFragmentData('b','fragID');
expect(records.b.__resolvedFragmentMapGeneration__).toBe(1);});});});
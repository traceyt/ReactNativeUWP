'use strict';



























































var IF='if';
var UNLESS='unless';
var TRUE='true';
var FALSE='false';
var SKIP='skip';
var INCLUDE='include';

var _nextQueryID=0;

var DEFAULT_FRAGMENT_METADATA={
isDeferred:false,
isContainerFragment:false};

var EMPTY_DIRECTIVES=[];
var EMPTY_CALLS=[];

if(__DEV__){
Object.freeze(EMPTY_CALLS);
Object.freeze(EMPTY_DIRECTIVES);}var 

























RelayQueryNode=function(){babelHelpers.createClass(RelayQueryNode,null,[{key:'create',value:function create(













concreteNode,
route,
variables)
{
var node=createNode(concreteNode,route,variables);
!(
node instanceof RelayQueryNode)?require('invariant')(0,
'RelayQueryNode.create(): '+
'Expected a GraphQL fragment, mutation, or query.'):undefined;

return node;}}]);







function RelayQueryNode(
concreteNode,
route,
variables)
{babelHelpers.classCallCheck(this,RelayQueryNode);
!(
this.constructor.name!=='RelayQueryNode')?require('invariant')(0,
'RelayQueryNode: Abstract class cannot be instantiated.'):undefined;

this.__concreteNode__=concreteNode;
this.__route__=route;
this.__variables__=variables;


this.__calls__=null;
this.__children__=null;
this.__fieldMap__=null;
this.__hasDeferredDescendant__=null;
this.__hasValidatedConnectionCalls__=null;
this.__serializationKey__=null;
this.__storageKey__=null;}babelHelpers.createClass(RelayQueryNode,[{key:'canHaveSubselections',value:function canHaveSubselections()


{
return true;}},{key:'isGenerated',value:function isGenerated()


{
return false;}},{key:'isRefQueryDependency',value:function isRefQueryDependency()


{
return false;}},{key:'clone',value:function clone(


children){
if(!this.canHaveSubselections()){

!(
children.length===0)?require('invariant')(0,
'RelayQueryNode: Cannot add children to field `%s` because it does '+
'not support sub-selections (sub-fields).',
this instanceof RelayQueryField?this.getSchemaName():null):undefined;

return this;}


var prevChildren=this.getChildren();
var nextChildren=cloneChildren(prevChildren,children);

if(!nextChildren.length){
return null;}else 
if(nextChildren===prevChildren){
return this;}


var clone=RelayQueryNode.create(
this.__concreteNode__,
this.__route__,
this.__variables__);

clone.__children__=nextChildren;
clone.__calls__=this.__calls__;
clone.__serializationKey__=this.__serializationKey__;
clone.__storageKey__=this.__storageKey__;

return clone;}},{key:'getChildren',value:function getChildren()


{var _this=this;
var children=this.__children__;
if(!children){(function(){
var nextChildren=[];
var concreteChildren=_this.__concreteNode__.children;
if(concreteChildren){
concreteChildren.forEach(function(concreteChild){
if(concreteChild==null){
return;}

var node=createNode(
concreteChild,
_this.__route__,
_this.__variables__);

if(node&&node.isIncluded()){
nextChildren.push(node);}});}



_this.__children__=nextChildren;
children=nextChildren;})();}

return children;}},{key:'isIncluded',value:function isIncluded()


{

if(!this.__concreteNode__.directives){
return true;}

return this.getDirectives().every(function(directive){
if(directive.name===SKIP){
return !directive.args.some(function(arg){return arg.name===IF&&!!arg.value;});}else 
if(directive.name===INCLUDE){
return !directive.args.some(function(arg){return arg.name===IF&&!arg.value;});}

return true;});}},{key:'getDirectives',value:function getDirectives()



{var _this2=this;
var concreteDirectives=this.__concreteNode__.directives;
if(concreteDirectives){
return this.__concreteNode__.directives.map(function(directive){
return {
args:require('callsFromGraphQL')(directive.args,_this2.__variables__),
name:directive.name};});}



return EMPTY_DIRECTIVES;}},{key:'getField',value:function getField(


field){
return this.getFieldByStorageKey(field.getStorageKey());}},{key:'getFieldByStorageKey',value:function getFieldByStorageKey(


storageKey){
var fieldMap=this.__fieldMap__;
if(!fieldMap){
fieldMap={};
var children=this.getChildren();
for(var ii=0;ii<children.length;ii++){
var child=children[ii];
if(child instanceof RelayQueryField){
fieldMap[child.getStorageKey()]=child;}}


this.__fieldMap__=fieldMap;}

return fieldMap[storageKey];}},{key:'getType',value:function getType()


{
return this.__concreteNode__.type;}},{key:'getRoute',value:function getRoute()


{
return this.__route__;}},{key:'getVariables',value:function getVariables()


{
return this.__variables__;}},{key:'hasDeferredDescendant',value:function hasDeferredDescendant()


{
var hasDeferredDescendant=this.__hasDeferredDescendant__;
if(hasDeferredDescendant==null){
hasDeferredDescendant=
this.canHaveSubselections()&&
this.getChildren().some(function(child){return child.hasDeferredDescendant();});
this.__hasDeferredDescendant__=hasDeferredDescendant;}

return hasDeferredDescendant;}},{key:'isAbstract',value:function isAbstract()


{
throw new Error('RelayQueryNode: Abstract function cannot be called.');}},{key:'isRequisite',value:function isRequisite()


{
return false;}},{key:'equals',value:function equals(





that){
var thisChildren=this.getChildren();
var thatChildren=that.getChildren();

return thisChildren===thatChildren||
thisChildren.length===thatChildren.length&&
thisChildren.every(function(c,ii){return c.equals(thatChildren[ii]);});}},{key:'isEquivalent',value:function isEquivalent(













that){
return (
this.__concreteNode__===that.__concreteNode__&&
this.__route__===that.__route__&&
require('shallowEqual')(this.__variables__,that.__variables__));}},{key:'createNode',value:function createNode(



concreteNode){
return RelayQueryNode.create(
concreteNode,
this.__route__,
this.__variables__);}},{key:'getConcreteQueryNode',value:function getConcreteQueryNode()



{
return this.__concreteNode__;}}]);return RelayQueryNode;}();var 








RelayQueryRoot=function(_RelayQueryNode){babelHelpers.inherits(RelayQueryRoot,_RelayQueryNode);babelHelpers.createClass(RelayQueryRoot,null,[{key:'build',value:function build(










name,
fieldName,
value,
children,
metadata,
type)
{
var nextChildren=children?children.filter(function(child){return !!child;}):[];
var batchCallVariable=require('QueryBuilder').getBatchCallVariable(value);
var identifyingArgValue=undefined;
if(batchCallVariable){
identifyingArgValue=batchCallVariable;}else 
if(Array.isArray(value)){
identifyingArgValue=value.map(require('QueryBuilder').createCallValue);}else 
if(value){
identifyingArgValue=require('QueryBuilder').createCallValue(value);}

var concreteRoot=require('QueryBuilder').createQuery({
fieldName:fieldName,
identifyingArgValue:identifyingArgValue,
metadata:metadata,
name:name,
type:type});

var root=new RelayQueryRoot(
concreteRoot,
require('RelayMetaRoute').get('$RelayQuery'),
{});

root.__children__=nextChildren;
return root;}},{key:'create',value:function create(



concreteNode,
route,
variables)
{
var query=require('QueryBuilder').getQuery(concreteNode);
!
query?require('invariant')(0,
'RelayQueryRoot.create(): Expected a GraphQL `query { ... }`, got: %s',
concreteNode):undefined;

return new RelayQueryRoot(
query,
route,
variables);}}]);



function RelayQueryRoot(
concreteNode,
route,
variables)
{babelHelpers.classCallCheck(this,RelayQueryRoot);var _this3=babelHelpers.possibleConstructorReturn(this,Object.getPrototypeOf(RelayQueryRoot).call(this,
concreteNode,route,variables));
_this3.__batchCall__=undefined;
_this3.__id__=undefined;
_this3.__identifyingArg__=undefined;
_this3.__storageKey__=undefined;


_this3.getID();return _this3;}babelHelpers.createClass(RelayQueryRoot,[{key:'canHaveSubselections',value:function canHaveSubselections()


{
return true;}},{key:'getName',value:function getName()


{
var name=this.__concreteNode__.name;
if(!name){
name=this.getID();
this.__concreteNode__.name=name;}

return name;}},{key:'getID',value:function getID()


{
var id=this.__id__;
if(id==null){
id='q'+_nextQueryID++;
this.__id__=id;}

return id;}},{key:'getBatchCall',value:function getBatchCall()


{
var batchCall=this.__batchCall__;
if(batchCall===undefined){
var concreteCalls=this.__concreteNode__.calls;
if(concreteCalls){
var callArg=concreteCalls[0]&&concreteCalls[0].value;
if(
callArg!=null&&
!Array.isArray(callArg)&&
callArg.kind==='BatchCallVariable')
{
batchCall={
refParamName:'ref_'+callArg.sourceQueryID,
sourceQueryID:callArg.sourceQueryID,
sourceQueryPath:callArg.jsonPath};}}



batchCall=batchCall||null;
this.__batchCall__=batchCall;}

return batchCall;}},{key:'getCallsWithValues',value:function getCallsWithValues()


{
var calls=this.__calls__;
if(!calls){
var concreteCalls=this.__concreteNode__.calls;
if(concreteCalls){
calls=require('callsFromGraphQL')(concreteCalls,this.__variables__);}else 
{
calls=EMPTY_CALLS;}

this.__calls__=calls;}

return calls;}},{key:'getFieldName',value:function getFieldName()


{
return this.__concreteNode__.fieldName;}},{key:'getIdentifyingArg',value:function getIdentifyingArg()


{var _this4=this;
var identifyingArg=this.__identifyingArg__;
if(!identifyingArg){(function(){
var metadata=_this4.__concreteNode__.metadata;
var identifyingArgName=metadata.identifyingArgName;
if(identifyingArgName!=null){
identifyingArg=
_this4.getCallsWithValues().find(function(c){return c.name===identifyingArgName;});
if(identifyingArg&&metadata.identifyingArgType!=null){
identifyingArg.type=metadata.identifyingArgType;}

_this4.__identifyingArg__=identifyingArg;}})();}


return identifyingArg;}},{key:'getStorageKey',value:function getStorageKey()


{var _this5=this;
var storageKey=this.__storageKey__;
if(!storageKey){(function(){
var args=_this5.getCallsWithValues();
var identifyingArg=_this5.getIdentifyingArg();
if(identifyingArg){
args=args.filter(function(arg){return arg!==identifyingArg;});}

var field=RelayQueryField.build({
fieldName:_this5.getFieldName(),
calls:args,
type:_this5.getType()});

storageKey=field.getStorageKey();
_this5.__storageKey__=storageKey;})();}

return storageKey;}},{key:'hasDeferredDescendant',value:function hasDeferredDescendant()


{
return this.isDeferred()||babelHelpers.get(Object.getPrototypeOf(RelayQueryRoot.prototype),'hasDeferredDescendant',this).call(this);}},{key:'isAbstract',value:function isAbstract()


{
return !!this.__concreteNode__.metadata.isAbstract;}},{key:'isDeferred',value:function isDeferred()


{
return !!this.__concreteNode__.isDeferred;}},{key:'isPlural',value:function isPlural()


{
return !!this.__concreteNode__.metadata.isPlural;}},{key:'equals',value:function equals(


that){
if(this===that){
return true;}

if(!(that instanceof RelayQueryRoot)){
return false;}

if(!require('areEqual')(this.getBatchCall(),that.getBatchCall())){
return false;}

if(
this.getFieldName()!==that.getFieldName()||
!areCallValuesEqual(this.getCallsWithValues(),that.getCallsWithValues()))
{
return false;}

return babelHelpers.get(Object.getPrototypeOf(RelayQueryRoot.prototype),'equals',this).call(this,that);}}]);return RelayQueryRoot;}(RelayQueryNode);var 








RelayQueryOperation=function(_RelayQueryNode2){babelHelpers.inherits(RelayQueryOperation,_RelayQueryNode2);


function RelayQueryOperation(
concreteNode,
route,
variables)
{babelHelpers.classCallCheck(this,RelayQueryOperation);var _this6=babelHelpers.possibleConstructorReturn(this,Object.getPrototypeOf(RelayQueryOperation).call(this,
concreteNode,route,variables));
!(
_this6.constructor.name!=='RelayQueryOperation')?require('invariant')(0,
'RelayQueryOperation: Abstract class cannot be instantiated.'):undefined;return _this6;}babelHelpers.createClass(RelayQueryOperation,[{key:'canHaveSubselections',value:function canHaveSubselections()



{
return true;}},{key:'getName',value:function getName()


{
return this.__concreteNode__.name;}},{key:'getResponseType',value:function getResponseType()


{
return this.__concreteNode__.responseType;}},{key:'getType',value:function getType()


{
return this.getResponseType();}},{key:'getInputType',value:function getInputType()


{
var inputType=
this.__concreteNode__.metadata.inputType;
!
inputType?require('invariant')(0,
'RelayQuery: Expected operation `%s` to be annotated with the type of '+
'its argument. Either the babel transform was configured incorrectly, '+
'or the schema failed to define an argument for this mutation.',
this.getCall().name):undefined;

return inputType;}},{key:'getCall',value:function getCall()


{
var calls=this.__calls__;
if(!calls){
var concreteCalls=this.__concreteNode__.calls;
if(concreteCalls){
calls=require('callsFromGraphQL')(concreteCalls,this.__variables__);}else 
{
calls=EMPTY_CALLS;}

this.__calls__=calls;}

return calls[0];}},{key:'getCallVariableName',value:function getCallVariableName()


{
if(!this.__callVariableName__){
var concreteCalls=this.__concreteNode__.calls;
var callVariable=
concreteCalls&&require('QueryBuilder').getCallVariable(concreteCalls[0].value);
!
callVariable?require('invariant')(0,
'RelayQuery: Expected mutation to have a single argument.'):undefined;

this.__callVariableName__=callVariable.callVariableName;}

return this.__callVariableName__;}},{key:'isAbstract',value:function isAbstract()






{
return false;}}]);return RelayQueryOperation;}(RelayQueryNode);var 








RelayQueryMutation=function(_RelayQueryOperation){babelHelpers.inherits(RelayQueryMutation,_RelayQueryOperation);function RelayQueryMutation(){babelHelpers.classCallCheck(this,RelayQueryMutation);return babelHelpers.possibleConstructorReturn(this,Object.getPrototypeOf(RelayQueryMutation).apply(this,arguments));}babelHelpers.createClass(RelayQueryMutation,[{key:'equals',value:function equals(































that){
if(this===that){
return true;}

if(!(that instanceof RelayQueryMutation)){
return false;}

if(!require('areEqual')(this.getResponseType(),that.getResponseType())){
return false;}

if(!require('areEqual')(this.getCall(),that.getCall())){
return false;}

return babelHelpers.get(Object.getPrototypeOf(RelayQueryMutation.prototype),'equals',this).call(this,that);}}],[{key:'build',value:function build(name,responseType,callName,callValue,children,metadata){var nextChildren=children?children.filter(function(child){return !!child;}):[];var concreteMutation=require('QueryBuilder').createMutation({calls:[require('QueryBuilder').createCall(callName,require('QueryBuilder').createCallVariable('input'))],metadata:metadata,name:name,responseType:responseType});var mutation=new RelayQueryMutation(concreteMutation,require('RelayMetaRoute').get('$RelayQuery'),{input:callValue||''});mutation.__children__=nextChildren;return mutation;}}]);return RelayQueryMutation;}(RelayQueryOperation);var 








RelayQuerySubscription=function(_RelayQueryOperation2){babelHelpers.inherits(RelayQuerySubscription,_RelayQueryOperation2);function RelayQuerySubscription(){babelHelpers.classCallCheck(this,RelayQuerySubscription);return babelHelpers.possibleConstructorReturn(this,Object.getPrototypeOf(RelayQuerySubscription).apply(this,arguments));}babelHelpers.createClass(RelayQuerySubscription,[{key:'getPublishedPayloadType',value:function getPublishedPayloadType()



















{
return this.getResponseType();}},{key:'equals',value:function equals(


that){
if(this===that){
return true;}

if(!(that instanceof RelayQuerySubscription)){
return false;}

if(
!require('areEqual')(this.getPublishedPayloadType(),that.getPublishedPayloadType()))
{
return false;}

if(!require('areEqual')(this.getCall(),that.getCall())){
return false;}

return babelHelpers.get(Object.getPrototypeOf(RelayQuerySubscription.prototype),'equals',this).call(this,that);}}],[{key:'create',value:function create(concreteNode,route,variables){var subscription=require('QueryBuilder').getSubscription(concreteNode);!subscription?require('invariant')(0,'RelayQuerySubscription.create(): '+'Expected a GraphQL `subscription { ... }`, got: %s',concreteNode):undefined;return new RelayQuerySubscription(concreteNode,route,variables);}}]);return RelayQuerySubscription;}(RelayQueryOperation);var 








RelayQueryFragment=function(_RelayQueryNode3){babelHelpers.inherits(RelayQueryFragment,_RelayQueryNode3);babelHelpers.createClass(RelayQueryFragment,null,[{key:'build',value:function build(








name,
type,
children,
metadata)
{
var nextChildren=children?children.filter(function(child){return !!child;}):[];
var concreteFragment=require('QueryBuilder').createFragment({
name:name,
type:type,
metadata:metadata});

var fragment=new RelayQueryFragment(
concreteFragment,
require('RelayMetaRoute').get('$RelayQuery'),
{},
{
isDeferred:!!(metadata&&metadata.isDeferred),
isContainerFragment:!!(metadata&&metadata.isContainerFragment)});


fragment.__children__=nextChildren;
return fragment;}},{key:'create',value:function create(



concreteNode,
route,
variables,
metadata)
{
var fragment=require('QueryBuilder').getFragment(concreteNode);
!
fragment?require('invariant')(0,
'RelayQueryFragment.create(): '+
'Expected a GraphQL `fragment { ... }`, got: %s',
concreteNode):undefined;

return createMemoizedFragment(
fragment,
route,
variables,
metadata||DEFAULT_FRAGMENT_METADATA);}}]);



function RelayQueryFragment(
concreteNode,
route,
variables,
metadata)
{babelHelpers.classCallCheck(this,RelayQueryFragment);var _this9=babelHelpers.possibleConstructorReturn(this,Object.getPrototypeOf(RelayQueryFragment).call(this,
concreteNode,route,variables));
_this9.__compositeHash__=null;
_this9.__metadata__=metadata||DEFAULT_FRAGMENT_METADATA;return _this9;}babelHelpers.createClass(RelayQueryFragment,[{key:'canHaveSubselections',value:function canHaveSubselections()


{
return true;}},{key:'getDebugName',value:function getDebugName()


{
return this.__concreteNode__.name;}},{key:'getConcreteFragmentID',value:function getConcreteFragmentID()







{
return this.__concreteNode__.id;}},{key:'getCompositeHash',value:function getCompositeHash()










{
var compositeHash=this.__compositeHash__;
if(!compositeHash){

compositeHash=require('generateRQLFieldAlias')(
this.getConcreteFragmentID()+
'.'+this.__route__.name+
'.'+require('stableStringify')(this.__variables__));

this.__compositeHash__=compositeHash;}

return compositeHash;}},{key:'isAbstract',value:function isAbstract()


{
return !!this.__concreteNode__.metadata.isAbstract;}},{key:'isDeferred',value:function isDeferred()


{
return this.__metadata__.isDeferred;}},{key:'isPattern',value:function isPattern()


{
return !!this.__concreteNode__.metadata.pattern;}},{key:'isPlural',value:function isPlural()


{
var metadata=this.__concreteNode__.metadata;
return !!(

metadata.isPlural||metadata.plural);}},{key:'cloneAsPlainFragment',value:function cloneAsPlainFragment()



{
return createMemoizedFragment(
this.__concreteNode__,
this.__route__,
this.__variables__,
DEFAULT_FRAGMENT_METADATA);}},{key:'isContainerFragment',value:function isContainerFragment()



{
return this.__metadata__.isContainerFragment;}},{key:'hasDeferredDescendant',value:function hasDeferredDescendant()


{
return this.isDeferred()||babelHelpers.get(Object.getPrototypeOf(RelayQueryFragment.prototype),'hasDeferredDescendant',this).call(this);}},{key:'clone',value:function clone(


children){
var clone=babelHelpers.get(Object.getPrototypeOf(RelayQueryFragment.prototype),'clone',this).call(this,children);
if(clone!==this&&
clone instanceof RelayQueryFragment){
clone.__concreteNode__=babelHelpers.extends({},
clone.__concreteNode__,{
id:require('generateConcreteFragmentID')()});

clone.__metadata__=babelHelpers.extends({},
this.__metadata__);}


return clone;}},{key:'equals',value:function equals(


that){
if(this===that){
return true;}

if(!(that instanceof RelayQueryFragment)){
return false;}

if(this.getType()!==that.getType()){
return false;}

return babelHelpers.get(Object.getPrototypeOf(RelayQueryFragment.prototype),'equals',this).call(this,that);}}]);return RelayQueryFragment;}(RelayQueryNode);var 








RelayQueryField=function(_RelayQueryNode4){babelHelpers.inherits(RelayQueryField,_RelayQueryNode4);babelHelpers.createClass(RelayQueryField,null,[{key:'create',value:function create(






concreteNode,
route,
variables)
{
var field=require('QueryBuilder').getField(concreteNode);
!
field?require('invariant')(0,
'RelayQueryField.create(): Expected a GraphQL field, got: %s',
concreteNode):undefined;

return new RelayQueryField(
field,
route,
variables);}},{key:'build',value:function build(_ref)























{var alias=_ref.alias;var directives=_ref.directives;var calls=_ref.calls;var children=_ref.children;var fieldName=_ref.fieldName;var metadata=_ref.metadata;var type=_ref.type;
var nextChildren=children?children.filter(function(child){return !!child;}):[];
var concreteField=require('QueryBuilder').createField({
alias:alias,
calls:calls?require('callsToGraphQL')(calls):null,
directives:directives?require('directivesToGraphQL')(directives):null,
fieldName:fieldName,
metadata:metadata,
type:type});

var field=new RelayQueryField(
concreteField,
require('RelayMetaRoute').get('$RelayQuery'),
{});

field.__children__=nextChildren;
return field;}}]);


function RelayQueryField(
concreteNode,
route,
variables)
{babelHelpers.classCallCheck(this,RelayQueryField);var _this10=babelHelpers.possibleConstructorReturn(this,Object.getPrototypeOf(RelayQueryField).call(this,
concreteNode,route,variables));
_this10.__debugName__=undefined;
_this10.__isRefQueryDependency__=false;
_this10.__rangeBehaviorKey__=undefined;
_this10.__shallowHash__=undefined;return _this10;}babelHelpers.createClass(RelayQueryField,[{key:'canHaveSubselections',value:function canHaveSubselections()


{
return !!
this.__concreteNode__.metadata.canHaveSubselections;}},{key:'isAbstract',value:function isAbstract()



{
return !!this.__concreteNode__.metadata.isAbstract;}},{key:'isFindable',value:function isFindable()


{
return !!this.__concreteNode__.metadata.isFindable;}},{key:'isGenerated',value:function isGenerated()


{
return !!this.__concreteNode__.metadata.isGenerated;}},{key:'isConnection',value:function isConnection()


{
return !!this.__concreteNode__.metadata.isConnection;}},{key:'isConnectionWithoutNodeID',value:function isConnectionWithoutNodeID()


{
return !!this.__concreteNode__.metadata.
isConnectionWithoutNodeID;}},{key:'isPlural',value:function isPlural()


{
return !!this.__concreteNode__.metadata.isPlural;}},{key:'isRefQueryDependency',value:function isRefQueryDependency()


{
return this.__isRefQueryDependency__;}},{key:'isRequisite',value:function isRequisite()


{
return !!this.__concreteNode__.metadata.isRequisite;}},{key:'getDebugName',value:function getDebugName()


{var _this11=this;
var debugName=this.__debugName__;
if(!debugName){(function(){
debugName=_this11.getSchemaName();
var printedCoreArgs=undefined;
_this11.getCallsWithValues().forEach(function(arg){
if(_this11.$RelayQueryField_isCoreArg(arg)){
printedCoreArgs=printedCoreArgs||[];
printedCoreArgs.push(require('serializeRelayQueryCall')(arg));}});


if(printedCoreArgs){
debugName+=printedCoreArgs.sort().join('');}

_this11.__debugName__=debugName;})();}

return debugName;}},{key:'getSchemaName',value:function getSchemaName()





{
return this.__concreteNode__.fieldName;}},{key:'getRangeBehaviorKey',value:function getRangeBehaviorKey()










{var _this12=this;
!
this.isConnection()?require('invariant')(0,
'RelayQueryField: Range behavior keys are associated exclusively with '+
'connection fields. `getRangeBehaviorKey()` was called on the '+
'non-connection field `%s`.',
this.getSchemaName()):undefined;

var rangeBehaviorKey=this.__rangeBehaviorKey__;
if(rangeBehaviorKey==null){(function(){
var printedCoreArgs=[];
_this12.getCallsWithValues().forEach(function(arg){
if(_this12.$RelayQueryField_isCoreArg(arg)){
printedCoreArgs.push(require('serializeRelayQueryCall')(arg));}});


rangeBehaviorKey=printedCoreArgs.sort().join('').slice(1);
_this12.__rangeBehaviorKey__=rangeBehaviorKey;})();}

return rangeBehaviorKey;}},{key:'getSerializationKey',value:function getSerializationKey()














{
var serializationKey=this.__serializationKey__;
if(!serializationKey){
serializationKey=require('generateRQLFieldAlias')(
this.getSchemaName()+
this.getCallsWithValues().
map(require('serializeRelayQueryCall')).
sort().
join(''));

this.__serializationKey__=serializationKey;}

return serializationKey;}},{key:'getShallowHash',value:function getShallowHash()





{
var shallowHash=this.__shallowHash__;
if(!shallowHash){
this.__shallowHash__=shallowHash=
this.getSchemaName()+
serializeCalls(this.getCallsWithValues());}

return shallowHash;}},{key:'getStorageKey',value:function getStorageKey()













{var _this13=this;
var storageKey=this.__storageKey__;
if(!storageKey){
this.__storageKey__=storageKey=
this.getSchemaName()+
serializeCalls(
this.getCallsWithValues().filter(function(call){return _this13.$RelayQueryField_isCoreArg(call);}));}


return storageKey;}},{key:'getApplicationName',value:function getApplicationName()






{
var concreteNode=this.__concreteNode__;
return concreteNode.alias||concreteNode.fieldName;}},{key:'getInferredRootCallName',value:function getInferredRootCallName()


{
return this.__concreteNode__.metadata.inferredRootCallName;}},{key:'getInferredPrimaryKey',value:function getInferredPrimaryKey()


{
return this.__concreteNode__.metadata.inferredPrimaryKey;}},{key:'getCallsWithValues',value:function getCallsWithValues()


{
var calls=this.__calls__;
if(!calls){
var concreteCalls=this.__concreteNode__.calls;
if(concreteCalls){
calls=require('callsFromGraphQL')(concreteCalls,this.__variables__);}else 
{
calls=EMPTY_CALLS;}

this.__calls__=calls;}

return calls;}},{key:'getCallType',value:function getCallType(


callName){
var concreteCalls=this.__concreteNode__.calls;
var concreteCall=concreteCalls&&concreteCalls.filter(
function(call){return call.name===callName;})[
0];
if(concreteCall){
return concreteCall.metadata.type;}}},{key:'equals',value:function equals(



that){
if(this===that){
return true;}

if(!(that instanceof RelayQueryField)){
return false;}

if(
this.getSchemaName()!==that.getSchemaName()||
this.getApplicationName()!==that.getApplicationName()||
!areCallValuesEqual(this.getCallsWithValues(),that.getCallsWithValues()))
{
return false;}

return babelHelpers.get(Object.getPrototypeOf(RelayQueryField.prototype),'equals',this).call(this,that);}},{key:'cloneAsRefQueryDependency',value:function cloneAsRefQueryDependency()


{
var field=new RelayQueryField(
this.__concreteNode__,
this.__route__,
this.__variables__);

field.__children__=[];
field.__isRefQueryDependency__=true;
return field;}},{key:'cloneFieldWithCalls',value:function cloneFieldWithCalls(



children,
calls)
{
if(!this.canHaveSubselections()){

!(
children.length===0)?require('invariant')(0,
'RelayQueryNode: Cannot add children to field `%s` because it does '+
'not support sub-selections (sub-fields).',
this.getSchemaName()):undefined;}




if(require('areEqual')(this.getCallsWithValues(),calls)){
var clone=this.clone(children);
return clone;}


var nextChildren=cloneChildren(this.getChildren(),children);
if(!nextChildren.length){
return null;}


var field=new RelayQueryField(
this.__concreteNode__,
this.__route__,
this.__variables__);

field.__children__=nextChildren;
field.__calls__=calls;

return field;}},{key:'$RelayQueryField_isCoreArg',value:function $RelayQueryField_isCoreArg(







arg){
return (

!(arg.name===IF&&String(arg.value)===TRUE)&&
!(arg.name===UNLESS&&String(arg.value)===FALSE)&&

!(this.isConnection()&&require('RelayConnectionInterface').isConnectionCall(arg)));}}]);return RelayQueryField;}(RelayQueryNode);




function createNode(
concreteNode,
route,
variables)
{
!(
typeof concreteNode==='object'&&
concreteNode!==null)?require('invariant')(0,
'RelayQueryNode: Expected a GraphQL object created with `Relay.QL`, got'+
'`%s`.',
concreteNode):undefined;

var kind=concreteNode.kind;
var type=RelayQueryNode;
if(kind==='Field'){
type=RelayQueryField;}else 
if(kind==='Fragment'){
type=RelayQueryFragment;}else 
if(kind==='FragmentReference'){
type=RelayQueryFragment;
var fragment=require('QueryBuilder').getFragment(concreteNode.fragment);

if(fragment){
return createMemoizedFragment(
fragment,
route,
{},
{
isDeferred:false,
isContainerFragment:true});}}else 



if(kind==='Query'){
type=RelayQueryRoot;}else 
if(kind==='Mutation'){
type=RelayQueryMutation;}else 
if(kind==='Subscription'){
type=RelayQuerySubscription;}else 
if(concreteNode instanceof require('RelayRouteFragment')){
var fragment=concreteNode.getFragmentForRoute(route);
if(fragment){

return createNode(
fragment,
route,
variables);}


return null;}else 
if(concreteNode instanceof require('RelayFragmentReference')){
var fragment=concreteNode.getFragment(variables);
var fragmentVariables=concreteNode.getVariables(route,variables);
if(fragment){

return createMemoizedFragment(
fragment,
route,
fragmentVariables,
{
isDeferred:concreteNode.isDeferred(),
isContainerFragment:concreteNode.isContainerFragment()});}



return null;}else 
{}

return new type(
concreteNode,
route,
variables);}







function createMemoizedFragment(
concreteFragment,
route,
variables,
metadata)
{
var cacheKey=route.name+':'+require('stableStringify')(variables)+':'+
require('stableStringify')(metadata);
var fragment=concreteFragment.__cachedFragment__;
var fragmentCacheKey=concreteFragment.__cacheKey__;
if(!fragment||fragmentCacheKey!==cacheKey){
fragment=new RelayQueryFragment(
concreteFragment,
route,
variables,
metadata);

concreteFragment.__cachedFragment__=fragment;
concreteFragment.__cacheKey__=cacheKey;}

return fragment;}







function cloneChildren(
prevChildren,
nextChildren)
{
var children=[];
var isSameChildren=true;

var prevIndex=0;
for(var ii=0;ii<nextChildren.length;ii++){
var child=nextChildren[ii];
if(child){
children.push(child);
isSameChildren=isSameChildren&&child===prevChildren[prevIndex++];}}



if(isSameChildren&&children.length===prevChildren.length){
return prevChildren;}else 
{
return children;}}






function serializeCalls(calls){
if(calls.length){var _ret6=function(){
var callMap={};
calls.forEach(function(call){
callMap[call.name]=call.value;});

return {v:require('stableStringify')(callMap)};}();if(typeof _ret6==="object")return _ret6.v;}else 
{
return '';}}








function areCallValuesEqual(
thisCalls,
thatCalls)
{
if(thisCalls.length!==thatCalls.length){
return false;}

return thisCalls.every(function(_ref2,ii){var name=_ref2.name;var value=_ref2.value;return (
thatCalls[ii].name===name&&require('areEqual')(thatCalls[ii].value,value));});}



require('RelayProfiler').instrumentMethods(RelayQueryNode.prototype,{
clone:'@RelayQueryNode.prototype.clone',
equals:'@RelayQueryNode.prototype.equals',
getChildren:'@RelayQueryNode.prototype.getChildren',
getDirectives:'@RelayQueryNode.prototype.getDirectives',
hasDeferredDescendant:'@RelayQueryNode.prototype.hasDeferredDescendant',
getFieldByStorageKey:'@RelayQueryNode.prototype.getFieldByStorageKey'});


require('RelayProfiler').instrumentMethods(RelayQueryField.prototype,{
getStorageKey:'@RelayQueryField.prototype.getStorageKey',
getSerializationKey:'@RelayQueryField.prototype.getSerializationKey'});


module.exports={
Field:RelayQueryField,
Fragment:RelayQueryFragment,
Mutation:RelayQueryMutation,
Node:RelayQueryNode,
Operation:RelayQueryOperation,
Root:RelayQueryRoot,
Subscription:RelayQuerySubscription};
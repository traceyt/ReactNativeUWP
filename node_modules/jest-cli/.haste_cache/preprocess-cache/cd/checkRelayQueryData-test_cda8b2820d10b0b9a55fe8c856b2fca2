/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @emails oncall+relay
 */

'use strict';function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}

require('configureForRelayOSS');








describe('checkRelayQueryData', function () {
  var RelayRecordStore;var 

  getNode = require('RelayTestUtils').getNode;
  var HAS_NEXT_PAGE, HAS_PREV_PAGE;

  function hasData(
  query, 
  records, 
  rootCallMap, 
  fragmentFilter) 
  {
    var store = new RelayRecordStore(
    { records: records || {} }, 
    { rootCallMap: rootCallMap || {} });

    return require('checkRelayQueryData')(store, query, fragmentFilter);}


  beforeEach(function () {
    jest.resetModuleRegistry();

    RelayRecordStore = require('RelayRecordStore');

    HAS_NEXT_PAGE = require('RelayConnectionInterface').HAS_NEXT_PAGE;HAS_PREV_PAGE = require('RelayConnectionInterface').HAS_PREV_PAGE;});


  it('returns false when node is not in the store', function () {
    var result = hasData(getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '1055790163' } }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'CheckRelayQueryData', type: 'Node' };})()));







    expect(result).toEqual(false);});


  it('returns true when node is null', function () {
    var records = { 
      1055790163: null };


    var result = hasData(getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '1055790163' } }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'CheckRelayQueryData', type: 'Node' };})()), 





    records);


    expect(result).toEqual(true);});


  it('returns true when checking basic id query', function () {
    var records = { 
      1055790163: { 
        id: '1055790163', 
        __dataID__: '1055790163', 
        __typename: 'User' } };



    var result = hasData(getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '1055790163' } }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'CheckRelayQueryData', type: 'Node' };})()), 





    records);


    expect(result).toEqual(true);});


  it('returns false when a part of the node query is missing', function () {
    var records = { 
      1055790163: { 
        id: '1055790163', 
        __dataID__: '1055790163', 
        __typename: 'User' } };



    var result = hasData(getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'ids', value: [{ kind: 'CallValue', callValue: '1055790163' }, { kind: 'CallValue', callValue: '4' }] }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'nodes', kind: 'Query', metadata: { isPlural: true, isAbstract: true, identifyingArgName: 'ids' }, name: 'CheckRelayQueryData', type: 'Node' };})()), 





    records);


    expect(result).toEqual(false);});


  it('returns true when data is available for custom root calls', function () {
    var records = { 
      1055790163: { 
        id: '1055790163', 
        __dataID__: '1055790163', 
        __typename: 'User' } };



    var result = hasData(getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'name', value: { kind: 'CallValue', callValue: 'yuzhi' } }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'username', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'name' }, name: 'CheckRelayQueryData', type: 'Actor' };})()), 





    records, 
    { username: { yuzhi: '1055790163' } });


    expect(result).toEqual(true);});


  it('returns true when scalar field is available', function () {
    var records = { 
      1055790163: { 
        id: '1055790163', 
        firstName: 'Yuzhi', 
        __dataID__: '1055790163', 
        __typename: 'User' } };



    var result = hasData(getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '1055790163' } }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: 'firstName', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'CheckRelayQueryData', type: 'Node' };})()), 








    records);


    expect(result).toEqual(true);});


  it('returns false when scalar field is missing', function () {
    var records = { 
      1055790163: { 
        id: '1055790163', 
        __dataID__: '1055790163' } };



    var result = hasData(getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '1055790163' } }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: 'firstName', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'CheckRelayQueryData', type: 'Node' };})()), 








    records);


    expect(result).toEqual(false);});


  it('returns true when nested fields are available', function () {
    var records = { 
      1055790163: { 
        id: '1055790163', 
        __dataID__: '1055790163', 
        __typename: 'User', 
        friends: { __dataID__: 'friends_id' } }, 

      friends_id: { 
        __dataID__: 'friends_id', 
        count: 500 } };



    var result = hasData(getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '1055790163' } }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { children: [{ fieldName: 'count', kind: 'Field', metadata: {}, type: 'Int' }], fieldName: 'friends', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'FriendsConnection' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'CheckRelayQueryData', type: 'Node' };})()), 








    records);


    expect(result).toEqual(true);});


  it('returns false when missing nested field node', function () {
    var records = { 
      1055790163: { 
        id: '1055790163', 
        __dataID__: '1055790163', 
        friends: { __dataID__: 'friends_id' } } };



    var result = hasData(getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '1055790163' } }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { children: [{ fieldName: 'count', kind: 'Field', metadata: {}, type: 'Int' }], fieldName: 'friends', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'FriendsConnection' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'CheckRelayQueryData', type: 'Node' };})()), 








    records);


    expect(result).toEqual(false);});


  it('returns false when missing nested field', function () {
    var records = { 
      1055790163: { 
        id: '1055790163', 
        __dataID__: '1055790163', 
        friends: { __dataID__: 'friends_id' } }, 

      friends_id: { 
        __dataID__: 'friends_id' } };



    var result = hasData(getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '1055790163' } }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { children: [{ fieldName: 'count', kind: 'Field', metadata: {}, type: 'Int' }], fieldName: 'friends', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'FriendsConnection' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'CheckRelayQueryData', type: 'Node' };})()), 








    records);


    expect(result).toEqual(false);});


  it('returns true when checking nested plural field', function () {
    var records = { 
      1055790163: { 
        id: '1055790163', 
        __dataID__: '1055790163', 
        __typename: 'User', 
        screennames: [{ __dataID__: 'client:screenname1' }] }, 

      'client:screenname1': { 
        __dataID__: 'client:screenname1', 
        service: true } };



    var result = hasData(getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '1055790163' } }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { children: [{ fieldName: 'service', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'screennames', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'Screenname' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'CheckRelayQueryData', type: 'Node' };})()), 








    records);


    expect(result).toEqual(true);});


  it('returns false when nested plural field node is missing', function () {
    var records = { 
      1055790163: { 
        id: '1055790163', 
        __dataID__: '1055790163', 
        __typename: 'User', 
        screennames: [{ __dataID__: 'client:screenname1' }] } };



    var result = hasData(getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '1055790163' } }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { children: [{ fieldName: 'service', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'screennames', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'Screenname' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'CheckRelayQueryData', type: 'Node' };})()), 








    records);


    expect(result).toEqual(false);});


  it('returns false when nested plural field is missing', function () {
    var records = { 
      1055790163: { 
        id: '1055790163', 
        __dataID__: '1055790163', 
        __typename: 'User', 
        screennames: [{ __dataID__: 'client:screenname1' }] }, 

      'client:screenname1': { 
        __dataID__: 'client:screenname1' } };



    var result = hasData(getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '1055790163' } }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { children: [{ fieldName: 'service', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'screennames', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'Screenname' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'CheckRelayQueryData', type: 'Node' };})()), 








    records);


    expect(result).toEqual(false);});


  it('returns true when range is available', function () {var _pageInfo;
    var records = { 
      1055790163: { 
        id: '1055790163', 
        __dataID__: '1055790163', 
        __typename: 'User', 
        friends: { __dataID__: 'friends_id' } }, 

      friends_id: { 
        __dataID__: 'friends_id', 
        __range__: new (require('GraphQLRange'))() } };


    records.friends_id.__range__.retrieveRangeInfoForQuery.mockReturnValue({ 
      requestedEdgeIDs: [], 
      diffCalls: [], 
      pageInfo: (_pageInfo = {}, _defineProperty(_pageInfo, HAS_NEXT_PAGE, false), _defineProperty(_pageInfo, HAS_PREV_PAGE, false), _pageInfo) });


    var result = hasData(getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '1055790163' } }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallValue', callValue: '10' } }], children: [{ children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'User' }, { fieldName: 'cursor', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'FriendsEdge' }, { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true, isGenerated: true, isRequisite: true }, type: 'PageInfo' }], fieldName: 'friends', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'FriendsConnection' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'CheckRelayQueryData', type: 'Node' };})()), 










    records);

    expect(result).toEqual(true);});


  it('returns false when range field has diff calls', function () {var _pageInfo2;
    var records = { 
      1055790163: { 
        id: '1055790163', 
        __dataID__: '1055790163', 
        __typename: 'User', 
        friends: { __dataID__: 'friends_id' } }, 

      friends_id: { 
        __dataID__: 'friends_id', 
        __range__: new (require('GraphQLRange'))() } };


    records.friends_id.__range__.retrieveRangeInfoForQuery.mockReturnValue({ 
      requestedEdgeIDs: [], 
      diffCalls: [require('RelayTestUtils').createCall('first', 10)], 
      pageInfo: (_pageInfo2 = {}, _defineProperty(_pageInfo2, HAS_NEXT_PAGE, false), _defineProperty(_pageInfo2, HAS_PREV_PAGE, false), _pageInfo2) });


    var result = hasData(getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '1055790163' } }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallValue', callValue: '10' } }], children: [{ children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'User' }, { fieldName: 'cursor', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'FriendsEdge' }, { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true, isGenerated: true, isRequisite: true }, type: 'PageInfo' }], fieldName: 'friends', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'FriendsConnection' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'CheckRelayQueryData', type: 'Node' };})()), 










    records);

    expect(result).toEqual(false);});


  it('returns true when `edges` is available on non-connections', function () {
    var records = { 
      viewer_id: { 
        '__configs__{named:"some_gk"}': { __dataID__: 'configs_id' }, 
        __dataID__: 'viewer_id' }, 

      configs_id: { 
        __dataID__: 'configs_id', 
        edges: [{ __dataID__: 'edge_id' }] }, 

      edge_id: { 
        __dataID__: 'edge_id', 
        node: { __dataID__: 'node_id' } }, 

      node_id: { 
        __dataID__: 'node_id', 
        name: 'some_gk' } };



    var result = hasData(getNode((function () {return { children: [{ calls: [{ kind: 'Call', metadata: {}, name: 'named', value: { kind: 'CallValue', callValue: 'some_gk' } }], children: [{ children: [{ children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'Config' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'ConfigsConnectionEdge' }], fieldName: '__configs__', kind: 'Field', metadata: { canHaveSubselections: true }, type: 'ConfigsConnection' }], fieldName: 'viewer', kind: 'Query', metadata: {}, name: 'CheckRelayQueryData', type: 'Viewer' };})()), 













    records, 
    { viewer: { '': 'viewer_id' } });


    expect(result).toEqual(true);});


  it('returns false when missing fields on edge in a range', function () {var _pageInfo3;
    var records = { 
      1055790163: { 
        id: '1055790163', 
        __dataID__: '1055790163', 
        __typename: 'User', 
        friends: { __dataID__: 'friends_id' } }, 

      friends_id: { 
        __dataID__: 'friends_id', 
        __range__: new (require('GraphQLRange'))() }, 

      edge_id: { 
        __dataID__: 'edge_id', 
        node: { __dataID__: 'node_id' } }, 

      node_id: { 
        __dataID__: 'node_id', 
        __typename: 'User', 
        id: 'node_id' } };


    records.friends_id.__range__.retrieveRangeInfoForQuery.mockReturnValue({ 
      requestedEdgeIDs: ['edge_id'], 
      diffCalls: [], 
      pageInfo: (_pageInfo3 = {}, _defineProperty(_pageInfo3, HAS_NEXT_PAGE, false), _defineProperty(_pageInfo3, HAS_PREV_PAGE, false), _pageInfo3) });


    var result = hasData(getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '1055790163' } }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallValue', callValue: '10' } }], children: [{ children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'User' }, { fieldName: 'cursor', kind: 'Field', metadata: { isRequisite: true }, type: 'String' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'FriendsEdge' }, { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true, isGenerated: true, isRequisite: true }, type: 'PageInfo' }], fieldName: 'friends', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'FriendsConnection' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'CheckRelayQueryData', type: 'Node' };})()), 










    records);

    expect(result).toEqual(false);});


  it('returns false when missing fields on node in an edge', function () {var _pageInfo4;
    var records = { 
      1055790163: { 
        id: '1055790163', 
        __dataID__: '1055790163', 
        friends: { __dataID__: 'friends_id' } }, 

      friends_id: { 
        __dataID__: 'friends_id', 
        __range__: new (require('GraphQLRange'))() }, 

      edge_id: { 
        __dataID__: 'edge_id', 
        node: { __dataID__: 'node_id' }, 
        cursor: 'cursor' }, 

      node_id: { 
        __dataID__: 'node_id', 
        __typename: 'User' } };


    records.friends_id.__range__.retrieveRangeInfoForQuery.mockReturnValue({ 
      requestedEdgeIDs: ['edge_id'], 
      diffCalls: [], 
      pageInfo: (_pageInfo4 = {}, _defineProperty(_pageInfo4, HAS_NEXT_PAGE, false), _defineProperty(_pageInfo4, HAS_PREV_PAGE, false), _pageInfo4) });


    var result = hasData(getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '1055790163' } }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { calls: [{ kind: 'Call', metadata: {}, name: 'first', value: { kind: 'CallValue', callValue: '10' } }], children: [{ children: [{ children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }], fieldName: 'node', kind: 'Field', metadata: { canHaveSubselections: true, inferredRootCallName: 'node', inferredPrimaryKey: 'id', isRequisite: true }, type: 'User' }, { fieldName: 'cursor', kind: 'Field', metadata: { isRequisite: true }, type: 'String' }], fieldName: 'edges', kind: 'Field', metadata: { canHaveSubselections: true, isPlural: true }, type: 'FriendsEdge' }, { children: [{ fieldName: 'hasNextPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }, { fieldName: 'hasPreviousPage', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'Boolean' }], fieldName: 'pageInfo', kind: 'Field', metadata: { canHaveSubselections: true, isGenerated: true, isRequisite: true }, type: 'PageInfo' }], fieldName: 'friends', kind: 'Field', metadata: { canHaveSubselections: true, isConnection: true, isFindable: true }, type: 'FriendsConnection' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'CheckRelayQueryData', type: 'Node' };})()), 










    records);

    expect(result).toEqual(false);});


  it('checks fragment when there are no fragment filters', function () {
    var records = { 
      1055790163: { 
        id: '1055790163', 
        __dataID__: '1055790163', 
        __typename: 'User', 
        username: 'yuzhi' } };



    var fragment1 = (function () {return { children: [{ fieldName: 'username', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'Sj9jFakZ6iMw:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'CheckRelayQueryDataRelayQL', type: 'Node' };})();


    var fragment2 = (function () {return { children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }], id: 'U2siAXeRdhUw:0', kind: 'Fragment', metadata: { isAbstract: true }, name: 'CheckRelayQueryDataRelayQL', type: 'Node' };})();


    var result = hasData(getNode((function (RQL_0) {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '1055790163' } }], children: [].concat.apply([], [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'CheckRelayQueryData', type: 'Node' };})(


    fragment1)), 


    records);


    expect(result).toEqual(true);
    result = hasData(getNode((function (RQL_0) {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '1055790163' } }], children: [].concat.apply([], [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, require('Relay').QL.__frag(RQL_0)]), fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'CheckRelayQueryData', type: 'Node' };})(


    fragment2)), 


    records);


    expect(result).toEqual(false);});


  it('returns true if matching fragment data is available', function () {
    var records = { 
      1055790163: { 
        __dataID__: '1055790163', 
        __typename: 'User', 
        id: '1055790163', 
        name: 'Yuzhi' } };


    var result = hasData(
    getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '1055790163' } }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, { children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: '4zsI7g9qKTlc:0', kind: 'Fragment', metadata: {}, name: 'User', type: 'User' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'CheckRelayQueryData', type: 'Node' };})()), 









    records);

    expect(result).toBe(true);});


  it('returns false if matching fragment data is unfetched', function () {
    var records = { 
      1055790163: { 
        __dataID__: '1055790163', 
        __typename: 'User', 
        id: '1055790163' } };


    var result = hasData(
    getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '1055790163' } }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, { children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: 'fxuYds9FHPFi:0', kind: 'Fragment', metadata: {}, name: 'User', type: 'User' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'CheckRelayQueryData', type: 'Node' };})()), 









    records);

    expect(result).toBe(false);});


  it('returns true if non-matching fragment data is missing', function () {
    var records = { 
      1055790163: { 
        __dataID__: '1055790163', 
        __typename: 'User', 
        id: '1055790163' } };


    var result = hasData(
    getNode((function () {return { calls: [{ kind: 'Call', metadata: {}, name: 'id', value: { kind: 'CallValue', callValue: '1055790163' } }], children: [{ fieldName: 'id', kind: 'Field', metadata: { isRequisite: true }, type: 'ID' }, { fieldName: '__typename', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'String' }, { children: [{ fieldName: 'name', kind: 'Field', metadata: {}, type: 'String' }, { fieldName: 'id', kind: 'Field', metadata: { isGenerated: true, isRequisite: true }, type: 'ID' }], id: '/lwPq7iAnziu:0', kind: 'Fragment', metadata: {}, name: 'Page', type: 'Page' }], fieldName: 'node', kind: 'Query', metadata: { isAbstract: true, identifyingArgName: 'id' }, name: 'CheckRelayQueryData', type: 'Node' };})()), 










    records);

    expect(result).toEqual(true);});});
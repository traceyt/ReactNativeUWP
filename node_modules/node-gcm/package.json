{
  "_args": [
    [
      "node-gcm@https://registry.npmjs.org/node-gcm/-/node-gcm-0.14.0.tgz",
      "C:\\gitRepo\\f8app"
    ]
  ],
  "_from": "node-gcm@>=0.14.0 <0.15.0",
  "_id": "node-gcm@0.14.0",
  "_inCache": true,
  "_location": "/node-gcm",
  "_phantomChildren": {},
  "_requested": {
    "name": "node-gcm",
    "raw": "node-gcm@https://registry.npmjs.org/node-gcm/-/node-gcm-0.14.0.tgz",
    "rawSpec": "https://registry.npmjs.org/node-gcm/-/node-gcm-0.14.0.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/node-gcm/-/node-gcm-0.14.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/parse-server-push-adapter"
  ],
  "_resolved": "https://registry.npmjs.org/node-gcm/-/node-gcm-0.14.0.tgz",
  "_shasum": "7a2d7f3d77ddb15f7965dfe0b0283fbd1386e4a2",
  "_shrinkwrap": null,
  "_spec": "node-gcm@https://registry.npmjs.org/node-gcm/-/node-gcm-0.14.0.tgz",
  "_where": "C:\\gitRepo\\f8app",
  "author": {
    "email": "toothlessgear@finitebox.com",
    "name": "Marcus Farkas"
  },
  "bugs": {
    "url": "https://github.com/ToothlessGear/node-gcm/issues"
  },
  "contributors": [
    {
      "email": "toothlessgear@finitebox.com",
      "name": "Marcus Farkas"
    },
    {
      "email": "jvanier@gmail.com",
      "name": "monkbroc",
      "url": "https://github.com/monkbroc"
    },
    {
      "name": "zlyinfinite",
      "url": "https://github.com/zlyinfinite"
    },
    {
      "email": "yann.biancheri@gmail.com",
      "name": "Yann Biancheri",
      "url": "https://github.com/yannooo"
    },
    {
      "email": "hamid@fogcreek.com",
      "name": "Hamid Palo",
      "url": "https://github.com/hamidp"
    },
    {
      "email": "jondotan@gmail.com",
      "name": "Dotan J. Nahum",
      "url": "https://github.com/jondot"
    },
    {
      "email": "rabin.max@gmail.com",
      "name": "Max Rabin",
      "url": "https://github.com/maxrabin"
    },
    {
      "email": "rs@dailymotion.com",
      "name": "Olivier Poitrey",
      "url": "https://github.com/rs"
    },
    {
      "email": "george.miroshnykov@gmail.com",
      "name": "George Miroshnykov",
      "url": "https://github.com/laggyluke"
    },
    {
      "email": "alejandro@ideaknow.com",
      "name": "Alejandro Garcia Gil",
      "url": "https://github.com/Alegege"
    },
    {
      "email": "ismael.gorissen@gmail.com",
      "name": "Ismael Gorissen",
      "url": "https://github.com/igorissen"
    },
    {
      "email": "joris@notifica.re",
      "name": "Joris Verbogt",
      "url": "https://github.com/silentjohnny"
    },
    {
      "email": "goelvivek2011@gmail.com",
      "name": "goelvivek",
      "url": "https://github.com/goelvivek"
    },
    {
      "email": "lars@jaclar.net",
      "name": "Lars Jacob",
      "url": "https://github.com/jaclar"
    },
    {
      "email": "roman.iakovlev@here.com",
      "name": "Roman Iakovlev",
      "url": "https://github.com/RomanIakovlev"
    },
    {
      "email": "roman.skvazh@gmail.com",
      "name": "Roman Skvazh",
      "url": "https://github.com/rskvazh"
    },
    {
      "email": "jg-dev@live.com",
      "name": "Jeremy Goldstein",
      "url": "https://github.com/jg10"
    },
    {
      "email": "adam@2fours.com",
      "name": "Adam Patacchiola",
      "url": "https://github.com/surespot"
    },
    {
      "email": "ivan.longin@infobip.com",
      "name": "Ivan Longin",
      "url": "https://github.com/ilongin"
    },
    {
      "email": "paul@bininda.com",
      "name": "Paul Bininda",
      "url": "https://github.com/pbininda"
    },
    {
      "email": "matt.merkes@gmail.com",
      "name": "Matt Merkes"
    },
    {
      "email": "niels.abildgaard@gmail.com",
      "name": "Niels Roesen Abildgaard",
      "url": "https://github.com/hypesystem"
    },
    {
      "email": "nonemoticoner@gmail.com",
      "name": "Nonemoticoner",
      "url": "https://github.com/Nonemoticoner"
    },
    {
      "email": "sbekkhus91@gmail.com",
      "name": "Simen Bekkhus",
      "url": "https://github.com/SimenB"
    },
    {
      "email": "alex@dice.fm",
      "name": "Alexander Johansson",
      "url": "https://github.com/KATT"
    },
    {
      "email": "ashrko619@gmail.com",
      "name": "Ashwin R",
      "url": "https://github.com/ashrko619"
    },
    {
      "email": "kaija.chang@gmail.com",
      "name": "Kaija Chang",
      "url": "https://github.com/kaija"
    },
    {
      "email": "mkamioner@gmail.com",
      "name": "Mo Kamioner",
      "url": "https://github.com/mkamioner"
    },
    {
      "email": "bastien.leonard@gmail.com",
      "name": "Bastien LÃ©onard",
      "url": "https://github.com/bastienleonard"
    },
    {
      "email": "eladnava@gmail.com",
      "name": "Elad Nava",
      "url": "https://github.com/eladnava"
    },
    {
      "email": "marcobrador89@gmail.com",
      "name": "Marc Obrador",
      "url": "https://github.com/marcobrador"
    }
  ],
  "dependencies": {
    "debug": "^0.8.1",
    "lodash": "^3.10.1",
    "request": "^2.27.0"
  },
  "description": "a Node.JS wrapper library-port for Google Cloud Messaging for Android",
  "devDependencies": {
    "chai": "^2.2.0",
    "mocha": "^2.2.4",
    "proxyquire": "^1.4.0",
    "sinon": "^1.14.1"
  },
  "directories": {
    "test": "test"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "files": [
    "index.js",
    "lib/"
  ],
  "homepage": "https://github.com/ToothlessGear/node-gcm",
  "keywords": [
    "google",
    "cloud",
    "push",
    "notifications",
    "android",
    "c2dm",
    "gcm"
  ],
  "license": "MIT",
  "main": "index",
  "name": "node-gcm",
  "optionalDependencies": {},
  "readme": "# node-gcm\r\n[![npm](https://badge.fury.io/js/node-gcm.svg)](https://www.npmjs.com/package/node-gcm)\r\n\r\nnode-gcm is a Node.JS library for [**Google Cloud Messaging**](https://developers.google.com/cloud-messaging/).\r\n\r\n## Installation\r\n\r\n```bash\r\n$ npm install node-gcm\r\n```\r\n\r\n## Requirements\r\n\r\nThis library provides the server-side implementation of GCM.\r\nYou need to generate an API key ([Sender ID](https://developers.google.com/cloud-messaging/gcm#senderid)).\r\n\r\nGCM notifications can be sent to both [Android](https://developers.google.com/cloud-messaging/android/start) and [iOS](https://developers.google.com/cloud-messaging/ios/start).\r\nIf you are new to GCM you should probably look into the [documentation](https://developers.google.com/cloud-messaging/gcm).\r\n\r\n## Example application\r\n\r\nAccording to below **Usage** reference, we could create such application:\r\n\r\n```js\r\nvar gcm = require('node-gcm');\r\n\r\nvar message = new gcm.Message();\r\n\r\nmessage.addData('key1', 'msg1');\r\n\r\nvar regTokens = ['YOUR_REG_TOKEN_HERE'];\r\n\r\n// Set up the sender with you API key\r\nvar sender = new gcm.Sender('YOUR_API_KEY_HERE');\r\n\r\n// Now the sender can be used to send messages\r\nsender.send(message, { registrationTokens: regTokens }, function (err, response) {\r\n\tif(err) console.error(err);\r\n\telse \tconsole.log(response);\r\n});\r\n\r\n// Send to a topic, with no retry this time\r\nsender.sendNoRetry(message, { topic: '/topics/global' }, function (err, response) {\r\n\tif(err) console.error(err);\r\n\telse \tconsole.log(response);\r\n});\r\n```\r\n\r\n## Usage\r\n\r\n```js\r\nvar gcm = require('node-gcm');\r\n\r\n// Create a message\r\n// ... with default values\r\nvar message = new gcm.Message();\r\n\r\n// ... or some given values\r\nvar message = new gcm.Message({\r\n\tcollapseKey: 'demo',\r\n\tpriority: 'high',\r\n\tcontentAvailable: true,\r\n\tdelayWhileIdle: true,\r\n\ttimeToLive: 3,\r\n\trestrictedPackageName: \"somePackageName\",\r\n\tdryRun: true,\r\n\tdata: {\r\n\t\tkey1: 'message1',\r\n\t\tkey2: 'message2'\r\n\t},\r\n\tnotification: {\r\n\t\ttitle: \"Hello, World\",\r\n\t\ticon: \"ic_launcher\",\r\n\t\tbody: \"This is a notification that will be displayed ASAP.\"\r\n\t}\r\n});\r\n\r\n// Change the message data\r\n// ... as key-value\r\nmessage.addData('key1','message1');\r\nmessage.addData('key2','message2');\r\n\r\n// ... or as a data object (overwrites previous data object)\r\nmessage.addData({\r\n\tkey1: 'message1',\r\n\tkey2: 'message2'\r\n});\r\n\r\n// Set up the sender with you API key\r\nvar sender = new gcm.Sender('insert Google Server API Key here');\r\n\r\n// Add the registration tokens of the devices you want to send to\r\nvar registrationTokens = [];\r\nregistrationTokens.push('regToken1');\r\nregistrationTokens.push('regToken2');\r\n\r\n// Send the message\r\n// ... trying only once\r\nsender.sendNoRetry(message, { registrationTokens: registrationTokens }, function(err, response) {\r\n  if(err) console.error(err);\r\n  else    console.log(response);\r\n});\r\n\r\n// ... or retrying\r\nsender.send(message, { registrationTokens: registrationTokens }, function (err, response) {\r\n  if(err) console.error(err);\r\n  else    console.log(response);\r\n});\r\n\r\n// ... or retrying a specific number of times (10)\r\nsender.send(message, { registrationTokens: registrationTokens }, 10, function (err, response) {\r\n  if(err) console.error(err);\r\n  else    console.log(response);\r\n});\r\n```\r\n## Recipients\r\n\r\nYou can send push notifications to various recipient types by providing one of the following recipient keys:\r\n\r\n\r\n|Key|Type|Description|\r\n|---|---|---|\r\n|to|String|A single [registration token](https://developers.google.com/cloud-messaging/android/client#sample-register), [notification key](https://developers.google.com/cloud-messaging/notifications), or [topic](https://developers.google.com/cloud-messaging/topic-messaging).\r\n|topic|String|A single publish/subscribe topic.\r\n|notificationKey|String|Deprecated. A key that groups multiple registration tokens linked to the same user.\r\n|registrationIds|String[]|Deprecated. Use registrationTokens instead.|\r\n|registrationTokens|String[]|A list of registration tokens. Must contain at least 1 and at most 1000 registration tokens.|\r\n\r\nIf you provide an incorrect recipient key or object type, an `Error` object will be returned to your callback.\r\n\r\nNotice that [you can *at most* send notifications to 1000 registration tokens at a time](https://github.com/ToothlessGear/node-gcm/issues/42).\r\nThis is due to [a restriction](http://developer.android.com/training/cloudsync/gcm.html) on the side of the GCM API.\r\n\r\n## Notification usage\r\n\r\n```js\r\n\r\nvar message = new gcm.Message();\r\n\r\n// Add notification payload as key value\r\nmessage.addNotification('title', 'Alert!!!');\r\nmessage.addNotification('body', 'Abnormal data access');\r\nmessage.addNotification('icon', 'ic_launcher');\r\n\r\n// as object\r\nmessage.addNotification({\r\n  title: 'Alert!!!',\r\n  body: 'Abnormal data access',\r\n  icon: 'ic_launcher'\r\n});\r\n\r\n```\r\n\r\n### Notification payload option table\r\n\r\n|Parameter|Platform|Usage|Description|\r\n|---|---|---|---|\r\n|title|Android, iOS (Watch)|Required (Android), Optional (iOS), string|Indicates notification title. This field is not visible on iOS phones and tablets.|\r\n|body|Android, iOS|Optional, string|Indicates notification body text.|\r\n|icon|Android|Required, string|Indicates notification icon. On Android: sets value to myicon for drawable resource myicon.png.|\r\n|sound|Android, iOS|Optional, string|Indicates sound to be played. Supports only default currently.|\r\n|badge|iOS|Optional, string|Indicates the badge on client app home icon.|\r\n|tag|Android|Optional, string|Indicates whether each notification message results in a new entry on the notification center on Android. If not set, each request creates a new notification. If set, and a notification with the same tag is already being shown, the new notification replaces the existing one in notification center.|\r\n|color|Android|Optional, string|Indicates color of the icon, expressed in #rrggbb format|\r\n|click_action|Android, iOS|Optional, string|The action associated with a user click on the notification. On Android, if this is set, an activity with a matching intent filter is launched when user clicks the notification. For example, if one of your Activities includes the intent filter: (Appendix:1)Set click_action to OPEN_ACTIVITY_1 to open it. If set, corresponds to category in APNS payload.|\r\n|body_loc_key|iOS|Optional, string|Indicates the key to the body string for localization. On iOS, this corresponds to \"loc-key\" in APNS payload.|\r\n|body_loc_args|iOS|Optional, JSON array as string|Indicates the string value to replace format specifiers in body string for localization. On iOS, this corresponds to \"loc-args\" in APNS payload.|\r\n|title_loc_args|iOS|Optional, JSON array as string|Indicates the string value to replace format specifiers in title string for localization. On iOS, this corresponds to \"title-loc-args\" in APNS payload.|\r\n|title_loc_key|iOS|Optional, string|Indicates the key to the title string for localization. On iOS, this corresponds to \"title-loc-key\" in APNS payload.|\r\n\r\nNotice notification payload defined in [GCM Connection Server Reference](https://developers.google.com/cloud-messaging/server-ref#table1)\r\n\r\n## Custom GCM request options\r\n\r\nYou can provide custom `request` options such as `proxy` and `timeout` for the GCM request. For more information, refer to [the complete list of request options](https://github.com/request/request#requestoptions-callback). Note that the following options cannot be overriden: `method`, `uri`, `body`, as well as the following headers: `Authorization`, `Content-Type`, and `Content-Length`.\r\n\r\n```js\r\n// Set custom request options\r\nvar requestOptions = {\r\n\tproxy: 'http://127.0.0.1:8888',\r\n\ttimeout: 5000\r\n};\r\n\r\n// Set up the sender with your API key and request options\r\nvar sender = new gcm.Sender('YOUR_API_KEY_HERE', requestOptions);\r\n\r\n// Prepare a GCM message...\r\n\r\n// Send it to GCM endpoint with modified request options\r\nsender.send(message, { registrationTokens: regTokens }, function (err, response) {\r\n    if(err) console.error(err);\r\n    else     console.log(response);\r\n});\r\n```\r\n\r\n## GCM client compatibility\r\n\r\nAs of January 9th, 2016, there are a few known compatibility issues with 3rd-party GCM client libraries:\r\n\r\n### phonegap-plugin-push\r\n\r\n* [No support for subscribing to PubSub topics](https://github.com/phonegap/phonegap-plugin-push/issues/79)\r\n* [Requirement for `data` payload object when sending a `notification` object](https://github.com/phonegap/phonegap-plugin-push/issues/387)\r\n* [Requirement for all 3 `notification` fields when sending a `notification` object (title, icon, message)](https://github.com/ToothlessGear/node-gcm/issues/180)\r\n\r\nThese issues are out of this project's context and can only be fixed by the respective 3rd-party project maintainers.\r\n\r\n## Debug\r\n\r\nTo enable debug mode (print requests and responses to and from GCM),\r\nset the `DEBUG` environment flag when running your app (assuming you use `node app.js` to run your app):\r\n\r\n```bash\r\nDEBUG=node-gcm node app.js\r\n```\r\n\r\n## Donate\r\n\r\n Bitcoin: [13iTQf7tDhrKgibw2Y3U5SyPJa7R8sQmHQ](https://blockchain.info/address/13iTQf7tDhrKgibw2Y3U5SyPJa7R8sQmHQ)\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/ToothlessGear/node-gcm.git",
    "web": "http://github.com/ToothlessGear/node-gcm"
  },
  "scripts": {
    "test": "mocha test/**/*Spec.js"
  },
  "version": "0.14.0"
}

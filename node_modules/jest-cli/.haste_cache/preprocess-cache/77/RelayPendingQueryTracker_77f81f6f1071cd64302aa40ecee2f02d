'use strict';










var RelayPendingQueryTracker=
jest.genMockFromModule('RelayPendingQueryTracker');var 

MockPendingFetch=function(){
function MockPendingFetch(query){var _this=this;babelHelpers.classCallCheck(this,MockPendingFetch);
this.$MockPendingFetch_query=query;
this.$MockPendingFetch_resolvable=false;
this.$MockPendingFetch_promise=new Promise(function(resolve,reject){
_this.resolve=function(){for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}
_this.$MockPendingFetch_resolvable=true;
return resolve.apply(_this,args);};

_this.reject=reject;});}babelHelpers.createClass(MockPendingFetch,[{key:'getID',value:function getID()


{
return this.$MockPendingFetch_query.getQuery().getID();}},{key:'getQuery',value:function getQuery()

{
return this.$MockPendingFetch_query;}},{key:'getResolvedPromise',value:function getResolvedPromise()

{
return this.$MockPendingFetch_promise;}},{key:'isResolvable',value:function isResolvable()

{
return this.$MockPendingFetch_resolvable;}}]);return MockPendingFetch;}();



RelayPendingQueryTracker.mockImplementation(function(){var _this2=this;
this.add.mock.fetches=[];
this.add.mockImplementation(function(params){
var mockFetch=new MockPendingFetch(params.query);
_this2.add.mock.fetches.push(mockFetch);
return mockFetch;});


return this;});


module.exports=RelayPendingQueryTracker;
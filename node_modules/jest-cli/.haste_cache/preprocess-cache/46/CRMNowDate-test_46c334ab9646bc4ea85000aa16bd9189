'use strict';






jest.autoMockOff();



jest.mock('NativeModules');

var MIDNIGHT_FORMAT_TIME='12:00am';
var MS_IN_HOUR=3600*1000;

var CRMTimezoneInfo={
'America/Los_Angeles':{
timezone:'America/Los_Angeles',
transitions:[
{
time:1414918800,
offset:-480},

{
time:1425808800,
offset:-420},

{
time:1446368400,
offset:-480},

{
time:1457863200,
offset:-420}]},



'Pacific/Honolulu':{
timezone:'Pacific/Honolulu',
transitions:[
{
time:1136109600,
offset:-600}]},



'Pacific/Auckland':{
timezone:'Pacific/Auckland',
transitions:[
{
time:1411826400,
offset:780},

{
time:1428156000,
offset:720},

{
time:1443276000,
offset:780},

{
time:1459605600,
offset:720}]}};






var HON_TIMEZONE='Pacific/Honolulu';
var HON={
TIMEZONE:HON_TIMEZONE,
TIMEZONE_INFO:CRMTimezoneInfo[HON_TIMEZONE],
STANDARD:{
DATE:new Date("March 1, 2015 6:00:00 PM -1000"),
OFFSET:-10*60},

MIDNIGHT:new Date("March 8, 2015 0:00:00 AM -1000"),
MIDNIGHT_TOMORROW:new Date("March 9, 2015 0:00:00 AM -1000"),
MIDNIGHT_FORMAT_DATE:'3/8/15',
MIDNIGHT_TOMORROW_FORMAT_DATE:'3/9/15',
SANITIZING:[
{
MAPPING:'UNIQUE',
DATE:new Date("March 8, 2015 3:00:00 AM -1000"),
OFFSET:-10*60,
VALID:{
DATE:new Date("March 8, 2015 3:00:00 AM -1000"),
OFFSET:-10*60}}]};





var LAX_TIMEZONE='America/Los_Angeles';
var LAX_START_TIMES=CRMTimezoneInfo[LAX_TIMEZONE].transitions.map(
function(transition){return transition.time;});

var LAX_OFFSETS=CRMTimezoneInfo[LAX_TIMEZONE].transitions.map(
function(transition){return transition.offset;});

var LAX={
TIMEZONE:LAX_TIMEZONE,
TIMEZONE_INFO:CRMTimezoneInfo[LAX_TIMEZONE],
STANDARD:{
DATE:new Date("March 1, 2015 6:00:00 PM -0800"),
OFFSET:-8*60},

DST:{
DATE:new Date("September 1, 2015 6:00:00 PM -0700"),
OFFSET:-7*60},

MIDNIGHT:new Date("March 8, 2015 0:00:00 AM -0800"),
MIDNIGHT_TOMORROW:new Date("March 9, 2015 0:00:00 AM -0700"),
MIDNIGHT_FORMAT_DATE:'3/8/15',
MIDNIGHT_TOMORROW_FORMAT_DATE:'3/9/15',
SANITIZING:[
{
MAPPING:'UNIQUE',
DATE:new Date((LAX_START_TIMES[0]+86400)*1000),
OFFSET:LAX_OFFSETS[0],
VALID:{
DATE:new Date((LAX_START_TIMES[0]+86400)*1000),
OFFSET:LAX_OFFSETS[0]}},


{
MAPPING:'UNIQUE',
DATE:new Date(
(LAX_START_TIMES[LAX_START_TIMES.length-1]+86400)*1000),

OFFSET:LAX_OFFSETS[LAX_START_TIMES.length-1],
VALID:{
DATE:new Date(
(LAX_START_TIMES[LAX_START_TIMES.length-1]+86400)*1000),

OFFSET:LAX_OFFSETS[LAX_START_TIMES.length-1]}},


{
MAPPING:'UNIQUE',
DATE:new Date("March 8, 2015 1:30:00 AM -0800"),
OFFSET:-8*60,
VALID:{
DATE:new Date("March 8, 2015 1:30:00 AM -0800"),
OFFSET:-8*60}},


{
MAPPING:'NONEXISTENT',
DATE:new Date("March 8, 2015 2:00:00 AM -0800"),
OFFSET:-8*60,
VALID:{
DATE:new Date("March 8, 2015 3:00:00 AM -0700"),
OFFSET:-7*60}},


{
MAPPING:'UNIQUE',
DATE:new Date("March 8, 2015 3:00:00 AM -0700"),
OFFSET:-7*60,
VALID:{
DATE:new Date("March 8, 2015 3:00:00 AM -0700"),
OFFSET:-7*60}},


{
MAPPING:'UNIQUE',
DATE:new Date("November 1, 2015 0:30:00 AM -0700"),
OFFSET:-7*60,
VALID:{
DATE:new Date("November 1, 2015 0:30:00 AM -0700"),
OFFSET:-7*60}},


{
MAPPING:'AMBIGUOUS',
DATE:new Date("November 1, 2015 1:00:00 AM -0700"),
OFFSET:-7*60,
VALID:{
DATE:new Date("November 1, 2015 2:00:00 AM -0800"),
OFFSET:-8*60}},


{
MAPPING:'UNIQUE',
DATE:new Date("November 1, 2015 2:00:00 AM -0800"),
OFFSET:-8*60,
VALID:{
DATE:new Date("November 1, 2015 2:00:00 AM -0800"),
OFFSET:-8*60}}]};





var AKL_TIMEZONE='Pacific/Auckland';
var AKL_START_TIMES=CRMTimezoneInfo[AKL_TIMEZONE].transitions.map(
function(transition){return transition.time;});

var AKL_OFFSETS=CRMTimezoneInfo[AKL_TIMEZONE].transitions.map(
function(transition){return transition.offset;});

var AKL={
TIMEZONE:AKL_TIMEZONE,
TIMEZONE_INFO:CRMTimezoneInfo[AKL_TIMEZONE],
STANDARD:{
DATE:new Date("March 1, 2015 6:00:00 PM +1300"),
OFFSET:13*60},

DST:{
DATE:new Date("September 1, 2015 6:00:00 PM +1200"),
OFFSET:12*60},

MIDNIGHT:new Date("April 5, 2015 0:00:00 AM +1300"),
MIDNIGHT_TOMORROW:new Date("April 6, 2015 0:00:00 AM +1200"),
MIDNIGHT_FORMAT_DATE:'4/5/15',
MIDNIGHT_TOMORROW_FORMAT_DATE:'4/6/15',
SANITIZING:[
{
MAPPING:'UNIQUE',
DATE:new Date((AKL_START_TIMES[0]+86400)*1000),
OFFSET:AKL_OFFSETS[0],
VALID:{
DATE:new Date((AKL_START_TIMES[0]+86400)*1000),
OFFSET:AKL_OFFSETS[0]}},


{
MAPPING:'UNIQUE',
DATE:new Date(
(AKL_START_TIMES[AKL_START_TIMES.length-1]+86400)*1000),

OFFSET:AKL_OFFSETS[AKL_START_TIMES.length-1],
VALID:{
DATE:new Date(
(AKL_START_TIMES[AKL_START_TIMES.length-1]+86400)*1000),

OFFSET:AKL_OFFSETS[AKL_START_TIMES.length-1]}},


{
MAPPING:'UNIQUE',
DATE:new Date("September 27, 2015 1:30:00 AM +1200"),
OFFSET:12*60,
VALID:{
DATE:new Date("September 27, 2015 1:30:00 AM +1200"),
OFFSET:12*60}},


{
MAPPING:'NONEXISTENT',
DATE:new Date("September 27, 2015 2:00:00 AM +1200"),
OFFSET:12*60,
VALID:{
DATE:new Date("September 27, 2015 3:00:00 AM +1300"),
OFFSET:13*60}},


{
MAPPING:'UNIQUE',
DATE:new Date("September 27, 2015 3:00:00 AM +1300"),
OFFSET:13*60,
VALID:{
DATE:new Date("September 27, 2015 3:00:00 AM +1300"),
OFFSET:13*60}},


{
MAPPING:'UNIQUE',
DATE:new Date("April 5, 2015 1:30:00 AM +1300"),
OFFSET:13*60,
VALID:{
DATE:new Date("April 5, 2015 1:30:00 AM +1300"),
OFFSET:13*60}},


{
MAPPING:'AMBIGUOUS',
DATE:new Date("April 5, 2015 2:00:00 AM +1300"),
OFFSET:13*60,
VALID:{
DATE:new Date("April 5, 2015 3:00:00 AM +1200"),
OFFSET:12*60}},


{
MAPPING:'UNIQUE',
DATE:new Date("April 5, 2015 3:00:00 AM +1200"),
OFFSET:12*60,
VALID:{
DATE:new Date("April 5, 2015 3:00:00 AM +1200"),
OFFSET:12*60}}]};





function testOffsetMinutes(tzData){
var u=require('CRMNowDate');

expect(u.getTimezoneOffsetMinutes(tzData.STANDARD.DATE,tzData.TIMEZONE_INFO)).
toBe(tzData.STANDARD.OFFSET);

if(tzData.DST){
expect(u.getTimezoneOffsetMinutes(tzData.DST.DATE,tzData.TIMEZONE_INFO)).
toBe(tzData.DST.OFFSET);}}



function testMidnight(tzData){
var u=require('CRMNowDate');

expect(u.isMidnight(tzData.MIDNIGHT,tzData.TIMEZONE_INFO)).toBe(true);
expect(
u.isMidnight(new Date(tzData.MIDNIGHT.getTime()+1),tzData.TIMEZONE_INFO)).
toBe(false);}


function testSameDay(tzData){
var u=require('CRMNowDate');

expect(u.toSameTimeTomorrow(tzData.MIDNIGHT,tzData.TIMEZONE_INFO).getTime()).
toBe(tzData.MIDNIGHT_TOMORROW.getTime());
expect(
u.toSameTimeYesterday(tzData.MIDNIGHT_TOMORROW,tzData.TIMEZONE_INFO).getTime()).
toBe(tzData.MIDNIGHT.getTime());}


function testSanitizing(tz,data){
var u=require('CRMNowDate');

var dateInfo=u.sanitizeDate(
data.DATE,
data.OFFSET,
CRMTimezoneInfo[tz]);

expect(dateInfo.mapping).toBe(data.MAPPING);
expect(dateInfo.validDate.getTime()).toBe(data.VALID.DATE.getTime());
expect(dateInfo.offset).toBe(data.VALID.OFFSET);}


function testTwoDatesAreSameDay(){
var u=require('CRMNowDate');

expect(u.isSameDay(
new Date('May 4, 2015 10:00:00 AM -0700'),
new Date('May 4, 2015 01:00:00 PM -0700'),
LAX.TIMEZONE_INFO)).
toBe(true);

expect(u.isSameDay(
new Date('May 4, 2015 11:59:59 PM -1000'),
new Date('May 4, 2015 12:00:00 AM -1000'),
HON.TIMEZONE_INFO)).
toBe(true);}


function testTwoDatesAreNotSameDay(){
var u=require('CRMNowDate');

expect(u.isSameDay(
new Date('March 1, 2015 11:59:59 PM -0800'),
new Date('March 2, 2015 12:00:01 AM -0800'),
LAX.TIMEZONE_INFO)).
toBe(false);

expect(u.isSameDay(
new Date('March 1, 2015 01:00:00 AM +1300'),
new Date('May 1, 2015 01:00:00 AM +1200'),
AKL.TIMEZONE_INFO)).
toBe(false);}


function testTwoDatesAroundTimezoneTransition(){
var u=require('CRMNowDate');


expect(u.isSameDay(
new Date('March 8, 2015 12:05:00 AM -0800'),
new Date('March 9, 2015 12:05:00 AM -0700'),
LAX.TIMEZONE_INFO)).
toBe(false);
expect(u.isSameDay(
new Date('March 8, 2015 12:05:00 AM -0800'),
new Date('March 8, 2015 11:55:00 PM -0700'),
LAX.TIMEZONE_INFO)).
toBe(true);
expect(u.isSameDay(
new Date('November 1, 2015 12:05:00 AM -0700'),
new Date('November 1, 2015 11:55:00 PM -0800'),
LAX.TIMEZONE_INFO)).
toBe(true);
expect(u.isSameDay(
new Date('November 1, 2015 12:05:00 AM -0700'),
new Date('November 2, 2015 12:05:00 AM -0800'),
LAX.TIMEZONE_INFO)).
toBe(false);


expect(u.isSameDay(
new Date('March 8, 2015 12:05:00 AM -1000'),
new Date('March 8, 2015 11:55:00 PM -1000'),
HON.TIMEZONE_INFO)).
toBe(true);
expect(u.isSameDay(
new Date('November 1, 2015 12:05:00 AM -1000'),
new Date('November 2, 2015 12:05:00 AM -1000'),
HON.TIMEZONE_INFO)).
toBe(false);


expect(u.isSameDay(
new Date('April 5, 2015 12:05:00 AM +1300'),
new Date('April 5, 2015 11:55:00 PM +1200'),
AKL.TIMEZONE_INFO)).
toBe(true);
expect(u.isSameDay(
new Date('April 5, 2015 12:05:00 AM +1300'),
new Date('April 6, 2015 12:05:00 AM +1200'),
AKL.TIMEZONE_INFO)).
toBe(false);
expect(u.isSameDay(
new Date('September 27, 2015 12:05:00 AM +1200'),
new Date('September 28, 2015 12:05:00 AM +1300'),
AKL.TIMEZONE_INFO)).
toBe(false);
expect(u.isSameDay(
new Date('September 27, 2015 12:05:00 AM +1200'),
new Date('September 27, 2015 11:55:00 PM +1300'),
AKL.TIMEZONE_INFO)).
toBe(true);}


function testTimezone(tzData){
it('looks up the correct offsets',function(){return testOffsetMinutes(tzData);});

it('knows what midnight looks like',function(){return testMidnight(tzData);});

it('knows what tomorrow and yesterday are',function(){return testSameDay(tzData);});

tzData.SANITIZING.forEach(function(data){
it(
'sanitizes valid and invalid dates correctly',
function(){return testSanitizing(tzData.TIMEZONE,data);});});



it('knows how to format dates',function(){return testFormatDate(tzData);});}


function testIsSameDay(){
it('knows when two dates are on same day',function(){return testTwoDatesAreSameDay();});
it('knows when two dates are not the same day',function(){return testTwoDatesAreNotSameDay();});
it('handles dates around a timezone transition correctly',testTwoDatesAroundTimezoneTransition());}


function testFormatDate(tzData){
var u=require('CRMNowDate');

expect(u.formatDate(
tzData.MIDNIGHT,
tzData.TIMEZONE_INFO,
u.DateFormat.SHORTHAND)).
toBe(tzData.MIDNIGHT_FORMAT_DATE);

expect(u.formatTime(
tzData.MIDNIGHT,
tzData.TIMEZONE_INFO)).
toBe(MIDNIGHT_FORMAT_TIME);

expect(u.formatDate(
tzData.MIDNIGHT_TOMORROW,
tzData.TIMEZONE_INFO,
u.DateFormat.SHORTHAND)).
toBe(tzData.MIDNIGHT_TOMORROW_FORMAT_DATE);

expect(u.formatTime(
tzData.MIDNIGHT_TOMORROW,
tzData.TIMEZONE_INFO)).
toBe(MIDNIGHT_FORMAT_TIME);

expect(u.formatTime(
tzData.MIDNIGHT,
tzData.TIMEZONE_INFO)).
toBe(MIDNIGHT_FORMAT_TIME);

expect(u.formatDateRoundedToNearestDay(
new Date(tzData.MIDNIGHT.getTime()-3*MS_IN_HOUR),
tzData.TIMEZONE_INFO,
u.DateFormat.SHORTHAND)).
toBe(tzData.MIDNIGHT_FORMAT_DATE);

expect(u.formatDateRoundedToNearestDay(
new Date(tzData.MIDNIGHT.getTime()+3*MS_IN_HOUR),
tzData.TIMEZONE_INFO,
u.DateFormat.SHORTHAND)).
toBe(tzData.MIDNIGHT_FORMAT_DATE);

expect(function(){return u.formatDateRoundedToNearestDay(
new Date(tzData.MIDNIGHT.getTime()-9*MS_IN_HOUR),
tzData.TIMEZONE_INFO,
u.DateFormat.SHORTHAND);}).
toThrow();

expect(function(){return u.formatDateRoundedToNearestDay(
new Date(tzData.MIDNIGHT.getTime()+9*MS_IN_HOUR),
tzData.TIMEZONE_INFO,
u.DateFormat.SHORTHAND);}).
toThrow();}


describe('CRMNowDate',function(){
jest.setMock('DateFormatConfig',require('DateFormatConfigDefault'));
it('works',function(){
testTimezone(HON);
testTimezone(LAX);
testTimezone(AKL);
testIsSameDay();});});
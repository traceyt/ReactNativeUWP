'use strict';












require('configureForRelayOSS');

jest.
dontMock('GraphQLRange').
dontMock('GraphQLSegment').
dontMock('GraphQLStoreQueryResolver');









describe('GraphQLStoreQueryResolver',function(){
var changeEmitter=undefined;
var storeData=undefined;

var dataID=undefined;
var mockCallback=undefined;
var mockQueryFragment=undefined;
var mockPluralQueryFragment=undefined;var _RelayTestUtils=require('RelayTestUtils');var 

getNode=_RelayTestUtils.getNode;

function mockReader(mockResult){
require('readRelayQueryData').mockImplementation(function(_,__,dataIDArg){
return {
dataIDs:babelHelpers.defineProperty({},dataIDArg,true),
data:mockResult[dataIDArg]};});}




beforeEach(function(){
jest.resetModuleRegistry();

storeData=new (require('RelayStoreData'))();
changeEmitter=storeData.getChangeEmitter();

dataID='1038750002';
mockCallback=jest.genMockFunction();
mockQueryFragment=getNode(function(){return {children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{isAbstract:true},name:'GraphQLStoreQueryResolverRelayQL',type:'Node'};}());
mockPluralQueryFragment=getNode(function(){return {children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'name',kind:'Field',metadata:{},type:'String'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{plural:true,isAbstract:true},name:'GraphQLStoreQueryResolverRelayQL',type:'Node'};}());






jasmine.addMatchers(require('RelayTestUtils').matchers);});


it('should resolve a pointer',function(){
var mockResult={__dataID__:'1038750002',id:'1038750002',name:'Tim'};
require('readRelayQueryData').mockReturnValue({data:mockResult});

var resolver=new (require('GraphQLStoreQueryResolver'))(
storeData,
mockQueryFragment,
mockCallback);

var resolved=resolver.resolve(mockQueryFragment,dataID);

expect(resolved).toBe(mockResult);

expect(require('readRelayQueryData')).toBeCalled();
expect(require('readRelayQueryData').mock.calls[0][1]).toBe(mockQueryFragment);
expect(require('readRelayQueryData').mock.calls[0][2]).toEqual(dataID);});


it('should subscribe to IDs in resolved pointer',function(){
var mockResult={
'1038750002':{__dataID__:'1038750002',id:'1038750002',name:'Tim'}};

mockReader(mockResult);

var resolver=new (require('GraphQLStoreQueryResolver'))(
storeData,
mockQueryFragment,
mockCallback);

resolver.resolve(mockQueryFragment,dataID);

var addListenersForIDs=changeEmitter.addListenerForIDs;
expect(addListenersForIDs).toBeCalled();
expect(addListenersForIDs.mock.calls[0][0]).toEqual(['1038750002']);});


it('should not re-resolve pointers without change events',function(){
var mockResultA={__dataID__:'1038750002',id:'1038750002',name:'Tim'};
var mockResultB={__dataID__:'1038750002',id:'1038750002',name:'Tim'};

var resolver=new (require('GraphQLStoreQueryResolver'))(
storeData,
mockQueryFragment,
mockCallback);


require('readRelayQueryData').mockReturnValue({data:mockResultA});
var resolvedA=resolver.resolve(mockQueryFragment,dataID);

require('readRelayQueryData').mockReturnValue({data:mockResultB});
var resolvedB=resolver.resolve(mockQueryFragment,dataID);

expect(require('readRelayQueryData').mock.calls.length).toBe(1);
expect(resolvedA).toBe(resolvedB);});


it('should re-resolve pointers with change events',function(){
var mockResultA={__dataID__:'1038750002',id:'1038750002',name:'Tim'};
var mockResultB={__dataID__:'1038750002',id:'1038750002',name:'Tee'};

var resolver=new (require('GraphQLStoreQueryResolver'))(
storeData,
mockQueryFragment,
mockCallback);


mockReader(babelHelpers.defineProperty({},
mockResultA.id,mockResultA));

var resolvedA=resolver.resolve(mockQueryFragment,dataID);

var callback=changeEmitter.addListenerForIDs.mock.calls[0][1];
callback(['1038750002']);

mockReader(babelHelpers.defineProperty({},
mockResultB.id,mockResultB));

var resolvedB=resolver.resolve(mockQueryFragment,dataID);

expect(require('readRelayQueryData').mock.calls.length).toBe(2);
expect(resolvedA).toBe(mockResultA);
expect(resolvedB).toBe(mockResultB);});


it('should re-resolve pointers whose calls differ',function(){
var dataIDA='client:123_first(10)';
var dataIDB='client:123_first(20)';

var resolver=new (require('GraphQLStoreQueryResolver'))(
storeData,
mockQueryFragment,
mockCallback);


require('GraphQLStoreRangeUtils').getCanonicalClientID=

jest.genMockFunction().mockReturnValue('client:123');

resolver.resolve(mockQueryFragment,dataIDA);
resolver.resolve(mockQueryFragment,dataIDB);

expect(require('readRelayQueryData').mock.calls.length).toBe(2);});


it('should invoke the callback when change events fire',function(){
var mockResult={
'1038750002':{__dataID__:'1038750002',id:'1038750002',name:'Tim'}};


var resolver=new (require('GraphQLStoreQueryResolver'))(
storeData,
mockQueryFragment,
mockCallback);


mockReader(mockResult);
resolver.resolve(mockQueryFragment,dataID);

var callback=changeEmitter.addListenerForIDs.mock.calls[0][1];
callback(['1038750002']);

expect(mockCallback).toBeCalled();});


it('should resolve an array of pointers',function(){
var mockResults={
'1':{__dataID__:'1',name:'One'},
'2':{__dataID__:'2',name:'Two'}};

mockReader(mockResults);

var resolver=new (require('GraphQLStoreQueryResolver'))(
storeData,
mockPluralQueryFragment,
mockCallback);


var resolved=resolver.resolve(mockPluralQueryFragment,['1','2']);
expect(resolved.length).toBe(2);
expect(resolved[0]).toBe(mockResults['1']);
expect(resolved[1]).toBe(mockResults['2']);

expect(require('readRelayQueryData').mock.calls[0][2]).toEqual('1');
expect(require('readRelayQueryData').mock.calls[1][2]).toEqual('2');});


it('should not re-resolve if the pointer array has no changes',function(){
var mockResults={
'1':{__dataID__:'1',name:'One'},
'2':{__dataID__:'2',name:'Two'}};

mockReader(mockResults);

var resolver=new (require('GraphQLStoreQueryResolver'))(
storeData,
mockPluralQueryFragment,
mockCallback);


var resolvedA=resolver.resolve(mockPluralQueryFragment,['1','2']);
var resolvedB=resolver.resolve(mockPluralQueryFragment,['1','2']);

expect(resolvedA).toBe(resolvedB);});


it('should only re-resolve pointers with changes in an array',function(){
var mockResults={
'1':{__dataID__:'1',name:'One'},
'2':{__dataID__:'2',name:'Two'}};

mockReader(mockResults);

var resolver=new (require('GraphQLStoreQueryResolver'))(
storeData,
mockPluralQueryFragment,
mockCallback);


var resolvedA=resolver.resolve(mockPluralQueryFragment,['1','2']);

mockResults['1']={__dataID__:'1',name:'Won'};
var callback=changeEmitter.addListenerForIDs.mock.calls[0][1];
callback(['1']);

var resolvedB=resolver.resolve(mockPluralQueryFragment,['1','2']);

expect(resolvedA).not.toBe(resolvedB);

expect(resolvedB.length).toBe(2);
expect(resolvedB[0]).toBe(mockResults['1']);
expect(resolvedB[1]).toBe(mockResults['2']);

expect(require('readRelayQueryData').mock.calls.length).toBe(3);
expect(require('readRelayQueryData').mock.calls[2][2]).toEqual('1');});


it('should create a new array if the pointer array shortens',function(){
var mockResults={
'1':{__dataID__:'1',name:'One'},
'2':{__dataID__:'2',name:'Two'}};

mockReader(mockResults);

var resolver=new (require('GraphQLStoreQueryResolver'))(
storeData,
mockPluralQueryFragment,
mockCallback);


var resolvedA=resolver.resolve(mockPluralQueryFragment,['1','2']);
var resolvedB=resolver.resolve(mockPluralQueryFragment,['1']);

expect(resolvedA).not.toBe(resolvedB);

expect(resolvedA.length).toBe(2);
expect(resolvedB.length).toBe(1);});


describe('garbage collection',function(){
var fragment=undefined;

beforeEach(function(){
storeData.initializeGarbageCollector(function(run){
while(run()){}});

var containerFragment=require('RelayTestUtils').createContainerFragment(function(){return {children:[{children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'node',kind:'Field',metadata:{canHaveSubselections:true,isAbstract:true,isRequisite:true},type:'FeedUnit'},{fieldName:'cursor',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'edges',kind:'Field',metadata:{canHaveSubselections:true,isPlural:true},type:'NewsFeedEdge'},{children:[{fieldName:'hasNextPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'},{fieldName:'hasPreviousPage',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'Boolean'}],fieldName:'pageInfo',kind:'Field',metadata:{canHaveSubselections:true,isGenerated:true,isRequisite:true},type:'PageInfo'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'GraphQLStoreQueryResolverRelayQL',type:'NewsFeedConnection'};}());








var concreteFragment=function(RQL_0){return {children:[{children:[{fieldName:'id',kind:'Field',metadata:{isRequisite:true},type:'ID'},{fieldName:'__typename',kind:'Field',metadata:{isGenerated:true,isRequisite:true},type:'String'}],fieldName:'actor',kind:'Field',metadata:{canHaveSubselections:true,inferredRootCallName:'node',inferredPrimaryKey:'id',isAbstract:true},type:'Actor'},{calls:[{kind:'Call',metadata:{},name:'first',value:{kind:'CallValue',callValue:'1'}}],children:[].concat.apply([],[require('Relay').QL.__frag(RQL_0)]),fieldName:'newsFeed',kind:'Field',metadata:{canHaveSubselections:true,isConnection:true,isFindable:true},type:'NewsFeedConnection'}],id:require('Relay').QL.__id(),kind:'Fragment',metadata:{},name:'GraphQLStoreQueryResolverRelayQL',type:'Viewer'};}(





containerFragment);



var query=getNode(function(RQL_0){return {children:[].concat.apply([],[require('Relay').QL.__frag(RQL_0)]),fieldName:'viewer',kind:'Query',metadata:{},name:'GraphQLStoreQueryResolver',type:'Viewer'};}(


concreteFragment));



var payload={
viewer:{
actor:{
__typename:'User',
id:'123'},

newsFeed:{
edges:[
{
node:{
__typename:'Story',
id:'456'}}]}}};






storeData.handleQueryPayload(
query,
require('transformRelayQueryPayload')(query,payload),
1);

dataID='client:1';
fragment=getNode(concreteFragment);});


it('increments references to read data',function(){
var queryResolver=new (require('GraphQLStoreQueryResolver'))(
storeData,
fragment,
jest.genMockFunction());


queryResolver.resolve(fragment,dataID);

storeData.getGarbageCollector().collect();
jest.runAllTimers();

expect(Object.keys(storeData.getNodeData())).toEqual([
'123',
'client:1',
'client:2']);});



it('decrements references to previously read fields',function(){
var queryResolver=new (require('GraphQLStoreQueryResolver'))(
storeData,
fragment,
jest.genMockFunction());


queryResolver.resolve(fragment,dataID);
var callback=
storeData.getChangeEmitter().addListenerForIDs.mock.calls[0][1];


storeData.getRecordWriter().putField('client:1','actor',null);
storeData.getRecordWriter().putField('client:1','newsFeed',null);
callback(['client:1']);


queryResolver.resolve(fragment,dataID);


storeData.getGarbageCollector().collect();
jest.runAllTimers();

expect(Object.keys(storeData.getNodeData())).toEqual([


'client:1']);});



it('decrements references when disposed',function(){
var queryResolver=new (require('GraphQLStoreQueryResolver'))(
storeData,
fragment,
jest.genMockFunction());


queryResolver.resolve(fragment,dataID);

queryResolver.dispose();


storeData.getGarbageCollector().collect();
jest.runAllTimers();

expect(storeData.getNodeData()).toEqual({});});});});
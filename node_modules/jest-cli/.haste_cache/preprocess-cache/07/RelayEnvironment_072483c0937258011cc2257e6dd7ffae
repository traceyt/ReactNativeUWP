'use strict';var 






















































































RelayEnvironment=function(){


function RelayEnvironment(){babelHelpers.classCallCheck(this,RelayEnvironment);
this.$RelayEnvironment_storeData=new (require('RelayStoreData'))();
this.$RelayEnvironment_storeData.getChangeEmitter().injectBatchingStrategy(require('relayUnstableBatchedUpdates'));}babelHelpers.createClass(RelayEnvironment,[{key:'getStoreData',value:function getStoreData()







{
return this.$RelayEnvironment_storeData;}},{key:'injectNetworkLayer',value:function injectNetworkLayer(


networkLayer){
this.$RelayEnvironment_storeData.getNetworkLayer().injectNetworkLayer(networkLayer);}},{key:'injectTaskScheduler',value:function injectTaskScheduler(


scheduler){
this.$RelayEnvironment_storeData.injectTaskScheduler(scheduler);}},{key:'primeCache',value:function primeCache(







querySet,
callback)
{
return this.$RelayEnvironment_storeData.getQueryRunner().run(querySet,callback);}},{key:'forceFetch',value:function forceFetch(







querySet,
callback)
{
return this.$RelayEnvironment_storeData.getQueryRunner().forceFetch(querySet,callback);}},{key:'read',value:function read(






node,
dataID,
options)
{
return require('readRelayQueryData')(this.$RelayEnvironment_storeData,node,dataID,options).data;}},{key:'readAll',value:function readAll(






node,
dataIDs,
options)
{var _this=this;
return dataIDs.map(
function(dataID){return require('readRelayQueryData')(_this.$RelayEnvironment_storeData,node,dataID,options).data;});}},{key:'readQuery',value:function readQuery(









root,
options)
{var _this2=this;
var queuedStore=this.$RelayEnvironment_storeData.getQueuedStore();
var storageKey=root.getStorageKey();
var results=[];
require('forEachRootCallArg')(root,function(_ref){var identifyingArgKey=_ref.identifyingArgKey;
var data=undefined;
var dataID=queuedStore.getDataID(storageKey,identifyingArgKey);
if(dataID!=null){
data=_this2.read(root,dataID,options);}

results.push(data);});

return results;}},{key:'observe',value:function observe(







fragment,
dataID)
{
return new (require('RelayQueryResultObservable'))(this.$RelayEnvironment_storeData,fragment,dataID);}},{key:'getFragmentResolver',value:function getFragmentResolver(










fragment,
onNext)
{
return new (require('GraphQLStoreQueryResolver'))(
this.$RelayEnvironment_storeData,
fragment,
onNext);}},{key:'applyUpdate',value:function applyUpdate(








mutation,
callbacks)
{
mutation.bindContext(this);
return this.$RelayEnvironment_storeData.getMutationQueue().createTransaction(
mutation,
callbacks);}},{key:'commitUpdate',value:function commitUpdate(








mutation,
callbacks)
{
var transaction=this.applyUpdate(mutation,callbacks);
transaction.commit();
return transaction;}},{key:'update',value:function update(








mutation,
callbacks)
{
require('warning')(
false,
'`Relay.Store.update` is deprecated. Please use'+
' `Relay.Store.commitUpdate` or `Relay.Store.applyUpdate` instead.');

this.commitUpdate(mutation,callbacks);}}]);return RelayEnvironment;}();



module.exports=RelayEnvironment;
'use strict';

























jest.
dontMock('EmitterSubscription').
dontMock('EventSubscription').
dontMock('EventEmitter').
dontMock('EventSubscriptionVendor').
dontMock('NavigationEvent').
dontMock('NavigationEventEmitter');



describe('NavigationEventEmitter',function(){
it('emits event',function(){
var context={};
var emitter=new (require('NavigationEventEmitter'))(context);
var logs=[];

emitter.addListener('ping',function(event){var 
type=event.type;var data=event.data;var target=event.target;var defaultPrevented=event.defaultPrevented;

logs.push({
data:data,
defaultPrevented:defaultPrevented,
target:target,
type:type});});




emitter.emit('ping','hello');

expect(logs.length).toBe(1);
expect(logs[0].target).toBe(context);
expect(logs[0].type).toBe('ping');
expect(logs[0].data).toBe('hello');
expect(logs[0].defaultPrevented).toBe(false);});


it('does not emit event that has no listeners',function(){
var context={};
var emitter=new (require('NavigationEventEmitter'))(context);
var pinged=false;

emitter.addListener('ping',function(){
pinged=true;});


emitter.emit('yo','bo');
expect(pinged).toBe(false);});


it('puts nested emit call in a queue',function(){
var context={};
var emitter=new (require('NavigationEventEmitter'))(context);
var logs=[];

emitter.addListener('one',function(){
logs.push(1);
emitter.emit('two');
logs.push(2);});


emitter.addListener('two',function(){
logs.push(3);
emitter.emit('three');
logs.push(4);});


emitter.addListener('three',function(){
logs.push(5);});


emitter.emit('one');

expect(logs).toEqual([1,2,3,4,5]);});


it('puts nested emit call in a queue should be in sequence order',function(){
var context={};
var emitter=new (require('NavigationEventEmitter'))(context);
var logs=[];

emitter.addListener('one',function(){
logs.push(1);
emitter.emit('two');
emitter.emit('three');
logs.push(2);});


emitter.addListener('two',function(){
logs.push(3);
logs.push(4);});


emitter.addListener('three',function(){
logs.push(5);});


emitter.emit('one');

expect(logs).toEqual([1,2,3,4,5]);});


it('calls callback after emitting',function(){
var context={};
var emitter=new (require('NavigationEventEmitter'))(context);
var logs=[];

emitter.addListener('ping',function(event){var 
type=event.type;var data=event.data;var target=event.target;var defaultPrevented=event.defaultPrevented;
logs.push({
data:data,
defaultPrevented:defaultPrevented,
target:target,
type:type});

event.preventDefault();});


emitter.emit('ping','hello',function(event){var 
type=event.type;var data=event.data;var target=event.target;var defaultPrevented=event.defaultPrevented;
logs.push({
data:data,
defaultPrevented:defaultPrevented,
target:target,
type:type});});



expect(logs.length).toBe(2);
expect(logs[1].target).toBe(context);
expect(logs[1].type).toBe('ping');
expect(logs[1].data).toBe('hello');
expect(logs[1].defaultPrevented).toBe(true);});


it('calls callback after emitting the current event and before '+
'emitting the next event',function(){
var context={};
var emitter=new (require('NavigationEventEmitter'))(context);
var logs=[];

emitter.addListener('ping',function(event){
logs.push('ping');
emitter.emit('pong');});


emitter.addListener('pong',function(event){
logs.push('pong');});


emitter.emit('ping',null,function(){
logs.push('did-ping');});


expect(logs).toEqual([
'ping',
'did-ping',
'pong']);});});